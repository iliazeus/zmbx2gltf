"use strict";var Zmbx2Gltf=(()=>{var rd=Object.create;var Nn=Object.defineProperty;var nd=Object.getOwnPropertyDescriptor;var id=Object.getOwnPropertyNames;var ad=Object.getPrototypeOf,od=Object.prototype.hasOwnProperty;var Vr=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var W=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),sd=(e,t)=>{for(var r in t)Nn(e,r,{get:t[r],enumerable:!0})},Zo=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of id(t))!od.call(e,i)&&i!==r&&Nn(e,i,{get:()=>t[i],enumerable:!(n=nd(t,i))||n.enumerable});return e};var qo=(e,t,r)=>(r=e!=null?rd(ad(e)):{},Zo(t||!e||!e.__esModule?Nn(r,"default",{value:e,enumerable:!0}):r,e)),ld=e=>Zo(Nn({},"__esModule",{value:!0}),e);var ji=W((gg,$o)=>{"use strict";$o.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),n=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(n)!=="[object Symbol]")return!1;var i=42;t[r]=i;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var a=Object.getOwnPropertySymbols(t);if(a.length!==1||a[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var o=Object.getOwnPropertyDescriptor(t,r);if(o.value!==i||o.enumerable!==!0)return!1}return!0}});var $r=W((bg,Ko)=>{"use strict";var fd=ji();Ko.exports=function(){return fd()&&!!Symbol.toStringTag}});var Qo=W((wg,Jo)=>{"use strict";var Xo=typeof Symbol<"u"&&Symbol,ud=ji();Jo.exports=function(){return typeof Xo!="function"||typeof Symbol!="function"||typeof Xo("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:ud()}});var ts=W((vg,es)=>{"use strict";var cd="Function.prototype.bind called on incompatible ",Gi=Array.prototype.slice,hd=Object.prototype.toString,dd="[object Function]";es.exports=function(t){var r=this;if(typeof r!="function"||hd.call(r)!==dd)throw new TypeError(cd+r);for(var n=Gi.call(arguments,1),i,a=function(){if(this instanceof i){var u=r.apply(this,n.concat(Gi.call(arguments)));return Object(u)===u?u:this}else return r.apply(t,n.concat(Gi.call(arguments)))},o=Math.max(0,r.length-n.length),s=[],f=0;f<o;f++)s.push("$"+f);if(i=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(a),r.prototype){var l=function(){};l.prototype=r.prototype,i.prototype=new l,l.prototype=null}return i}});var Pn=W((xg,rs)=>{"use strict";var pd=ts();rs.exports=Function.prototype.bind||pd});var is=W((Eg,ns)=>{"use strict";var _d=Pn();ns.exports=_d.call(Function.call,Object.prototype.hasOwnProperty)});var Xr=W((Ag,fs)=>{"use strict";var oe,gr=SyntaxError,ls=Function,yr=TypeError,Zi=function(e){try{return ls('"use strict"; return ('+e+").constructor;")()}catch{}},jt=Object.getOwnPropertyDescriptor;if(jt)try{jt({},"")}catch{jt=null}var qi=function(){throw new yr},md=jt?function(){try{return arguments.callee,qi}catch{try{return jt(arguments,"callee").get}catch{return qi}}}():qi,_r=Qo()(),ft=Object.getPrototypeOf||function(e){return e.__proto__},mr={},yd=typeof Uint8Array>"u"?oe:ft(Uint8Array),Gt={"%AggregateError%":typeof AggregateError>"u"?oe:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?oe:ArrayBuffer,"%ArrayIteratorPrototype%":_r?ft([][Symbol.iterator]()):oe,"%AsyncFromSyncIteratorPrototype%":oe,"%AsyncFunction%":mr,"%AsyncGenerator%":mr,"%AsyncGeneratorFunction%":mr,"%AsyncIteratorPrototype%":mr,"%Atomics%":typeof Atomics>"u"?oe:Atomics,"%BigInt%":typeof BigInt>"u"?oe:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?oe:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?oe:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?oe:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?oe:Float32Array,"%Float64Array%":typeof Float64Array>"u"?oe:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?oe:FinalizationRegistry,"%Function%":ls,"%GeneratorFunction%":mr,"%Int8Array%":typeof Int8Array>"u"?oe:Int8Array,"%Int16Array%":typeof Int16Array>"u"?oe:Int16Array,"%Int32Array%":typeof Int32Array>"u"?oe:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":_r?ft(ft([][Symbol.iterator]())):oe,"%JSON%":typeof JSON=="object"?JSON:oe,"%Map%":typeof Map>"u"?oe:Map,"%MapIteratorPrototype%":typeof Map>"u"||!_r?oe:ft(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?oe:Promise,"%Proxy%":typeof Proxy>"u"?oe:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?oe:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?oe:Set,"%SetIteratorPrototype%":typeof Set>"u"||!_r?oe:ft(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?oe:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":_r?ft(""[Symbol.iterator]()):oe,"%Symbol%":_r?Symbol:oe,"%SyntaxError%":gr,"%ThrowTypeError%":md,"%TypedArray%":yd,"%TypeError%":yr,"%Uint8Array%":typeof Uint8Array>"u"?oe:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?oe:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?oe:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?oe:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?oe:WeakMap,"%WeakRef%":typeof WeakRef>"u"?oe:WeakRef,"%WeakSet%":typeof WeakSet>"u"?oe:WeakSet};try{null.error}catch(e){as=ft(ft(e)),Gt["%Error.prototype%"]=as}var as,gd=function e(t){var r;if(t==="%AsyncFunction%")r=Zi("async function () {}");else if(t==="%GeneratorFunction%")r=Zi("function* () {}");else if(t==="%AsyncGeneratorFunction%")r=Zi("async function* () {}");else if(t==="%AsyncGenerator%"){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if(t==="%AsyncIteratorPrototype%"){var i=e("%AsyncGenerator%");i&&(r=ft(i.prototype))}return Gt[t]=r,r},os={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Kr=Pn(),Mn=is(),bd=Kr.call(Function.call,Array.prototype.concat),wd=Kr.call(Function.apply,Array.prototype.splice),ss=Kr.call(Function.call,String.prototype.replace),Dn=Kr.call(Function.call,String.prototype.slice),vd=Kr.call(Function.call,RegExp.prototype.exec),xd=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,Ed=/\\(\\)?/g,Ad=function(t){var r=Dn(t,0,1),n=Dn(t,-1);if(r==="%"&&n!=="%")throw new gr("invalid intrinsic syntax, expected closing `%`");if(n==="%"&&r!=="%")throw new gr("invalid intrinsic syntax, expected opening `%`");var i=[];return ss(t,xd,function(a,o,s,f){i[i.length]=s?ss(f,Ed,"$1"):o||a}),i},Sd=function(t,r){var n=t,i;if(Mn(os,n)&&(i=os[n],n="%"+i[0]+"%"),Mn(Gt,n)){var a=Gt[n];if(a===mr&&(a=gd(n)),typeof a>"u"&&!r)throw new yr("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:i,name:n,value:a}}throw new gr("intrinsic "+t+" does not exist!")};fs.exports=function(t,r){if(typeof t!="string"||t.length===0)throw new yr("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof r!="boolean")throw new yr('"allowMissing" argument must be a boolean');if(vd(/^%?[^%]*%?$/,t)===null)throw new gr("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=Ad(t),i=n.length>0?n[0]:"",a=Sd("%"+i+"%",r),o=a.name,s=a.value,f=!1,l=a.alias;l&&(i=l[0],wd(n,bd([0,1],l)));for(var u=1,c=!0;u<n.length;u+=1){var p=n[u],h=Dn(p,0,1),y=Dn(p,-1);if((h==='"'||h==="'"||h==="`"||y==='"'||y==="'"||y==="`")&&h!==y)throw new gr("property names with quotes must have matching quotes");if((p==="constructor"||!c)&&(f=!0),i+="."+p,o="%"+i+"%",Mn(Gt,o))s=Gt[o];else if(s!=null){if(!(p in s)){if(!r)throw new yr("base intrinsic for "+t+" exists, but the property is not available.");return}if(jt&&u+1>=n.length){var m=jt(s,p);c=!!m,c&&"get"in m&&!("originalValue"in m.get)?s=m.get:s=s[p]}else c=Mn(s,p),s=s[p];c&&!f&&(Gt[o]=s)}}return s}});var Un=W((Sg,zn)=>{"use strict";var Vi=Pn(),br=Xr(),hs=br("%Function.prototype.apply%"),ds=br("%Function.prototype.call%"),ps=br("%Reflect.apply%",!0)||Vi.call(ds,hs),us=br("%Object.getOwnPropertyDescriptor%",!0),Zt=br("%Object.defineProperty%",!0),Id=br("%Math.max%");if(Zt)try{Zt({},"a",{value:1})}catch{Zt=null}zn.exports=function(t){var r=ps(Vi,ds,arguments);if(us&&Zt){var n=us(r,"length");n.configurable&&Zt(r,"length",{value:1+Id(0,t.length-(arguments.length-1))})}return r};var cs=function(){return ps(Vi,hs,arguments)};Zt?Zt(zn.exports,"apply",{value:cs}):zn.exports.apply=cs});var jn=W((Ig,ys)=>{"use strict";var _s=Xr(),ms=Un(),kd=ms(_s("String.prototype.indexOf"));ys.exports=function(t,r){var n=_s(t,!!r);return typeof n=="function"&&kd(t,".prototype.")>-1?ms(n):n}});var ws=W((kg,bs)=>{"use strict";var Td=$r()(),Od=jn(),Hi=Od("Object.prototype.toString"),Gn=function(t){return Td&&t&&typeof t=="object"&&Symbol.toStringTag in t?!1:Hi(t)==="[object Arguments]"},gs=function(t){return Gn(t)?!0:t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&Hi(t)!=="[object Array]"&&Hi(t.callee)==="[object Function]"},Rd=function(){return Gn(arguments)}();Gn.isLegacyArguments=gs;bs.exports=Rd?Gn:gs});var Es=W((Tg,xs)=>{"use strict";var Bd=Object.prototype.toString,Cd=Function.prototype.toString,Fd=/^\s*(?:function)?\*/,vs=$r()(),Wi=Object.getPrototypeOf,Ld=function(){if(!vs)return!1;try{return Function("return function*() {}")()}catch{}},Yi;xs.exports=function(t){if(typeof t!="function")return!1;if(Fd.test(Cd.call(t)))return!0;if(!vs){var r=Bd.call(t);return r==="[object GeneratorFunction]"}if(!Wi)return!1;if(typeof Yi>"u"){var n=Ld();Yi=n?Wi(n):!1}return Wi(t)===Yi}});var ks=W((Og,Is)=>{"use strict";var Ss=Function.prototype.toString,wr=typeof Reflect=="object"&&Reflect!==null&&Reflect.apply,Ki,Zn;if(typeof wr=="function"&&typeof Object.defineProperty=="function")try{Ki=Object.defineProperty({},"length",{get:function(){throw Zn}}),Zn={},wr(function(){throw 42},null,Ki)}catch(e){e!==Zn&&(wr=null)}else wr=null;var Nd=/^\s*class\b/,Xi=function(t){try{var r=Ss.call(t);return Nd.test(r)}catch{return!1}},$i=function(t){try{return Xi(t)?!1:(Ss.call(t),!0)}catch{return!1}},qn=Object.prototype.toString,Pd="[object Object]",Md="[object Function]",Dd="[object GeneratorFunction]",zd="[object HTMLAllCollection]",Ud="[object HTML document.all class]",jd="[object HTMLCollection]",Gd=typeof Symbol=="function"&&!!Symbol.toStringTag,Zd=!(0 in[,]),Ji=function(){return!1};typeof document=="object"&&(As=document.all,qn.call(As)===qn.call(document.all)&&(Ji=function(t){if((Zd||!t)&&(typeof t>"u"||typeof t=="object"))try{var r=qn.call(t);return(r===zd||r===Ud||r===jd||r===Pd)&&t("")==null}catch{}return!1}));var As;Is.exports=wr?function(t){if(Ji(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;try{wr(t,null,Ki)}catch(r){if(r!==Zn)return!1}return!Xi(t)&&$i(t)}:function(t){if(Ji(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;if(Gd)return $i(t);if(Xi(t))return!1;var r=qn.call(t);return r!==Md&&r!==Dd&&!/^\[object HTML/.test(r)?!1:$i(t)}});var Qi=W((Rg,Os)=>{"use strict";var qd=ks(),Vd=Object.prototype.toString,Ts=Object.prototype.hasOwnProperty,Hd=function(t,r,n){for(var i=0,a=t.length;i<a;i++)Ts.call(t,i)&&(n==null?r(t[i],i,t):r.call(n,t[i],i,t))},Wd=function(t,r,n){for(var i=0,a=t.length;i<a;i++)n==null?r(t.charAt(i),i,t):r.call(n,t.charAt(i),i,t)},Yd=function(t,r,n){for(var i in t)Ts.call(t,i)&&(n==null?r(t[i],i,t):r.call(n,t[i],i,t))},$d=function(t,r,n){if(!qd(r))throw new TypeError("iterator must be a function");var i;arguments.length>=3&&(i=n),Vd.call(t)==="[object Array]"?Hd(t,r,i):typeof t=="string"?Wd(t,r,i):Yd(t,r,i)};Os.exports=$d});var ta=W((Bg,Rs)=>{"use strict";var ea=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],Kd=typeof globalThis>"u"?global:globalThis;Rs.exports=function(){for(var t=[],r=0;r<ea.length;r++)typeof Kd[ea[r]]=="function"&&(t[t.length]=ea[r]);return t}});var ra=W((Cg,Bs)=>{"use strict";var Xd=Xr(),Vn=Xd("%Object.getOwnPropertyDescriptor%",!0);if(Vn)try{Vn([],"length")}catch{Vn=null}Bs.exports=Vn});var aa=W((Fg,Ps)=>{"use strict";var Cs=Qi(),Jd=ta(),ia=jn(),Qd=ia("Object.prototype.toString"),Fs=$r()(),Hn=ra(),e0=typeof globalThis>"u"?global:globalThis,Ls=Jd(),t0=ia("Array.prototype.indexOf",!0)||function(t,r){for(var n=0;n<t.length;n+=1)if(t[n]===r)return n;return-1},r0=ia("String.prototype.slice"),Ns={},na=Object.getPrototypeOf;Fs&&Hn&&na&&Cs(Ls,function(e){var t=new e0[e];if(Symbol.toStringTag in t){var r=na(t),n=Hn(r,Symbol.toStringTag);if(!n){var i=na(r);n=Hn(i,Symbol.toStringTag)}Ns[e]=n.get}});var n0=function(t){var r=!1;return Cs(Ns,function(n,i){if(!r)try{r=n.call(t)===i}catch{}}),r};Ps.exports=function(t){if(!t||typeof t!="object")return!1;if(!Fs||!(Symbol.toStringTag in t)){var r=r0(Qd(t),8,-1);return t0(Ls,r)>-1}return Hn?n0(t):!1}});var Zs=W((Lg,Gs)=>{"use strict";var Ds=Qi(),i0=ta(),zs=jn(),oa=ra(),a0=zs("Object.prototype.toString"),Us=$r()(),Ms=typeof globalThis>"u"?global:globalThis,o0=i0(),s0=zs("String.prototype.slice"),js={},sa=Object.getPrototypeOf;Us&&oa&&sa&&Ds(o0,function(e){if(typeof Ms[e]=="function"){var t=new Ms[e];if(Symbol.toStringTag in t){var r=sa(t),n=oa(r,Symbol.toStringTag);if(!n){var i=sa(r);n=oa(i,Symbol.toStringTag)}js[e]=n.get}}});var l0=function(t){var r=!1;return Ds(js,function(n,i){if(!r)try{var a=n.call(t);a===i&&(r=a)}catch{}}),r},f0=aa();Gs.exports=function(t){return f0(t)?!Us||!(Symbol.toStringTag in t)?s0(a0(t),8,-1):l0(t):!1}});var nl=W(ie=>{"use strict";var u0=ws(),c0=Es(),et=Zs(),qs=aa();function vr(e){return e.call.bind(e)}var Vs=typeof BigInt<"u",Hs=typeof Symbol<"u",qe=vr(Object.prototype.toString),h0=vr(Number.prototype.valueOf),d0=vr(String.prototype.valueOf),p0=vr(Boolean.prototype.valueOf);Vs&&(Ws=vr(BigInt.prototype.valueOf));var Ws;Hs&&(Ys=vr(Symbol.prototype.valueOf));var Ys;function Qr(e,t){if(typeof e!="object")return!1;try{return t(e),!0}catch{return!1}}ie.isArgumentsObject=u0;ie.isGeneratorFunction=c0;ie.isTypedArray=qs;function _0(e){return typeof Promise<"u"&&e instanceof Promise||e!==null&&typeof e=="object"&&typeof e.then=="function"&&typeof e.catch=="function"}ie.isPromise=_0;function m0(e){return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?ArrayBuffer.isView(e):qs(e)||Ks(e)}ie.isArrayBufferView=m0;function y0(e){return et(e)==="Uint8Array"}ie.isUint8Array=y0;function g0(e){return et(e)==="Uint8ClampedArray"}ie.isUint8ClampedArray=g0;function b0(e){return et(e)==="Uint16Array"}ie.isUint16Array=b0;function w0(e){return et(e)==="Uint32Array"}ie.isUint32Array=w0;function v0(e){return et(e)==="Int8Array"}ie.isInt8Array=v0;function x0(e){return et(e)==="Int16Array"}ie.isInt16Array=x0;function E0(e){return et(e)==="Int32Array"}ie.isInt32Array=E0;function A0(e){return et(e)==="Float32Array"}ie.isFloat32Array=A0;function S0(e){return et(e)==="Float64Array"}ie.isFloat64Array=S0;function I0(e){return et(e)==="BigInt64Array"}ie.isBigInt64Array=I0;function k0(e){return et(e)==="BigUint64Array"}ie.isBigUint64Array=k0;function Wn(e){return qe(e)==="[object Map]"}Wn.working=typeof Map<"u"&&Wn(new Map);function T0(e){return typeof Map>"u"?!1:Wn.working?Wn(e):e instanceof Map}ie.isMap=T0;function Yn(e){return qe(e)==="[object Set]"}Yn.working=typeof Set<"u"&&Yn(new Set);function O0(e){return typeof Set>"u"?!1:Yn.working?Yn(e):e instanceof Set}ie.isSet=O0;function $n(e){return qe(e)==="[object WeakMap]"}$n.working=typeof WeakMap<"u"&&$n(new WeakMap);function R0(e){return typeof WeakMap>"u"?!1:$n.working?$n(e):e instanceof WeakMap}ie.isWeakMap=R0;function fa(e){return qe(e)==="[object WeakSet]"}fa.working=typeof WeakSet<"u"&&fa(new WeakSet);function B0(e){return fa(e)}ie.isWeakSet=B0;function Kn(e){return qe(e)==="[object ArrayBuffer]"}Kn.working=typeof ArrayBuffer<"u"&&Kn(new ArrayBuffer);function $s(e){return typeof ArrayBuffer>"u"?!1:Kn.working?Kn(e):e instanceof ArrayBuffer}ie.isArrayBuffer=$s;function Xn(e){return qe(e)==="[object DataView]"}Xn.working=typeof ArrayBuffer<"u"&&typeof DataView<"u"&&Xn(new DataView(new ArrayBuffer(1),0,1));function Ks(e){return typeof DataView>"u"?!1:Xn.working?Xn(e):e instanceof DataView}ie.isDataView=Ks;var la=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:void 0;function Jr(e){return qe(e)==="[object SharedArrayBuffer]"}function Xs(e){return typeof la>"u"?!1:(typeof Jr.working>"u"&&(Jr.working=Jr(new la)),Jr.working?Jr(e):e instanceof la)}ie.isSharedArrayBuffer=Xs;function C0(e){return qe(e)==="[object AsyncFunction]"}ie.isAsyncFunction=C0;function F0(e){return qe(e)==="[object Map Iterator]"}ie.isMapIterator=F0;function L0(e){return qe(e)==="[object Set Iterator]"}ie.isSetIterator=L0;function N0(e){return qe(e)==="[object Generator]"}ie.isGeneratorObject=N0;function P0(e){return qe(e)==="[object WebAssembly.Module]"}ie.isWebAssemblyCompiledModule=P0;function Js(e){return Qr(e,h0)}ie.isNumberObject=Js;function Qs(e){return Qr(e,d0)}ie.isStringObject=Qs;function el(e){return Qr(e,p0)}ie.isBooleanObject=el;function tl(e){return Vs&&Qr(e,Ws)}ie.isBigIntObject=tl;function rl(e){return Hs&&Qr(e,Ys)}ie.isSymbolObject=rl;function M0(e){return Js(e)||Qs(e)||el(e)||tl(e)||rl(e)}ie.isBoxedPrimitive=M0;function D0(e){return typeof Uint8Array<"u"&&($s(e)||Xs(e))}ie.isAnyArrayBuffer=D0;["isProxy","isExternal","isModuleNamespaceObject"].forEach(function(e){Object.defineProperty(ie,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})})});var al=W((Pg,il)=>{il.exports=function(t){return t&&typeof t=="object"&&typeof t.copy=="function"&&typeof t.fill=="function"&&typeof t.readUInt8=="function"}});var ol=W((Mg,ua)=>{typeof Object.create=="function"?ua.exports=function(t,r){r&&(t.super_=r,t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:ua.exports=function(t,r){if(r){t.super_=r;var n=function(){};n.prototype=r.prototype,t.prototype=new n,t.prototype.constructor=t}}});var De=W(ae=>{var sl=Object.getOwnPropertyDescriptors||function(t){for(var r=Object.keys(t),n={},i=0;i<r.length;i++)n[r[i]]=Object.getOwnPropertyDescriptor(t,r[i]);return n},z0=/%[sdj%]/g;ae.format=function(e){if(!ii(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(Et(arguments[r]));return t.join(" ")}for(var r=1,n=arguments,i=n.length,a=String(e).replace(z0,function(s){if(s==="%%")return"%";if(r>=i)return s;switch(s){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch{return"[Circular]"}default:return s}}),o=n[r];r<i;o=n[++r])ni(o)||!xr(o)?a+=" "+o:a+=" "+Et(o);return a};ae.deprecate=function(e,t){if(typeof process<"u"&&process.noDeprecation===!0)return e;if(typeof process>"u")return function(){return ae.deprecate(e,t).apply(this,arguments)};var r=!1;function n(){if(!r){if(process.throwDeprecation)throw new Error(t);process.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)}return n};var Jn={},ll=/^$/;process.env.NODE_DEBUG&&(Qn=process.env.NODE_DEBUG,Qn=Qn.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),ll=new RegExp("^"+Qn+"$","i"));var Qn;ae.debuglog=function(e){if(e=e.toUpperCase(),!Jn[e])if(ll.test(e)){var t=process.pid;Jn[e]=function(){var r=ae.format.apply(ae,arguments);console.error("%s %d: %s",e,t,r)}}else Jn[e]=function(){};return Jn[e]};function Et(e,t){var r={seen:[],stylize:j0};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),pa(t)?r.showHidden=t:t&&ae._extend(r,t),Vt(r.showHidden)&&(r.showHidden=!1),Vt(r.depth)&&(r.depth=2),Vt(r.colors)&&(r.colors=!1),Vt(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=U0),ti(r,e,r.depth)}ae.inspect=Et;Et.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]};Et.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function U0(e,t){var r=Et.styles[t];return r?"\x1B["+Et.colors[r][0]+"m"+e+"\x1B["+Et.colors[r][1]+"m":e}function j0(e,t){return e}function G0(e){var t={};return e.forEach(function(r,n){t[r]=!0}),t}function ti(e,t,r){if(e.customInspect&&t&&ei(t.inspect)&&t.inspect!==ae.inspect&&!(t.constructor&&t.constructor.prototype===t)){var n=t.inspect(r,e);return ii(n)||(n=ti(e,n,r)),n}var i=Z0(e,t);if(i)return i;var a=Object.keys(t),o=G0(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),tn(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return ca(t);if(a.length===0){if(ei(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(en(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(ri(t))return e.stylize(Date.prototype.toString.call(t),"date");if(tn(t))return ca(t)}var f="",l=!1,u=["{","}"];if(fl(t)&&(l=!0,u=["[","]"]),ei(t)){var c=t.name?": "+t.name:"";f=" [Function"+c+"]"}if(en(t)&&(f=" "+RegExp.prototype.toString.call(t)),ri(t)&&(f=" "+Date.prototype.toUTCString.call(t)),tn(t)&&(f=" "+ca(t)),a.length===0&&(!l||t.length==0))return u[0]+f+u[1];if(r<0)return en(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special");e.seen.push(t);var p;return l?p=q0(e,t,r,o,a):p=a.map(function(h){return da(e,t,r,o,h,l)}),e.seen.pop(),V0(p,f,u)}function Z0(e,t){if(Vt(t))return e.stylize("undefined","undefined");if(ii(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(ul(t))return e.stylize(""+t,"number");if(pa(t))return e.stylize(""+t,"boolean");if(ni(t))return e.stylize("null","null")}function ca(e){return"["+Error.prototype.toString.call(e)+"]"}function q0(e,t,r,n,i){for(var a=[],o=0,s=t.length;o<s;++o)cl(t,String(o))?a.push(da(e,t,r,n,String(o),!0)):a.push("");return i.forEach(function(f){f.match(/^\d+$/)||a.push(da(e,t,r,n,f,!0))}),a}function da(e,t,r,n,i,a){var o,s,f;if(f=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},f.get?f.set?s=e.stylize("[Getter/Setter]","special"):s=e.stylize("[Getter]","special"):f.set&&(s=e.stylize("[Setter]","special")),cl(n,i)||(o="["+i+"]"),s||(e.seen.indexOf(f.value)<0?(ni(r)?s=ti(e,f.value,null):s=ti(e,f.value,r-1),s.indexOf(`
`)>-1&&(a?s=s.split(`
`).map(function(l){return"  "+l}).join(`
`).slice(2):s=`
`+s.split(`
`).map(function(l){return"   "+l}).join(`
`))):s=e.stylize("[Circular]","special")),Vt(o)){if(a&&i.match(/^\d+$/))return s;o=JSON.stringify(""+i),o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.slice(1,-1),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function V0(e,t,r){var n=0,i=e.reduce(function(a,o){return n++,o.indexOf(`
`)>=0&&n++,a+o.replace(/\u001b\[\d\d?m/g,"").length+1},0);return i>60?r[0]+(t===""?"":t+`
 `)+" "+e.join(`,
  `)+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}ae.types=nl();function fl(e){return Array.isArray(e)}ae.isArray=fl;function pa(e){return typeof e=="boolean"}ae.isBoolean=pa;function ni(e){return e===null}ae.isNull=ni;function H0(e){return e==null}ae.isNullOrUndefined=H0;function ul(e){return typeof e=="number"}ae.isNumber=ul;function ii(e){return typeof e=="string"}ae.isString=ii;function W0(e){return typeof e=="symbol"}ae.isSymbol=W0;function Vt(e){return e===void 0}ae.isUndefined=Vt;function en(e){return xr(e)&&_a(e)==="[object RegExp]"}ae.isRegExp=en;ae.types.isRegExp=en;function xr(e){return typeof e=="object"&&e!==null}ae.isObject=xr;function ri(e){return xr(e)&&_a(e)==="[object Date]"}ae.isDate=ri;ae.types.isDate=ri;function tn(e){return xr(e)&&(_a(e)==="[object Error]"||e instanceof Error)}ae.isError=tn;ae.types.isNativeError=tn;function ei(e){return typeof e=="function"}ae.isFunction=ei;function Y0(e){return e===null||typeof e=="boolean"||typeof e=="number"||typeof e=="string"||typeof e=="symbol"||typeof e>"u"}ae.isPrimitive=Y0;ae.isBuffer=al();function _a(e){return Object.prototype.toString.call(e)}function ha(e){return e<10?"0"+e.toString(10):e.toString(10)}var $0=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function K0(){var e=new Date,t=[ha(e.getHours()),ha(e.getMinutes()),ha(e.getSeconds())].join(":");return[e.getDate(),$0[e.getMonth()],t].join(" ")}ae.log=function(){console.log("%s - %s",K0(),ae.format.apply(ae,arguments))};ae.inherits=ol();ae._extend=function(e,t){if(!t||!xr(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};function cl(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var qt=typeof Symbol<"u"?Symbol("util.promisify.custom"):void 0;ae.promisify=function(t){if(typeof t!="function")throw new TypeError('The "original" argument must be of type Function');if(qt&&t[qt]){var r=t[qt];if(typeof r!="function")throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(r,qt,{value:r,enumerable:!1,writable:!1,configurable:!0}),r}function r(){for(var n,i,a=new Promise(function(f,l){n=f,i=l}),o=[],s=0;s<arguments.length;s++)o.push(arguments[s]);o.push(function(f,l){f?i(f):n(l)});try{t.apply(this,o)}catch(f){i(f)}return a}return Object.setPrototypeOf(r,Object.getPrototypeOf(t)),qt&&Object.defineProperty(r,qt,{value:r,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(r,sl(t))};ae.promisify.custom=qt;function X0(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}function J0(e){if(typeof e!="function")throw new TypeError('The "original" argument must be of type Function');function t(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if(typeof i!="function")throw new TypeError("The last argument must be of type Function");var a=this,o=function(){return i.apply(a,arguments)};e.apply(this,r).then(function(s){process.nextTick(o.bind(null,null,s))},function(s){process.nextTick(X0.bind(null,s,o))})}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,sl(e)),t}ae.callbackify=J0});var dl=W((zg,hl)=>{hl.exports=ze;function ze(e){if(e)return Q0(e)}function Q0(e){for(var t in ze.prototype)e[t]=ze.prototype[t];return e}ze.prototype.on=ze.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks[e]=this._callbacks[e]||[]).push(t),this};ze.prototype.once=function(e,t){var r=this;this._callbacks=this._callbacks||{};function n(){r.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this};ze.prototype.off=ze.prototype.removeListener=ze.prototype.removeAllListeners=ze.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var r=this._callbacks[e];if(!r)return this;if(arguments.length==1)return delete this._callbacks[e],this;for(var n,i=0;i<r.length;i++)if(n=r[i],n===t||n.fn===t){r.splice(i,1);break}return this};ze.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),r=this._callbacks[e];if(r){r=r.slice(0);for(var n=0,i=r.length;n<i;++n)r[n].apply(this,t)}return this};ze.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks[e]||[]};ze.prototype.hasListeners=function(e){return!!this.listeners(e).length}});var nn=W((Ug,_l)=>{var pl=dl();function rn(){pl.call(this)}rn.prototype=new pl;_l.exports=rn;rn.Stream=rn;rn.prototype.pipe=function(e,t){var r=this;function n(u){e.writable&&e.write(u)===!1&&r.pause&&r.pause()}r.on("data",n);function i(){r.readable&&r.resume&&r.resume()}e.on("drain",i),!e._isStdio&&(!t||t.end!==!1)&&(r.on("end",o),r.on("close",s));var a=!1;function o(){a||(a=!0,e.end())}function s(){a||(a=!0,typeof e.destroy=="function"&&e.destroy())}function f(u){if(l(),!this.hasListeners("error"))throw u}r.on("error",f),e.on("error",f);function l(){r.off("data",n),e.off("drain",i),r.off("end",o),r.off("close",s),r.off("error",f),e.off("error",f),r.off("end",l),r.off("close",l),e.off("end",l),e.off("close",l)}return r.on("end",l),r.on("close",l),e.on("end",l),e.on("close",l),e.emit("pipe",r),e}});var gl=W(ai=>{"use strict";ai.byteLength=tp;ai.toByteArray=np;ai.fromByteArray=op;var ut=[],Ve=[],ep=typeof Uint8Array<"u"?Uint8Array:Array,ma="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(Ht=0,ml=ma.length;Ht<ml;++Ht)ut[Ht]=ma[Ht],Ve[ma.charCodeAt(Ht)]=Ht;var Ht,ml;Ve["-".charCodeAt(0)]=62;Ve["_".charCodeAt(0)]=63;function yl(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");r===-1&&(r=t);var n=r===t?0:4-r%4;return[r,n]}function tp(e){var t=yl(e),r=t[0],n=t[1];return(r+n)*3/4-n}function rp(e,t,r){return(t+r)*3/4-r}function np(e){var t,r=yl(e),n=r[0],i=r[1],a=new ep(rp(e,n,i)),o=0,s=i>0?n-4:n,f;for(f=0;f<s;f+=4)t=Ve[e.charCodeAt(f)]<<18|Ve[e.charCodeAt(f+1)]<<12|Ve[e.charCodeAt(f+2)]<<6|Ve[e.charCodeAt(f+3)],a[o++]=t>>16&255,a[o++]=t>>8&255,a[o++]=t&255;return i===2&&(t=Ve[e.charCodeAt(f)]<<2|Ve[e.charCodeAt(f+1)]>>4,a[o++]=t&255),i===1&&(t=Ve[e.charCodeAt(f)]<<10|Ve[e.charCodeAt(f+1)]<<4|Ve[e.charCodeAt(f+2)]>>2,a[o++]=t>>8&255,a[o++]=t&255),a}function ip(e){return ut[e>>18&63]+ut[e>>12&63]+ut[e>>6&63]+ut[e&63]}function ap(e,t,r){for(var n,i=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(e[a+2]&255),i.push(ip(n));return i.join("")}function op(e){for(var t,r=e.length,n=r%3,i=[],a=16383,o=0,s=r-n;o<s;o+=a)i.push(ap(e,o,o+a>s?s:o+a));return n===1?(t=e[r-1],i.push(ut[t>>2]+ut[t<<4&63]+"==")):n===2&&(t=(e[r-2]<<8)+e[r-1],i.push(ut[t>>10]+ut[t>>4&63]+ut[t<<2&63]+"=")),i.join("")}});var bl=W(ya=>{ya.read=function(e,t,r,n,i){var a,o,s=i*8-n-1,f=(1<<s)-1,l=f>>1,u=-7,c=r?i-1:0,p=r?-1:1,h=e[t+c];for(c+=p,a=h&(1<<-u)-1,h>>=-u,u+=s;u>0;a=a*256+e[t+c],c+=p,u-=8);for(o=a&(1<<-u)-1,a>>=-u,u+=n;u>0;o=o*256+e[t+c],c+=p,u-=8);if(a===0)a=1-l;else{if(a===f)return o?NaN:(h?-1:1)*(1/0);o=o+Math.pow(2,n),a=a-l}return(h?-1:1)*o*Math.pow(2,a-n)};ya.write=function(e,t,r,n,i,a){var o,s,f,l=a*8-i-1,u=(1<<l)-1,c=u>>1,p=i===23?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:a-1,y=n?1:-1,m=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),o+c>=1?t+=p/f:t+=p*Math.pow(2,1-c),t*f>=2&&(o++,f/=2),o+c>=u?(s=0,o=u):o+c>=1?(s=(t*f-1)*Math.pow(2,i),o=o+c):(s=t*Math.pow(2,c-1)*Math.pow(2,i),o=0));i>=8;e[r+h]=s&255,h+=y,s/=256,i-=8);for(o=o<<i|s,l+=i;l>0;e[r+h]=o&255,h+=y,o/=256,l-=8);e[r+h-y]|=m*128}});var li=W(Ir=>{"use strict";var ga=gl(),Ar=bl(),wl=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;Ir.Buffer=P;Ir.SlowBuffer=hp;Ir.INSPECT_MAX_BYTES=50;var oi=2147483647;Ir.kMaxLength=oi;P.TYPED_ARRAY_SUPPORT=sp();!P.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function sp(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),e.foo()===42}catch{return!1}}Object.defineProperty(P.prototype,"parent",{enumerable:!0,get:function(){if(P.isBuffer(this))return this.buffer}});Object.defineProperty(P.prototype,"offset",{enumerable:!0,get:function(){if(P.isBuffer(this))return this.byteOffset}});function wt(e){if(e>oi)throw new RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,P.prototype),t}function P(e,t,r){if(typeof e=="number"){if(typeof t=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return xa(e)}return Al(e,t,r)}P.poolSize=8192;function Al(e,t,r){if(typeof e=="string")return fp(e,t);if(ArrayBuffer.isView(e))return up(e);if(e==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(ct(e,ArrayBuffer)||e&&ct(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(ct(e,SharedArrayBuffer)||e&&ct(e.buffer,SharedArrayBuffer)))return wa(e,t,r);if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');let n=e.valueOf&&e.valueOf();if(n!=null&&n!==e)return P.from(n,t,r);let i=cp(e);if(i)return i;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]=="function")return P.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}P.from=function(e,t,r){return Al(e,t,r)};Object.setPrototypeOf(P.prototype,Uint8Array.prototype);Object.setPrototypeOf(P,Uint8Array);function Sl(e){if(typeof e!="number")throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function lp(e,t,r){return Sl(e),e<=0?wt(e):t!==void 0?typeof r=="string"?wt(e).fill(t,r):wt(e).fill(t):wt(e)}P.alloc=function(e,t,r){return lp(e,t,r)};function xa(e){return Sl(e),wt(e<0?0:Ea(e)|0)}P.allocUnsafe=function(e){return xa(e)};P.allocUnsafeSlow=function(e){return xa(e)};function fp(e,t){if((typeof t!="string"||t==="")&&(t="utf8"),!P.isEncoding(t))throw new TypeError("Unknown encoding: "+t);let r=Il(e,t)|0,n=wt(r),i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}function ba(e){let t=e.length<0?0:Ea(e.length)|0,r=wt(t);for(let n=0;n<t;n+=1)r[n]=e[n]&255;return r}function up(e){if(ct(e,Uint8Array)){let t=new Uint8Array(e);return wa(t.buffer,t.byteOffset,t.byteLength)}return ba(e)}function wa(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return t===void 0&&r===void 0?n=new Uint8Array(e):r===void 0?n=new Uint8Array(e,t):n=new Uint8Array(e,t,r),Object.setPrototypeOf(n,P.prototype),n}function cp(e){if(P.isBuffer(e)){let t=Ea(e.length)|0,r=wt(t);return r.length===0||e.copy(r,0,0,t),r}if(e.length!==void 0)return typeof e.length!="number"||Sa(e.length)?wt(0):ba(e);if(e.type==="Buffer"&&Array.isArray(e.data))return ba(e.data)}function Ea(e){if(e>=oi)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+oi.toString(16)+" bytes");return e|0}function hp(e){return+e!=e&&(e=0),P.alloc(+e)}P.isBuffer=function(t){return t!=null&&t._isBuffer===!0&&t!==P.prototype};P.compare=function(t,r){if(ct(t,Uint8Array)&&(t=P.from(t,t.offset,t.byteLength)),ct(r,Uint8Array)&&(r=P.from(r,r.offset,r.byteLength)),!P.isBuffer(t)||!P.isBuffer(r))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===r)return 0;let n=t.length,i=r.length;for(let a=0,o=Math.min(n,i);a<o;++a)if(t[a]!==r[a]){n=t[a],i=r[a];break}return n<i?-1:i<n?1:0};P.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}};P.concat=function(t,r){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(t.length===0)return P.alloc(0);let n;if(r===void 0)for(r=0,n=0;n<t.length;++n)r+=t[n].length;let i=P.allocUnsafe(r),a=0;for(n=0;n<t.length;++n){let o=t[n];if(ct(o,Uint8Array))a+o.length>i.length?(P.isBuffer(o)||(o=P.from(o)),o.copy(i,a)):Uint8Array.prototype.set.call(i,o,a);else if(P.isBuffer(o))o.copy(i,a);else throw new TypeError('"list" argument must be an Array of Buffers');a+=o.length}return i};function Il(e,t){if(P.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||ct(e,ArrayBuffer))return e.byteLength;if(typeof e!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&r===0)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return va(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return r*2;case"hex":return r>>>1;case"base64":return Nl(e).length;default:if(i)return n?-1:va(e).length;t=(""+t).toLowerCase(),i=!0}}P.byteLength=Il;function dp(e,t,r){let n=!1;if((t===void 0||t<0)&&(t=0),t>this.length||((r===void 0||r>this.length)&&(r=this.length),r<=0)||(r>>>=0,t>>>=0,r<=t))return"";for(e||(e="utf8");;)switch(e){case"hex":return Ep(this,t,r);case"utf8":case"utf-8":return Tl(this,t,r);case"ascii":return vp(this,t,r);case"latin1":case"binary":return xp(this,t,r);case"base64":return bp(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ap(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}P.prototype._isBuffer=!0;function Wt(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}P.prototype.swap16=function(){let t=this.length;if(t%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let r=0;r<t;r+=2)Wt(this,r,r+1);return this};P.prototype.swap32=function(){let t=this.length;if(t%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let r=0;r<t;r+=4)Wt(this,r,r+3),Wt(this,r+1,r+2);return this};P.prototype.swap64=function(){let t=this.length;if(t%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let r=0;r<t;r+=8)Wt(this,r,r+7),Wt(this,r+1,r+6),Wt(this,r+2,r+5),Wt(this,r+3,r+4);return this};P.prototype.toString=function(){let t=this.length;return t===0?"":arguments.length===0?Tl(this,0,t):dp.apply(this,arguments)};P.prototype.toLocaleString=P.prototype.toString;P.prototype.equals=function(t){if(!P.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?!0:P.compare(this,t)===0};P.prototype.inspect=function(){let t="",r=Ir.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"};wl&&(P.prototype[wl]=P.prototype.inspect);P.prototype.compare=function(t,r,n,i,a){if(ct(t,Uint8Array)&&(t=P.from(t,t.offset,t.byteLength)),!P.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(r===void 0&&(r=0),n===void 0&&(n=t?t.length:0),i===void 0&&(i=0),a===void 0&&(a=this.length),r<0||n>t.length||i<0||a>this.length)throw new RangeError("out of range index");if(i>=a&&r>=n)return 0;if(i>=a)return-1;if(r>=n)return 1;if(r>>>=0,n>>>=0,i>>>=0,a>>>=0,this===t)return 0;let o=a-i,s=n-r,f=Math.min(o,s),l=this.slice(i,a),u=t.slice(r,n);for(let c=0;c<f;++c)if(l[c]!==u[c]){o=l[c],s=u[c];break}return o<s?-1:s<o?1:0};function kl(e,t,r,n,i){if(e.length===0)return-1;if(typeof r=="string"?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,Sa(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0)if(i)r=0;else return-1;if(typeof t=="string"&&(t=P.from(t,n)),P.isBuffer(t))return t.length===0?-1:vl(e,t,r,n,i);if(typeof t=="number")return t=t&255,typeof Uint8Array.prototype.indexOf=="function"?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):vl(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function vl(e,t,r,n,i){let a=1,o=e.length,s=t.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(e.length<2||t.length<2)return-1;a=2,o/=2,s/=2,r/=2}function f(u,c){return a===1?u[c]:u.readUInt16BE(c*a)}let l;if(i){let u=-1;for(l=r;l<o;l++)if(f(e,l)===f(t,u===-1?0:l-u)){if(u===-1&&(u=l),l-u+1===s)return u*a}else u!==-1&&(l-=l-u),u=-1}else for(r+s>o&&(r=o-s),l=r;l>=0;l--){let u=!0;for(let c=0;c<s;c++)if(f(e,l+c)!==f(t,c)){u=!1;break}if(u)return l}return-1}P.prototype.includes=function(t,r,n){return this.indexOf(t,r,n)!==-1};P.prototype.indexOf=function(t,r,n){return kl(this,t,r,n,!0)};P.prototype.lastIndexOf=function(t,r,n){return kl(this,t,r,n,!1)};function pp(e,t,r,n){r=Number(r)||0;let i=e.length-r;n?(n=Number(n),n>i&&(n=i)):n=i;let a=t.length;n>a/2&&(n=a/2);let o;for(o=0;o<n;++o){let s=parseInt(t.substr(o*2,2),16);if(Sa(s))return o;e[r+o]=s}return o}function _p(e,t,r,n){return si(va(t,e.length-r),e,r,n)}function mp(e,t,r,n){return si(Tp(t),e,r,n)}function yp(e,t,r,n){return si(Nl(t),e,r,n)}function gp(e,t,r,n){return si(Op(t,e.length-r),e,r,n)}P.prototype.write=function(t,r,n,i){if(r===void 0)i="utf8",n=this.length,r=0;else if(n===void 0&&typeof r=="string")i=r,n=this.length,r=0;else if(isFinite(r))r=r>>>0,isFinite(n)?(n=n>>>0,i===void 0&&(i="utf8")):(i=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let a=this.length-r;if((n===void 0||n>a)&&(n=a),t.length>0&&(n<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let o=!1;for(;;)switch(i){case"hex":return pp(this,t,r,n);case"utf8":case"utf-8":return _p(this,t,r,n);case"ascii":case"latin1":case"binary":return mp(this,t,r,n);case"base64":return yp(this,t,r,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return gp(this,t,r,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}};P.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function bp(e,t,r){return t===0&&r===e.length?ga.fromByteArray(e):ga.fromByteArray(e.slice(t,r))}function Tl(e,t,r){r=Math.min(e.length,r);let n=[],i=t;for(;i<r;){let a=e[i],o=null,s=a>239?4:a>223?3:a>191?2:1;if(i+s<=r){let f,l,u,c;switch(s){case 1:a<128&&(o=a);break;case 2:f=e[i+1],(f&192)===128&&(c=(a&31)<<6|f&63,c>127&&(o=c));break;case 3:f=e[i+1],l=e[i+2],(f&192)===128&&(l&192)===128&&(c=(a&15)<<12|(f&63)<<6|l&63,c>2047&&(c<55296||c>57343)&&(o=c));break;case 4:f=e[i+1],l=e[i+2],u=e[i+3],(f&192)===128&&(l&192)===128&&(u&192)===128&&(c=(a&15)<<18|(f&63)<<12|(l&63)<<6|u&63,c>65535&&c<1114112&&(o=c))}}o===null?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|o&1023),n.push(o),i+=s}return wp(n)}var xl=4096;function wp(e){let t=e.length;if(t<=xl)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=xl));return r}function vp(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]&127);return n}function xp(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function Ep(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let a=t;a<r;++a)i+=Rp[e[a]];return i}function Ap(e,t,r){let n=e.slice(t,r),i="";for(let a=0;a<n.length-1;a+=2)i+=String.fromCharCode(n[a]+n[a+1]*256);return i}P.prototype.slice=function(t,r){let n=this.length;t=~~t,r=r===void 0?n:~~r,t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),r<t&&(r=t);let i=this.subarray(t,r);return Object.setPrototypeOf(i,P.prototype),i};function Ae(e,t,r){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}P.prototype.readUintLE=P.prototype.readUIntLE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t],a=1,o=0;for(;++o<r&&(a*=256);)i+=this[t+o]*a;return i};P.prototype.readUintBE=P.prototype.readUIntBE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t+--r],a=1;for(;r>0&&(a*=256);)i+=this[t+--r]*a;return i};P.prototype.readUint8=P.prototype.readUInt8=function(t,r){return t=t>>>0,r||Ae(t,1,this.length),this[t]};P.prototype.readUint16LE=P.prototype.readUInt16LE=function(t,r){return t=t>>>0,r||Ae(t,2,this.length),this[t]|this[t+1]<<8};P.prototype.readUint16BE=P.prototype.readUInt16BE=function(t,r){return t=t>>>0,r||Ae(t,2,this.length),this[t]<<8|this[t+1]};P.prototype.readUint32LE=P.prototype.readUInt32LE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+this[t+3]*16777216};P.prototype.readUint32BE=P.prototype.readUInt32BE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]*16777216+(this[t+1]<<16|this[t+2]<<8|this[t+3])};P.prototype.readBigUInt64LE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&an(t,this.length-8);let i=r+this[++t]*2**8+this[++t]*2**16+this[++t]*2**24,a=this[++t]+this[++t]*2**8+this[++t]*2**16+n*2**24;return BigInt(i)+(BigInt(a)<<BigInt(32))});P.prototype.readBigUInt64BE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&an(t,this.length-8);let i=r*2**24+this[++t]*2**16+this[++t]*2**8+this[++t],a=this[++t]*2**24+this[++t]*2**16+this[++t]*2**8+n;return(BigInt(i)<<BigInt(32))+BigInt(a)});P.prototype.readIntLE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t],a=1,o=0;for(;++o<r&&(a*=256);)i+=this[t+o]*a;return a*=128,i>=a&&(i-=Math.pow(2,8*r)),i};P.prototype.readIntBE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=r,a=1,o=this[t+--i];for(;i>0&&(a*=256);)o+=this[t+--i]*a;return a*=128,o>=a&&(o-=Math.pow(2,8*r)),o};P.prototype.readInt8=function(t,r){return t=t>>>0,r||Ae(t,1,this.length),this[t]&128?(255-this[t]+1)*-1:this[t]};P.prototype.readInt16LE=function(t,r){t=t>>>0,r||Ae(t,2,this.length);let n=this[t]|this[t+1]<<8;return n&32768?n|4294901760:n};P.prototype.readInt16BE=function(t,r){t=t>>>0,r||Ae(t,2,this.length);let n=this[t+1]|this[t]<<8;return n&32768?n|4294901760:n};P.prototype.readInt32LE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24};P.prototype.readInt32BE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]};P.prototype.readBigInt64LE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&an(t,this.length-8);let i=this[t+4]+this[t+5]*2**8+this[t+6]*2**16+(n<<24);return(BigInt(i)<<BigInt(32))+BigInt(r+this[++t]*2**8+this[++t]*2**16+this[++t]*2**24)});P.prototype.readBigInt64BE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&an(t,this.length-8);let i=(r<<24)+this[++t]*2**16+this[++t]*2**8+this[++t];return(BigInt(i)<<BigInt(32))+BigInt(this[++t]*2**24+this[++t]*2**16+this[++t]*2**8+n)});P.prototype.readFloatLE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),Ar.read(this,t,!0,23,4)};P.prototype.readFloatBE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),Ar.read(this,t,!1,23,4)};P.prototype.readDoubleLE=function(t,r){return t=t>>>0,r||Ae(t,8,this.length),Ar.read(this,t,!0,52,8)};P.prototype.readDoubleBE=function(t,r){return t=t>>>0,r||Ae(t,8,this.length),Ar.read(this,t,!1,52,8)};function Pe(e,t,r,n,i,a){if(!P.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}P.prototype.writeUintLE=P.prototype.writeUIntLE=function(t,r,n,i){if(t=+t,r=r>>>0,n=n>>>0,!i){let s=Math.pow(2,8*n)-1;Pe(this,t,r,n,s,0)}let a=1,o=0;for(this[r]=t&255;++o<n&&(a*=256);)this[r+o]=t/a&255;return r+n};P.prototype.writeUintBE=P.prototype.writeUIntBE=function(t,r,n,i){if(t=+t,r=r>>>0,n=n>>>0,!i){let s=Math.pow(2,8*n)-1;Pe(this,t,r,n,s,0)}let a=n-1,o=1;for(this[r+a]=t&255;--a>=0&&(o*=256);)this[r+a]=t/o&255;return r+n};P.prototype.writeUint8=P.prototype.writeUInt8=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,1,255,0),this[r]=t&255,r+1};P.prototype.writeUint16LE=P.prototype.writeUInt16LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,65535,0),this[r]=t&255,this[r+1]=t>>>8,r+2};P.prototype.writeUint16BE=P.prototype.writeUInt16BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,65535,0),this[r]=t>>>8,this[r+1]=t&255,r+2};P.prototype.writeUint32LE=P.prototype.writeUInt32LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,4294967295,0),this[r+3]=t>>>24,this[r+2]=t>>>16,this[r+1]=t>>>8,this[r]=t&255,r+4};P.prototype.writeUint32BE=P.prototype.writeUInt32BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,4294967295,0),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=t&255,r+4};function Ol(e,t,r,n,i){Ll(t,n,i,e,r,7);let a=Number(t&BigInt(4294967295));e[r++]=a,a=a>>8,e[r++]=a,a=a>>8,e[r++]=a,a=a>>8,e[r++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o=o>>8,e[r++]=o,o=o>>8,e[r++]=o,o=o>>8,e[r++]=o,r}function Rl(e,t,r,n,i){Ll(t,n,i,e,r,7);let a=Number(t&BigInt(4294967295));e[r+7]=a,a=a>>8,e[r+6]=a,a=a>>8,e[r+5]=a,a=a>>8,e[r+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o=o>>8,e[r+2]=o,o=o>>8,e[r+1]=o,o=o>>8,e[r]=o,r+8}P.prototype.writeBigUInt64LE=At(function(t,r=0){return Ol(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))});P.prototype.writeBigUInt64BE=At(function(t,r=0){return Rl(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))});P.prototype.writeIntLE=function(t,r,n,i){if(t=+t,r=r>>>0,!i){let f=Math.pow(2,8*n-1);Pe(this,t,r,n,f-1,-f)}let a=0,o=1,s=0;for(this[r]=t&255;++a<n&&(o*=256);)t<0&&s===0&&this[r+a-1]!==0&&(s=1),this[r+a]=(t/o>>0)-s&255;return r+n};P.prototype.writeIntBE=function(t,r,n,i){if(t=+t,r=r>>>0,!i){let f=Math.pow(2,8*n-1);Pe(this,t,r,n,f-1,-f)}let a=n-1,o=1,s=0;for(this[r+a]=t&255;--a>=0&&(o*=256);)t<0&&s===0&&this[r+a+1]!==0&&(s=1),this[r+a]=(t/o>>0)-s&255;return r+n};P.prototype.writeInt8=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,1,127,-128),t<0&&(t=255+t+1),this[r]=t&255,r+1};P.prototype.writeInt16LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,32767,-32768),this[r]=t&255,this[r+1]=t>>>8,r+2};P.prototype.writeInt16BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,32767,-32768),this[r]=t>>>8,this[r+1]=t&255,r+2};P.prototype.writeInt32LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,2147483647,-2147483648),this[r]=t&255,this[r+1]=t>>>8,this[r+2]=t>>>16,this[r+3]=t>>>24,r+4};P.prototype.writeInt32BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=t&255,r+4};P.prototype.writeBigInt64LE=At(function(t,r=0){return Ol(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});P.prototype.writeBigInt64BE=At(function(t,r=0){return Rl(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function Bl(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Cl(e,t,r,n,i){return t=+t,r=r>>>0,i||Bl(e,t,r,4,34028234663852886e22,-34028234663852886e22),Ar.write(e,t,r,n,23,4),r+4}P.prototype.writeFloatLE=function(t,r,n){return Cl(this,t,r,!0,n)};P.prototype.writeFloatBE=function(t,r,n){return Cl(this,t,r,!1,n)};function Fl(e,t,r,n,i){return t=+t,r=r>>>0,i||Bl(e,t,r,8,17976931348623157e292,-17976931348623157e292),Ar.write(e,t,r,n,52,8),r+8}P.prototype.writeDoubleLE=function(t,r,n){return Fl(this,t,r,!0,n)};P.prototype.writeDoubleBE=function(t,r,n){return Fl(this,t,r,!1,n)};P.prototype.copy=function(t,r,n,i){if(!P.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),!i&&i!==0&&(i=this.length),r>=t.length&&(r=t.length),r||(r=0),i>0&&i<n&&(i=n),i===n||t.length===0||this.length===0)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-r<i-n&&(i=t.length-r+n);let a=i-n;return this===t&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(r,n,i):Uint8Array.prototype.set.call(t,this.subarray(n,i),r),a};P.prototype.fill=function(t,r,n,i){if(typeof t=="string"){if(typeof r=="string"?(i=r,r=0,n=this.length):typeof n=="string"&&(i=n,n=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!P.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(t.length===1){let o=t.charCodeAt(0);(i==="utf8"&&o<128||i==="latin1")&&(t=o)}}else typeof t=="number"?t=t&255:typeof t=="boolean"&&(t=Number(t));if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;r=r>>>0,n=n===void 0?this.length:n>>>0,t||(t=0);let a;if(typeof t=="number")for(a=r;a<n;++a)this[a]=t;else{let o=P.isBuffer(t)?t:P.from(t,i),s=o.length;if(s===0)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(a=0;a<n-r;++a)this[a+r]=o[a%s]}return this};var Er={};function Aa(e,t,r){Er[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(i){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:i,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}Aa("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError);Aa("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError);Aa("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=El(String(r)):typeof r=="bigint"&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=El(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n},RangeError);function El(e){let t="",r=e.length,n=e[0]==="-"?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function Sp(e,t,r){Sr(t,"offset"),(e[t]===void 0||e[t+r]===void 0)&&an(t,e.length-(r+1))}function Ll(e,t,r,n,i,a){if(e>r||e<t){let o=typeof t=="bigint"?"n":"",s;throw a>3?t===0||t===BigInt(0)?s=`>= 0${o} and < 2${o} ** ${(a+1)*8}${o}`:s=`>= -(2${o} ** ${(a+1)*8-1}${o}) and < 2 ** ${(a+1)*8-1}${o}`:s=`>= ${t}${o} and <= ${r}${o}`,new Er.ERR_OUT_OF_RANGE("value",s,e)}Sp(n,i,a)}function Sr(e,t){if(typeof e!="number")throw new Er.ERR_INVALID_ARG_TYPE(t,"number",e)}function an(e,t,r){throw Math.floor(e)!==e?(Sr(e,r),new Er.ERR_OUT_OF_RANGE(r||"offset","an integer",e)):t<0?new Er.ERR_BUFFER_OUT_OF_BOUNDS:new Er.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}var Ip=/[^+/0-9A-Za-z-_]/g;function kp(e){if(e=e.split("=")[0],e=e.trim().replace(Ip,""),e.length<2)return"";for(;e.length%4!==0;)e=e+"=";return e}function va(e,t){t=t||1/0;let r,n=e.length,i=null,a=[];for(let o=0;o<n;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}else if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=(i-55296<<10|r-56320)+65536}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,r&63|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,r&63|128)}else if(r<1114112){if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,r&63|128)}else throw new Error("Invalid code point")}return a}function Tp(e){let t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r)&255);return t}function Op(e,t){let r,n,i,a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,a.push(i),a.push(n);return a}function Nl(e){return ga.toByteArray(kp(e))}function si(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function ct(e,t){return e instanceof t||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===t.name}function Sa(e){return e!==e}var Rp=function(){let e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){let n=r*16;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function At(e){return typeof BigInt>"u"?Bp:e}function Bp(){throw new Error("BigInt not supported")}});var Oa=W((Vg,Dl)=>{"use strict";function kr(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?kr=function(r){return typeof r}:kr=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},kr(e)}function Cp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Fp(e,t){return t&&(kr(t)==="object"||typeof t=="function")?t:Lp(e)}function Lp(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ka(e){return ka=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},ka(e)}function Np(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ta(e,t)}function Ta(e,t){return Ta=Object.setPrototypeOf||function(n,i){return n.__proto__=i,n},Ta(e,t)}var Ml={},Tr,Ia;function on(e,t,r){r||(r=Error);function n(a,o,s){return typeof t=="string"?t:t(a,o,s)}var i=function(a){Np(o,a);function o(s,f,l){var u;return Cp(this,o),u=Fp(this,ka(o).call(this,n(s,f,l))),u.code=e,u}return o}(r);Ml[e]=i}function Pl(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map(function(n){return String(n)}),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:r===2?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}else return"of ".concat(t," ").concat(String(e))}function Pp(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function Mp(e,t,r){return(r===void 0||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}function Dp(e,t,r){return typeof r!="number"&&(r=0),r+t.length>e.length?!1:e.indexOf(t,r)!==-1}on("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError);on("ERR_INVALID_ARG_TYPE",function(e,t,r){Tr===void 0&&(Tr=Or()),Tr(typeof e=="string","'name' must be a string");var n;typeof t=="string"&&Pp(t,"not ")?(n="must not be",t=t.replace(/^not /,"")):n="must be";var i;if(Mp(e," argument"))i="The ".concat(e," ").concat(n," ").concat(Pl(t,"type"));else{var a=Dp(e,".")?"property":"argument";i='The "'.concat(e,'" ').concat(a," ").concat(n," ").concat(Pl(t,"type"))}return i+=". Received type ".concat(kr(r)),i},TypeError);on("ERR_INVALID_ARG_VALUE",function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"is invalid";Ia===void 0&&(Ia=De());var n=Ia.inspect(t);return n.length>128&&(n="".concat(n.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(r,". Received ").concat(n)},TypeError,RangeError);on("ERR_INVALID_RETURN_VALUE",function(e,t,r){var n;return r&&r.constructor&&r.constructor.name?n="instance of ".concat(r.constructor.name):n="type ".concat(kr(r)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(n,".")},TypeError);on("ERR_MISSING_ARGS",function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];Tr===void 0&&(Tr=Or()),Tr(t.length>0,"At least one arg needs to be specified");var n="The ",i=t.length;switch(t=t.map(function(a){return'"'.concat(a,'"')}),i){case 1:n+="".concat(t[0]," argument");break;case 2:n+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:n+=t.slice(0,i-1).join(", "),n+=", and ".concat(t[i-1]," arguments");break}return"".concat(n," must be specified")},TypeError);Dl.exports.codes=Ml});var Zl=W((Hg,Gl)=>{"use strict";function zp(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{},n=Object.keys(r);typeof Object.getOwnPropertySymbols=="function"&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(i){return Object.getOwnPropertyDescriptor(r,i).enumerable}))),n.forEach(function(i){Up(e,i,r[i])})}return e}function Up(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function jp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function zl(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Gp(e,t,r){return t&&zl(e.prototype,t),r&&zl(e,r),e}function Rr(e,t){return t&&(He(t)==="object"||typeof t=="function")?t:Ra(e)}function Ra(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Zp(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&un(e,t)}function Ba(e){var t=typeof Map=="function"?new Map:void 0;return Ba=function(n){if(n===null||!Vp(n))return n;if(typeof n!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t<"u"){if(t.has(n))return t.get(n);t.set(n,i)}function i(){return fi(n,arguments,St(this).constructor)}return i.prototype=Object.create(n.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),un(i,n)},Ba(e)}function qp(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch{return!1}}function fi(e,t,r){return qp()?fi=Reflect.construct:fi=function(i,a,o){var s=[null];s.push.apply(s,a);var f=Function.bind.apply(i,s),l=new f;return o&&un(l,o.prototype),l},fi.apply(null,arguments)}function Vp(e){return Function.toString.call(e).indexOf("[native code]")!==-1}function un(e,t){return un=Object.setPrototypeOf||function(n,i){return n.__proto__=i,n},un(e,t)}function St(e){return St=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},St(e)}function He(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?He=function(r){return typeof r}:He=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},He(e)}var Hp=De(),Ca=Hp.inspect,Wp=Oa(),Yp=Wp.codes.ERR_INVALID_ARG_TYPE;function Ul(e,t,r){return(r===void 0||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}function $p(e,t){if(t=Math.floor(t),e.length==0||t==0)return"";var r=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+=e.substring(0,r-e.length),e}var tt="",sn="",ln="",Ie="",Yt={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},Kp=10;function jl(e){var t=Object.keys(e),r=Object.create(Object.getPrototypeOf(e));return t.forEach(function(n){r[n]=e[n]}),Object.defineProperty(r,"message",{value:e.message}),r}function fn(e){return Ca(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function Xp(e,t,r){var n="",i="",a=0,o="",s=!1,f=fn(e),l=f.split(`
`),u=fn(t).split(`
`),c=0,p="";if(r==="strictEqual"&&He(e)==="object"&&He(t)==="object"&&e!==null&&t!==null&&(r="strictEqualObject"),l.length===1&&u.length===1&&l[0]!==u[0]){var h=l[0].length+u[0].length;if(h<=Kp){if((He(e)!=="object"||e===null)&&(He(t)!=="object"||t===null)&&(e!==0||t!==0))return"".concat(Yt[r],`

`)+"".concat(l[0]," !== ").concat(u[0],`
`)}else if(r!=="strictEqualObject"){var y=process.stderr&&process.stderr.isTTY?process.stderr.columns:80;if(h<y){for(;l[0][c]===u[0][c];)c++;c>2&&(p=`
  `.concat($p(" ",c),"^"),c=0)}}}for(var m=l[l.length-1],g=u[u.length-1];m===g&&(c++<2?o=`
  `.concat(m).concat(o):n=m,l.pop(),u.pop(),!(l.length===0||u.length===0));)m=l[l.length-1],g=u[u.length-1];var b=Math.max(l.length,u.length);if(b===0){var A=f.split(`
`);if(A.length>30)for(A[26]="".concat(tt,"...").concat(Ie);A.length>27;)A.pop();return"".concat(Yt.notIdentical,`

`).concat(A.join(`
`),`
`)}c>3&&(o=`
`.concat(tt,"...").concat(Ie).concat(o),s=!0),n!==""&&(o=`
  `.concat(n).concat(o),n="");var x=0,T=Yt[r]+`
`.concat(sn,"+ actual").concat(Ie," ").concat(ln,"- expected").concat(Ie),S=" ".concat(tt,"...").concat(Ie," Lines skipped");for(c=0;c<b;c++){var L=c-a;if(l.length<c+1)L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(u[c-2]),x++),i+=`
  `.concat(u[c-1]),x++),a=c,n+=`
`.concat(ln,"-").concat(Ie," ").concat(u[c]),x++;else if(u.length<c+1)L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(l[c-2]),x++),i+=`
  `.concat(l[c-1]),x++),a=c,i+=`
`.concat(sn,"+").concat(Ie," ").concat(l[c]),x++;else{var k=u[c],F=l[c],Z=F!==k&&(!Ul(F,",")||F.slice(0,-1)!==k);Z&&Ul(k,",")&&k.slice(0,-1)===F&&(Z=!1,F+=","),Z?(L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(l[c-2]),x++),i+=`
  `.concat(l[c-1]),x++),a=c,i+=`
`.concat(sn,"+").concat(Ie," ").concat(F),n+=`
`.concat(ln,"-").concat(Ie," ").concat(k),x+=2):(i+=n,n="",(L===1||c===0)&&(i+=`
  `.concat(F),x++))}if(x>20&&c<b-2)return"".concat(T).concat(S,`
`).concat(i,`
`).concat(tt,"...").concat(Ie).concat(n,`
`)+"".concat(tt,"...").concat(Ie)}return"".concat(T).concat(s?S:"",`
`).concat(i).concat(n).concat(o).concat(p)}var Jp=function(e){Zp(t,e);function t(r){var n;if(jp(this,t),He(r)!=="object"||r===null)throw new Yp("options","Object",r);var i=r.message,a=r.operator,o=r.stackStartFn,s=r.actual,f=r.expected,l=Error.stackTraceLimit;if(Error.stackTraceLimit=0,i!=null)n=Rr(this,St(t).call(this,String(i)));else if(process.stderr&&process.stderr.isTTY&&(process.stderr&&process.stderr.getColorDepth&&process.stderr.getColorDepth()!==1?(tt="\x1B[34m",sn="\x1B[32m",Ie="\x1B[39m",ln="\x1B[31m"):(tt="",sn="",Ie="",ln="")),He(s)==="object"&&s!==null&&He(f)==="object"&&f!==null&&"stack"in s&&s instanceof Error&&"stack"in f&&f instanceof Error&&(s=jl(s),f=jl(f)),a==="deepStrictEqual"||a==="strictEqual")n=Rr(this,St(t).call(this,Xp(s,f,a)));else if(a==="notDeepStrictEqual"||a==="notStrictEqual"){var u=Yt[a],c=fn(s).split(`
`);if(a==="notStrictEqual"&&He(s)==="object"&&s!==null&&(u=Yt.notStrictEqualObject),c.length>30)for(c[26]="".concat(tt,"...").concat(Ie);c.length>27;)c.pop();c.length===1?n=Rr(this,St(t).call(this,"".concat(u," ").concat(c[0]))):n=Rr(this,St(t).call(this,"".concat(u,`

`).concat(c.join(`
`),`
`)))}else{var p=fn(s),h="",y=Yt[a];a==="notDeepEqual"||a==="notEqual"?(p="".concat(Yt[a],`

`).concat(p),p.length>1024&&(p="".concat(p.slice(0,1021),"..."))):(h="".concat(fn(f)),p.length>512&&(p="".concat(p.slice(0,509),"...")),h.length>512&&(h="".concat(h.slice(0,509),"...")),a==="deepEqual"||a==="equal"?p="".concat(y,`

`).concat(p,`

should equal

`):h=" ".concat(a," ").concat(h)),n=Rr(this,St(t).call(this,"".concat(p).concat(h)))}return Error.stackTraceLimit=l,n.generatedMessage=!i,Object.defineProperty(Ra(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=s,n.expected=f,n.operator=a,Error.captureStackTrace&&Error.captureStackTrace(Ra(n),o),n.stack,n.name="AssertionError",Rr(n)}return Gp(t,[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:Ca.custom,value:function(n,i){return Ca(this,zp({},i,{customInspect:!1,depth:0}))}}]),t}(Ba(Error));Gl.exports=Jp});var Hl=W((Wg,Vl)=>{"use strict";function ql(e,t){if(e==null)throw new TypeError("Cannot convert first argument to object");for(var r=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(i!=null)for(var a=Object.keys(Object(i)),o=0,s=a.length;o<s;o++){var f=a[o],l=Object.getOwnPropertyDescriptor(i,f);l!==void 0&&l.enumerable&&(r[f]=i[f])}}return r}function Qp(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:ql})}Vl.exports={assign:ql,polyfill:Qp}});var Fa=W((Yg,Yl)=>{"use strict";var Wl=Object.prototype.toString;Yl.exports=function(t){var r=Wl.call(t),n=r==="[object Arguments]";return n||(n=r!=="[object Array]"&&t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&Wl.call(t.callee)==="[object Function]"),n}});var nf=W(($g,rf)=>{"use strict";var tf;Object.keys||(cn=Object.prototype.hasOwnProperty,La=Object.prototype.toString,$l=Fa(),Na=Object.prototype.propertyIsEnumerable,Kl=!Na.call({toString:null},"toString"),Xl=Na.call(function(){},"prototype"),hn=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],ui=function(e){var t=e.constructor;return t&&t.prototype===e},Jl={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},Ql=function(){if(typeof window>"u")return!1;for(var e in window)try{if(!Jl["$"+e]&&cn.call(window,e)&&window[e]!==null&&typeof window[e]=="object")try{ui(window[e])}catch{return!0}}catch{return!0}return!1}(),ef=function(e){if(typeof window>"u"||!Ql)return ui(e);try{return ui(e)}catch{return!1}},tf=function(t){var r=t!==null&&typeof t=="object",n=La.call(t)==="[object Function]",i=$l(t),a=r&&La.call(t)==="[object String]",o=[];if(!r&&!n&&!i)throw new TypeError("Object.keys called on a non-object");var s=Xl&&n;if(a&&t.length>0&&!cn.call(t,0))for(var f=0;f<t.length;++f)o.push(String(f));if(i&&t.length>0)for(var l=0;l<t.length;++l)o.push(String(l));else for(var u in t)!(s&&u==="prototype")&&cn.call(t,u)&&o.push(String(u));if(Kl)for(var c=ef(t),p=0;p<hn.length;++p)!(c&&hn[p]==="constructor")&&cn.call(t,hn[p])&&o.push(hn[p]);return o});var cn,La,$l,Na,Kl,Xl,hn,ui,Jl,Ql,ef;rf.exports=tf});var lf=W((Kg,sf)=>{"use strict";var e1=Array.prototype.slice,t1=Fa(),af=Object.keys,ci=af?function(t){return af(t)}:nf(),of=Object.keys;ci.shim=function(){if(Object.keys){var t=function(){var r=Object.keys(arguments);return r&&r.length===arguments.length}(1,2);t||(Object.keys=function(n){return t1(n)?of(e1.call(n)):of(n)})}else Object.keys=ci;return Object.keys||ci};sf.exports=ci});var uf=W((Xg,ff)=>{"use strict";var r1=Xr(),Pa=r1("%Object.defineProperty%",!0),Ma=function(){if(Pa)try{return Pa({},"a",{value:1}),!0}catch{return!1}return!1};Ma.hasArrayLengthDefineBug=function(){if(!Ma())return null;try{return Pa([],"length",{value:1}).length!==1}catch{return!0}};ff.exports=Ma});var dn=W((Jg,pf)=>{"use strict";var n1=lf(),i1=typeof Symbol=="function"&&typeof Symbol("foo")=="symbol",a1=Object.prototype.toString,o1=Array.prototype.concat,cf=Object.defineProperty,s1=function(e){return typeof e=="function"&&a1.call(e)==="[object Function]"},l1=uf()(),hf=cf&&l1,f1=function(e,t,r,n){if(t in e){if(n===!0){if(e[t]===r)return}else if(!s1(n)||!n())return}hf?cf(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r},df=function(e,t){var r=arguments.length>2?arguments[2]:{},n=n1(t);i1&&(n=o1.call(n,Object.getOwnPropertySymbols(t)));for(var i=0;i<n.length;i+=1)f1(e,n[i],t[n[i]],r[n[i]])};df.supportsDescriptors=!!hf;pf.exports=df});var Da=W((Qg,mf)=>{"use strict";var _f=function(e){return e!==e};mf.exports=function(t,r){return t===0&&r===0?1/t===1/r:!!(t===r||_f(t)&&_f(r))}});var za=W((e2,yf)=>{"use strict";var u1=Da();yf.exports=function(){return typeof Object.is=="function"?Object.is:u1}});var bf=W((t2,gf)=>{"use strict";var c1=za(),h1=dn();gf.exports=function(){var t=c1();return h1(Object,{is:t},{is:function(){return Object.is!==t}}),t}});var Ua=W((r2,xf)=>{"use strict";var d1=dn(),p1=Un(),_1=Da(),wf=za(),m1=bf(),vf=p1(wf(),Object);d1(vf,{getPolyfill:wf,implementation:_1,shim:m1});xf.exports=vf});var ja=W((n2,Ef)=>{"use strict";Ef.exports=function(t){return t!==t}});var Ga=W((i2,Af)=>{"use strict";var y1=ja();Af.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:y1}});var If=W((a2,Sf)=>{"use strict";var g1=dn(),b1=Ga();Sf.exports=function(){var t=b1();return g1(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}});var Rf=W((o2,Of)=>{"use strict";var w1=Un(),v1=dn(),x1=ja(),kf=Ga(),E1=If(),Tf=w1(kf(),Number);v1(Tf,{getPolyfill:kf,implementation:x1,shim:E1});Of.exports=Tf});var $f=W((s2,Yf)=>{"use strict";function Bf(e,t){return I1(e)||S1(e,t)||A1()}function A1(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function S1(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o=e[Symbol.iterator](),s;!(n=(s=o.next()).done)&&(r.push(s.value),!(t&&r.length===t));n=!0);}catch(f){i=!0,a=f}finally{try{!n&&o.return!=null&&o.return()}finally{if(i)throw a}}return r}function I1(e){if(Array.isArray(e))return e}function Ue(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Ue=function(r){return typeof r}:Ue=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},Ue(e)}var k1=/a/g.flags!==void 0,gi=function(t){var r=[];return t.forEach(function(n){return r.push(n)}),r},Cf=function(t){var r=[];return t.forEach(function(n,i){return r.push([i,n])}),r},Zf=Object.is?Object.is:Ua(),mi=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},Za=Number.isNaN?Number.isNaN:Rf();function Va(e){return e.call.bind(e)}var _n=Va(Object.prototype.hasOwnProperty),yi=Va(Object.prototype.propertyIsEnumerable),Ff=Va(Object.prototype.toString),Ce=De().types,T1=Ce.isAnyArrayBuffer,O1=Ce.isArrayBufferView,Lf=Ce.isDate,hi=Ce.isMap,Nf=Ce.isRegExp,di=Ce.isSet,R1=Ce.isNativeError,B1=Ce.isBoxedPrimitive,Pf=Ce.isNumberObject,Mf=Ce.isStringObject,Df=Ce.isBooleanObject,zf=Ce.isBigIntObject,C1=Ce.isSymbolObject,F1=Ce.isFloat32Array,L1=Ce.isFloat64Array;function N1(e){if(e.length===0||e.length>10)return!0;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r<48||r>57)return!0}return e.length===10&&e>=Math.pow(2,32)}function pi(e){return Object.keys(e).filter(N1).concat(mi(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function qf(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}var _i=void 0,P1=!0,M1=!1,qa=0,Ha=1,Vf=2,Hf=3;function D1(e,t){return k1?e.source===t.source&&e.flags===t.flags:RegExp.prototype.toString.call(e)===RegExp.prototype.toString.call(t)}function z1(e,t){if(e.byteLength!==t.byteLength)return!1;for(var r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0}function U1(e,t){return e.byteLength!==t.byteLength?!1:qf(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))===0}function j1(e,t){return e.byteLength===t.byteLength&&qf(new Uint8Array(e),new Uint8Array(t))===0}function G1(e,t){return Pf(e)?Pf(t)&&Zf(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):Mf(e)?Mf(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):Df(e)?Df(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):zf(e)?zf(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):C1(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}function We(e,t,r,n){if(e===t)return e!==0?!0:r?Zf(e,t):!0;if(r){if(Ue(e)!=="object")return typeof e=="number"&&Za(e)&&Za(t);if(Ue(t)!=="object"||e===null||t===null||Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(e===null||Ue(e)!=="object")return t===null||Ue(t)!=="object"?e==t:!1;if(t===null||Ue(t)!=="object")return!1}var i=Ff(e),a=Ff(t);if(i!==a)return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var o=pi(e,_i),s=pi(t,_i);return o.length!==s.length?!1:pn(e,t,r,n,Ha,o)}if(i==="[object Object]"&&(!hi(e)&&hi(t)||!di(e)&&di(t)))return!1;if(Lf(e)){if(!Lf(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(Nf(e)){if(!Nf(t)||!D1(e,t))return!1}else if(R1(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else if(O1(e)){if(!r&&(F1(e)||L1(e))){if(!z1(e,t))return!1}else if(!U1(e,t))return!1;var f=pi(e,_i),l=pi(t,_i);return f.length!==l.length?!1:pn(e,t,r,n,qa,f)}else{if(di(e))return!di(t)||e.size!==t.size?!1:pn(e,t,r,n,Vf);if(hi(e))return!hi(t)||e.size!==t.size?!1:pn(e,t,r,n,Hf);if(T1(e)){if(!j1(e,t))return!1}else if(B1(e)&&!G1(e,t))return!1}return pn(e,t,r,n,qa)}function Uf(e,t){return t.filter(function(r){return yi(e,r)})}function pn(e,t,r,n,i,a){if(arguments.length===5){a=Object.keys(e);var o=Object.keys(t);if(a.length!==o.length)return!1}for(var s=0;s<a.length;s++)if(!_n(t,a[s]))return!1;if(r&&arguments.length===5){var f=mi(e);if(f.length!==0){var l=0;for(s=0;s<f.length;s++){var u=f[s];if(yi(e,u)){if(!yi(t,u))return!1;a.push(u),l++}else if(yi(t,u))return!1}var c=mi(t);if(f.length!==c.length&&Uf(t,c).length!==l)return!1}else{var p=mi(t);if(p.length!==0&&Uf(t,p).length!==0)return!1}}if(a.length===0&&(i===qa||i===Ha&&e.length===0||e.size===0))return!0;if(n===void 0)n={val1:new Map,val2:new Map,position:0};else{var h=n.val1.get(e);if(h!==void 0){var y=n.val2.get(t);if(y!==void 0)return h===y}n.position++}n.val1.set(e,n.position),n.val2.set(t,n.position);var m=W1(e,t,r,a,n,i);return n.val1.delete(e),n.val2.delete(t),m}function jf(e,t,r,n){for(var i=gi(e),a=0;a<i.length;a++){var o=i[a];if(We(t,o,r,n))return e.delete(o),!0}return!1}function Wf(e){switch(Ue(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(Za(e))return!1}return!0}function Z1(e,t,r){var n=Wf(r);return n??(t.has(n)&&!e.has(n))}function q1(e,t,r,n,i){var a=Wf(r);if(a!=null)return a;var o=t.get(a);return o===void 0&&!t.has(a)||!We(n,o,!1,i)?!1:!e.has(a)&&We(n,o,!1,i)}function V1(e,t,r,n){for(var i=null,a=gi(e),o=0;o<a.length;o++){var s=a[o];if(Ue(s)==="object"&&s!==null)i===null&&(i=new Set),i.add(s);else if(!t.has(s)){if(r||!Z1(e,t,s))return!1;i===null&&(i=new Set),i.add(s)}}if(i!==null){for(var f=gi(t),l=0;l<f.length;l++){var u=f[l];if(Ue(u)==="object"&&u!==null){if(!jf(i,u,r,n))return!1}else if(!r&&!e.has(u)&&!jf(i,u,r,n))return!1}return i.size===0}return!0}function Gf(e,t,r,n,i,a){for(var o=gi(e),s=0;s<o.length;s++){var f=o[s];if(We(r,f,i,a)&&We(n,t.get(f),i,a))return e.delete(f),!0}return!1}function H1(e,t,r,n){for(var i=null,a=Cf(e),o=0;o<a.length;o++){var s=Bf(a[o],2),f=s[0],l=s[1];if(Ue(f)==="object"&&f!==null)i===null&&(i=new Set),i.add(f);else{var u=t.get(f);if(u===void 0&&!t.has(f)||!We(l,u,r,n)){if(r||!q1(e,t,f,l,n))return!1;i===null&&(i=new Set),i.add(f)}}}if(i!==null){for(var c=Cf(t),p=0;p<c.length;p++){var h=Bf(c[p],2),f=h[0],y=h[1];if(Ue(f)==="object"&&f!==null){if(!Gf(i,e,f,y,r,n))return!1}else if(!r&&(!e.has(f)||!We(e.get(f),y,!1,n))&&!Gf(i,e,f,y,!1,n))return!1}return i.size===0}return!0}function W1(e,t,r,n,i,a){var o=0;if(a===Vf){if(!V1(e,t,r,i))return!1}else if(a===Hf){if(!H1(e,t,r,i))return!1}else if(a===Ha)for(;o<e.length;o++)if(_n(e,o)){if(!_n(t,o)||!We(e[o],t[o],r,i))return!1}else{if(_n(t,o))return!1;for(var s=Object.keys(e);o<s.length;o++){var f=s[o];if(!_n(t,f)||!We(e[f],t[f],r,i))return!1}return s.length===Object.keys(t).length}for(o=0;o<n.length;o++){var l=n[o];if(!We(e[l],t[l],r,i))return!1}return!0}function Y1(e,t){return We(e,t,M1)}function $1(e,t){return We(e,t,P1)}Yf.exports={isDeepEqual:Y1,isDeepStrictEqual:$1}});var Or=W((l2,cu)=>{"use strict";function It(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?It=function(r){return typeof r}:It=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},It(e)}function K1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var X1=Oa(),yn=X1.codes,Kf=yn.ERR_AMBIGUOUS_ARGUMENT,mn=yn.ERR_INVALID_ARG_TYPE,J1=yn.ERR_INVALID_ARG_VALUE,Q1=yn.ERR_INVALID_RETURN_VALUE,Tt=yn.ERR_MISSING_ARGS,$t=Zl(),e_=De(),t_=e_.inspect,eu=De().types,r_=eu.isPromise,Wa=eu.isRegExp,n_=Object.assign?Object.assign:Hl().assign,tu=Object.is?Object.is:Ua(),kt,bi;function gn(){var e=$f();kt=e.isDeepEqual,bi=e.isDeepStrictEqual}var Xf=!1,pe=cu.exports=Ya,wi={};function rt(e){throw e.message instanceof Error?e.message:new $t(e)}function ru(e,t,r,n,i){var a=arguments.length,o;if(a===0)o="Failed";else if(a===1)r=e,e=void 0;else{if(Xf===!1){Xf=!0;var s=process.emitWarning?process.emitWarning:console.warn.bind(console);s("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}a===2&&(n="!=")}if(r instanceof Error)throw r;var f={actual:e,expected:t,operator:n===void 0?"fail":n,stackStartFn:i||ru};r!==void 0&&(f.message=r);var l=new $t(f);throw o&&(l.message=o,l.generatedMessage=!0),l}pe.fail=ru;pe.AssertionError=$t;function nu(e,t,r,n){if(!r){var i=!1;if(t===0)i=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var a=new $t({actual:r,expected:!0,message:n,operator:"==",stackStartFn:e});throw a.generatedMessage=i,a}}function Ya(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];nu.apply(void 0,[Ya,t.length].concat(t))}pe.ok=Ya;pe.equal=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");t!=r&&rt({actual:t,expected:r,message:n,operator:"==",stackStartFn:e})};pe.notEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");t==r&&rt({actual:t,expected:r,message:n,operator:"!=",stackStartFn:e})};pe.deepEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&gn(),kt(t,r)||rt({actual:t,expected:r,message:n,operator:"deepEqual",stackStartFn:e})};pe.notDeepEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&gn(),kt(t,r)&&rt({actual:t,expected:r,message:n,operator:"notDeepEqual",stackStartFn:e})};pe.deepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&gn(),bi(t,r)||rt({actual:t,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:e})};pe.notDeepStrictEqual=iu;function iu(e,t,r){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&gn(),bi(e,t)&&rt({actual:e,expected:t,message:r,operator:"notDeepStrictEqual",stackStartFn:iu})}pe.strictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");tu(t,r)||rt({actual:t,expected:r,message:n,operator:"strictEqual",stackStartFn:e})};pe.notStrictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");tu(t,r)&&rt({actual:t,expected:r,message:n,operator:"notStrictEqual",stackStartFn:e})};var Jf=function e(t,r,n){var i=this;K1(this,e),r.forEach(function(a){a in t&&(n!==void 0&&typeof n[a]=="string"&&Wa(t[a])&&t[a].test(n[a])?i[a]=n[a]:i[a]=t[a])})};function i_(e,t,r,n,i,a){if(!(r in e)||!bi(e[r],t[r])){if(!n){var o=new Jf(e,i),s=new Jf(t,i,e),f=new $t({actual:o,expected:s,operator:"deepStrictEqual",stackStartFn:a});throw f.actual=e,f.expected=t,f.operator=a.name,f}rt({actual:e,expected:t,message:n,operator:a.name,stackStartFn:a})}}function au(e,t,r,n){if(typeof t!="function"){if(Wa(t))return t.test(e);if(arguments.length===2)throw new mn("expected",["Function","RegExp"],t);if(It(e)!=="object"||e===null){var i=new $t({actual:e,expected:t,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var a=Object.keys(t);if(t instanceof Error)a.push("name","message");else if(a.length===0)throw new J1("error",t,"may not be an empty object");return kt===void 0&&gn(),a.forEach(function(o){typeof e[o]=="string"&&Wa(t[o])&&t[o].test(e[o])||i_(e,t,o,r,a,n)}),!0}return t.prototype!==void 0&&e instanceof t?!0:Error.isPrototypeOf(t)?!1:t.call({},e)===!0}function ou(e){if(typeof e!="function")throw new mn("fn","Function",e);try{e()}catch(t){return t}return wi}function Qf(e){return r_(e)||e!==null&&It(e)==="object"&&typeof e.then=="function"&&typeof e.catch=="function"}function su(e){return Promise.resolve().then(function(){var t;if(typeof e=="function"){if(t=e(),!Qf(t))throw new Q1("instance of Promise","promiseFn",t)}else if(Qf(e))t=e;else throw new mn("promiseFn",["Function","Promise"],e);return Promise.resolve().then(function(){return t}).then(function(){return wi}).catch(function(r){return r})})}function lu(e,t,r,n){if(typeof r=="string"){if(arguments.length===4)throw new mn("error",["Object","Error","Function","RegExp"],r);if(It(t)==="object"&&t!==null){if(t.message===r)throw new Kf("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===r)throw new Kf("error/message",'The error "'.concat(t,'" is identical to the message.'));n=r,r=void 0}else if(r!=null&&It(r)!=="object"&&typeof r!="function")throw new mn("error",["Object","Error","Function","RegExp"],r);if(t===wi){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a=e.name==="rejects"?"rejection":"exception";rt({actual:void 0,expected:r,operator:e.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:e})}if(r&&!au(t,r,n,e))throw t}function fu(e,t,r,n){if(t!==wi){if(typeof r=="string"&&(n=r,r=void 0),!r||au(t,r)){var i=n?": ".concat(n):".",a=e.name==="doesNotReject"?"rejection":"exception";rt({actual:t,expected:r,operator:e.name,message:"Got unwanted ".concat(a).concat(i,`
`)+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}pe.throws=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];lu.apply(void 0,[e,ou(t)].concat(n))};pe.rejects=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return su(t).then(function(a){return lu.apply(void 0,[e,a].concat(n))})};pe.doesNotThrow=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];fu.apply(void 0,[e,ou(t)].concat(n))};pe.doesNotReject=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return su(t).then(function(a){return fu.apply(void 0,[e,a].concat(n))})};pe.ifError=function e(t){if(t!=null){var r="ifError got unwanted exception: ";It(t)==="object"&&typeof t.message=="string"?t.message.length===0&&t.constructor?r+=t.constructor.name:r+=t.message:r+=t_(t);var n=new $t({actual:t,expected:null,operator:"ifError",message:r,stackStartFn:e}),i=t.stack;if(typeof i=="string"){var a=i.split(`
`);a.shift();for(var o=n.stack.split(`
`),s=0;s<a.length;s++){var f=o.indexOf(a[s]);if(f!==-1){o=o.slice(0,f);break}}n.stack="".concat(o.join(`
`),`
`).concat(a.join(`
`))}throw n}};function uu(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];nu.apply(void 0,[uu,t.length].concat(t))}pe.strict=n_(uu,pe,{equal:pe.strictEqual,deepEqual:pe.deepStrictEqual,notEqual:pe.notStrictEqual,notDeepEqual:pe.notDeepStrictEqual});pe.strict.strict=pe.strict});var du=W((f2,hu)=>{"use strict";function a_(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}hu.exports=a_});var bn=W(Fe=>{"use strict";var o_=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function s_(e,t){return Object.prototype.hasOwnProperty.call(e,t)}Fe.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(typeof r!="object")throw new TypeError(r+"must be non-object");for(var n in r)s_(r,n)&&(e[n]=r[n])}}return e};Fe.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var l_={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray){e.set(t.subarray(r,r+n),i);return}for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){var t,r,n,i,a,o;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),i=0,t=0,r=e.length;t<r;t++)a=e[t],o.set(a,i),i+=a.length;return o}},f_={arraySet:function(e,t,r,n,i){for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){return[].concat.apply([],e)}};Fe.setTyped=function(e){e?(Fe.Buf8=Uint8Array,Fe.Buf16=Uint16Array,Fe.Buf32=Int32Array,Fe.assign(Fe,l_)):(Fe.Buf8=Array,Fe.Buf16=Array,Fe.Buf32=Array,Fe.assign(Fe,f_))};Fe.setTyped(o_)});var Pu=W(Fr=>{"use strict";var u_=bn(),c_=4,pu=0,_u=1,h_=2;function Cr(e){for(var t=e.length;--t>=0;)e[t]=0}var d_=0,vu=1,p_=2,__=3,m_=258,to=29,Sn=256,vn=Sn+1+to,Br=30,ro=19,xu=2*vn+1,Kt=15,$a=16,y_=7,no=256,Eu=16,Au=17,Su=18,Qa=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],vi=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],g_=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Iu=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],b_=512,vt=new Array((vn+2)*2);Cr(vt);var wn=new Array(Br*2);Cr(wn);var xn=new Array(b_);Cr(xn);var En=new Array(m_-__+1);Cr(En);var io=new Array(to);Cr(io);var xi=new Array(Br);Cr(xi);function Ka(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}var ku,Tu,Ou;function Xa(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function Ru(e){return e<256?xn[e]:xn[256+(e>>>7)]}function An(e,t){e.pending_buf[e.pending++]=t&255,e.pending_buf[e.pending++]=t>>>8&255}function Me(e,t,r){e.bi_valid>$a-r?(e.bi_buf|=t<<e.bi_valid&65535,An(e,e.bi_buf),e.bi_buf=t>>$a-e.bi_valid,e.bi_valid+=r-$a):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function ht(e,t,r){Me(e,r[t*2],r[t*2+1])}function Bu(e,t){var r=0;do r|=e&1,e>>>=1,r<<=1;while(--t>0);return r>>>1}function w_(e){e.bi_valid===16?(An(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)}function v_(e,t){var r=t.dyn_tree,n=t.max_code,i=t.stat_desc.static_tree,a=t.stat_desc.has_stree,o=t.stat_desc.extra_bits,s=t.stat_desc.extra_base,f=t.stat_desc.max_length,l,u,c,p,h,y,m=0;for(p=0;p<=Kt;p++)e.bl_count[p]=0;for(r[e.heap[e.heap_max]*2+1]=0,l=e.heap_max+1;l<xu;l++)u=e.heap[l],p=r[r[u*2+1]*2+1]+1,p>f&&(p=f,m++),r[u*2+1]=p,!(u>n)&&(e.bl_count[p]++,h=0,u>=s&&(h=o[u-s]),y=r[u*2],e.opt_len+=y*(p+h),a&&(e.static_len+=y*(i[u*2+1]+h)));if(m!==0){do{for(p=f-1;e.bl_count[p]===0;)p--;e.bl_count[p]--,e.bl_count[p+1]+=2,e.bl_count[f]--,m-=2}while(m>0);for(p=f;p!==0;p--)for(u=e.bl_count[p];u!==0;)c=e.heap[--l],!(c>n)&&(r[c*2+1]!==p&&(e.opt_len+=(p-r[c*2+1])*r[c*2],r[c*2+1]=p),u--)}}function Cu(e,t,r){var n=new Array(Kt+1),i=0,a,o;for(a=1;a<=Kt;a++)n[a]=i=i+r[a-1]<<1;for(o=0;o<=t;o++){var s=e[o*2+1];s!==0&&(e[o*2]=Bu(n[s]++,s))}}function x_(){var e,t,r,n,i,a=new Array(Kt+1);for(r=0,n=0;n<to-1;n++)for(io[n]=r,e=0;e<1<<Qa[n];e++)En[r++]=n;for(En[r-1]=n,i=0,n=0;n<16;n++)for(xi[n]=i,e=0;e<1<<vi[n];e++)xn[i++]=n;for(i>>=7;n<Br;n++)for(xi[n]=i<<7,e=0;e<1<<vi[n]-7;e++)xn[256+i++]=n;for(t=0;t<=Kt;t++)a[t]=0;for(e=0;e<=143;)vt[e*2+1]=8,e++,a[8]++;for(;e<=255;)vt[e*2+1]=9,e++,a[9]++;for(;e<=279;)vt[e*2+1]=7,e++,a[7]++;for(;e<=287;)vt[e*2+1]=8,e++,a[8]++;for(Cu(vt,vn+1,a),e=0;e<Br;e++)wn[e*2+1]=5,wn[e*2]=Bu(e,5);ku=new Ka(vt,Qa,Sn+1,vn,Kt),Tu=new Ka(wn,vi,0,Br,Kt),Ou=new Ka(new Array(0),g_,0,ro,y_)}function Fu(e){var t;for(t=0;t<vn;t++)e.dyn_ltree[t*2]=0;for(t=0;t<Br;t++)e.dyn_dtree[t*2]=0;for(t=0;t<ro;t++)e.bl_tree[t*2]=0;e.dyn_ltree[no*2]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Lu(e){e.bi_valid>8?An(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function E_(e,t,r,n){Lu(e),n&&(An(e,r),An(e,~r)),u_.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}function mu(e,t,r,n){var i=t*2,a=r*2;return e[i]<e[a]||e[i]===e[a]&&n[t]<=n[r]}function Ja(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&mu(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!mu(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function yu(e,t,r){var n,i,a=0,o,s;if(e.last_lit!==0)do n=e.pending_buf[e.d_buf+a*2]<<8|e.pending_buf[e.d_buf+a*2+1],i=e.pending_buf[e.l_buf+a],a++,n===0?ht(e,i,t):(o=En[i],ht(e,o+Sn+1,t),s=Qa[o],s!==0&&(i-=io[o],Me(e,i,s)),n--,o=Ru(n),ht(e,o,r),s=vi[o],s!==0&&(n-=xi[o],Me(e,n,s)));while(a<e.last_lit);ht(e,no,t)}function eo(e,t){var r=t.dyn_tree,n=t.stat_desc.static_tree,i=t.stat_desc.has_stree,a=t.stat_desc.elems,o,s,f=-1,l;for(e.heap_len=0,e.heap_max=xu,o=0;o<a;o++)r[o*2]!==0?(e.heap[++e.heap_len]=f=o,e.depth[o]=0):r[o*2+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=f<2?++f:0,r[l*2]=1,e.depth[l]=0,e.opt_len--,i&&(e.static_len-=n[l*2+1]);for(t.max_code=f,o=e.heap_len>>1;o>=1;o--)Ja(e,r,o);l=a;do o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Ja(e,r,1),s=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=s,r[l*2]=r[o*2]+r[s*2],e.depth[l]=(e.depth[o]>=e.depth[s]?e.depth[o]:e.depth[s])+1,r[o*2+1]=r[s*2+1]=l,e.heap[1]=l++,Ja(e,r,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],v_(e,t),Cu(r,f,e.bl_count)}function gu(e,t,r){var n,i=-1,a,o=t[0*2+1],s=0,f=7,l=4;for(o===0&&(f=138,l=3),t[(r+1)*2+1]=65535,n=0;n<=r;n++)a=o,o=t[(n+1)*2+1],!(++s<f&&a===o)&&(s<l?e.bl_tree[a*2]+=s:a!==0?(a!==i&&e.bl_tree[a*2]++,e.bl_tree[Eu*2]++):s<=10?e.bl_tree[Au*2]++:e.bl_tree[Su*2]++,s=0,i=a,o===0?(f=138,l=3):a===o?(f=6,l=3):(f=7,l=4))}function bu(e,t,r){var n,i=-1,a,o=t[0*2+1],s=0,f=7,l=4;for(o===0&&(f=138,l=3),n=0;n<=r;n++)if(a=o,o=t[(n+1)*2+1],!(++s<f&&a===o)){if(s<l)do ht(e,a,e.bl_tree);while(--s!==0);else a!==0?(a!==i&&(ht(e,a,e.bl_tree),s--),ht(e,Eu,e.bl_tree),Me(e,s-3,2)):s<=10?(ht(e,Au,e.bl_tree),Me(e,s-3,3)):(ht(e,Su,e.bl_tree),Me(e,s-11,7));s=0,i=a,o===0?(f=138,l=3):a===o?(f=6,l=3):(f=7,l=4)}}function A_(e){var t;for(gu(e,e.dyn_ltree,e.l_desc.max_code),gu(e,e.dyn_dtree,e.d_desc.max_code),eo(e,e.bl_desc),t=ro-1;t>=3&&e.bl_tree[Iu[t]*2+1]===0;t--);return e.opt_len+=3*(t+1)+5+5+4,t}function S_(e,t,r,n){var i;for(Me(e,t-257,5),Me(e,r-1,5),Me(e,n-4,4),i=0;i<n;i++)Me(e,e.bl_tree[Iu[i]*2+1],3);bu(e,e.dyn_ltree,t-1),bu(e,e.dyn_dtree,r-1)}function I_(e){var t=4093624447,r;for(r=0;r<=31;r++,t>>>=1)if(t&1&&e.dyn_ltree[r*2]!==0)return pu;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return _u;for(r=32;r<Sn;r++)if(e.dyn_ltree[r*2]!==0)return _u;return pu}var wu=!1;function k_(e){wu||(x_(),wu=!0),e.l_desc=new Xa(e.dyn_ltree,ku),e.d_desc=new Xa(e.dyn_dtree,Tu),e.bl_desc=new Xa(e.bl_tree,Ou),e.bi_buf=0,e.bi_valid=0,Fu(e)}function Nu(e,t,r,n){Me(e,(d_<<1)+(n?1:0),3),E_(e,t,r,!0)}function T_(e){Me(e,vu<<1,3),ht(e,no,vt),w_(e)}function O_(e,t,r,n){var i,a,o=0;e.level>0?(e.strm.data_type===h_&&(e.strm.data_type=I_(e)),eo(e,e.l_desc),eo(e,e.d_desc),o=A_(e),i=e.opt_len+3+7>>>3,a=e.static_len+3+7>>>3,a<=i&&(i=a)):i=a=r+5,r+4<=i&&t!==-1?Nu(e,t,r,n):e.strategy===c_||a===i?(Me(e,(vu<<1)+(n?1:0),3),yu(e,vt,wn)):(Me(e,(p_<<1)+(n?1:0),3),S_(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),yu(e,e.dyn_ltree,e.dyn_dtree)),Fu(e),n&&Lu(e)}function R_(e,t,r){return e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255,e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255,e.pending_buf[e.l_buf+e.last_lit]=r&255,e.last_lit++,t===0?e.dyn_ltree[r*2]++:(e.matches++,t--,e.dyn_ltree[(En[r]+Sn+1)*2]++,e.dyn_dtree[Ru(t)*2]++),e.last_lit===e.lit_bufsize-1}Fr._tr_init=k_;Fr._tr_stored_block=Nu;Fr._tr_flush_block=O_;Fr._tr_tally=R_;Fr._tr_align=T_});var ao=W((h2,Mu)=>{"use strict";function B_(e,t,r,n){for(var i=e&65535|0,a=e>>>16&65535|0,o=0;r!==0;){o=r>2e3?2e3:r,r-=o;do i=i+t[n++]|0,a=a+i|0;while(--o);i%=65521,a%=65521}return i|a<<16|0}Mu.exports=B_});var oo=W((d2,Du)=>{"use strict";function C_(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;t[r]=e}return t}var F_=C_();function L_(e,t,r,n){var i=F_,a=n+r;e^=-1;for(var o=n;o<a;o++)e=e>>>8^i[(e^t[o])&255];return e^-1}Du.exports=L_});var Uu=W((p2,zu)=>{"use strict";zu.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}});var $u=W(_t=>{"use strict";var Le=bn(),Ye=Pu(),qu=ao(),Ot=oo(),N_=Uu(),er=0,P_=1,M_=3,Lt=4,ju=5,pt=0,Gu=1,$e=-2,D_=-3,so=-5,z_=-1,U_=1,Ei=2,j_=3,G_=4,Z_=0,q_=2,ki=8,V_=9,H_=15,W_=8,Y_=29,$_=256,fo=$_+1+Y_,K_=30,X_=19,J_=2*fo+1,Q_=15,se=3,Ct=258,nt=Ct+se+1,em=32,Ti=42,uo=69,Ai=73,Si=91,Ii=103,Xt=113,kn=666,ve=1,Tn=2,Jt=3,Pr=4,tm=3;function Ft(e,t){return e.msg=N_[t],t}function Zu(e){return(e<<1)-(e>4?9:0)}function Bt(e){for(var t=e.length;--t>=0;)e[t]=0}function Rt(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),r!==0&&(Le.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,t.pending===0&&(t.pending_out=0))}function ke(e,t){Ye._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Rt(e.strm)}function ue(e,t){e.pending_buf[e.pending++]=t}function In(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=t&255}function rm(e,t,r,n){var i=e.avail_in;return i>n&&(i=n),i===0?0:(e.avail_in-=i,Le.arraySet(t,e.input,e.next_in,i,r),e.state.wrap===1?e.adler=qu(e.adler,t,i,r):e.state.wrap===2&&(e.adler=Ot(e.adler,t,i,r)),e.next_in+=i,e.total_in+=i,i)}function Vu(e,t){var r=e.max_chain_length,n=e.strstart,i,a,o=e.prev_length,s=e.nice_match,f=e.strstart>e.w_size-nt?e.strstart-(e.w_size-nt):0,l=e.window,u=e.w_mask,c=e.prev,p=e.strstart+Ct,h=l[n+o-1],y=l[n+o];e.prev_length>=e.good_match&&(r>>=2),s>e.lookahead&&(s=e.lookahead);do if(i=t,!(l[i+o]!==y||l[i+o-1]!==h||l[i]!==l[n]||l[++i]!==l[n+1])){n+=2,i++;do;while(l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&n<p);if(a=Ct-(p-n),n=p-Ct,a>o){if(e.match_start=t,o=a,a>=s)break;h=l[n+o-1],y=l[n+o]}}while((t=c[t&u])>f&&--r!==0);return o<=e.lookahead?o:e.lookahead}function Qt(e){var t=e.w_size,r,n,i,a,o;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-nt)){Le.arraySet(e.window,e.window,t,t,0),e.match_start-=t,e.strstart-=t,e.block_start-=t,n=e.hash_size,r=n;do i=e.head[--r],e.head[r]=i>=t?i-t:0;while(--n);n=t,r=n;do i=e.prev[--r],e.prev[r]=i>=t?i-t:0;while(--n);a+=t}if(e.strm.avail_in===0)break;if(n=rm(e.strm,e.window,e.strstart+e.lookahead,a),e.lookahead+=n,e.lookahead+e.insert>=se)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+se-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<se)););}while(e.lookahead<nt&&e.strm.avail_in!==0)}function nm(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Qt(e),e.lookahead===0&&t===er)return ve;if(e.lookahead===0)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((e.strstart===0||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,ke(e,!1),e.strm.avail_out===0)||e.strstart-e.block_start>=e.w_size-nt&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):(e.strstart>e.block_start&&(ke(e,!1),e.strm.avail_out===0),ve)}function lo(e,t){for(var r,n;;){if(e.lookahead<nt){if(Qt(e),e.lookahead<nt&&t===er)return ve;if(e.lookahead===0)break}if(r=0,e.lookahead>=se&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),r!==0&&e.strstart-r<=e.w_size-nt&&(e.match_length=Vu(e,r)),e.match_length>=se)if(n=Ye._tr_tally(e,e.strstart-e.match_start,e.match_length-se),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=se){e.match_length--;do e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=e.strstart<se-1?e.strstart:se-1,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:Tn}function Lr(e,t){for(var r,n,i;;){if(e.lookahead<nt){if(Qt(e),e.lookahead<nt&&t===er)return ve;if(e.lookahead===0)break}if(r=0,e.lookahead>=se&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=se-1,r!==0&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-nt&&(e.match_length=Vu(e,r),e.match_length<=5&&(e.strategy===U_||e.match_length===se&&e.strstart-e.match_start>4096)&&(e.match_length=se-1)),e.prev_length>=se&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-se,n=Ye._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-se),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=se-1,e.strstart++,n&&(ke(e,!1),e.strm.avail_out===0))return ve}else if(e.match_available){if(n=Ye._tr_tally(e,0,e.window[e.strstart-1]),n&&ke(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return ve}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Ye._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<se-1?e.strstart:se-1,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:Tn}function im(e,t){for(var r,n,i,a,o=e.window;;){if(e.lookahead<=Ct){if(Qt(e),e.lookahead<=Ct&&t===er)return ve;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=se&&e.strstart>0&&(i=e.strstart-1,n=o[i],n===o[++i]&&n===o[++i]&&n===o[++i])){a=e.strstart+Ct;do;while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<a);e.match_length=Ct-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=se?(r=Ye._tr_tally(e,1,e.match_length-se),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:Tn}function am(e,t){for(var r;;){if(e.lookahead===0&&(Qt(e),e.lookahead===0)){if(t===er)return ve;break}if(e.match_length=0,r=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:Tn}function dt(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}var Nr;Nr=[new dt(0,0,0,0,nm),new dt(4,4,8,4,lo),new dt(4,5,16,8,lo),new dt(4,6,32,32,lo),new dt(4,4,16,16,Lr),new dt(8,16,32,32,Lr),new dt(8,16,128,128,Lr),new dt(8,32,128,256,Lr),new dt(32,128,258,1024,Lr),new dt(32,258,258,4096,Lr)];function om(e){e.window_size=2*e.w_size,Bt(e.head),e.max_lazy_match=Nr[e.level].max_lazy,e.good_match=Nr[e.level].good_length,e.nice_match=Nr[e.level].nice_length,e.max_chain_length=Nr[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=se-1,e.match_available=0,e.ins_h=0}function sm(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ki,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Le.Buf16(J_*2),this.dyn_dtree=new Le.Buf16((2*K_+1)*2),this.bl_tree=new Le.Buf16((2*X_+1)*2),Bt(this.dyn_ltree),Bt(this.dyn_dtree),Bt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Le.Buf16(Q_+1),this.heap=new Le.Buf16(2*fo+1),Bt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Le.Buf16(2*fo+1),Bt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Hu(e){var t;return!e||!e.state?Ft(e,$e):(e.total_in=e.total_out=0,e.data_type=q_,t=e.state,t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?Ti:Xt,e.adler=t.wrap===2?0:1,t.last_flush=er,Ye._tr_init(t),pt)}function Wu(e){var t=Hu(e);return t===pt&&om(e.state),t}function lm(e,t){return!e||!e.state||e.state.wrap!==2?$e:(e.state.gzhead=t,pt)}function Yu(e,t,r,n,i,a){if(!e)return $e;var o=1;if(t===z_&&(t=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),i<1||i>V_||r!==ki||n<8||n>15||t<0||t>9||a<0||a>G_)return Ft(e,$e);n===8&&(n=9);var s=new sm;return e.state=s,s.strm=e,s.wrap=o,s.gzhead=null,s.w_bits=n,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=i+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+se-1)/se),s.window=new Le.Buf8(s.w_size*2),s.head=new Le.Buf16(s.hash_size),s.prev=new Le.Buf16(s.w_size),s.lit_bufsize=1<<i+6,s.pending_buf_size=s.lit_bufsize*4,s.pending_buf=new Le.Buf8(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=(1+2)*s.lit_bufsize,s.level=t,s.strategy=a,s.method=r,Wu(e)}function fm(e,t){return Yu(e,t,ki,H_,W_,Z_)}function um(e,t){var r,n,i,a;if(!e||!e.state||t>ju||t<0)return e?Ft(e,$e):$e;if(n=e.state,!e.output||!e.input&&e.avail_in!==0||n.status===kn&&t!==Lt)return Ft(e,e.avail_out===0?so:$e);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===Ti)if(n.wrap===2)e.adler=0,ue(n,31),ue(n,139),ue(n,8),n.gzhead?(ue(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),ue(n,n.gzhead.time&255),ue(n,n.gzhead.time>>8&255),ue(n,n.gzhead.time>>16&255),ue(n,n.gzhead.time>>24&255),ue(n,n.level===9?2:n.strategy>=Ei||n.level<2?4:0),ue(n,n.gzhead.os&255),n.gzhead.extra&&n.gzhead.extra.length&&(ue(n,n.gzhead.extra.length&255),ue(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Ot(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=uo):(ue(n,0),ue(n,0),ue(n,0),ue(n,0),ue(n,0),ue(n,n.level===9?2:n.strategy>=Ei||n.level<2?4:0),ue(n,tm),n.status=Xt);else{var o=ki+(n.w_bits-8<<4)<<8,s=-1;n.strategy>=Ei||n.level<2?s=0:n.level<6?s=1:n.level===6?s=2:s=3,o|=s<<6,n.strstart!==0&&(o|=em),o+=31-o%31,n.status=Xt,In(n,o),n.strstart!==0&&(In(n,e.adler>>>16),In(n,e.adler&65535)),e.adler=1}if(n.status===uo)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(n.gzhead.extra.length&65535)&&!(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size));)ue(n,n.gzhead.extra[n.gzindex]&255),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=Ai)}else n.status=Ai;if(n.status===Ai)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.name.length?a=n.gzhead.name.charCodeAt(n.gzindex++)&255:a=0,ue(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.gzindex=0,n.status=Si)}else n.status=Si;if(n.status===Si)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.comment.length?a=n.gzhead.comment.charCodeAt(n.gzindex++)&255:a=0,ue(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.status=Ii)}else n.status=Ii;if(n.status===Ii&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Rt(e),n.pending+2<=n.pending_buf_size&&(ue(n,e.adler&255),ue(n,e.adler>>8&255),e.adler=0,n.status=Xt)):n.status=Xt),n.pending!==0){if(Rt(e),e.avail_out===0)return n.last_flush=-1,pt}else if(e.avail_in===0&&Zu(t)<=Zu(r)&&t!==Lt)return Ft(e,so);if(n.status===kn&&e.avail_in!==0)return Ft(e,so);if(e.avail_in!==0||n.lookahead!==0||t!==er&&n.status!==kn){var f=n.strategy===Ei?am(n,t):n.strategy===j_?im(n,t):Nr[n.level].func(n,t);if((f===Jt||f===Pr)&&(n.status=kn),f===ve||f===Jt)return e.avail_out===0&&(n.last_flush=-1),pt;if(f===Tn&&(t===P_?Ye._tr_align(n):t!==ju&&(Ye._tr_stored_block(n,0,0,!1),t===M_&&(Bt(n.head),n.lookahead===0&&(n.strstart=0,n.block_start=0,n.insert=0))),Rt(e),e.avail_out===0))return n.last_flush=-1,pt}return t!==Lt?pt:n.wrap<=0?Gu:(n.wrap===2?(ue(n,e.adler&255),ue(n,e.adler>>8&255),ue(n,e.adler>>16&255),ue(n,e.adler>>24&255),ue(n,e.total_in&255),ue(n,e.total_in>>8&255),ue(n,e.total_in>>16&255),ue(n,e.total_in>>24&255)):(In(n,e.adler>>>16),In(n,e.adler&65535)),Rt(e),n.wrap>0&&(n.wrap=-n.wrap),n.pending!==0?pt:Gu)}function cm(e){var t;return!e||!e.state?$e:(t=e.state.status,t!==Ti&&t!==uo&&t!==Ai&&t!==Si&&t!==Ii&&t!==Xt&&t!==kn?Ft(e,$e):(e.state=null,t===Xt?Ft(e,D_):pt))}function hm(e,t){var r=t.length,n,i,a,o,s,f,l,u;if(!e||!e.state||(n=e.state,o=n.wrap,o===2||o===1&&n.status!==Ti||n.lookahead))return $e;for(o===1&&(e.adler=qu(e.adler,t,r,0)),n.wrap=0,r>=n.w_size&&(o===0&&(Bt(n.head),n.strstart=0,n.block_start=0,n.insert=0),u=new Le.Buf8(n.w_size),Le.arraySet(u,t,r-n.w_size,n.w_size,0),t=u,r=n.w_size),s=e.avail_in,f=e.next_in,l=e.input,e.avail_in=r,e.next_in=0,e.input=t,Qt(n);n.lookahead>=se;){i=n.strstart,a=n.lookahead-(se-1);do n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+se-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++;while(--a);n.strstart=i,n.lookahead=se-1,Qt(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=se-1,n.match_available=0,e.next_in=f,e.input=l,e.avail_in=s,n.wrap=o,pt}_t.deflateInit=fm;_t.deflateInit2=Yu;_t.deflateReset=Wu;_t.deflateResetKeep=Hu;_t.deflateSetHeader=lm;_t.deflate=um;_t.deflateEnd=cm;_t.deflateSetDictionary=hm;_t.deflateInfo="pako deflate (from Nodeca project)"});var Xu=W((m2,Ku)=>{"use strict";var Oi=30,dm=12;Ku.exports=function(t,r){var n,i,a,o,s,f,l,u,c,p,h,y,m,g,b,A,x,T,S,L,k,F,Z,E,O;n=t.state,i=t.next_in,E=t.input,a=i+(t.avail_in-5),o=t.next_out,O=t.output,s=o-(r-t.avail_out),f=o+(t.avail_out-257),l=n.dmax,u=n.wsize,c=n.whave,p=n.wnext,h=n.window,y=n.hold,m=n.bits,g=n.lencode,b=n.distcode,A=(1<<n.lenbits)-1,x=(1<<n.distbits)-1;e:do{m<15&&(y+=E[i++]<<m,m+=8,y+=E[i++]<<m,m+=8),T=g[y&A];t:for(;;){if(S=T>>>24,y>>>=S,m-=S,S=T>>>16&255,S===0)O[o++]=T&65535;else if(S&16){L=T&65535,S&=15,S&&(m<S&&(y+=E[i++]<<m,m+=8),L+=y&(1<<S)-1,y>>>=S,m-=S),m<15&&(y+=E[i++]<<m,m+=8,y+=E[i++]<<m,m+=8),T=b[y&x];r:for(;;){if(S=T>>>24,y>>>=S,m-=S,S=T>>>16&255,S&16){if(k=T&65535,S&=15,m<S&&(y+=E[i++]<<m,m+=8,m<S&&(y+=E[i++]<<m,m+=8)),k+=y&(1<<S)-1,k>l){t.msg="invalid distance too far back",n.mode=Oi;break e}if(y>>>=S,m-=S,S=o-s,k>S){if(S=k-S,S>c&&n.sane){t.msg="invalid distance too far back",n.mode=Oi;break e}if(F=0,Z=h,p===0){if(F+=u-S,S<L){L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}}else if(p<S){if(F+=u+p-S,S-=p,S<L){L-=S;do O[o++]=h[F++];while(--S);if(F=0,p<L){S=p,L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}}}else if(F+=p-S,S<L){L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}for(;L>2;)O[o++]=Z[F++],O[o++]=Z[F++],O[o++]=Z[F++],L-=3;L&&(O[o++]=Z[F++],L>1&&(O[o++]=Z[F++]))}else{F=o-k;do O[o++]=O[F++],O[o++]=O[F++],O[o++]=O[F++],L-=3;while(L>2);L&&(O[o++]=O[F++],L>1&&(O[o++]=O[F++]))}}else if(S&64){t.msg="invalid distance code",n.mode=Oi;break e}else{T=b[(T&65535)+(y&(1<<S)-1)];continue r}break}}else if(S&64)if(S&32){n.mode=dm;break e}else{t.msg="invalid literal/length code",n.mode=Oi;break e}else{T=g[(T&65535)+(y&(1<<S)-1)];continue t}break}}while(i<a&&o<f);L=m>>3,i-=L,m-=L<<3,y&=(1<<m)-1,t.next_in=i,t.next_out=o,t.avail_in=i<a?5+(a-i):5-(i-a),t.avail_out=o<f?257+(f-o):257-(o-f),n.hold=y,n.bits=m}});var ic=W((y2,nc)=>{"use strict";var Ju=bn(),Mr=15,Qu=852,ec=592,tc=0,co=1,rc=2,pm=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],_m=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],mm=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],ym=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];nc.exports=function(t,r,n,i,a,o,s,f){var l=f.bits,u=0,c=0,p=0,h=0,y=0,m=0,g=0,b=0,A=0,x=0,T,S,L,k,F,Z=null,E=0,O,_=new Ju.Buf16(Mr+1),M=new Ju.Buf16(Mr+1),te=null,j=0,ne,G,Q;for(u=0;u<=Mr;u++)_[u]=0;for(c=0;c<i;c++)_[r[n+c]]++;for(y=l,h=Mr;h>=1&&_[h]===0;h--);if(y>h&&(y=h),h===0)return a[o++]=1<<24|64<<16|0,a[o++]=1<<24|64<<16|0,f.bits=1,0;for(p=1;p<h&&_[p]===0;p++);for(y<p&&(y=p),b=1,u=1;u<=Mr;u++)if(b<<=1,b-=_[u],b<0)return-1;if(b>0&&(t===tc||h!==1))return-1;for(M[1]=0,u=1;u<Mr;u++)M[u+1]=M[u]+_[u];for(c=0;c<i;c++)r[n+c]!==0&&(s[M[r[n+c]]++]=c);if(t===tc?(Z=te=s,O=19):t===co?(Z=pm,E-=257,te=_m,j-=257,O=256):(Z=mm,te=ym,O=-1),x=0,c=0,u=p,F=o,m=y,g=0,L=-1,A=1<<y,k=A-1,t===co&&A>Qu||t===rc&&A>ec)return 1;for(;;){ne=u-g,s[c]<O?(G=0,Q=s[c]):s[c]>O?(G=te[j+s[c]],Q=Z[E+s[c]]):(G=32+64,Q=0),T=1<<u-g,S=1<<m,p=S;do S-=T,a[F+(x>>g)+S]=ne<<24|G<<16|Q|0;while(S!==0);for(T=1<<u-1;x&T;)T>>=1;if(T!==0?(x&=T-1,x+=T):x=0,c++,--_[u]===0){if(u===h)break;u=r[n+s[c]]}if(u>y&&(x&k)!==L){for(g===0&&(g=y),F+=p,m=u-g,b=1<<m;m+g<h&&(b-=_[m+g],!(b<=0));)m++,b<<=1;if(A+=1<<m,t===co&&A>Qu||t===rc&&A>ec)return 1;L=x&k,a[L]=y<<24|m<<16|F-o|0}}return x!==0&&(a[F+x]=u-g<<24|64<<16|0),f.bits=y,0}});var zc=W(it=>{"use strict";var je=bn(),go=ao(),mt=oo(),gm=Xu(),On=ic(),bm=0,Rc=1,Bc=2,ac=4,wm=5,Ri=6,tr=0,vm=1,xm=2,Ke=-2,Cc=-3,bo=-4,Em=-5,oc=8,Fc=1,sc=2,lc=3,fc=4,uc=5,cc=6,hc=7,dc=8,pc=9,_c=10,Fi=11,xt=12,ho=13,mc=14,po=15,yc=16,gc=17,bc=18,wc=19,Bi=20,Ci=21,vc=22,xc=23,Ec=24,Ac=25,Sc=26,_o=27,Ic=28,kc=29,_e=30,wo=31,Am=32,Sm=852,Im=592,km=15,Tm=km;function Tc(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function Om(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new je.Buf16(320),this.work=new je.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Lc(e){var t;return!e||!e.state?Ke:(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=t.wrap&1),t.mode=Fc,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new je.Buf32(Sm),t.distcode=t.distdyn=new je.Buf32(Im),t.sane=1,t.back=-1,tr)}function Nc(e){var t;return!e||!e.state?Ke:(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,Lc(e))}function Pc(e,t){var r,n;return!e||!e.state||(n=e.state,t<0?(r=0,t=-t):(r=(t>>4)+1,t<48&&(t&=15)),t&&(t<8||t>15))?Ke:(n.window!==null&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,Nc(e))}function Mc(e,t){var r,n;return e?(n=new Om,e.state=n,n.window=null,r=Pc(e,t),r!==tr&&(e.state=null),r):Ke}function Rm(e){return Mc(e,Tm)}var Oc=!0,mo,yo;function Bm(e){if(Oc){var t;for(mo=new je.Buf32(512),yo=new je.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(On(Rc,e.lens,0,288,mo,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;On(Bc,e.lens,0,32,yo,0,e.work,{bits:5}),Oc=!1}e.lencode=mo,e.lenbits=9,e.distcode=yo,e.distbits=5}function Dc(e,t,r,n){var i,a=e.state;return a.window===null&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new je.Buf8(a.wsize)),n>=a.wsize?(je.arraySet(a.window,t,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i=a.wsize-a.wnext,i>n&&(i=n),je.arraySet(a.window,t,r-n,i,a.wnext),n-=i,n?(je.arraySet(a.window,t,r-n,n,0),a.wnext=n,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}function Cm(e,t){var r,n,i,a,o,s,f,l,u,c,p,h,y,m,g=0,b,A,x,T,S,L,k,F,Z=new je.Buf8(4),E,O,_=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0)return Ke;r=e.state,r.mode===xt&&(r.mode=ho),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,c=s,p=f,F=tr;e:for(;;)switch(r.mode){case Fc:if(r.wrap===0){r.mode=ho;break}for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.wrap&2&&l===35615){r.check=0,Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0),l=0,u=0,r.mode=sc;break}if(r.flags=0,r.head&&(r.head.done=!1),!(r.wrap&1)||(((l&255)<<8)+(l>>8))%31){e.msg="incorrect header check",r.mode=_e;break}if((l&15)!==oc){e.msg="unknown compression method",r.mode=_e;break}if(l>>>=4,u-=4,k=(l&15)+8,r.wbits===0)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=_e;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=l&512?_c:xt,l=0,u=0;break;case sc:for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.flags=l,(r.flags&255)!==oc){e.msg="unknown compression method",r.mode=_e;break}if(r.flags&57344){e.msg="unknown header flags set",r.mode=_e;break}r.head&&(r.head.text=l>>8&1),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0,r.mode=lc;case lc:for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.time=l),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,Z[2]=l>>>16&255,Z[3]=l>>>24&255,r.check=mt(r.check,Z,4,0)),l=0,u=0,r.mode=fc;case fc:for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.xflags=l&255,r.head.os=l>>8),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0,r.mode=uc;case uc:if(r.flags&1024){for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=cc;case cc:if(r.flags&1024&&(h=r.length,h>s&&(h=s),h&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),je.arraySet(r.head.extra,n,a,h,k)),r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,r.length-=h),r.length))break e;r.length=0,r.mode=hc;case hc:if(r.flags&2048){if(s===0)break e;h=0;do k=n[a+h++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k));while(k&&h<s);if(r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=dc;case dc:if(r.flags&4096){if(s===0)break e;h=0;do k=n[a+h++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k));while(k&&h<s);if(r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,k)break e}else r.head&&(r.head.comment=null);r.mode=pc;case pc:if(r.flags&512){for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(r.check&65535)){e.msg="header crc mismatch",r.mode=_e;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=xt;break;case _c:for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}e.adler=r.check=Tc(l),l=0,u=0,r.mode=Fi;case Fi:if(r.havedict===0)return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,xm;e.adler=r.check=1,r.mode=xt;case xt:if(t===wm||t===Ri)break e;case ho:if(r.last){l>>>=u&7,u-=u&7,r.mode=_o;break}for(;u<3;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}switch(r.last=l&1,l>>>=1,u-=1,l&3){case 0:r.mode=mc;break;case 1:if(Bm(r),r.mode=Bi,t===Ri){l>>>=2,u-=2;break e}break;case 2:r.mode=gc;break;case 3:e.msg="invalid block type",r.mode=_e}l>>>=2,u-=2;break;case mc:for(l>>>=u&7,u-=u&7;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if((l&65535)!==(l>>>16^65535)){e.msg="invalid stored block lengths",r.mode=_e;break}if(r.length=l&65535,l=0,u=0,r.mode=po,t===Ri)break e;case po:r.mode=yc;case yc:if(h=r.length,h){if(h>s&&(h=s),h>f&&(h=f),h===0)break e;je.arraySet(i,n,a,h,o),s-=h,a+=h,f-=h,o+=h,r.length-=h;break}r.mode=xt;break;case gc:for(;u<14;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.nlen=(l&31)+257,l>>>=5,u-=5,r.ndist=(l&31)+1,l>>>=5,u-=5,r.ncode=(l&15)+4,l>>>=4,u-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=_e;break}r.have=0,r.mode=bc;case bc:for(;r.have<r.ncode;){for(;u<3;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.lens[_[r.have++]]=l&7,l>>>=3,u-=3}for(;r.have<19;)r.lens[_[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,E={bits:r.lenbits},F=On(bm,r.lens,0,19,r.lencode,0,r.work,E),r.lenbits=E.bits,F){e.msg="invalid code lengths set",r.mode=_e;break}r.have=0,r.mode=wc;case wc:for(;r.have<r.nlen+r.ndist;){for(;g=r.lencode[l&(1<<r.lenbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(x<16)l>>>=b,u-=b,r.lens[r.have++]=x;else{if(x===16){for(O=b+2;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l>>>=b,u-=b,r.have===0){e.msg="invalid bit length repeat",r.mode=_e;break}k=r.lens[r.have-1],h=3+(l&3),l>>>=2,u-=2}else if(x===17){for(O=b+3;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=b,u-=b,k=0,h=3+(l&7),l>>>=3,u-=3}else{for(O=b+7;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=b,u-=b,k=0,h=11+(l&127),l>>>=7,u-=7}if(r.have+h>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=_e;break}for(;h--;)r.lens[r.have++]=k}}if(r.mode===_e)break;if(r.lens[256]===0){e.msg="invalid code -- missing end-of-block",r.mode=_e;break}if(r.lenbits=9,E={bits:r.lenbits},F=On(Rc,r.lens,0,r.nlen,r.lencode,0,r.work,E),r.lenbits=E.bits,F){e.msg="invalid literal/lengths set",r.mode=_e;break}if(r.distbits=6,r.distcode=r.distdyn,E={bits:r.distbits},F=On(Bc,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,E),r.distbits=E.bits,F){e.msg="invalid distances set",r.mode=_e;break}if(r.mode=Bi,t===Ri)break e;case Bi:r.mode=Ci;case Ci:if(s>=6&&f>=258){e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,gm(e,p),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,r.mode===xt&&(r.back=-1);break}for(r.back=0;g=r.lencode[l&(1<<r.lenbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(A&&!(A&240)){for(T=b,S=A,L=x;g=r.lencode[L+((l&(1<<T+S)-1)>>T)],b=g>>>24,A=g>>>16&255,x=g&65535,!(T+b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=T,u-=T,r.back+=T}if(l>>>=b,u-=b,r.back+=b,r.length=x,A===0){r.mode=Sc;break}if(A&32){r.back=-1,r.mode=xt;break}if(A&64){e.msg="invalid literal/length code",r.mode=_e;break}r.extra=A&15,r.mode=vc;case vc:if(r.extra){for(O=r.extra;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=xc;case xc:for(;g=r.distcode[l&(1<<r.distbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(!(A&240)){for(T=b,S=A,L=x;g=r.distcode[L+((l&(1<<T+S)-1)>>T)],b=g>>>24,A=g>>>16&255,x=g&65535,!(T+b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=T,u-=T,r.back+=T}if(l>>>=b,u-=b,r.back+=b,A&64){e.msg="invalid distance code",r.mode=_e;break}r.offset=x,r.extra=A&15,r.mode=Ec;case Ec:if(r.extra){for(O=r.extra;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=_e;break}r.mode=Ac;case Ac:if(f===0)break e;if(h=p-f,r.offset>h){if(h=r.offset-h,h>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=_e;break}h>r.wnext?(h-=r.wnext,y=r.wsize-h):y=r.wnext-h,h>r.length&&(h=r.length),m=r.window}else m=i,y=o-r.offset,h=r.length;h>f&&(h=f),f-=h,r.length-=h;do i[o++]=m[y++];while(--h);r.length===0&&(r.mode=Ci);break;case Sc:if(f===0)break e;i[o++]=r.length,f--,r.mode=Ci;break;case _o:if(r.wrap){for(;u<32;){if(s===0)break e;s--,l|=n[a++]<<u,u+=8}if(p-=f,e.total_out+=p,r.total+=p,p&&(e.adler=r.check=r.flags?mt(r.check,i,p,o-p):go(r.check,i,p,o-p)),p=f,(r.flags?l:Tc(l))!==r.check){e.msg="incorrect data check",r.mode=_e;break}l=0,u=0}r.mode=Ic;case Ic:if(r.wrap&&r.flags){for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(r.total&4294967295)){e.msg="incorrect length check",r.mode=_e;break}l=0,u=0}r.mode=kc;case kc:F=vm;break e;case _e:F=Cc;break e;case wo:return bo;case Am:default:return Ke}return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,(r.wsize||p!==e.avail_out&&r.mode<_e&&(r.mode<_o||t!==ac))&&Dc(e,e.output,e.next_out,p-e.avail_out)?(r.mode=wo,bo):(c-=e.avail_in,p-=e.avail_out,e.total_in+=c,e.total_out+=p,r.total+=p,r.wrap&&p&&(e.adler=r.check=r.flags?mt(r.check,i,p,e.next_out-p):go(r.check,i,p,e.next_out-p)),e.data_type=r.bits+(r.last?64:0)+(r.mode===xt?128:0)+(r.mode===Bi||r.mode===po?256:0),(c===0&&p===0||t===ac)&&F===tr&&(F=Em),F)}function Fm(e){if(!e||!e.state)return Ke;var t=e.state;return t.window&&(t.window=null),e.state=null,tr}function Lm(e,t){var r;return!e||!e.state||(r=e.state,!(r.wrap&2))?Ke:(r.head=t,t.done=!1,tr)}function Nm(e,t){var r=t.length,n,i,a;return!e||!e.state||(n=e.state,n.wrap!==0&&n.mode!==Fi)?Ke:n.mode===Fi&&(i=1,i=go(i,t,r,0),i!==n.check)?Cc:(a=Dc(e,t,r,r),a?(n.mode=wo,bo):(n.havedict=1,tr))}it.inflateReset=Nc;it.inflateReset2=Pc;it.inflateResetKeep=Lc;it.inflateInit=Rm;it.inflateInit2=Mc;it.inflate=Cm;it.inflateEnd=Fm;it.inflateGetHeader=Lm;it.inflateSetDictionary=Nm;it.inflateInfo="pako inflate (from Nodeca project)"});var jc=W((b2,Uc)=>{"use strict";Uc.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}});var Zc=W(H=>{"use strict";var Ge=Or(),Pm=du(),Rn=$u(),rr=zc(),Gc=jc();for(vo in Gc)H[vo]=Gc[vo];var vo;H.NONE=0;H.DEFLATE=1;H.INFLATE=2;H.GZIP=3;H.GUNZIP=4;H.DEFLATERAW=5;H.INFLATERAW=6;H.UNZIP=7;var Mm=31,Dm=139;function Oe(e){if(typeof e!="number"||e<H.DEFLATE||e>H.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}Oe.prototype.close=function(){if(this.write_in_progress){this.pending_close=!0;return}this.pending_close=!1,Ge(this.init_done,"close before init"),Ge(this.mode<=H.UNZIP),this.mode===H.DEFLATE||this.mode===H.GZIP||this.mode===H.DEFLATERAW?Rn.deflateEnd(this.strm):(this.mode===H.INFLATE||this.mode===H.GUNZIP||this.mode===H.INFLATERAW||this.mode===H.UNZIP)&&rr.inflateEnd(this.strm),this.mode=H.NONE,this.dictionary=null};Oe.prototype.write=function(e,t,r,n,i,a,o){return this._write(!0,e,t,r,n,i,a,o)};Oe.prototype.writeSync=function(e,t,r,n,i,a,o){return this._write(!1,e,t,r,n,i,a,o)};Oe.prototype._write=function(e,t,r,n,i,a,o,s){if(Ge.equal(arguments.length,8),Ge(this.init_done,"write before init"),Ge(this.mode!==H.NONE,"already finalized"),Ge.equal(!1,this.write_in_progress,"write already in progress"),Ge.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,Ge.equal(!1,t===void 0,"must provide flush value"),this.write_in_progress=!0,t!==H.Z_NO_FLUSH&&t!==H.Z_PARTIAL_FLUSH&&t!==H.Z_SYNC_FLUSH&&t!==H.Z_FULL_FLUSH&&t!==H.Z_FINISH&&t!==H.Z_BLOCK)throw new Error("Invalid flush value");if(r==null&&(r=Buffer.alloc(0),i=0,n=0),this.strm.avail_in=i,this.strm.input=r,this.strm.next_in=n,this.strm.avail_out=s,this.strm.output=a,this.strm.next_out=o,this.flush=t,!e)return this._process(),this._checkError()?this._afterSync():void 0;var f=this;return process.nextTick(function(){f._process(),f._after()}),this};Oe.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]};Oe.prototype._process=function(){var e=null;switch(this.mode){case H.DEFLATE:case H.GZIP:case H.DEFLATERAW:this.err=Rn.deflate(this.strm,this.flush);break;case H.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(e===null)break;if(this.strm.input[e]===Mm){if(this.gzip_id_bytes_read=1,e++,this.strm.avail_in===1)break}else{this.mode=H.INFLATE;break}case 1:if(e===null)break;this.strm.input[e]===Dm?(this.gzip_id_bytes_read=2,this.mode=H.GUNZIP):this.mode=H.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case H.INFLATE:case H.GUNZIP:case H.INFLATERAW:for(this.err=rr.inflate(this.strm,this.flush),this.err===H.Z_NEED_DICT&&this.dictionary&&(this.err=rr.inflateSetDictionary(this.strm,this.dictionary),this.err===H.Z_OK?this.err=rr.inflate(this.strm,this.flush):this.err===H.Z_DATA_ERROR&&(this.err=H.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===H.GUNZIP&&this.err===H.Z_STREAM_END&&this.strm.next_in[0]!==0;)this.reset(),this.err=rr.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}};Oe.prototype._checkError=function(){switch(this.err){case H.Z_OK:case H.Z_BUF_ERROR:if(this.strm.avail_out!==0&&this.flush===H.Z_FINISH)return this._error("unexpected end of file"),!1;break;case H.Z_STREAM_END:break;case H.Z_NEED_DICT:return this.dictionary==null?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0};Oe.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}};Oe.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()};Oe.prototype.init=function(e,t,r,n,i){Ge(arguments.length===4||arguments.length===5,"init(windowBits, level, memLevel, strategy, [dictionary])"),Ge(e>=8&&e<=15,"invalid windowBits"),Ge(t>=-1&&t<=9,"invalid compression level"),Ge(r>=1&&r<=9,"invalid memlevel"),Ge(n===H.Z_FILTERED||n===H.Z_HUFFMAN_ONLY||n===H.Z_RLE||n===H.Z_FIXED||n===H.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(t,e,r,n,i),this._setDictionary()};Oe.prototype.params=function(){throw new Error("deflateParams Not supported")};Oe.prototype.reset=function(){this._reset(),this._setDictionary()};Oe.prototype._init=function(e,t,r,n,i){switch(this.level=e,this.windowBits=t,this.memLevel=r,this.strategy=n,this.flush=H.Z_NO_FLUSH,this.err=H.Z_OK,(this.mode===H.GZIP||this.mode===H.GUNZIP)&&(this.windowBits+=16),this.mode===H.UNZIP&&(this.windowBits+=32),(this.mode===H.DEFLATERAW||this.mode===H.INFLATERAW)&&(this.windowBits=-1*this.windowBits),this.strm=new Pm,this.mode){case H.DEFLATE:case H.GZIP:case H.DEFLATERAW:this.err=Rn.deflateInit2(this.strm,this.level,H.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case H.INFLATE:case H.GUNZIP:case H.INFLATERAW:case H.UNZIP:this.err=rr.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==H.Z_OK&&this._error("Init error"),this.dictionary=i,this.write_in_progress=!1,this.init_done=!0};Oe.prototype._setDictionary=function(){if(this.dictionary!=null){switch(this.err=H.Z_OK,this.mode){case H.DEFLATE:case H.DEFLATERAW:this.err=Rn.deflateSetDictionary(this.strm,this.dictionary);break;default:break}this.err!==H.Z_OK&&this._error("Failed to set dictionary")}};Oe.prototype._reset=function(){switch(this.err=H.Z_OK,this.mode){case H.DEFLATE:case H.DEFLATERAW:case H.GZIP:this.err=Rn.deflateReset(this.strm);break;case H.INFLATE:case H.INFLATERAW:case H.GUNZIP:this.err=rr.inflateReset(this.strm);break;default:break}this.err!==H.Z_OK&&this._error("Failed to reset stream")};H.Zlib=Oe});var Dr=W(X=>{"use strict";var yt=li().Buffer,Wc=nn().Transform,re=Zc(),Nt=De(),Bn=Or().ok,Eo=li().kMaxLength,Yc="Cannot create final Buffer. It would be larger than 0x"+Eo.toString(16)+" bytes";re.Z_MIN_WINDOWBITS=8;re.Z_MAX_WINDOWBITS=15;re.Z_DEFAULT_WINDOWBITS=15;re.Z_MIN_CHUNK=64;re.Z_MAX_CHUNK=1/0;re.Z_DEFAULT_CHUNK=16*1024;re.Z_MIN_MEMLEVEL=1;re.Z_MAX_MEMLEVEL=9;re.Z_DEFAULT_MEMLEVEL=8;re.Z_MIN_LEVEL=-1;re.Z_MAX_LEVEL=9;re.Z_DEFAULT_LEVEL=re.Z_DEFAULT_COMPRESSION;var qc=Object.keys(re);for(Li=0;Li<qc.length;Li++)Ni=qc[Li],Ni.match(/^Z/)&&Object.defineProperty(X,Ni,{enumerable:!0,value:re[Ni],writable:!1});var Ni,Li,Mi={Z_OK:re.Z_OK,Z_STREAM_END:re.Z_STREAM_END,Z_NEED_DICT:re.Z_NEED_DICT,Z_ERRNO:re.Z_ERRNO,Z_STREAM_ERROR:re.Z_STREAM_ERROR,Z_DATA_ERROR:re.Z_DATA_ERROR,Z_MEM_ERROR:re.Z_MEM_ERROR,Z_BUF_ERROR:re.Z_BUF_ERROR,Z_VERSION_ERROR:re.Z_VERSION_ERROR},Vc=Object.keys(Mi);for(Pi=0;Pi<Vc.length;Pi++)xo=Vc[Pi],Mi[Mi[xo]]=xo;var xo,Pi;Object.defineProperty(X,"codes",{enumerable:!0,value:Object.freeze(Mi),writable:!1});X.Deflate=nr;X.Inflate=ir;X.Gzip=ar;X.Gunzip=or;X.DeflateRaw=sr;X.InflateRaw=lr;X.Unzip=fr;X.createDeflate=function(e){return new nr(e)};X.createInflate=function(e){return new ir(e)};X.createDeflateRaw=function(e){return new sr(e)};X.createInflateRaw=function(e){return new lr(e)};X.createGzip=function(e){return new ar(e)};X.createGunzip=function(e){return new or(e)};X.createUnzip=function(e){return new fr(e)};X.deflate=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new nr(t),e,r)};X.deflateSync=function(e,t){return cr(new nr(t),e)};X.gzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new ar(t),e,r)};X.gzipSync=function(e,t){return cr(new ar(t),e)};X.deflateRaw=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new sr(t),e,r)};X.deflateRawSync=function(e,t){return cr(new sr(t),e)};X.unzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new fr(t),e,r)};X.unzipSync=function(e,t){return cr(new fr(t),e)};X.inflate=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new ir(t),e,r)};X.inflateSync=function(e,t){return cr(new ir(t),e)};X.gunzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new or(t),e,r)};X.gunzipSync=function(e,t){return cr(new or(t),e)};X.inflateRaw=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new lr(t),e,r)};X.inflateRawSync=function(e,t){return cr(new lr(t),e)};function ur(e,t,r){var n=[],i=0;e.on("error",o),e.on("end",s),e.end(t),a();function a(){for(var f;(f=e.read())!==null;)n.push(f),i+=f.length;e.once("readable",a)}function o(f){e.removeListener("end",s),e.removeListener("readable",a),r(f)}function s(){var f,l=null;i>=Eo?l=new RangeError(Yc):f=yt.concat(n,i),n=[],e.close(),r(l,f)}}function cr(e,t){if(typeof t=="string"&&(t=yt.from(t)),!yt.isBuffer(t))throw new TypeError("Not a string or buffer");var r=e._finishFlushFlag;return e._processChunk(t,r)}function nr(e){if(!(this instanceof nr))return new nr(e);me.call(this,e,re.DEFLATE)}function ir(e){if(!(this instanceof ir))return new ir(e);me.call(this,e,re.INFLATE)}function ar(e){if(!(this instanceof ar))return new ar(e);me.call(this,e,re.GZIP)}function or(e){if(!(this instanceof or))return new or(e);me.call(this,e,re.GUNZIP)}function sr(e){if(!(this instanceof sr))return new sr(e);me.call(this,e,re.DEFLATERAW)}function lr(e){if(!(this instanceof lr))return new lr(e);me.call(this,e,re.INFLATERAW)}function fr(e){if(!(this instanceof fr))return new fr(e);me.call(this,e,re.UNZIP)}function Hc(e){return e===re.Z_NO_FLUSH||e===re.Z_PARTIAL_FLUSH||e===re.Z_SYNC_FLUSH||e===re.Z_FULL_FLUSH||e===re.Z_FINISH||e===re.Z_BLOCK}function me(e,t){var r=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||X.Z_DEFAULT_CHUNK,Wc.call(this,e),e.flush&&!Hc(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!Hc(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||re.Z_NO_FLUSH,this._finishFlushFlag=typeof e.finishFlush<"u"?e.finishFlush:re.Z_FINISH,e.chunkSize&&(e.chunkSize<X.Z_MIN_CHUNK||e.chunkSize>X.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<X.Z_MIN_WINDOWBITS||e.windowBits>X.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<X.Z_MIN_LEVEL||e.level>X.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<X.Z_MIN_MEMLEVEL||e.memLevel>X.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=X.Z_FILTERED&&e.strategy!=X.Z_HUFFMAN_ONLY&&e.strategy!=X.Z_RLE&&e.strategy!=X.Z_FIXED&&e.strategy!=X.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!yt.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new re.Zlib(t);var n=this;this._hadError=!1,this._handle.onerror=function(o,s){Di(n),n._hadError=!0;var f=new Error(o);f.errno=s,f.code=X.codes[s],n.emit("error",f)};var i=X.Z_DEFAULT_COMPRESSION;typeof e.level=="number"&&(i=e.level);var a=X.Z_DEFAULT_STRATEGY;typeof e.strategy=="number"&&(a=e.strategy),this._handle.init(e.windowBits||X.Z_DEFAULT_WINDOWBITS,i,e.memLevel||X.Z_DEFAULT_MEMLEVEL,a,e.dictionary),this._buffer=yt.allocUnsafe(this._chunkSize),this._offset=0,this._level=i,this._strategy=a,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!r._handle},configurable:!0,enumerable:!0})}Nt.inherits(me,Wc);me.prototype.params=function(e,t,r){if(e<X.Z_MIN_LEVEL||e>X.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(t!=X.Z_FILTERED&&t!=X.Z_HUFFMAN_ONLY&&t!=X.Z_RLE&&t!=X.Z_FIXED&&t!=X.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+t);if(this._level!==e||this._strategy!==t){var n=this;this.flush(re.Z_SYNC_FLUSH,function(){Bn(n._handle,"zlib binding closed"),n._handle.params(e,t),n._hadError||(n._level=e,n._strategy=t,r&&r())})}else process.nextTick(r)};me.prototype.reset=function(){return Bn(this._handle,"zlib binding closed"),this._handle.reset()};me.prototype._flush=function(e){this._transform(yt.alloc(0),"",e)};me.prototype.flush=function(e,t){var r=this,n=this._writableState;(typeof e=="function"||e===void 0&&!t)&&(t=e,e=re.Z_FULL_FLUSH),n.ended?t&&process.nextTick(t):n.ending?t&&this.once("end",t):n.needDrain?t&&this.once("drain",function(){return r.flush(e,t)}):(this._flushFlag=e,this.write(yt.alloc(0),"",t))};me.prototype.close=function(e){Di(this,e),process.nextTick(zm,this)};function Di(e,t){t&&process.nextTick(t),e._handle&&(e._handle.close(),e._handle=null)}function zm(e){e.emit("close")}me.prototype._transform=function(e,t,r){var n,i=this._writableState,a=i.ending||i.ended,o=a&&(!e||i.length===e.length);if(e!==null&&!yt.isBuffer(e))return r(new Error("invalid input"));if(!this._handle)return r(new Error("zlib binding closed"));o?n=this._finishFlushFlag:(n=this._flushFlag,e.length>=i.length&&(this._flushFlag=this._opts.flush||re.Z_NO_FLUSH)),this._processChunk(e,n,r)};me.prototype._processChunk=function(e,t,r){var n=e&&e.length,i=this._chunkSize-this._offset,a=0,o=this,s=typeof r=="function";if(!s){var f=[],l=0,u;this.on("error",function(m){u=m}),Bn(this._handle,"zlib binding closed");do var c=this._handle.writeSync(t,e,a,n,this._buffer,this._offset,i);while(!this._hadError&&y(c[0],c[1]));if(this._hadError)throw u;if(l>=Eo)throw Di(this),new RangeError(Yc);var p=yt.concat(f,l);return Di(this),p}Bn(this._handle,"zlib binding closed");var h=this._handle.write(t,e,a,n,this._buffer,this._offset,i);h.buffer=e,h.callback=y;function y(m,g){if(this&&(this.buffer=null,this.callback=null),!o._hadError){var b=i-g;if(Bn(b>=0,"have should not go down"),b>0){var A=o._buffer.slice(o._offset,o._offset+b);o._offset+=b,s?o.push(A):(f.push(A),l+=A.length)}if((g===0||o._offset>=o._chunkSize)&&(i=o._chunkSize,o._offset=0,o._buffer=yt.allocUnsafe(o._chunkSize)),g===0){if(a+=n-m,n=m,!s)return!0;var x=o._handle.write(t,e,a,n,o._buffer,o._offset,o._chunkSize);x.callback=y,x.buffer=e;return}if(!s)return!1;r()}}};Nt.inherits(nr,me);Nt.inherits(ir,me);Nt.inherits(ar,me);Nt.inherits(or,me);Nt.inherits(sr,me);Nt.inherits(lr,me);Nt.inherits(fr,me)});var Ao=W((x2,Kc)=>{"use strict";var Um=De(),$c=nn(),at=Kc.exports=function(){$c.call(this),this._buffers=[],this._buffered=0,this._reads=[],this._paused=!1,this._encoding="utf8",this.writable=!0};Um.inherits(at,$c);at.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t}),process.nextTick(function(){this._process(),this._paused&&this._reads&&this._reads.length>0&&(this._paused=!1,this.emit("drain"))}.bind(this))};at.prototype.write=function(e,t){if(!this.writable)return this.emit("error",new Error("Stream not writable")),!1;let r;return Buffer.isBuffer(e)?r=e:r=Buffer.from(e,t||this._encoding),this._buffers.push(r),this._buffered+=r.length,this._process(),this._reads&&this._reads.length===0&&(this._paused=!0),this.writable&&!this._paused};at.prototype.end=function(e,t){e&&this.write(e,t),this.writable=!1,this._buffers&&(this._buffers.length===0?this._end():(this._buffers.push(null),this._process()))};at.prototype.destroySoon=at.prototype.end;at.prototype._end=function(){this._reads.length>0&&this.emit("error",new Error("Unexpected end of input")),this.destroy()};at.prototype.destroy=function(){this._buffers&&(this.writable=!1,this._reads=null,this._buffers=null,this.emit("close"))};at.prototype._processReadAllowingLess=function(e){this._reads.shift();let t=this._buffers[0];t.length>e.length?(this._buffered-=e.length,this._buffers[0]=t.slice(e.length),e.func.call(this,t.slice(0,e.length))):(this._buffered-=t.length,this._buffers.shift(),e.func.call(this,t))};at.prototype._processRead=function(e){this._reads.shift();let t=0,r=0,n=Buffer.alloc(e.length);for(;t<e.length;){let i=this._buffers[r++],a=Math.min(i.length,e.length-t);i.copy(n,t,0,a),t+=a,a!==i.length&&(this._buffers[--r]=i.slice(a))}r>0&&this._buffers.splice(0,r),this._buffered-=e.length,e.func.call(this,n)};at.prototype._process=function(){try{for(;this._buffered>0&&this._reads&&this._reads.length>0;){let e=this._reads[0];if(e.allowLess)this._processReadAllowingLess(e);else if(this._buffered>=e.length)this._processRead(e);else break}this._buffers&&!this.writable&&this._end()}catch(e){this.emit("error",e)}}});var Io=W(So=>{"use strict";var Pt=[{x:[0],y:[0]},{x:[4],y:[0]},{x:[0,4],y:[4]},{x:[2,6],y:[0,4]},{x:[0,2,4,6],y:[2,6]},{x:[1,3,5,7],y:[0,2,4,6]},{x:[0,1,2,3,4,5,6,7],y:[1,3,5,7]}];So.getImagePasses=function(e,t){let r=[],n=e%8,i=t%8,a=(e-n)/8,o=(t-i)/8;for(let s=0;s<Pt.length;s++){let f=Pt[s],l=a*f.x.length,u=o*f.y.length;for(let c=0;c<f.x.length&&f.x[c]<n;c++)l++;for(let c=0;c<f.y.length&&f.y[c]<i;c++)u++;l>0&&u>0&&r.push({width:l,height:u,index:s})}return r};So.getInterlaceIterator=function(e){return function(t,r,n){let i=t%Pt[n].x.length,a=(t-i)/Pt[n].x.length*8+Pt[n].x[i],o=r%Pt[n].y.length,s=(r-o)/Pt[n].y.length*8+Pt[n].y[o];return a*4+s*e*4}}});var ko=W((A2,Xc)=>{"use strict";Xc.exports=function(t,r,n){let i=t+r-n,a=Math.abs(i-t),o=Math.abs(i-r),s=Math.abs(i-n);return a<=o&&a<=s?t:o<=s?r:n}});var To=W((S2,Qc)=>{"use strict";var jm=Io(),Gm=ko();function Jc(e,t,r){let n=e*t;return r!==8&&(n=Math.ceil(n/(8/r))),n}var zr=Qc.exports=function(e,t){let r=e.width,n=e.height,i=e.interlace,a=e.bpp,o=e.depth;if(this.read=t.read,this.write=t.write,this.complete=t.complete,this._imageIndex=0,this._images=[],i){let s=jm.getImagePasses(r,n);for(let f=0;f<s.length;f++)this._images.push({byteWidth:Jc(s[f].width,a,o),height:s[f].height,lineIndex:0})}else this._images.push({byteWidth:Jc(r,a,o),height:n,lineIndex:0});o===8?this._xComparison=a:o===16?this._xComparison=a*2:this._xComparison=1};zr.prototype.start=function(){this.read(this._images[this._imageIndex].byteWidth+1,this._reverseFilterLine.bind(this))};zr.prototype._unFilterType1=function(e,t,r){let n=this._xComparison,i=n-1;for(let a=0;a<r;a++){let o=e[1+a],s=a>i?t[a-n]:0;t[a]=o+s}};zr.prototype._unFilterType2=function(e,t,r){let n=this._lastLine;for(let i=0;i<r;i++){let a=e[1+i],o=n?n[i]:0;t[i]=a+o}};zr.prototype._unFilterType3=function(e,t,r){let n=this._xComparison,i=n-1,a=this._lastLine;for(let o=0;o<r;o++){let s=e[1+o],f=a?a[o]:0,l=o>i?t[o-n]:0,u=Math.floor((l+f)/2);t[o]=s+u}};zr.prototype._unFilterType4=function(e,t,r){let n=this._xComparison,i=n-1,a=this._lastLine;for(let o=0;o<r;o++){let s=e[1+o],f=a?a[o]:0,l=o>i?t[o-n]:0,u=o>i&&a?a[o-n]:0,c=Gm(l,f,u);t[o]=s+c}};zr.prototype._reverseFilterLine=function(e){let t=e[0],r,n=this._images[this._imageIndex],i=n.byteWidth;if(t===0)r=e.slice(1,i+1);else switch(r=Buffer.alloc(i),t){case 1:this._unFilterType1(e,r,i);break;case 2:this._unFilterType2(e,r,i);break;case 3:this._unFilterType3(e,r,i);break;case 4:this._unFilterType4(e,r,i);break;default:throw new Error("Unrecognised filter type - "+t)}this.write(r),n.lineIndex++,n.lineIndex>=n.height?(this._lastLine=null,this._imageIndex++,n=this._images[this._imageIndex]):this._lastLine=r,n?this.read(n.byteWidth+1,this._reverseFilterLine.bind(this)):(this._lastLine=null,this.complete())}});var rh=W((I2,th)=>{"use strict";var Zm=De(),eh=Ao(),qm=To(),Vm=th.exports=function(e){eh.call(this);let t=[],r=this;this._filter=new qm(e,{read:this.read.bind(this),write:function(n){t.push(n)},complete:function(){r.emit("complete",Buffer.concat(t))}}),this._filter.start()};Zm.inherits(Vm,eh)});var Ur=W((k2,nh)=>{"use strict";nh.exports={PNG_SIGNATURE:[137,80,78,71,13,10,26,10],TYPE_IHDR:1229472850,TYPE_IEND:1229278788,TYPE_IDAT:1229209940,TYPE_PLTE:1347179589,TYPE_tRNS:1951551059,TYPE_gAMA:1732332865,COLORTYPE_GRAYSCALE:0,COLORTYPE_PALETTE:1,COLORTYPE_COLOR:2,COLORTYPE_ALPHA:4,COLORTYPE_PALETTE_COLOR:3,COLORTYPE_COLOR_ALPHA:6,COLORTYPE_TO_BPP_MAP:{0:1,2:3,3:1,4:2,6:4},GAMMA_DIVISION:1e5}});var Bo=W((T2,ih)=>{"use strict";var Oo=[];(function(){for(let e=0;e<256;e++){let t=e;for(let r=0;r<8;r++)t&1?t=3988292384^t>>>1:t=t>>>1;Oo[e]=t}})();var Ro=ih.exports=function(){this._crc=-1};Ro.prototype.write=function(e){for(let t=0;t<e.length;t++)this._crc=Oo[(this._crc^e[t])&255]^this._crc>>>8;return!0};Ro.prototype.crc32=function(){return this._crc^-1};Ro.crc32=function(e){let t=-1;for(let r=0;r<e.length;r++)t=Oo[(t^e[r])&255]^t>>>8;return t^-1}});var Co=W((O2,ah)=>{"use strict";var xe=Ur(),Hm=Bo(),Se=ah.exports=function(e,t){this._options=e,e.checkCRC=e.checkCRC!==!1,this._hasIHDR=!1,this._hasIEND=!1,this._emittedHeadersFinished=!1,this._palette=[],this._colorType=0,this._chunks={},this._chunks[xe.TYPE_IHDR]=this._handleIHDR.bind(this),this._chunks[xe.TYPE_IEND]=this._handleIEND.bind(this),this._chunks[xe.TYPE_IDAT]=this._handleIDAT.bind(this),this._chunks[xe.TYPE_PLTE]=this._handlePLTE.bind(this),this._chunks[xe.TYPE_tRNS]=this._handleTRNS.bind(this),this._chunks[xe.TYPE_gAMA]=this._handleGAMA.bind(this),this.read=t.read,this.error=t.error,this.metadata=t.metadata,this.gamma=t.gamma,this.transColor=t.transColor,this.palette=t.palette,this.parsed=t.parsed,this.inflateData=t.inflateData,this.finished=t.finished,this.simpleTransparency=t.simpleTransparency,this.headersFinished=t.headersFinished||function(){}};Se.prototype.start=function(){this.read(xe.PNG_SIGNATURE.length,this._parseSignature.bind(this))};Se.prototype._parseSignature=function(e){let t=xe.PNG_SIGNATURE;for(let r=0;r<t.length;r++)if(e[r]!==t[r]){this.error(new Error("Invalid file signature"));return}this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._parseChunkBegin=function(e){let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n="";for(let a=4;a<8;a++)n+=String.fromCharCode(e[a]);let i=!!(e[4]&32);if(!this._hasIHDR&&r!==xe.TYPE_IHDR){this.error(new Error("Expected IHDR on beggining"));return}if(this._crc=new Hm,this._crc.write(Buffer.from(n)),this._chunks[r])return this._chunks[r](t);if(!i){this.error(new Error("Unsupported critical chunk type "+n));return}this.read(t+4,this._skipChunk.bind(this))};Se.prototype._skipChunk=function(){this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._handleChunkEnd=function(){this.read(4,this._parseChunkEnd.bind(this))};Se.prototype._parseChunkEnd=function(e){let t=e.readInt32BE(0),r=this._crc.crc32();if(this._options.checkCRC&&r!==t){this.error(new Error("Crc error - "+t+" - "+r));return}this._hasIEND||this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._handleIHDR=function(e){this.read(e,this._parseIHDR.bind(this))};Se.prototype._parseIHDR=function(e){this._crc.write(e);let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n=e[8],i=e[9],a=e[10],o=e[11],s=e[12];if(n!==8&&n!==4&&n!==2&&n!==1&&n!==16){this.error(new Error("Unsupported bit depth "+n));return}if(!(i in xe.COLORTYPE_TO_BPP_MAP)){this.error(new Error("Unsupported color type"));return}if(a!==0){this.error(new Error("Unsupported compression method"));return}if(o!==0){this.error(new Error("Unsupported filter method"));return}if(s!==0&&s!==1){this.error(new Error("Unsupported interlace method"));return}this._colorType=i;let f=xe.COLORTYPE_TO_BPP_MAP[this._colorType];this._hasIHDR=!0,this.metadata({width:t,height:r,depth:n,interlace:!!s,palette:!!(i&xe.COLORTYPE_PALETTE),color:!!(i&xe.COLORTYPE_COLOR),alpha:!!(i&xe.COLORTYPE_ALPHA),bpp:f,colorType:i}),this._handleChunkEnd()};Se.prototype._handlePLTE=function(e){this.read(e,this._parsePLTE.bind(this))};Se.prototype._parsePLTE=function(e){this._crc.write(e);let t=Math.floor(e.length/3);for(let r=0;r<t;r++)this._palette.push([e[r*3],e[r*3+1],e[r*3+2],255]);this.palette(this._palette),this._handleChunkEnd()};Se.prototype._handleTRNS=function(e){this.simpleTransparency(),this.read(e,this._parseTRNS.bind(this))};Se.prototype._parseTRNS=function(e){if(this._crc.write(e),this._colorType===xe.COLORTYPE_PALETTE_COLOR){if(this._palette.length===0){this.error(new Error("Transparency chunk must be after palette"));return}if(e.length>this._palette.length){this.error(new Error("More transparent colors than palette size"));return}for(let t=0;t<e.length;t++)this._palette[t][3]=e[t];this.palette(this._palette)}this._colorType===xe.COLORTYPE_GRAYSCALE&&this.transColor([e.readUInt16BE(0)]),this._colorType===xe.COLORTYPE_COLOR&&this.transColor([e.readUInt16BE(0),e.readUInt16BE(2),e.readUInt16BE(4)]),this._handleChunkEnd()};Se.prototype._handleGAMA=function(e){this.read(e,this._parseGAMA.bind(this))};Se.prototype._parseGAMA=function(e){this._crc.write(e),this.gamma(e.readUInt32BE(0)/xe.GAMMA_DIVISION),this._handleChunkEnd()};Se.prototype._handleIDAT=function(e){this._emittedHeadersFinished||(this._emittedHeadersFinished=!0,this.headersFinished()),this.read(-e,this._parseIDAT.bind(this,e))};Se.prototype._parseIDAT=function(e,t){if(this._crc.write(t),this._colorType===xe.COLORTYPE_PALETTE_COLOR&&this._palette.length===0)throw new Error("Expected palette not found");this.inflateData(t);let r=e-t.length;r>0?this._handleIDAT(r):this._handleChunkEnd()};Se.prototype._handleIEND=function(e){this.read(e,this._parseIEND.bind(this))};Se.prototype._parseIEND=function(e){this._crc.write(e),this._hasIEND=!0,this._handleChunkEnd(),this.finished&&this.finished()}});var Fo=W(sh=>{"use strict";var oh=Io(),Wm=[function(){},function(e,t,r,n){if(n===t.length)throw new Error("Ran out of data");let i=t[n];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=255},function(e,t,r,n){if(n+1>=t.length)throw new Error("Ran out of data");let i=t[n];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=t[n+1]},function(e,t,r,n){if(n+2>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=255},function(e,t,r,n){if(n+3>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=t[n+3]}],Ym=[function(){},function(e,t,r,n){let i=t[0];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=n},function(e,t,r){let n=t[0];e[r]=n,e[r+1]=n,e[r+2]=n,e[r+3]=t[1]},function(e,t,r,n){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=n},function(e,t,r){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=t[3]}];function $m(e,t){let r=[],n=0;function i(){if(n===e.length)throw new Error("Ran out of data");let a=e[n];n++;let o,s,f,l,u,c,p,h;switch(t){default:throw new Error("unrecognised depth");case 16:p=e[n],n++,r.push((a<<8)+p);break;case 4:p=a&15,h=a>>4,r.push(h,p);break;case 2:u=a&3,c=a>>2&3,p=a>>4&3,h=a>>6&3,r.push(h,p,c,u);break;case 1:o=a&1,s=a>>1&1,f=a>>2&1,l=a>>3&1,u=a>>4&1,c=a>>5&1,p=a>>6&1,h=a>>7&1,r.push(h,p,c,u,l,f,s,o);break}}return{get:function(a){for(;r.length<a;)i();let o=r.slice(0,a);return r=r.slice(a),o},resetAfterLine:function(){r.length=0},end:function(){if(n!==e.length)throw new Error("extra data found")}}}function Km(e,t,r,n,i,a){let o=e.width,s=e.height,f=e.index;for(let l=0;l<s;l++)for(let u=0;u<o;u++){let c=r(u,l,f);Wm[n](t,i,c,a),a+=n}return a}function Xm(e,t,r,n,i,a){let o=e.width,s=e.height,f=e.index;for(let l=0;l<s;l++){for(let u=0;u<o;u++){let c=i.get(n),p=r(u,l,f);Ym[n](t,c,p,a)}i.resetAfterLine()}}sh.dataToBitMap=function(e,t){let r=t.width,n=t.height,i=t.depth,a=t.bpp,o=t.interlace,s;i!==8&&(s=$m(e,i));let f;i<=8?f=Buffer.alloc(r*n*4):f=new Uint16Array(r*n*4);let l=Math.pow(2,i)-1,u=0,c,p;if(o)c=oh.getImagePasses(r,n),p=oh.getInterlaceIterator(r,n);else{let h=0;p=function(){let y=h;return h+=4,y},c=[{width:r,height:n}]}for(let h=0;h<c.length;h++)i===8?u=Km(c[h],f,p,a,e,u):Xm(c[h],f,p,a,s,l);if(i===8){if(u!==e.length)throw new Error("extra data found")}else s.end();return f}});var Lo=W((B2,lh)=>{"use strict";function Jm(e,t,r,n,i){let a=0;for(let o=0;o<n;o++)for(let s=0;s<r;s++){let f=i[e[a]];if(!f)throw new Error("index "+e[a]+" not in palette");for(let l=0;l<4;l++)t[a+l]=f[l];a+=4}}function Qm(e,t,r,n,i){let a=0;for(let o=0;o<n;o++)for(let s=0;s<r;s++){let f=!1;if(i.length===1?i[0]===e[a]&&(f=!0):i[0]===e[a]&&i[1]===e[a+1]&&i[2]===e[a+2]&&(f=!0),f)for(let l=0;l<4;l++)t[a+l]=0;a+=4}}function ey(e,t,r,n,i){let a=255,o=Math.pow(2,i)-1,s=0;for(let f=0;f<n;f++)for(let l=0;l<r;l++){for(let u=0;u<4;u++)t[s+u]=Math.floor(e[s+u]*a/o+.5);s+=4}}lh.exports=function(e,t,r=!1){let n=t.depth,i=t.width,a=t.height,o=t.colorType,s=t.transColor,f=t.palette,l=e;return o===3?Jm(e,l,i,a,f):(s&&Qm(e,l,i,a,s),n!==8&&!r&&(n===16&&(l=Buffer.alloc(i*a*4)),ey(e,l,i,a,n))),l}});var ch=W((C2,uh)=>{"use strict";var ty=De(),No=Dr(),fh=Ao(),ry=rh(),ny=Co(),iy=Fo(),ay=Lo(),gt=uh.exports=function(e){fh.call(this),this._parser=new ny(e,{read:this.read.bind(this),error:this._handleError.bind(this),metadata:this._handleMetaData.bind(this),gamma:this.emit.bind(this,"gamma"),palette:this._handlePalette.bind(this),transColor:this._handleTransColor.bind(this),finished:this._finished.bind(this),inflateData:this._inflateData.bind(this),simpleTransparency:this._simpleTransparency.bind(this),headersFinished:this._headersFinished.bind(this)}),this._options=e,this.writable=!0,this._parser.start()};ty.inherits(gt,fh);gt.prototype._handleError=function(e){this.emit("error",e),this.writable=!1,this.destroy(),this._inflate&&this._inflate.destroy&&this._inflate.destroy(),this._filter&&(this._filter.destroy(),this._filter.on("error",function(){})),this.errord=!0};gt.prototype._inflateData=function(e){if(!this._inflate)if(this._bitmapInfo.interlace)this._inflate=No.createInflate(),this._inflate.on("error",this.emit.bind(this,"error")),this._filter.on("complete",this._complete.bind(this)),this._inflate.pipe(this._filter);else{let r=((this._bitmapInfo.width*this._bitmapInfo.bpp*this._bitmapInfo.depth+7>>3)+1)*this._bitmapInfo.height,n=Math.max(r,No.Z_MIN_CHUNK);this._inflate=No.createInflate({chunkSize:n});let i=r,a=this.emit.bind(this,"error");this._inflate.on("error",function(s){i&&a(s)}),this._filter.on("complete",this._complete.bind(this));let o=this._filter.write.bind(this._filter);this._inflate.on("data",function(s){i&&(s.length>i&&(s=s.slice(0,i)),i-=s.length,o(s))}),this._inflate.on("end",this._filter.end.bind(this._filter))}this._inflate.write(e)};gt.prototype._handleMetaData=function(e){this._metaData=e,this._bitmapInfo=Object.create(e),this._filter=new ry(this._bitmapInfo)};gt.prototype._handleTransColor=function(e){this._bitmapInfo.transColor=e};gt.prototype._handlePalette=function(e){this._bitmapInfo.palette=e};gt.prototype._simpleTransparency=function(){this._metaData.alpha=!0};gt.prototype._headersFinished=function(){this.emit("metadata",this._metaData)};gt.prototype._finished=function(){this.errord||(this._inflate?this._inflate.end():this.emit("error","No Inflate block"))};gt.prototype._complete=function(e){if(this.errord)return;let t;try{let r=iy.dataToBitMap(e,this._bitmapInfo);t=ay(r,this._bitmapInfo,this._options.skipRescale),r=null}catch(r){this._handleError(r);return}this.emit("parsed",t)}});var dh=W((F2,hh)=>{"use strict";var Xe=Ur();hh.exports=function(e,t,r,n){let i=[Xe.COLORTYPE_COLOR_ALPHA,Xe.COLORTYPE_ALPHA].indexOf(n.colorType)!==-1;if(n.colorType===n.inputColorType){let y=function(){let m=new ArrayBuffer(2);return new DataView(m).setInt16(0,256,!0),new Int16Array(m)[0]!==256}();if(n.bitDepth===8||n.bitDepth===16&&y)return e}let a=n.bitDepth!==16?e:new Uint16Array(e.buffer),o=255,s=Xe.COLORTYPE_TO_BPP_MAP[n.inputColorType];s===4&&!n.inputHasAlpha&&(s=3);let f=Xe.COLORTYPE_TO_BPP_MAP[n.colorType];n.bitDepth===16&&(o=65535,f*=2);let l=Buffer.alloc(t*r*f),u=0,c=0,p=n.bgColor||{};p.red===void 0&&(p.red=o),p.green===void 0&&(p.green=o),p.blue===void 0&&(p.blue=o);function h(){let y,m,g,b=o;switch(n.inputColorType){case Xe.COLORTYPE_COLOR_ALPHA:b=a[u+3],y=a[u],m=a[u+1],g=a[u+2];break;case Xe.COLORTYPE_COLOR:y=a[u],m=a[u+1],g=a[u+2];break;case Xe.COLORTYPE_ALPHA:b=a[u+1],y=a[u],m=y,g=y;break;case Xe.COLORTYPE_GRAYSCALE:y=a[u],m=y,g=y;break;default:throw new Error("input color type:"+n.inputColorType+" is not supported at present")}return n.inputHasAlpha&&(i||(b/=o,y=Math.min(Math.max(Math.round((1-b)*p.red+b*y),0),o),m=Math.min(Math.max(Math.round((1-b)*p.green+b*m),0),o),g=Math.min(Math.max(Math.round((1-b)*p.blue+b*g),0),o))),{red:y,green:m,blue:g,alpha:b}}for(let y=0;y<r;y++)for(let m=0;m<t;m++){let g=h(a,u);switch(n.colorType){case Xe.COLORTYPE_COLOR_ALPHA:case Xe.COLORTYPE_COLOR:n.bitDepth===8?(l[c]=g.red,l[c+1]=g.green,l[c+2]=g.blue,i&&(l[c+3]=g.alpha)):(l.writeUInt16BE(g.red,c),l.writeUInt16BE(g.green,c+2),l.writeUInt16BE(g.blue,c+4),i&&l.writeUInt16BE(g.alpha,c+6));break;case Xe.COLORTYPE_ALPHA:case Xe.COLORTYPE_GRAYSCALE:{let b=(g.red+g.green+g.blue)/3;n.bitDepth===8?(l[c]=b,i&&(l[c+1]=g.alpha)):(l.writeUInt16BE(b,c),i&&l.writeUInt16BE(g.alpha,c+2));break}default:throw new Error("unrecognised color Type "+n.colorType)}u+=s,c+=f}return l}});var mh=W((L2,_h)=>{"use strict";var ph=ko();function oy(e,t,r,n,i){for(let a=0;a<r;a++)n[i+a]=e[t+a]}function sy(e,t,r){let n=0,i=t+r;for(let a=t;a<i;a++)n+=Math.abs(e[a]);return n}function ly(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=e[t+o]-s;n[i+o]=f}}function fy(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=e[t+a]-o;i+=Math.abs(s)}return i}function uy(e,t,r,n,i){for(let a=0;a<r;a++){let o=t>0?e[t+a-r]:0,s=e[t+a]-o;n[i+a]=s}}function cy(e,t,r){let n=0,i=t+r;for(let a=t;a<i;a++){let o=t>0?e[a-r]:0,s=e[a]-o;n+=Math.abs(s)}return n}function hy(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=t>0?e[t+o-r]:0,l=e[t+o]-(s+f>>1);n[i+o]=l}}function dy(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=t>0?e[t+a-r]:0,f=e[t+a]-(o+s>>1);i+=Math.abs(f)}return i}function py(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=t>0?e[t+o-r]:0,l=t>0&&o>=a?e[t+o-(r+a)]:0,u=e[t+o]-ph(s,f,l);n[i+o]=u}}function _y(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=t>0?e[t+a-r]:0,f=t>0&&a>=n?e[t+a-(r+n)]:0,l=e[t+a]-ph(o,s,f);i+=Math.abs(l)}return i}var my={0:oy,1:ly,2:uy,3:hy,4:py},yy={0:sy,1:fy,2:cy,3:dy,4:_y};_h.exports=function(e,t,r,n,i){let a;if(!("filterType"in n)||n.filterType===-1)a=[0,1,2,3,4];else if(typeof n.filterType=="number")a=[n.filterType];else throw new Error("unrecognised filter types");n.bitDepth===16&&(i*=2);let o=t*i,s=0,f=0,l=Buffer.alloc((o+1)*r),u=a[0];for(let c=0;c<r;c++){if(a.length>1){let p=1/0;for(let h=0;h<a.length;h++){let y=yy[a[h]](e,f,o,i);y<p&&(u=a[h],p=y)}}l[s]=u,s++,my[u](e,f,o,l,s,i),s+=o,f+=o}return l}});var Po=W((N2,yh)=>{"use strict";var Re=Ur(),gy=Bo(),by=dh(),wy=mh(),vy=Dr(),Mt=yh.exports=function(e){if(this._options=e,e.deflateChunkSize=e.deflateChunkSize||32*1024,e.deflateLevel=e.deflateLevel!=null?e.deflateLevel:9,e.deflateStrategy=e.deflateStrategy!=null?e.deflateStrategy:3,e.inputHasAlpha=e.inputHasAlpha!=null?e.inputHasAlpha:!0,e.deflateFactory=e.deflateFactory||vy.createDeflate,e.bitDepth=e.bitDepth||8,e.colorType=typeof e.colorType=="number"?e.colorType:Re.COLORTYPE_COLOR_ALPHA,e.inputColorType=typeof e.inputColorType=="number"?e.inputColorType:Re.COLORTYPE_COLOR_ALPHA,[Re.COLORTYPE_GRAYSCALE,Re.COLORTYPE_COLOR,Re.COLORTYPE_COLOR_ALPHA,Re.COLORTYPE_ALPHA].indexOf(e.colorType)===-1)throw new Error("option color type:"+e.colorType+" is not supported at present");if([Re.COLORTYPE_GRAYSCALE,Re.COLORTYPE_COLOR,Re.COLORTYPE_COLOR_ALPHA,Re.COLORTYPE_ALPHA].indexOf(e.inputColorType)===-1)throw new Error("option input color type:"+e.inputColorType+" is not supported at present");if(e.bitDepth!==8&&e.bitDepth!==16)throw new Error("option bit depth:"+e.bitDepth+" is not supported at present")};Mt.prototype.getDeflateOptions=function(){return{chunkSize:this._options.deflateChunkSize,level:this._options.deflateLevel,strategy:this._options.deflateStrategy}};Mt.prototype.createDeflate=function(){return this._options.deflateFactory(this.getDeflateOptions())};Mt.prototype.filterData=function(e,t,r){let n=by(e,t,r,this._options),i=Re.COLORTYPE_TO_BPP_MAP[this._options.colorType];return wy(n,t,r,this._options,i)};Mt.prototype._packChunk=function(e,t){let r=t?t.length:0,n=Buffer.alloc(r+12);return n.writeUInt32BE(r,0),n.writeUInt32BE(e,4),t&&t.copy(n,8),n.writeInt32BE(gy.crc32(n.slice(4,n.length-4)),n.length-4),n};Mt.prototype.packGAMA=function(e){let t=Buffer.alloc(4);return t.writeUInt32BE(Math.floor(e*Re.GAMMA_DIVISION),0),this._packChunk(Re.TYPE_gAMA,t)};Mt.prototype.packIHDR=function(e,t){let r=Buffer.alloc(13);return r.writeUInt32BE(e,0),r.writeUInt32BE(t,4),r[8]=this._options.bitDepth,r[9]=this._options.colorType,r[10]=0,r[11]=0,r[12]=0,this._packChunk(Re.TYPE_IHDR,r)};Mt.prototype.packIDAT=function(e){return this._packChunk(Re.TYPE_IDAT,e)};Mt.prototype.packIEND=function(){return this._packChunk(Re.TYPE_IEND,null)}});var vh=W((P2,wh)=>{"use strict";var xy=De(),gh=nn(),Ey=Ur(),Ay=Po(),bh=wh.exports=function(e){gh.call(this);let t=e||{};this._packer=new Ay(t),this._deflate=this._packer.createDeflate(),this.readable=!0};xy.inherits(bh,gh);bh.prototype.pack=function(e,t,r,n){this.emit("data",Buffer.from(Ey.PNG_SIGNATURE)),this.emit("data",this._packer.packIHDR(t,r)),n&&this.emit("data",this._packer.packGAMA(n));let i=this._packer.filterData(e,t,r);this._deflate.on("error",this.emit.bind(this,"error")),this._deflate.on("data",function(a){this.emit("data",this._packer.packIDAT(a))}.bind(this)),this._deflate.on("end",function(){this.emit("data",this._packer.packIEND()),this.emit("end")}.bind(this)),this._deflate.end(i)}});var kh=W((Cn,Ih)=>{"use strict";var xh=Or().ok,jr=Dr(),Sy=De(),Eh=li().kMaxLength;function hr(e){if(!(this instanceof hr))return new hr(e);e&&e.chunkSize<jr.Z_MIN_CHUNK&&(e.chunkSize=jr.Z_MIN_CHUNK),jr.Inflate.call(this,e),this._offset=this._offset===void 0?this._outOffset:this._offset,this._buffer=this._buffer||this._outBuffer,e&&e.maxLength!=null&&(this._maxLength=e.maxLength)}function Iy(e){return new hr(e)}function Ah(e,t){t&&process.nextTick(t),e._handle&&(e._handle.close(),e._handle=null)}hr.prototype._processChunk=function(e,t,r){if(typeof r=="function")return jr.Inflate._processChunk.call(this,e,t,r);let n=this,i=e&&e.length,a=this._chunkSize-this._offset,o=this._maxLength,s=0,f=[],l=0,u;this.on("error",function(y){u=y});function c(y,m){if(n._hadError)return;let g=a-m;if(xh(g>=0,"have should not go down"),g>0){let b=n._buffer.slice(n._offset,n._offset+g);if(n._offset+=g,b.length>o&&(b=b.slice(0,o)),f.push(b),l+=b.length,o-=b.length,o===0)return!1}return(m===0||n._offset>=n._chunkSize)&&(a=n._chunkSize,n._offset=0,n._buffer=Buffer.allocUnsafe(n._chunkSize)),m===0?(s+=i-y,i=y,!0):!1}xh(this._handle,"zlib binding closed");let p;do p=this._handle.writeSync(t,e,s,i,this._buffer,this._offset,a),p=p||this._writeState;while(!this._hadError&&c(p[0],p[1]));if(this._hadError)throw u;if(l>=Eh)throw Ah(this),new RangeError("Cannot create final Buffer. It would be larger than 0x"+Eh.toString(16)+" bytes");let h=Buffer.concat(f,l);return Ah(this),h};Sy.inherits(hr,jr.Inflate);function ky(e,t){if(typeof t=="string"&&(t=Buffer.from(t)),!(t instanceof Buffer))throw new TypeError("Not a string or buffer");let r=e._finishFlushFlag;return r==null&&(r=jr.Z_FINISH),e._processChunk(t,r)}function Sh(e,t){return ky(new hr(t),e)}Ih.exports=Cn=Sh;Cn.Inflate=hr;Cn.createInflate=Iy;Cn.inflateSync=Sh});var Mo=W((M2,Oh)=>{"use strict";var Th=Oh.exports=function(e){this._buffer=e,this._reads=[]};Th.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t})};Th.prototype.process=function(){for(;this._reads.length>0&&this._buffer.length;){let e=this._reads[0];if(this._buffer.length&&(this._buffer.length>=e.length||e.allowLess)){this._reads.shift();let t=this._buffer;this._buffer=t.slice(e.length),e.func.call(this,t.slice(0,e.length))}else break}if(this._reads.length>0)throw new Error("There are some read requests waitng on finished stream");if(this._buffer.length>0)throw new Error("unrecognised content at end of stream")}});var Bh=W(Rh=>{"use strict";var Ty=Mo(),Oy=To();Rh.process=function(e,t){let r=[],n=new Ty(e);return new Oy(t,{read:n.read.bind(n),write:function(a){r.push(a)},complete:function(){}}).start(),n.process(),Buffer.concat(r)}});var Nh=W((z2,Lh)=>{"use strict";var Ch=!0,Fh=Dr(),Ry=kh();Fh.deflateSync||(Ch=!1);var By=Mo(),Cy=Bh(),Fy=Co(),Ly=Fo(),Ny=Lo();Lh.exports=function(e,t){if(!Ch)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r;function n(T){r=T}let i;function a(T){i=T}function o(T){i.transColor=T}function s(T){i.palette=T}function f(){i.alpha=!0}let l;function u(T){l=T}let c=[];function p(T){c.push(T)}let h=new By(e);if(new Fy(t,{read:h.read.bind(h),error:n,metadata:a,gamma:u,palette:s,transColor:o,inflateData:p,simpleTransparency:f}).start(),h.process(),r)throw r;let m=Buffer.concat(c);c.length=0;let g;if(i.interlace)g=Fh.inflateSync(m);else{let S=((i.width*i.bpp*i.depth+7>>3)+1)*i.height;g=Ry(m,{chunkSize:S,maxLength:S})}if(m=null,!g||!g.length)throw new Error("bad png - invalid inflate data response");let b=Cy.process(g,i);m=null;let A=Ly.dataToBitMap(b,i);b=null;let x=Ny(A,i,t.skipRescale);return i.data=x,i.gamma=l||0,i}});var zh=W((U2,Dh)=>{"use strict";var Ph=!0,Mh=Dr();Mh.deflateSync||(Ph=!1);var Py=Ur(),My=Po();Dh.exports=function(e,t){if(!Ph)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r=t||{},n=new My(r),i=[];i.push(Buffer.from(Py.PNG_SIGNATURE)),i.push(n.packIHDR(e.width,e.height)),e.gamma&&i.push(n.packGAMA(e.gamma));let a=n.filterData(e.data,e.width,e.height),o=Mh.deflateSync(a,n.getDeflateOptions());if(a=null,!o||!o.length)throw new Error("bad png - invalid compressed data response");return i.push(n.packIDAT(o)),i.push(n.packIEND()),Buffer.concat(i)}});var Uh=W(Do=>{"use strict";var Dy=Nh(),zy=zh();Do.read=function(e,t){return Dy(e,t||{})};Do.write=function(e,t){return zy(e,t)}});var Zh=W(Gh=>{"use strict";var Uy=De(),jh=nn(),jy=ch(),Gy=vh(),Zy=Uh(),Ne=Gh.PNG=function(e){jh.call(this),e=e||{},this.width=e.width|0,this.height=e.height|0,this.data=this.width>0&&this.height>0?Buffer.alloc(4*this.width*this.height):null,e.fill&&this.data&&this.data.fill(0),this.gamma=0,this.readable=this.writable=!0,this._parser=new jy(e),this._parser.on("error",this.emit.bind(this,"error")),this._parser.on("close",this._handleClose.bind(this)),this._parser.on("metadata",this._metadata.bind(this)),this._parser.on("gamma",this._gamma.bind(this)),this._parser.on("parsed",function(t){this.data=t,this.emit("parsed",t)}.bind(this)),this._packer=new Gy(e),this._packer.on("data",this.emit.bind(this,"data")),this._packer.on("end",this.emit.bind(this,"end")),this._parser.on("close",this._handleClose.bind(this)),this._packer.on("error",this.emit.bind(this,"error"))};Uy.inherits(Ne,jh);Ne.sync=Zy;Ne.prototype.pack=function(){return!this.data||!this.data.length?(this.emit("error","No data provided"),this):(process.nextTick(function(){this._packer.pack(this.data,this.width,this.height,this.gamma)}.bind(this)),this)};Ne.prototype.parse=function(e,t){if(t){let r,n;r=function(i){this.removeListener("error",n),this.data=i,t(null,this)}.bind(this),n=function(i){this.removeListener("parsed",r),t(i,null)}.bind(this),this.once("parsed",r),this.once("error",n)}return this.end(e),this};Ne.prototype.write=function(e){return this._parser.write(e),!0};Ne.prototype.end=function(e){this._parser.end(e)};Ne.prototype._metadata=function(e){this.width=e.width,this.height=e.height,this.emit("metadata",e)};Ne.prototype._gamma=function(e){this.gamma=e};Ne.prototype._handleClose=function(){!this._parser.writable&&!this._packer.readable&&this.emit("close")};Ne.bitblt=function(e,t,r,n,i,a,o,s){if(r|=0,n|=0,i|=0,a|=0,o|=0,s|=0,r>e.width||n>e.height||r+i>e.width||n+a>e.height)throw new Error("bitblt reading outside image");if(o>t.width||s>t.height||o+i>t.width||s+a>t.height)throw new Error("bitblt writing outside image");for(let f=0;f<a;f++)e.data.copy(t.data,(s+f)*t.width+o<<2,(n+f)*e.width+r<<2,(n+f)*e.width+r+i<<2)};Ne.prototype.bitblt=function(e,t,r,n,i,a,o){return Ne.bitblt(this,e,t,r,n,i,a,o),this};Ne.adjustGamma=function(e){if(e.gamma){for(let t=0;t<e.height;t++)for(let r=0;r<e.width;r++){let n=e.width*t+r<<2;for(let i=0;i<3;i++){let a=e.data[n+i]/255;a=Math.pow(a,1/2.2/e.gamma),e.data[n+i]=Math.round(a*255)}}e.gamma=0}};Ne.prototype.adjustGamma=function(){Ne.adjustGamma(this)}});var $h=W((Yh,Uo)=>{(function(e){typeof Yh=="object"&&typeof Uo<"u"?Uo.exports=e():typeof define=="function"&&define.amd?define([],e):(typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:this).JSZip=e()})(function(){return function e(t,r,n){function i(s,f){if(!r[s]){if(!t[s]){var l=typeof Vr=="function"&&Vr;if(!f&&l)return l(s,!0);if(a)return a(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[s]={exports:{}};t[s][0].call(c.exports,function(p){var h=t[s][1][p];return i(h||p)},c,c.exports,e,t,r,n)}return r[s].exports}for(var a=typeof Vr=="function"&&Vr,o=0;o<n.length;o++)i(n[o]);return i}({1:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./support"),a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(o){for(var s,f,l,u,c,p,h,y=[],m=0,g=o.length,b=g,A=n.getTypeOf(o)!=="string";m<o.length;)b=g-m,l=A?(s=o[m++],f=m<g?o[m++]:0,m<g?o[m++]:0):(s=o.charCodeAt(m++),f=m<g?o.charCodeAt(m++):0,m<g?o.charCodeAt(m++):0),u=s>>2,c=(3&s)<<4|f>>4,p=1<b?(15&f)<<2|l>>6:64,h=2<b?63&l:64,y.push(a.charAt(u)+a.charAt(c)+a.charAt(p)+a.charAt(h));return y.join("")},r.decode=function(o){var s,f,l,u,c,p,h=0,y=0,m="data:";if(o.substr(0,m.length)===m)throw new Error("Invalid base64 input, it looks like a data url.");var g,b=3*(o=o.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(o.charAt(o.length-1)===a.charAt(64)&&b--,o.charAt(o.length-2)===a.charAt(64)&&b--,b%1!=0)throw new Error("Invalid base64 input, bad content length.");for(g=i.uint8array?new Uint8Array(0|b):new Array(0|b);h<o.length;)s=a.indexOf(o.charAt(h++))<<2|(u=a.indexOf(o.charAt(h++)))>>4,f=(15&u)<<4|(c=a.indexOf(o.charAt(h++)))>>2,l=(3&c)<<6|(p=a.indexOf(o.charAt(h++))),g[y++]=s,c!==64&&(g[y++]=f),p!==64&&(g[y++]=l);return g}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),a=e("./stream/Crc32Probe"),o=e("./stream/DataLengthProbe");function s(f,l,u,c,p){this.compressedSize=f,this.uncompressedSize=l,this.crc32=u,this.compression=c,this.compressedContent=p}s.prototype={getContentWorker:function(){var f=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),l=this;return f.on("end",function(){if(this.streamInfo.data_length!==l.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),f},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(f,l,u){return f.pipe(new a).pipe(new o("uncompressedSize")).pipe(l.compressWorker(u)).pipe(new o("compressedSize")).withStreamInfo("compression",l)},t.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),i=function(){for(var a,o=[],s=0;s<256;s++){a=s;for(var f=0;f<8;f++)a=1&a?3988292384^a>>>1:a>>>1;o[s]=a}return o}();t.exports=function(a,o){return a!==void 0&&a.length?n.getTypeOf(a)!=="string"?function(s,f,l,u){var c=i,p=u+l;s^=-1;for(var h=u;h<p;h++)s=s>>>8^c[255&(s^f[h])];return-1^s}(0|o,a,a.length,0):function(s,f,l,u){var c=i,p=u+l;s^=-1;for(var h=u;h<p;h++)s=s>>>8^c[255&(s^f.charCodeAt(h))];return-1^s}(0|o,a,a.length,0):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n=null;n=typeof Promise<"u"?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",i=e("pako"),a=e("./utils"),o=e("./stream/GenericWorker"),s=n?"uint8array":"array";function f(l,u){o.call(this,"FlateWorker/"+l),this._pako=null,this._pakoAction=l,this._pakoOptions=u,this.meta={}}r.magic="\b\0",a.inherits(f,o),f.prototype.processChunk=function(l){this.meta=l.meta,this._pako===null&&this._createPako(),this._pako.push(a.transformTo(s,l.data),!1)},f.prototype.flush=function(){o.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},f.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null},f.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var l=this;this._pako.onData=function(u){l.push({data:u,meta:l.meta})}},r.compressWorker=function(l){return new f("Deflate",l)},r.uncompressWorker=function(){return new f("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(c,p){var h,y="";for(h=0;h<p;h++)y+=String.fromCharCode(255&c),c>>>=8;return y}function i(c,p,h,y,m,g){var b,A,x=c.file,T=c.compression,S=g!==s.utf8encode,L=a.transformTo("string",g(x.name)),k=a.transformTo("string",s.utf8encode(x.name)),F=x.comment,Z=a.transformTo("string",g(F)),E=a.transformTo("string",s.utf8encode(F)),O=k.length!==x.name.length,_=E.length!==F.length,M="",te="",j="",ne=x.dir,G=x.date,Q={crc32:0,compressedSize:0,uncompressedSize:0};p&&!h||(Q.crc32=c.crc32,Q.compressedSize=c.compressedSize,Q.uncompressedSize=c.uncompressedSize);var C=0;p&&(C|=8),S||!O&&!_||(C|=2048);var B=0,ee=0;ne&&(B|=16),m==="UNIX"?(ee=798,B|=function(Y,ye){var Te=Y;return Y||(Te=ye?16893:33204),(65535&Te)<<16}(x.unixPermissions,ne)):(ee=20,B|=function(Y){return 63&(Y||0)}(x.dosPermissions)),b=G.getUTCHours(),b<<=6,b|=G.getUTCMinutes(),b<<=5,b|=G.getUTCSeconds()/2,A=G.getUTCFullYear()-1980,A<<=4,A|=G.getUTCMonth()+1,A<<=5,A|=G.getUTCDate(),O&&(te=n(1,1)+n(f(L),4)+k,M+="up"+n(te.length,2)+te),_&&(j=n(1,1)+n(f(Z),4)+E,M+="uc"+n(j.length,2)+j);var $="";return $+=`
\0`,$+=n(C,2),$+=T.magic,$+=n(b,2),$+=n(A,2),$+=n(Q.crc32,4),$+=n(Q.compressedSize,4),$+=n(Q.uncompressedSize,4),$+=n(L.length,2),$+=n(M.length,2),{fileRecord:l.LOCAL_FILE_HEADER+$+L+M,dirRecord:l.CENTRAL_FILE_HEADER+n(ee,2)+$+n(Z.length,2)+"\0\0\0\0"+n(B,4)+n(y,4)+L+M+Z}}var a=e("../utils"),o=e("../stream/GenericWorker"),s=e("../utf8"),f=e("../crc32"),l=e("../signature");function u(c,p,h,y){o.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=p,this.zipPlatform=h,this.encodeFileName=y,this.streamFiles=c,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}a.inherits(u,o),u.prototype.push=function(c){var p=c.meta.percent||0,h=this.entriesCount,y=this._sources.length;this.accumulate?this.contentBuffer.push(c):(this.bytesWritten+=c.data.length,o.prototype.push.call(this,{data:c.data,meta:{currentFile:this.currentFile,percent:h?(p+100*(h-y-1))/h:100}}))},u.prototype.openedSource=function(c){this.currentSourceOffset=this.bytesWritten,this.currentFile=c.file.name;var p=this.streamFiles&&!c.file.dir;if(p){var h=i(c,p,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:h.fileRecord,meta:{percent:0}})}else this.accumulate=!0},u.prototype.closedSource=function(c){this.accumulate=!1;var p=this.streamFiles&&!c.file.dir,h=i(c,p,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(h.dirRecord),p)this.push({data:function(y){return l.DATA_DESCRIPTOR+n(y.crc32,4)+n(y.compressedSize,4)+n(y.uncompressedSize,4)}(c),meta:{percent:100}});else for(this.push({data:h.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},u.prototype.flush=function(){for(var c=this.bytesWritten,p=0;p<this.dirRecords.length;p++)this.push({data:this.dirRecords[p],meta:{percent:100}});var h=this.bytesWritten-c,y=function(m,g,b,A,x){var T=a.transformTo("string",x(A));return l.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(m,2)+n(m,2)+n(g,4)+n(b,4)+n(T.length,2)+T}(this.dirRecords.length,h,c,this.zipComment,this.encodeFileName);this.push({data:y,meta:{percent:100}})},u.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},u.prototype.registerPrevious=function(c){this._sources.push(c);var p=this;return c.on("data",function(h){p.processChunk(h)}),c.on("end",function(){p.closedSource(p.previous.streamInfo),p._sources.length?p.prepareNextSource():p.end()}),c.on("error",function(h){p.error(h)}),this},u.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},u.prototype.error=function(c){var p=this._sources;if(!o.prototype.error.call(this,c))return!1;for(var h=0;h<p.length;h++)try{p[h].error(c)}catch{}return!0},u.prototype.lock=function(){o.prototype.lock.call(this);for(var c=this._sources,p=0;p<c.length;p++)c[p].lock()},t.exports=u},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),i=e("./ZipFileWorker");r.generateWorker=function(a,o,s){var f=new i(o.streamFiles,s,o.platform,o.encodeFileName),l=0;try{a.forEach(function(u,c){l++;var p=function(g,b){var A=g||b,x=n[A];if(!x)throw new Error(A+" is not a valid compression method !");return x}(c.options.compression,o.compression),h=c.options.compressionOptions||o.compressionOptions||{},y=c.dir,m=c.date;c._compressWorker(p,h).withStreamInfo("file",{name:u,dir:y,date:m,comment:c.comment||"",unixPermissions:c.unixPermissions,dosPermissions:c.dosPermissions}).pipe(f)}),f.entriesCount=l}catch(u){f.error(u)}return f}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var i=new n;for(var a in this)typeof this[a]!="function"&&(i[a]=this[a]);return i}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(i,a){return new n().loadAsync(i,a)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),a=e("./utf8"),o=e("./zipEntries"),s=e("./stream/Crc32Probe"),f=e("./nodejsUtils");function l(u){return new i.Promise(function(c,p){var h=u.decompressed.getContentWorker().pipe(new s);h.on("error",function(y){p(y)}).on("end",function(){h.streamInfo.crc32!==u.decompressed.crc32?p(new Error("Corrupted zip : CRC32 mismatch")):c()}).resume()})}t.exports=function(u,c){var p=this;return c=n.extend(c||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:a.utf8decode}),f.isNode&&f.isStream(u)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",u,!0,c.optimizedBinaryString,c.base64).then(function(h){var y=new o(c);return y.load(h),y}).then(function(h){var y=[i.Promise.resolve(h)],m=h.files;if(c.checkCRC32)for(var g=0;g<m.length;g++)y.push(l(m[g]));return i.Promise.all(y)}).then(function(h){for(var y=h.shift(),m=y.files,g=0;g<m.length;g++){var b=m[g],A=b.fileNameStr,x=n.resolve(b.fileNameStr);p.file(x,b.decompressed,{binary:!0,optimizedBinaryString:!0,date:b.date,dir:b.dir,comment:b.fileCommentStr.length?b.fileCommentStr:null,unixPermissions:b.unixPermissions,dosPermissions:b.dosPermissions,createFolders:c.createFolders}),b.dir||(p.file(x).unsafeOriginalName=A)}return y.zipComment.length&&(p.comment=y.zipComment),p})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function a(o,s){i.call(this,"Nodejs stream input adapter for "+o),this._upstreamEnded=!1,this._bindStream(s)}n.inherits(a,i),a.prototype._bindStream=function(o){var s=this;(this._stream=o).pause(),o.on("data",function(f){s.push({data:f,meta:{percent:0}})}).on("error",function(f){s.isPaused?this.generatedError=f:s.error(f)}).on("end",function(){s.isPaused?s._upstreamEnded=!0:s.end()})},a.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},a.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=a},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function i(a,o,s){n.call(this,o),this._helper=a;var f=this;a.on("data",function(l,u){f.push(l)||f._helper.pause(),s&&s(u)}).on("error",function(l){f.emit("error",l)}).on("end",function(){f.push(null)})}e("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:typeof Buffer<"u",newBufferFrom:function(n,i){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(n,i);if(typeof n=="number")throw new Error('The "data" argument must not be a number');return new Buffer(n,i)},allocBuffer:function(n){if(Buffer.alloc)return Buffer.alloc(n);var i=new Buffer(n);return i.fill(0),i},isBuffer:function(n){return Buffer.isBuffer(n)},isStream:function(n){return n&&typeof n.on=="function"&&typeof n.pause=="function"&&typeof n.resume=="function"}}},{}],15:[function(e,t,r){"use strict";function n(x,T,S){var L,k=a.getTypeOf(T),F=a.extend(S||{},f);F.date=F.date||new Date,F.compression!==null&&(F.compression=F.compression.toUpperCase()),typeof F.unixPermissions=="string"&&(F.unixPermissions=parseInt(F.unixPermissions,8)),F.unixPermissions&&16384&F.unixPermissions&&(F.dir=!0),F.dosPermissions&&16&F.dosPermissions&&(F.dir=!0),F.dir&&(x=m(x)),F.createFolders&&(L=y(x))&&g.call(this,L,!0);var Z=k==="string"&&F.binary===!1&&F.base64===!1;S&&S.binary!==void 0||(F.binary=!Z),(T instanceof l&&T.uncompressedSize===0||F.dir||!T||T.length===0)&&(F.base64=!1,F.binary=!0,T="",F.compression="STORE",k="string");var E=null;E=T instanceof l||T instanceof o?T:p.isNode&&p.isStream(T)?new h(x,T):a.prepareContent(x,T,F.binary,F.optimizedBinaryString,F.base64);var O=new u(x,E,F);this.files[x]=O}var i=e("./utf8"),a=e("./utils"),o=e("./stream/GenericWorker"),s=e("./stream/StreamHelper"),f=e("./defaults"),l=e("./compressedObject"),u=e("./zipObject"),c=e("./generate"),p=e("./nodejsUtils"),h=e("./nodejs/NodejsStreamInputAdapter"),y=function(x){x.slice(-1)==="/"&&(x=x.substring(0,x.length-1));var T=x.lastIndexOf("/");return 0<T?x.substring(0,T):""},m=function(x){return x.slice(-1)!=="/"&&(x+="/"),x},g=function(x,T){return T=T!==void 0?T:f.createFolders,x=m(x),this.files[x]||n.call(this,x,null,{dir:!0,createFolders:T}),this.files[x]};function b(x){return Object.prototype.toString.call(x)==="[object RegExp]"}var A={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(x){var T,S,L;for(T in this.files)L=this.files[T],(S=T.slice(this.root.length,T.length))&&T.slice(0,this.root.length)===this.root&&x(S,L)},filter:function(x){var T=[];return this.forEach(function(S,L){x(S,L)&&T.push(L)}),T},file:function(x,T,S){if(arguments.length!==1)return x=this.root+x,n.call(this,x,T,S),this;if(b(x)){var L=x;return this.filter(function(F,Z){return!Z.dir&&L.test(F)})}var k=this.files[this.root+x];return k&&!k.dir?k:null},folder:function(x){if(!x)return this;if(b(x))return this.filter(function(k,F){return F.dir&&x.test(k)});var T=this.root+x,S=g.call(this,T),L=this.clone();return L.root=S.name,L},remove:function(x){x=this.root+x;var T=this.files[x];if(T||(x.slice(-1)!=="/"&&(x+="/"),T=this.files[x]),T&&!T.dir)delete this.files[x];else for(var S=this.filter(function(k,F){return F.name.slice(0,x.length)===x}),L=0;L<S.length;L++)delete this.files[S[L].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(x){var T,S={};try{if((S=a.extend(x||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=S.type.toLowerCase(),S.compression=S.compression.toUpperCase(),S.type==="binarystring"&&(S.type="string"),!S.type)throw new Error("No output type specified.");a.checkSupport(S.type),S.platform!=="darwin"&&S.platform!=="freebsd"&&S.platform!=="linux"&&S.platform!=="sunos"||(S.platform="UNIX"),S.platform==="win32"&&(S.platform="DOS");var L=S.comment||this.comment||"";T=c.generateWorker(this,S,L)}catch(k){(T=new o("error")).error(k)}return new s(T,S.type||"string",S.mimeType)},generateAsync:function(x,T){return this.generateInternalStream(x).accumulate(T)},generateNodeStream:function(x,T){return(x=x||{}).type||(x.type="nodebuffer"),this.generateInternalStream(x).toNodejsStream(T)}};t.exports=A},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(a){n.call(this,a);for(var o=0;o<this.data.length;o++)a[o]=255&a[o]}e("../utils").inherits(i,n),i.prototype.byteAt=function(a){return this.data[this.zero+a]},i.prototype.lastIndexOfSignature=function(a){for(var o=a.charCodeAt(0),s=a.charCodeAt(1),f=a.charCodeAt(2),l=a.charCodeAt(3),u=this.length-4;0<=u;--u)if(this.data[u]===o&&this.data[u+1]===s&&this.data[u+2]===f&&this.data[u+3]===l)return u-this.zero;return-1},i.prototype.readAndCheckSignature=function(a){var o=a.charCodeAt(0),s=a.charCodeAt(1),f=a.charCodeAt(2),l=a.charCodeAt(3),u=this.readData(4);return o===u[0]&&s===u[1]&&f===u[2]&&l===u[3]},i.prototype.readData=function(a){if(this.checkOffset(a),a===0)return[];var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(a){this.data=a,this.length=a.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var o,s=0;for(this.checkOffset(a),o=this.index+a-1;o>=this.index;o--)s=(s<<8)+this.byteAt(o);return this.index+=a,s},readString:function(a){return n.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date(Date.UTC(1980+(a>>25&127),(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.readData=function(a){this.checkOffset(a);var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},i.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},i.prototype.readAndCheckSignature=function(a){return a===this.readData(4)},i.prototype.readData=function(a){this.checkOffset(a);var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.readData=function(a){if(this.checkOffset(a),a===0)return new Uint8Array(0);var o=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),a=e("./ArrayReader"),o=e("./StringReader"),s=e("./NodeBufferReader"),f=e("./Uint8ArrayReader");t.exports=function(l){var u=n.getTypeOf(l);return n.checkSupport(u),u!=="string"||i.uint8array?u==="nodebuffer"?new s(l):i.uint8array?new f(n.transformTo("uint8array",l)):new a(n.transformTo("array",l)):new o(l)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function a(o){n.call(this,"ConvertWorker to "+o),this.destType=o}i.inherits(a,n),a.prototype.processChunk=function(o){this.push({data:i.transformTo(this.destType,o.data),meta:o.meta})},t.exports=a},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function a(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(a,n),a.prototype.processChunk=function(o){this.streamInfo.crc32=i(o.data,this.streamInfo.crc32||0),this.push(o)},t.exports=a},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function a(o){i.call(this,"DataLengthProbe for "+o),this.propName=o,this.withStreamInfo(o,0)}n.inherits(a,i),a.prototype.processChunk=function(o){if(o){var s=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=s+o.data.length}i.prototype.processChunk.call(this,o)},t.exports=a},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function a(o){i.call(this,"DataWorker");var s=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,o.then(function(f){s.dataIsReady=!0,s.data=f,s.max=f&&f.length||0,s.type=n.getTypeOf(f),s.isPaused||s._tickAndRepeat()},function(f){s.error(f)})}n.inherits(a,i),a.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},a.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},a.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},a.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var o=null,s=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":o=this.data.substring(this.index,s);break;case"uint8array":o=this.data.subarray(this.index,s);break;case"array":case"nodebuffer":o=this.data.slice(this.index,s)}return this.index=s,this.push({data:o,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=a},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(i){this.name=i||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(i){this.emit("data",i)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(i){this.emit("error",i)}return!0},error:function(i){return!this.isFinished&&(this.isPaused?this.generatedError=i:(this.isFinished=!0,this.emit("error",i),this.previous&&this.previous.error(i),this.cleanUp()),!0)},on:function(i,a){return this._listeners[i].push(a),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(i,a){if(this._listeners[i])for(var o=0;o<this._listeners[i].length;o++)this._listeners[i][o].call(this,a)},pipe:function(i){return i.registerPrevious(this)},registerPrevious:function(i){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=i.streamInfo,this.mergeStreamInfo(),this.previous=i;var a=this;return i.on("data",function(o){a.processChunk(o)}),i.on("end",function(){a.end()}),i.on("error",function(o){a.error(o)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var i=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),i=!0),this.previous&&this.previous.resume(),!i},flush:function(){},processChunk:function(i){this.push(i)},withStreamInfo:function(i,a){return this.extraStreamInfo[i]=a,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var i in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,i)&&(this.streamInfo[i]=this.extraStreamInfo[i])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var i="Worker "+this.name;return this.previous?this.previous+" -> "+i:i}},t.exports=n},{}],29:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./ConvertWorker"),a=e("./GenericWorker"),o=e("../base64"),s=e("../support"),f=e("../external"),l=null;if(s.nodestream)try{l=e("../nodejs/NodejsStreamOutputAdapter")}catch{}function u(p,h){return new f.Promise(function(y,m){var g=[],b=p._internalType,A=p._outputType,x=p._mimeType;p.on("data",function(T,S){g.push(T),h&&h(S)}).on("error",function(T){g=[],m(T)}).on("end",function(){try{var T=function(S,L,k){switch(S){case"blob":return n.newBlob(n.transformTo("arraybuffer",L),k);case"base64":return o.encode(L);default:return n.transformTo(S,L)}}(A,function(S,L){var k,F=0,Z=null,E=0;for(k=0;k<L.length;k++)E+=L[k].length;switch(S){case"string":return L.join("");case"array":return Array.prototype.concat.apply([],L);case"uint8array":for(Z=new Uint8Array(E),k=0;k<L.length;k++)Z.set(L[k],F),F+=L[k].length;return Z;case"nodebuffer":return Buffer.concat(L);default:throw new Error("concat : unsupported type '"+S+"'")}}(b,g),x);y(T)}catch(S){m(S)}g=[]}).resume()})}function c(p,h,y){var m=h;switch(h){case"blob":case"arraybuffer":m="uint8array";break;case"base64":m="string"}try{this._internalType=m,this._outputType=h,this._mimeType=y,n.checkSupport(m),this._worker=p.pipe(new i(m)),p.lock()}catch(g){this._worker=new a("error"),this._worker.error(g)}}c.prototype={accumulate:function(p){return u(this,p)},on:function(p,h){var y=this;return p==="data"?this._worker.on(p,function(m){h.call(y,m.data,m.meta)}):this._worker.on(p,function(){n.delay(h,arguments,y)}),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(p){if(n.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:this._outputType!=="nodebuffer"},p)}},t.exports=c},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",r.nodebuffer=typeof Buffer<"u",r.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=new Blob([n],{type:"application/zip"}).size===0}catch{try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=i.getBlob("application/zip").size===0}catch{r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch{r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),i=e("./support"),a=e("./nodejsUtils"),o=e("./stream/GenericWorker"),s=new Array(256),f=0;f<256;f++)s[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;s[254]=s[254]=1;function l(){o.call(this,"utf-8 decode"),this.leftOver=null}function u(){o.call(this,"utf-8 encode")}r.utf8encode=function(c){return i.nodebuffer?a.newBufferFrom(c,"utf-8"):function(p){var h,y,m,g,b,A=p.length,x=0;for(g=0;g<A;g++)(64512&(y=p.charCodeAt(g)))==55296&&g+1<A&&(64512&(m=p.charCodeAt(g+1)))==56320&&(y=65536+(y-55296<<10)+(m-56320),g++),x+=y<128?1:y<2048?2:y<65536?3:4;for(h=i.uint8array?new Uint8Array(x):new Array(x),g=b=0;b<x;g++)(64512&(y=p.charCodeAt(g)))==55296&&g+1<A&&(64512&(m=p.charCodeAt(g+1)))==56320&&(y=65536+(y-55296<<10)+(m-56320),g++),y<128?h[b++]=y:(y<2048?h[b++]=192|y>>>6:(y<65536?h[b++]=224|y>>>12:(h[b++]=240|y>>>18,h[b++]=128|y>>>12&63),h[b++]=128|y>>>6&63),h[b++]=128|63&y);return h}(c)},r.utf8decode=function(c){return i.nodebuffer?n.transformTo("nodebuffer",c).toString("utf-8"):function(p){var h,y,m,g,b=p.length,A=new Array(2*b);for(h=y=0;h<b;)if((m=p[h++])<128)A[y++]=m;else if(4<(g=s[m]))A[y++]=65533,h+=g-1;else{for(m&=g===2?31:g===3?15:7;1<g&&h<b;)m=m<<6|63&p[h++],g--;1<g?A[y++]=65533:m<65536?A[y++]=m:(m-=65536,A[y++]=55296|m>>10&1023,A[y++]=56320|1023&m)}return A.length!==y&&(A.subarray?A=A.subarray(0,y):A.length=y),n.applyFromCharCode(A)}(c=n.transformTo(i.uint8array?"uint8array":"array",c))},n.inherits(l,o),l.prototype.processChunk=function(c){var p=n.transformTo(i.uint8array?"uint8array":"array",c.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var h=p;(p=new Uint8Array(h.length+this.leftOver.length)).set(this.leftOver,0),p.set(h,this.leftOver.length)}else p=this.leftOver.concat(p);this.leftOver=null}var y=function(g,b){var A;for((b=b||g.length)>g.length&&(b=g.length),A=b-1;0<=A&&(192&g[A])==128;)A--;return A<0||A===0?b:A+s[g[A]]>b?A:b}(p),m=p;y!==p.length&&(i.uint8array?(m=p.subarray(0,y),this.leftOver=p.subarray(y,p.length)):(m=p.slice(0,y),this.leftOver=p.slice(y,p.length))),this.push({data:r.utf8decode(m),meta:c.meta})},l.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=l,n.inherits(u,o),u.prototype.processChunk=function(c){this.push({data:r.utf8encode(c.data),meta:c.meta})},r.Utf8EncodeWorker=u},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),i=e("./base64"),a=e("./nodejsUtils"),o=e("./external");function s(h){return h}function f(h,y){for(var m=0;m<h.length;++m)y[m]=255&h.charCodeAt(m);return y}e("setimmediate"),r.newBlob=function(h,y){r.checkSupport("blob");try{return new Blob([h],{type:y})}catch{try{var m=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return m.append(h),m.getBlob(y)}catch{throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(h,y,m){var g=[],b=0,A=h.length;if(A<=m)return String.fromCharCode.apply(null,h);for(;b<A;)y==="array"||y==="nodebuffer"?g.push(String.fromCharCode.apply(null,h.slice(b,Math.min(b+m,A)))):g.push(String.fromCharCode.apply(null,h.subarray(b,Math.min(b+m,A)))),b+=m;return g.join("")},stringifyByChar:function(h){for(var y="",m=0;m<h.length;m++)y+=String.fromCharCode(h[m]);return y},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&String.fromCharCode.apply(null,a.allocBuffer(1)).length===1}catch{return!1}}()}};function u(h){var y=65536,m=r.getTypeOf(h),g=!0;if(m==="uint8array"?g=l.applyCanBeUsed.uint8array:m==="nodebuffer"&&(g=l.applyCanBeUsed.nodebuffer),g)for(;1<y;)try{return l.stringifyByChunk(h,m,y)}catch{y=Math.floor(y/2)}return l.stringifyByChar(h)}function c(h,y){for(var m=0;m<h.length;m++)y[m]=h[m];return y}r.applyFromCharCode=u;var p={};p.string={string:s,array:function(h){return f(h,new Array(h.length))},arraybuffer:function(h){return p.string.uint8array(h).buffer},uint8array:function(h){return f(h,new Uint8Array(h.length))},nodebuffer:function(h){return f(h,a.allocBuffer(h.length))}},p.array={string:u,array:s,arraybuffer:function(h){return new Uint8Array(h).buffer},uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(h)}},p.arraybuffer={string:function(h){return u(new Uint8Array(h))},array:function(h){return c(new Uint8Array(h),new Array(h.byteLength))},arraybuffer:s,uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(new Uint8Array(h))}},p.uint8array={string:u,array:function(h){return c(h,new Array(h.length))},arraybuffer:function(h){return h.buffer},uint8array:s,nodebuffer:function(h){return a.newBufferFrom(h)}},p.nodebuffer={string:u,array:function(h){return c(h,new Array(h.length))},arraybuffer:function(h){return p.nodebuffer.uint8array(h).buffer},uint8array:function(h){return c(h,new Uint8Array(h.length))},nodebuffer:s},r.transformTo=function(h,y){if(y=y||"",!h)return y;r.checkSupport(h);var m=r.getTypeOf(y);return p[m][h](y)},r.resolve=function(h){for(var y=h.split("/"),m=[],g=0;g<y.length;g++){var b=y[g];b==="."||b===""&&g!==0&&g!==y.length-1||(b===".."?m.pop():m.push(b))}return m.join("/")},r.getTypeOf=function(h){return typeof h=="string"?"string":Object.prototype.toString.call(h)==="[object Array]"?"array":n.nodebuffer&&a.isBuffer(h)?"nodebuffer":n.uint8array&&h instanceof Uint8Array?"uint8array":n.arraybuffer&&h instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(h){if(!n[h.toLowerCase()])throw new Error(h+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(h){var y,m,g="";for(m=0;m<(h||"").length;m++)g+="\\x"+((y=h.charCodeAt(m))<16?"0":"")+y.toString(16).toUpperCase();return g},r.delay=function(h,y,m){setImmediate(function(){h.apply(m||null,y||[])})},r.inherits=function(h,y){function m(){}m.prototype=y.prototype,h.prototype=new m},r.extend=function(){var h,y,m={};for(h=0;h<arguments.length;h++)for(y in arguments[h])Object.prototype.hasOwnProperty.call(arguments[h],y)&&m[y]===void 0&&(m[y]=arguments[h][y]);return m},r.prepareContent=function(h,y,m,g,b){return o.Promise.resolve(y).then(function(A){return n.blob&&(A instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(A))!==-1)&&typeof FileReader<"u"?new o.Promise(function(x,T){var S=new FileReader;S.onload=function(L){x(L.target.result)},S.onerror=function(L){T(L.target.error)},S.readAsArrayBuffer(A)}):A}).then(function(A){var x=r.getTypeOf(A);return x?(x==="arraybuffer"?A=r.transformTo("uint8array",A):x==="string"&&(b?A=i.decode(A):m&&g!==!0&&(A=function(T){return f(T,n.uint8array?new Uint8Array(T.length):new Array(T.length))}(A))),A):o.Promise.reject(new Error("Can't read the data of '"+h+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),a=e("./signature"),o=e("./zipEntry"),s=e("./support");function f(l){this.files=[],this.loadOptions=l}f.prototype={checkSignature:function(l){if(!this.reader.readAndCheckSignature(l)){this.reader.index-=4;var u=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(u)+", expected "+i.pretty(l)+")")}},isSignature:function(l,u){var c=this.reader.index;this.reader.setIndex(l);var p=this.reader.readString(4)===u;return this.reader.setIndex(c),p},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var l=this.reader.readData(this.zipCommentLength),u=s.uint8array?"uint8array":"array",c=i.transformTo(u,l);this.zipComment=this.loadOptions.decodeFileName(c)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var l,u,c,p=this.zip64EndOfCentralSize-44;0<p;)l=this.reader.readInt(2),u=this.reader.readInt(4),c=this.reader.readData(u),this.zip64ExtensibleData[l]={id:l,length:u,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var l,u;for(l=0;l<this.files.length;l++)u=this.files[l],this.reader.setIndex(u.localHeaderOffset),this.checkSignature(a.LOCAL_FILE_HEADER),u.readLocalPart(this.reader),u.handleUTF8(),u.processAttributes()},readCentralDir:function(){var l;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(a.CENTRAL_FILE_HEADER);)(l=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(l);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var l=this.reader.lastIndexOfSignature(a.CENTRAL_DIRECTORY_END);if(l<0)throw this.isSignature(0,a.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(l);var u=l;if(this.checkSignature(a.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(l=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(l),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,a.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var c=this.centralDirOffset+this.centralDirSize;this.zip64&&(c+=20,c+=12+this.zip64EndOfCentralSize);var p=u-c;if(0<p)this.isSignature(u,a.CENTRAL_FILE_HEADER)||(this.reader.zero=p);else if(p<0)throw new Error("Corrupted zip: missing "+Math.abs(p)+" bytes.")},prepareReader:function(l){this.reader=n(l)},load:function(l){this.prepareReader(l),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=f},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),a=e("./compressedObject"),o=e("./crc32"),s=e("./utf8"),f=e("./compressions"),l=e("./support");function u(c,p){this.options=c,this.loadOptions=p}u.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(c){var p,h;if(c.skip(22),this.fileNameLength=c.readInt(2),h=c.readInt(2),this.fileName=c.readData(this.fileNameLength),c.skip(h),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((p=function(y){for(var m in f)if(Object.prototype.hasOwnProperty.call(f,m)&&f[m].magic===y)return f[m];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new a(this.compressedSize,this.uncompressedSize,this.crc32,p,c.readData(this.compressedSize))},readCentralPart:function(c){this.versionMadeBy=c.readInt(2),c.skip(2),this.bitFlag=c.readInt(2),this.compressionMethod=c.readString(2),this.date=c.readDate(),this.crc32=c.readInt(4),this.compressedSize=c.readInt(4),this.uncompressedSize=c.readInt(4);var p=c.readInt(2);if(this.extraFieldsLength=c.readInt(2),this.fileCommentLength=c.readInt(2),this.diskNumberStart=c.readInt(2),this.internalFileAttributes=c.readInt(2),this.externalFileAttributes=c.readInt(4),this.localHeaderOffset=c.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");c.skip(p),this.readExtraFields(c),this.parseZIP64ExtraField(c),this.fileComment=c.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var c=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),c==0&&(this.dosPermissions=63&this.externalFileAttributes),c==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var c=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=c.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=c.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=c.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=c.readInt(4))}},readExtraFields:function(c){var p,h,y,m=c.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});c.index+4<m;)p=c.readInt(2),h=c.readInt(2),y=c.readData(h),this.extraFields[p]={id:p,length:h,value:y};c.setIndex(m)},handleUTF8:function(){var c=l.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var p=this.findExtraFieldUnicodePath();if(p!==null)this.fileNameStr=p;else{var h=i.transformTo(c,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(h)}var y=this.findExtraFieldUnicodeComment();if(y!==null)this.fileCommentStr=y;else{var m=i.transformTo(c,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(m)}}},findExtraFieldUnicodePath:function(){var c=this.extraFields[28789];if(c){var p=n(c.value);return p.readInt(1)!==1||o(this.fileName)!==p.readInt(4)?null:s.utf8decode(p.readData(c.length-5))}return null},findExtraFieldUnicodeComment:function(){var c=this.extraFields[25461];if(c){var p=n(c.value);return p.readInt(1)!==1||o(this.fileComment)!==p.readInt(4)?null:s.utf8decode(p.readData(c.length-5))}return null}},t.exports=u},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(p,h,y){this.name=p,this.dir=y.dir,this.date=y.date,this.comment=y.comment,this.unixPermissions=y.unixPermissions,this.dosPermissions=y.dosPermissions,this._data=h,this._dataBinary=y.binary,this.options={compression:y.compression,compressionOptions:y.compressionOptions}}var i=e("./stream/StreamHelper"),a=e("./stream/DataWorker"),o=e("./utf8"),s=e("./compressedObject"),f=e("./stream/GenericWorker");n.prototype={internalStream:function(p){var h=null,y="string";try{if(!p)throw new Error("No output type specified.");var m=(y=p.toLowerCase())==="string"||y==="text";y!=="binarystring"&&y!=="text"||(y="string"),h=this._decompressWorker();var g=!this._dataBinary;g&&!m&&(h=h.pipe(new o.Utf8EncodeWorker)),!g&&m&&(h=h.pipe(new o.Utf8DecodeWorker))}catch(b){(h=new f("error")).error(b)}return new i(h,y,"")},async:function(p,h){return this.internalStream(p).accumulate(h)},nodeStream:function(p,h){return this.internalStream(p||"nodebuffer").toNodejsStream(h)},_compressWorker:function(p,h){if(this._data instanceof s&&this._data.compression.magic===p.magic)return this._data.getCompressedWorker();var y=this._decompressWorker();return this._dataBinary||(y=y.pipe(new o.Utf8EncodeWorker)),s.createWorkerFrom(y,p,h)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof f?this._data:new a(this._data)}};for(var l=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],u=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},c=0;c<l.length;c++)n.prototype[l[c]]=u;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(n){"use strict";var i,a,o=n.MutationObserver||n.WebKitMutationObserver;if(o){var s=0,f=new o(p),l=n.document.createTextNode("");f.observe(l,{characterData:!0}),i=function(){l.data=s=++s%2}}else if(n.setImmediate||n.MessageChannel===void 0)i="document"in n&&"onreadystatechange"in n.document.createElement("script")?function(){var h=n.document.createElement("script");h.onreadystatechange=function(){p(),h.onreadystatechange=null,h.parentNode.removeChild(h),h=null},n.document.documentElement.appendChild(h)}:function(){setTimeout(p,0)};else{var u=new n.MessageChannel;u.port1.onmessage=p,i=function(){u.port2.postMessage(0)}}var c=[];function p(){var h,y;a=!0;for(var m=c.length;m;){for(y=c,c=[],h=-1;++h<m;)y[h]();m=c.length}a=!1}t.exports=function(h){c.push(h)!==1||a||i()}}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function i(){}var a={},o=["REJECTED"],s=["FULFILLED"],f=["PENDING"];function l(m){if(typeof m!="function")throw new TypeError("resolver must be a function");this.state=f,this.queue=[],this.outcome=void 0,m!==i&&h(this,m)}function u(m,g,b){this.promise=m,typeof g=="function"&&(this.onFulfilled=g,this.callFulfilled=this.otherCallFulfilled),typeof b=="function"&&(this.onRejected=b,this.callRejected=this.otherCallRejected)}function c(m,g,b){n(function(){var A;try{A=g(b)}catch(x){return a.reject(m,x)}A===m?a.reject(m,new TypeError("Cannot resolve promise with itself")):a.resolve(m,A)})}function p(m){var g=m&&m.then;if(m&&(typeof m=="object"||typeof m=="function")&&typeof g=="function")return function(){g.apply(m,arguments)}}function h(m,g){var b=!1;function A(S){b||(b=!0,a.reject(m,S))}function x(S){b||(b=!0,a.resolve(m,S))}var T=y(function(){g(x,A)});T.status==="error"&&A(T.value)}function y(m,g){var b={};try{b.value=m(g),b.status="success"}catch(A){b.status="error",b.value=A}return b}(t.exports=l).prototype.finally=function(m){if(typeof m!="function")return this;var g=this.constructor;return this.then(function(b){return g.resolve(m()).then(function(){return b})},function(b){return g.resolve(m()).then(function(){throw b})})},l.prototype.catch=function(m){return this.then(null,m)},l.prototype.then=function(m,g){if(typeof m!="function"&&this.state===s||typeof g!="function"&&this.state===o)return this;var b=new this.constructor(i);return this.state!==f?c(b,this.state===s?m:g,this.outcome):this.queue.push(new u(b,m,g)),b},u.prototype.callFulfilled=function(m){a.resolve(this.promise,m)},u.prototype.otherCallFulfilled=function(m){c(this.promise,this.onFulfilled,m)},u.prototype.callRejected=function(m){a.reject(this.promise,m)},u.prototype.otherCallRejected=function(m){c(this.promise,this.onRejected,m)},a.resolve=function(m,g){var b=y(p,g);if(b.status==="error")return a.reject(m,b.value);var A=b.value;if(A)h(m,A);else{m.state=s,m.outcome=g;for(var x=-1,T=m.queue.length;++x<T;)m.queue[x].callFulfilled(g)}return m},a.reject=function(m,g){m.state=o,m.outcome=g;for(var b=-1,A=m.queue.length;++b<A;)m.queue[b].callRejected(g);return m},l.resolve=function(m){return m instanceof this?m:a.resolve(new this(i),m)},l.reject=function(m){var g=new this(i);return a.reject(g,m)},l.all=function(m){var g=this;if(Object.prototype.toString.call(m)!=="[object Array]")return this.reject(new TypeError("must be an array"));var b=m.length,A=!1;if(!b)return this.resolve([]);for(var x=new Array(b),T=0,S=-1,L=new this(i);++S<b;)k(m[S],S);return L;function k(F,Z){g.resolve(F).then(function(E){x[Z]=E,++T!==b||A||(A=!0,a.resolve(L,x))},function(E){A||(A=!0,a.reject(L,E))})}},l.race=function(m){var g=this;if(Object.prototype.toString.call(m)!=="[object Array]")return this.reject(new TypeError("must be an array"));var b=m.length,A=!1;if(!b)return this.resolve([]);for(var x=-1,T=new this(i);++x<b;)S=m[x],g.resolve(S).then(function(L){A||(A=!0,a.resolve(T,L))},function(L){A||(A=!0,a.reject(T,L))});var S;return T}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),i=e("./utils/common"),a=e("./utils/strings"),o=e("./zlib/messages"),s=e("./zlib/zstream"),f=Object.prototype.toString,l=0,u=-1,c=0,p=8;function h(m){if(!(this instanceof h))return new h(m);this.options=i.assign({level:u,method:p,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},m||{});var g=this.options;g.raw&&0<g.windowBits?g.windowBits=-g.windowBits:g.gzip&&0<g.windowBits&&g.windowBits<16&&(g.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var b=n.deflateInit2(this.strm,g.level,g.method,g.windowBits,g.memLevel,g.strategy);if(b!==l)throw new Error(o[b]);if(g.header&&n.deflateSetHeader(this.strm,g.header),g.dictionary){var A;if(A=typeof g.dictionary=="string"?a.string2buf(g.dictionary):f.call(g.dictionary)==="[object ArrayBuffer]"?new Uint8Array(g.dictionary):g.dictionary,(b=n.deflateSetDictionary(this.strm,A))!==l)throw new Error(o[b]);this._dict_set=!0}}function y(m,g){var b=new h(g);if(b.push(m,!0),b.err)throw b.msg||o[b.err];return b.result}h.prototype.push=function(m,g){var b,A,x=this.strm,T=this.options.chunkSize;if(this.ended)return!1;A=g===~~g?g:g===!0?4:0,typeof m=="string"?x.input=a.string2buf(m):f.call(m)==="[object ArrayBuffer]"?x.input=new Uint8Array(m):x.input=m,x.next_in=0,x.avail_in=x.input.length;do{if(x.avail_out===0&&(x.output=new i.Buf8(T),x.next_out=0,x.avail_out=T),(b=n.deflate(x,A))!==1&&b!==l)return this.onEnd(b),!(this.ended=!0);x.avail_out!==0&&(x.avail_in!==0||A!==4&&A!==2)||(this.options.to==="string"?this.onData(a.buf2binstring(i.shrinkBuf(x.output,x.next_out))):this.onData(i.shrinkBuf(x.output,x.next_out)))}while((0<x.avail_in||x.avail_out===0)&&b!==1);return A===4?(b=n.deflateEnd(this.strm),this.onEnd(b),this.ended=!0,b===l):A!==2||(this.onEnd(l),!(x.avail_out=0))},h.prototype.onData=function(m){this.chunks.push(m)},h.prototype.onEnd=function(m){m===l&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=m,this.msg=this.strm.msg},r.Deflate=h,r.deflate=y,r.deflateRaw=function(m,g){return(g=g||{}).raw=!0,y(m,g)},r.gzip=function(m,g){return(g=g||{}).gzip=!0,y(m,g)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),i=e("./utils/common"),a=e("./utils/strings"),o=e("./zlib/constants"),s=e("./zlib/messages"),f=e("./zlib/zstream"),l=e("./zlib/gzheader"),u=Object.prototype.toString;function c(h){if(!(this instanceof c))return new c(h);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},h||{});var y=this.options;y.raw&&0<=y.windowBits&&y.windowBits<16&&(y.windowBits=-y.windowBits,y.windowBits===0&&(y.windowBits=-15)),!(0<=y.windowBits&&y.windowBits<16)||h&&h.windowBits||(y.windowBits+=32),15<y.windowBits&&y.windowBits<48&&!(15&y.windowBits)&&(y.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var m=n.inflateInit2(this.strm,y.windowBits);if(m!==o.Z_OK)throw new Error(s[m]);this.header=new l,n.inflateGetHeader(this.strm,this.header)}function p(h,y){var m=new c(y);if(m.push(h,!0),m.err)throw m.msg||s[m.err];return m.result}c.prototype.push=function(h,y){var m,g,b,A,x,T,S=this.strm,L=this.options.chunkSize,k=this.options.dictionary,F=!1;if(this.ended)return!1;g=y===~~y?y:y===!0?o.Z_FINISH:o.Z_NO_FLUSH,typeof h=="string"?S.input=a.binstring2buf(h):u.call(h)==="[object ArrayBuffer]"?S.input=new Uint8Array(h):S.input=h,S.next_in=0,S.avail_in=S.input.length;do{if(S.avail_out===0&&(S.output=new i.Buf8(L),S.next_out=0,S.avail_out=L),(m=n.inflate(S,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&k&&(T=typeof k=="string"?a.string2buf(k):u.call(k)==="[object ArrayBuffer]"?new Uint8Array(k):k,m=n.inflateSetDictionary(this.strm,T)),m===o.Z_BUF_ERROR&&F===!0&&(m=o.Z_OK,F=!1),m!==o.Z_STREAM_END&&m!==o.Z_OK)return this.onEnd(m),!(this.ended=!0);S.next_out&&(S.avail_out!==0&&m!==o.Z_STREAM_END&&(S.avail_in!==0||g!==o.Z_FINISH&&g!==o.Z_SYNC_FLUSH)||(this.options.to==="string"?(b=a.utf8border(S.output,S.next_out),A=S.next_out-b,x=a.buf2string(S.output,b),S.next_out=A,S.avail_out=L-A,A&&i.arraySet(S.output,S.output,b,A,0),this.onData(x)):this.onData(i.shrinkBuf(S.output,S.next_out)))),S.avail_in===0&&S.avail_out===0&&(F=!0)}while((0<S.avail_in||S.avail_out===0)&&m!==o.Z_STREAM_END);return m===o.Z_STREAM_END&&(g=o.Z_FINISH),g===o.Z_FINISH?(m=n.inflateEnd(this.strm),this.onEnd(m),this.ended=!0,m===o.Z_OK):g!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),!(S.avail_out=0))},c.prototype.onData=function(h){this.chunks.push(h)},c.prototype.onEnd=function(h){h===o.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=h,this.msg=this.strm.msg},r.Inflate=c,r.inflate=p,r.inflateRaw=function(h,y){return(y=y||{}).raw=!0,p(h,y)},r.ungzip=p},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";r.assign=function(o){for(var s=Array.prototype.slice.call(arguments,1);s.length;){var f=s.shift();if(f){if(typeof f!="object")throw new TypeError(f+"must be non-object");for(var l in f)f.hasOwnProperty(l)&&(o[l]=f[l])}}return o},r.shrinkBuf=function(o,s){return o.length===s?o:o.subarray?o.subarray(0,s):(o.length=s,o)};var i={arraySet:function(o,s,f,l,u){if(s.subarray&&o.subarray)o.set(s.subarray(f,f+l),u);else for(var c=0;c<l;c++)o[u+c]=s[f+c]},flattenChunks:function(o){var s,f,l,u,c,p;for(s=l=0,f=o.length;s<f;s++)l+=o[s].length;for(p=new Uint8Array(l),s=u=0,f=o.length;s<f;s++)c=o[s],p.set(c,u),u+=c.length;return p}},a={arraySet:function(o,s,f,l,u){for(var c=0;c<l;c++)o[u+c]=s[f+c]},flattenChunks:function(o){return[].concat.apply([],o)}};r.setTyped=function(o){o?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,a))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),i=!0,a=!0;try{String.fromCharCode.apply(null,[0])}catch{i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{a=!1}for(var o=new n.Buf8(256),s=0;s<256;s++)o[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function f(l,u){if(u<65537&&(l.subarray&&a||!l.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(l,u));for(var c="",p=0;p<u;p++)c+=String.fromCharCode(l[p]);return c}o[254]=o[254]=1,r.string2buf=function(l){var u,c,p,h,y,m=l.length,g=0;for(h=0;h<m;h++)(64512&(c=l.charCodeAt(h)))==55296&&h+1<m&&(64512&(p=l.charCodeAt(h+1)))==56320&&(c=65536+(c-55296<<10)+(p-56320),h++),g+=c<128?1:c<2048?2:c<65536?3:4;for(u=new n.Buf8(g),h=y=0;y<g;h++)(64512&(c=l.charCodeAt(h)))==55296&&h+1<m&&(64512&(p=l.charCodeAt(h+1)))==56320&&(c=65536+(c-55296<<10)+(p-56320),h++),c<128?u[y++]=c:(c<2048?u[y++]=192|c>>>6:(c<65536?u[y++]=224|c>>>12:(u[y++]=240|c>>>18,u[y++]=128|c>>>12&63),u[y++]=128|c>>>6&63),u[y++]=128|63&c);return u},r.buf2binstring=function(l){return f(l,l.length)},r.binstring2buf=function(l){for(var u=new n.Buf8(l.length),c=0,p=u.length;c<p;c++)u[c]=l.charCodeAt(c);return u},r.buf2string=function(l,u){var c,p,h,y,m=u||l.length,g=new Array(2*m);for(c=p=0;c<m;)if((h=l[c++])<128)g[p++]=h;else if(4<(y=o[h]))g[p++]=65533,c+=y-1;else{for(h&=y===2?31:y===3?15:7;1<y&&c<m;)h=h<<6|63&l[c++],y--;1<y?g[p++]=65533:h<65536?g[p++]=h:(h-=65536,g[p++]=55296|h>>10&1023,g[p++]=56320|1023&h)}return f(g,p)},r.utf8border=function(l,u){var c;for((u=u||l.length)>l.length&&(u=l.length),c=u-1;0<=c&&(192&l[c])==128;)c--;return c<0||c===0?u:c+o[l[c]]>u?c:u}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(n,i,a,o){for(var s=65535&n|0,f=n>>>16&65535|0,l=0;a!==0;){for(a-=l=2e3<a?2e3:a;f=f+(s=s+i[o++]|0)|0,--l;);s%=65521,f%=65521}return s|f<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var i,a=[],o=0;o<256;o++){i=o;for(var s=0;s<8;s++)i=1&i?3988292384^i>>>1:i>>>1;a[o]=i}return a}();t.exports=function(i,a,o,s){var f=n,l=s+o;i^=-1;for(var u=s;u<l;u++)i=i>>>8^f[255&(i^a[u])];return-1^i}},{}],46:[function(e,t,r){"use strict";var n,i=e("../utils/common"),a=e("./trees"),o=e("./adler32"),s=e("./crc32"),f=e("./messages"),l=0,u=4,c=0,p=-2,h=-1,y=4,m=2,g=8,b=9,A=286,x=30,T=19,S=2*A+1,L=15,k=3,F=258,Z=F+k+1,E=42,O=113,_=1,M=2,te=3,j=4;function ne(d,D){return d.msg=f[D],D}function G(d){return(d<<1)-(4<d?9:0)}function Q(d){for(var D=d.length;0<=--D;)d[D]=0}function C(d){var D=d.state,N=D.pending;N>d.avail_out&&(N=d.avail_out),N!==0&&(i.arraySet(d.output,D.pending_buf,D.pending_out,N,d.next_out),d.next_out+=N,D.pending_out+=N,d.total_out+=N,d.avail_out-=N,D.pending-=N,D.pending===0&&(D.pending_out=0))}function B(d,D){a._tr_flush_block(d,0<=d.block_start?d.block_start:-1,d.strstart-d.block_start,D),d.block_start=d.strstart,C(d.strm)}function ee(d,D){d.pending_buf[d.pending++]=D}function $(d,D){d.pending_buf[d.pending++]=D>>>8&255,d.pending_buf[d.pending++]=255&D}function Y(d,D){var N,v,w=d.max_chain_length,I=d.strstart,z=d.prev_length,U=d.nice_match,R=d.strstart>d.w_size-Z?d.strstart-(d.w_size-Z):0,q=d.window,K=d.w_mask,V=d.prev,J=d.strstart+F,de=q[I+z-1],fe=q[I+z];d.prev_length>=d.good_match&&(w>>=2),U>d.lookahead&&(U=d.lookahead);do if(q[(N=D)+z]===fe&&q[N+z-1]===de&&q[N]===q[I]&&q[++N]===q[I+1]){I+=2,N++;do;while(q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&I<J);if(v=F-(J-I),I=J-F,z<v){if(d.match_start=D,U<=(z=v))break;de=q[I+z-1],fe=q[I+z]}}while((D=V[D&K])>R&&--w!=0);return z<=d.lookahead?z:d.lookahead}function ye(d){var D,N,v,w,I,z,U,R,q,K,V=d.w_size;do{if(w=d.window_size-d.lookahead-d.strstart,d.strstart>=V+(V-Z)){for(i.arraySet(d.window,d.window,V,V,0),d.match_start-=V,d.strstart-=V,d.block_start-=V,D=N=d.hash_size;v=d.head[--D],d.head[D]=V<=v?v-V:0,--N;);for(D=N=V;v=d.prev[--D],d.prev[D]=V<=v?v-V:0,--N;);w+=V}if(d.strm.avail_in===0)break;if(z=d.strm,U=d.window,R=d.strstart+d.lookahead,q=w,K=void 0,K=z.avail_in,q<K&&(K=q),N=K===0?0:(z.avail_in-=K,i.arraySet(U,z.input,z.next_in,K,R),z.state.wrap===1?z.adler=o(z.adler,U,K,R):z.state.wrap===2&&(z.adler=s(z.adler,U,K,R)),z.next_in+=K,z.total_in+=K,K),d.lookahead+=N,d.lookahead+d.insert>=k)for(I=d.strstart-d.insert,d.ins_h=d.window[I],d.ins_h=(d.ins_h<<d.hash_shift^d.window[I+1])&d.hash_mask;d.insert&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[I+k-1])&d.hash_mask,d.prev[I&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=I,I++,d.insert--,!(d.lookahead+d.insert<k)););}while(d.lookahead<Z&&d.strm.avail_in!==0)}function Te(d,D){for(var N,v;;){if(d.lookahead<Z){if(ye(d),d.lookahead<Z&&D===l)return _;if(d.lookahead===0)break}if(N=0,d.lookahead>=k&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),N!==0&&d.strstart-N<=d.w_size-Z&&(d.match_length=Y(d,N)),d.match_length>=k)if(v=a._tr_tally(d,d.strstart-d.match_start,d.match_length-k),d.lookahead-=d.match_length,d.match_length<=d.max_lazy_match&&d.lookahead>=k){for(d.match_length--;d.strstart++,d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart,--d.match_length!=0;);d.strstart++}else d.strstart+=d.match_length,d.match_length=0,d.ins_h=d.window[d.strstart],d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+1])&d.hash_mask;else v=a._tr_tally(d,0,d.window[d.strstart]),d.lookahead--,d.strstart++;if(v&&(B(d,!1),d.strm.avail_out===0))return _}return d.insert=d.strstart<k-1?d.strstart:k-1,D===u?(B(d,!0),d.strm.avail_out===0?te:j):d.last_lit&&(B(d,!1),d.strm.avail_out===0)?_:M}function le(d,D){for(var N,v,w;;){if(d.lookahead<Z){if(ye(d),d.lookahead<Z&&D===l)return _;if(d.lookahead===0)break}if(N=0,d.lookahead>=k&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),d.prev_length=d.match_length,d.prev_match=d.match_start,d.match_length=k-1,N!==0&&d.prev_length<d.max_lazy_match&&d.strstart-N<=d.w_size-Z&&(d.match_length=Y(d,N),d.match_length<=5&&(d.strategy===1||d.match_length===k&&4096<d.strstart-d.match_start)&&(d.match_length=k-1)),d.prev_length>=k&&d.match_length<=d.prev_length){for(w=d.strstart+d.lookahead-k,v=a._tr_tally(d,d.strstart-1-d.prev_match,d.prev_length-k),d.lookahead-=d.prev_length-1,d.prev_length-=2;++d.strstart<=w&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),--d.prev_length!=0;);if(d.match_available=0,d.match_length=k-1,d.strstart++,v&&(B(d,!1),d.strm.avail_out===0))return _}else if(d.match_available){if((v=a._tr_tally(d,0,d.window[d.strstart-1]))&&B(d,!1),d.strstart++,d.lookahead--,d.strm.avail_out===0)return _}else d.match_available=1,d.strstart++,d.lookahead--}return d.match_available&&(v=a._tr_tally(d,0,d.window[d.strstart-1]),d.match_available=0),d.insert=d.strstart<k-1?d.strstart:k-1,D===u?(B(d,!0),d.strm.avail_out===0?te:j):d.last_lit&&(B(d,!1),d.strm.avail_out===0)?_:M}function ce(d,D,N,v,w){this.good_length=d,this.max_lazy=D,this.nice_length=N,this.max_chain=v,this.func=w}function Ee(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=g,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*S),this.dyn_dtree=new i.Buf16(2*(2*x+1)),this.bl_tree=new i.Buf16(2*(2*T+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(L+1),this.heap=new i.Buf16(2*A+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*A+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function ge(d){var D;return d&&d.state?(d.total_in=d.total_out=0,d.data_type=m,(D=d.state).pending=0,D.pending_out=0,D.wrap<0&&(D.wrap=-D.wrap),D.status=D.wrap?E:O,d.adler=D.wrap===2?0:1,D.last_flush=l,a._tr_init(D),c):ne(d,p)}function ot(d){var D=ge(d);return D===c&&function(N){N.window_size=2*N.w_size,Q(N.head),N.max_lazy_match=n[N.level].max_lazy,N.good_match=n[N.level].good_length,N.nice_match=n[N.level].nice_length,N.max_chain_length=n[N.level].max_chain,N.strstart=0,N.block_start=0,N.lookahead=0,N.insert=0,N.match_length=N.prev_length=k-1,N.match_available=0,N.ins_h=0}(d.state),D}function Je(d,D,N,v,w,I){if(!d)return p;var z=1;if(D===h&&(D=6),v<0?(z=0,v=-v):15<v&&(z=2,v-=16),w<1||b<w||N!==g||v<8||15<v||D<0||9<D||I<0||y<I)return ne(d,p);v===8&&(v=9);var U=new Ee;return(d.state=U).strm=d,U.wrap=z,U.gzhead=null,U.w_bits=v,U.w_size=1<<U.w_bits,U.w_mask=U.w_size-1,U.hash_bits=w+7,U.hash_size=1<<U.hash_bits,U.hash_mask=U.hash_size-1,U.hash_shift=~~((U.hash_bits+k-1)/k),U.window=new i.Buf8(2*U.w_size),U.head=new i.Buf16(U.hash_size),U.prev=new i.Buf16(U.w_size),U.lit_bufsize=1<<w+6,U.pending_buf_size=4*U.lit_bufsize,U.pending_buf=new i.Buf8(U.pending_buf_size),U.d_buf=1*U.lit_bufsize,U.l_buf=3*U.lit_bufsize,U.level=D,U.strategy=I,U.method=N,ot(d)}n=[new ce(0,0,0,0,function(d,D){var N=65535;for(N>d.pending_buf_size-5&&(N=d.pending_buf_size-5);;){if(d.lookahead<=1){if(ye(d),d.lookahead===0&&D===l)return _;if(d.lookahead===0)break}d.strstart+=d.lookahead,d.lookahead=0;var v=d.block_start+N;if((d.strstart===0||d.strstart>=v)&&(d.lookahead=d.strstart-v,d.strstart=v,B(d,!1),d.strm.avail_out===0)||d.strstart-d.block_start>=d.w_size-Z&&(B(d,!1),d.strm.avail_out===0))return _}return d.insert=0,D===u?(B(d,!0),d.strm.avail_out===0?te:j):(d.strstart>d.block_start&&(B(d,!1),d.strm.avail_out),_)}),new ce(4,4,8,4,Te),new ce(4,5,16,8,Te),new ce(4,6,32,32,Te),new ce(4,4,16,16,le),new ce(8,16,32,32,le),new ce(8,16,128,128,le),new ce(8,32,128,256,le),new ce(32,128,258,1024,le),new ce(32,258,258,4096,le)],r.deflateInit=function(d,D){return Je(d,D,g,15,8,0)},r.deflateInit2=Je,r.deflateReset=ot,r.deflateResetKeep=ge,r.deflateSetHeader=function(d,D){return d&&d.state?d.state.wrap!==2?p:(d.state.gzhead=D,c):p},r.deflate=function(d,D){var N,v,w,I;if(!d||!d.state||5<D||D<0)return d?ne(d,p):p;if(v=d.state,!d.output||!d.input&&d.avail_in!==0||v.status===666&&D!==u)return ne(d,d.avail_out===0?-5:p);if(v.strm=d,N=v.last_flush,v.last_flush=D,v.status===E)if(v.wrap===2)d.adler=0,ee(v,31),ee(v,139),ee(v,8),v.gzhead?(ee(v,(v.gzhead.text?1:0)+(v.gzhead.hcrc?2:0)+(v.gzhead.extra?4:0)+(v.gzhead.name?8:0)+(v.gzhead.comment?16:0)),ee(v,255&v.gzhead.time),ee(v,v.gzhead.time>>8&255),ee(v,v.gzhead.time>>16&255),ee(v,v.gzhead.time>>24&255),ee(v,v.level===9?2:2<=v.strategy||v.level<2?4:0),ee(v,255&v.gzhead.os),v.gzhead.extra&&v.gzhead.extra.length&&(ee(v,255&v.gzhead.extra.length),ee(v,v.gzhead.extra.length>>8&255)),v.gzhead.hcrc&&(d.adler=s(d.adler,v.pending_buf,v.pending,0)),v.gzindex=0,v.status=69):(ee(v,0),ee(v,0),ee(v,0),ee(v,0),ee(v,0),ee(v,v.level===9?2:2<=v.strategy||v.level<2?4:0),ee(v,3),v.status=O);else{var z=g+(v.w_bits-8<<4)<<8;z|=(2<=v.strategy||v.level<2?0:v.level<6?1:v.level===6?2:3)<<6,v.strstart!==0&&(z|=32),z+=31-z%31,v.status=O,$(v,z),v.strstart!==0&&($(v,d.adler>>>16),$(v,65535&d.adler)),d.adler=1}if(v.status===69)if(v.gzhead.extra){for(w=v.pending;v.gzindex<(65535&v.gzhead.extra.length)&&(v.pending!==v.pending_buf_size||(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending!==v.pending_buf_size));)ee(v,255&v.gzhead.extra[v.gzindex]),v.gzindex++;v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),v.gzindex===v.gzhead.extra.length&&(v.gzindex=0,v.status=73)}else v.status=73;if(v.status===73)if(v.gzhead.name){w=v.pending;do{if(v.pending===v.pending_buf_size&&(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending===v.pending_buf_size)){I=1;break}I=v.gzindex<v.gzhead.name.length?255&v.gzhead.name.charCodeAt(v.gzindex++):0,ee(v,I)}while(I!==0);v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),I===0&&(v.gzindex=0,v.status=91)}else v.status=91;if(v.status===91)if(v.gzhead.comment){w=v.pending;do{if(v.pending===v.pending_buf_size&&(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending===v.pending_buf_size)){I=1;break}I=v.gzindex<v.gzhead.comment.length?255&v.gzhead.comment.charCodeAt(v.gzindex++):0,ee(v,I)}while(I!==0);v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),I===0&&(v.status=103)}else v.status=103;if(v.status===103&&(v.gzhead.hcrc?(v.pending+2>v.pending_buf_size&&C(d),v.pending+2<=v.pending_buf_size&&(ee(v,255&d.adler),ee(v,d.adler>>8&255),d.adler=0,v.status=O)):v.status=O),v.pending!==0){if(C(d),d.avail_out===0)return v.last_flush=-1,c}else if(d.avail_in===0&&G(D)<=G(N)&&D!==u)return ne(d,-5);if(v.status===666&&d.avail_in!==0)return ne(d,-5);if(d.avail_in!==0||v.lookahead!==0||D!==l&&v.status!==666){var U=v.strategy===2?function(R,q){for(var K;;){if(R.lookahead===0&&(ye(R),R.lookahead===0)){if(q===l)return _;break}if(R.match_length=0,K=a._tr_tally(R,0,R.window[R.strstart]),R.lookahead--,R.strstart++,K&&(B(R,!1),R.strm.avail_out===0))return _}return R.insert=0,q===u?(B(R,!0),R.strm.avail_out===0?te:j):R.last_lit&&(B(R,!1),R.strm.avail_out===0)?_:M}(v,D):v.strategy===3?function(R,q){for(var K,V,J,de,fe=R.window;;){if(R.lookahead<=F){if(ye(R),R.lookahead<=F&&q===l)return _;if(R.lookahead===0)break}if(R.match_length=0,R.lookahead>=k&&0<R.strstart&&(V=fe[J=R.strstart-1])===fe[++J]&&V===fe[++J]&&V===fe[++J]){de=R.strstart+F;do;while(V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&J<de);R.match_length=F-(de-J),R.match_length>R.lookahead&&(R.match_length=R.lookahead)}if(R.match_length>=k?(K=a._tr_tally(R,1,R.match_length-k),R.lookahead-=R.match_length,R.strstart+=R.match_length,R.match_length=0):(K=a._tr_tally(R,0,R.window[R.strstart]),R.lookahead--,R.strstart++),K&&(B(R,!1),R.strm.avail_out===0))return _}return R.insert=0,q===u?(B(R,!0),R.strm.avail_out===0?te:j):R.last_lit&&(B(R,!1),R.strm.avail_out===0)?_:M}(v,D):n[v.level].func(v,D);if(U!==te&&U!==j||(v.status=666),U===_||U===te)return d.avail_out===0&&(v.last_flush=-1),c;if(U===M&&(D===1?a._tr_align(v):D!==5&&(a._tr_stored_block(v,0,0,!1),D===3&&(Q(v.head),v.lookahead===0&&(v.strstart=0,v.block_start=0,v.insert=0))),C(d),d.avail_out===0))return v.last_flush=-1,c}return D!==u?c:v.wrap<=0?1:(v.wrap===2?(ee(v,255&d.adler),ee(v,d.adler>>8&255),ee(v,d.adler>>16&255),ee(v,d.adler>>24&255),ee(v,255&d.total_in),ee(v,d.total_in>>8&255),ee(v,d.total_in>>16&255),ee(v,d.total_in>>24&255)):($(v,d.adler>>>16),$(v,65535&d.adler)),C(d),0<v.wrap&&(v.wrap=-v.wrap),v.pending!==0?c:1)},r.deflateEnd=function(d){var D;return d&&d.state?(D=d.state.status)!==E&&D!==69&&D!==73&&D!==91&&D!==103&&D!==O&&D!==666?ne(d,p):(d.state=null,D===O?ne(d,-3):c):p},r.deflateSetDictionary=function(d,D){var N,v,w,I,z,U,R,q,K=D.length;if(!d||!d.state||(I=(N=d.state).wrap)===2||I===1&&N.status!==E||N.lookahead)return p;for(I===1&&(d.adler=o(d.adler,D,K,0)),N.wrap=0,K>=N.w_size&&(I===0&&(Q(N.head),N.strstart=0,N.block_start=0,N.insert=0),q=new i.Buf8(N.w_size),i.arraySet(q,D,K-N.w_size,N.w_size,0),D=q,K=N.w_size),z=d.avail_in,U=d.next_in,R=d.input,d.avail_in=K,d.next_in=0,d.input=D,ye(N);N.lookahead>=k;){for(v=N.strstart,w=N.lookahead-(k-1);N.ins_h=(N.ins_h<<N.hash_shift^N.window[v+k-1])&N.hash_mask,N.prev[v&N.w_mask]=N.head[N.ins_h],N.head[N.ins_h]=v,v++,--w;);N.strstart=v,N.lookahead=k-1,ye(N)}return N.strstart+=N.lookahead,N.block_start=N.strstart,N.insert=N.lookahead,N.lookahead=0,N.match_length=N.prev_length=k-1,N.match_available=0,d.next_in=U,d.input=R,d.avail_in=z,N.wrap=I,c},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(n,i){var a,o,s,f,l,u,c,p,h,y,m,g,b,A,x,T,S,L,k,F,Z,E,O,_,M;a=n.state,o=n.next_in,_=n.input,s=o+(n.avail_in-5),f=n.next_out,M=n.output,l=f-(i-n.avail_out),u=f+(n.avail_out-257),c=a.dmax,p=a.wsize,h=a.whave,y=a.wnext,m=a.window,g=a.hold,b=a.bits,A=a.lencode,x=a.distcode,T=(1<<a.lenbits)-1,S=(1<<a.distbits)-1;e:do{b<15&&(g+=_[o++]<<b,b+=8,g+=_[o++]<<b,b+=8),L=A[g&T];t:for(;;){if(g>>>=k=L>>>24,b-=k,(k=L>>>16&255)===0)M[f++]=65535&L;else{if(!(16&k)){if(!(64&k)){L=A[(65535&L)+(g&(1<<k)-1)];continue t}if(32&k){a.mode=12;break e}n.msg="invalid literal/length code",a.mode=30;break e}F=65535&L,(k&=15)&&(b<k&&(g+=_[o++]<<b,b+=8),F+=g&(1<<k)-1,g>>>=k,b-=k),b<15&&(g+=_[o++]<<b,b+=8,g+=_[o++]<<b,b+=8),L=x[g&S];r:for(;;){if(g>>>=k=L>>>24,b-=k,!(16&(k=L>>>16&255))){if(!(64&k)){L=x[(65535&L)+(g&(1<<k)-1)];continue r}n.msg="invalid distance code",a.mode=30;break e}if(Z=65535&L,b<(k&=15)&&(g+=_[o++]<<b,(b+=8)<k&&(g+=_[o++]<<b,b+=8)),c<(Z+=g&(1<<k)-1)){n.msg="invalid distance too far back",a.mode=30;break e}if(g>>>=k,b-=k,(k=f-l)<Z){if(h<(k=Z-k)&&a.sane){n.msg="invalid distance too far back",a.mode=30;break e}if(O=m,(E=0)===y){if(E+=p-k,k<F){for(F-=k;M[f++]=m[E++],--k;);E=f-Z,O=M}}else if(y<k){if(E+=p+y-k,(k-=y)<F){for(F-=k;M[f++]=m[E++],--k;);if(E=0,y<F){for(F-=k=y;M[f++]=m[E++],--k;);E=f-Z,O=M}}}else if(E+=y-k,k<F){for(F-=k;M[f++]=m[E++],--k;);E=f-Z,O=M}for(;2<F;)M[f++]=O[E++],M[f++]=O[E++],M[f++]=O[E++],F-=3;F&&(M[f++]=O[E++],1<F&&(M[f++]=O[E++]))}else{for(E=f-Z;M[f++]=M[E++],M[f++]=M[E++],M[f++]=M[E++],2<(F-=3););F&&(M[f++]=M[E++],1<F&&(M[f++]=M[E++]))}break}}break}}while(o<s&&f<u);o-=F=b>>3,g&=(1<<(b-=F<<3))-1,n.next_in=o,n.next_out=f,n.avail_in=o<s?s-o+5:5-(o-s),n.avail_out=f<u?u-f+257:257-(f-u),a.hold=g,a.bits=b}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),i=e("./adler32"),a=e("./crc32"),o=e("./inffast"),s=e("./inftrees"),f=1,l=2,u=0,c=-2,p=1,h=852,y=592;function m(E){return(E>>>24&255)+(E>>>8&65280)+((65280&E)<<8)+((255&E)<<24)}function g(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function b(E){var O;return E&&E.state?(O=E.state,E.total_in=E.total_out=O.total=0,E.msg="",O.wrap&&(E.adler=1&O.wrap),O.mode=p,O.last=0,O.havedict=0,O.dmax=32768,O.head=null,O.hold=0,O.bits=0,O.lencode=O.lendyn=new n.Buf32(h),O.distcode=O.distdyn=new n.Buf32(y),O.sane=1,O.back=-1,u):c}function A(E){var O;return E&&E.state?((O=E.state).wsize=0,O.whave=0,O.wnext=0,b(E)):c}function x(E,O){var _,M;return E&&E.state?(M=E.state,O<0?(_=0,O=-O):(_=1+(O>>4),O<48&&(O&=15)),O&&(O<8||15<O)?c:(M.window!==null&&M.wbits!==O&&(M.window=null),M.wrap=_,M.wbits=O,A(E))):c}function T(E,O){var _,M;return E?(M=new g,(E.state=M).window=null,(_=x(E,O))!==u&&(E.state=null),_):c}var S,L,k=!0;function F(E){if(k){var O;for(S=new n.Buf32(512),L=new n.Buf32(32),O=0;O<144;)E.lens[O++]=8;for(;O<256;)E.lens[O++]=9;for(;O<280;)E.lens[O++]=7;for(;O<288;)E.lens[O++]=8;for(s(f,E.lens,0,288,S,0,E.work,{bits:9}),O=0;O<32;)E.lens[O++]=5;s(l,E.lens,0,32,L,0,E.work,{bits:5}),k=!1}E.lencode=S,E.lenbits=9,E.distcode=L,E.distbits=5}function Z(E,O,_,M){var te,j=E.state;return j.window===null&&(j.wsize=1<<j.wbits,j.wnext=0,j.whave=0,j.window=new n.Buf8(j.wsize)),M>=j.wsize?(n.arraySet(j.window,O,_-j.wsize,j.wsize,0),j.wnext=0,j.whave=j.wsize):(M<(te=j.wsize-j.wnext)&&(te=M),n.arraySet(j.window,O,_-M,te,j.wnext),(M-=te)?(n.arraySet(j.window,O,_-M,M,0),j.wnext=M,j.whave=j.wsize):(j.wnext+=te,j.wnext===j.wsize&&(j.wnext=0),j.whave<j.wsize&&(j.whave+=te))),0}r.inflateReset=A,r.inflateReset2=x,r.inflateResetKeep=b,r.inflateInit=function(E){return T(E,15)},r.inflateInit2=T,r.inflate=function(E,O){var _,M,te,j,ne,G,Q,C,B,ee,$,Y,ye,Te,le,ce,Ee,ge,ot,Je,d,D,N,v,w=0,I=new n.Buf8(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!E||!E.state||!E.output||!E.input&&E.avail_in!==0)return c;(_=E.state).mode===12&&(_.mode=13),ne=E.next_out,te=E.output,Q=E.avail_out,j=E.next_in,M=E.input,G=E.avail_in,C=_.hold,B=_.bits,ee=G,$=Q,D=u;e:for(;;)switch(_.mode){case p:if(_.wrap===0){_.mode=13;break}for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(2&_.wrap&&C===35615){I[_.check=0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0),B=C=0,_.mode=2;break}if(_.flags=0,_.head&&(_.head.done=!1),!(1&_.wrap)||(((255&C)<<8)+(C>>8))%31){E.msg="incorrect header check",_.mode=30;break}if((15&C)!=8){E.msg="unknown compression method",_.mode=30;break}if(B-=4,d=8+(15&(C>>>=4)),_.wbits===0)_.wbits=d;else if(d>_.wbits){E.msg="invalid window size",_.mode=30;break}_.dmax=1<<d,E.adler=_.check=1,_.mode=512&C?10:12,B=C=0;break;case 2:for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(_.flags=C,(255&_.flags)!=8){E.msg="unknown compression method",_.mode=30;break}if(57344&_.flags){E.msg="unknown header flags set",_.mode=30;break}_.head&&(_.head.text=C>>8&1),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0,_.mode=3;case 3:for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.head&&(_.head.time=C),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,I[2]=C>>>16&255,I[3]=C>>>24&255,_.check=a(_.check,I,4,0)),B=C=0,_.mode=4;case 4:for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.head&&(_.head.xflags=255&C,_.head.os=C>>8),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0,_.mode=5;case 5:if(1024&_.flags){for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.length=C,_.head&&(_.head.extra_len=C),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0}else _.head&&(_.head.extra=null);_.mode=6;case 6:if(1024&_.flags&&(G<(Y=_.length)&&(Y=G),Y&&(_.head&&(d=_.head.extra_len-_.length,_.head.extra||(_.head.extra=new Array(_.head.extra_len)),n.arraySet(_.head.extra,M,j,Y,d)),512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,_.length-=Y),_.length))break e;_.length=0,_.mode=7;case 7:if(2048&_.flags){if(G===0)break e;for(Y=0;d=M[j+Y++],_.head&&d&&_.length<65536&&(_.head.name+=String.fromCharCode(d)),d&&Y<G;);if(512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,d)break e}else _.head&&(_.head.name=null);_.length=0,_.mode=8;case 8:if(4096&_.flags){if(G===0)break e;for(Y=0;d=M[j+Y++],_.head&&d&&_.length<65536&&(_.head.comment+=String.fromCharCode(d)),d&&Y<G;);if(512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,d)break e}else _.head&&(_.head.comment=null);_.mode=9;case 9:if(512&_.flags){for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C!==(65535&_.check)){E.msg="header crc mismatch",_.mode=30;break}B=C=0}_.head&&(_.head.hcrc=_.flags>>9&1,_.head.done=!0),E.adler=_.check=0,_.mode=12;break;case 10:for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}E.adler=_.check=m(C),B=C=0,_.mode=11;case 11:if(_.havedict===0)return E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,2;E.adler=_.check=1,_.mode=12;case 12:if(O===5||O===6)break e;case 13:if(_.last){C>>>=7&B,B-=7&B,_.mode=27;break}for(;B<3;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}switch(_.last=1&C,B-=1,3&(C>>>=1)){case 0:_.mode=14;break;case 1:if(F(_),_.mode=20,O!==6)break;C>>>=2,B-=2;break e;case 2:_.mode=17;break;case 3:E.msg="invalid block type",_.mode=30}C>>>=2,B-=2;break;case 14:for(C>>>=7&B,B-=7&B;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if((65535&C)!=(C>>>16^65535)){E.msg="invalid stored block lengths",_.mode=30;break}if(_.length=65535&C,B=C=0,_.mode=15,O===6)break e;case 15:_.mode=16;case 16:if(Y=_.length){if(G<Y&&(Y=G),Q<Y&&(Y=Q),Y===0)break e;n.arraySet(te,M,j,Y,ne),G-=Y,j+=Y,Q-=Y,ne+=Y,_.length-=Y;break}_.mode=12;break;case 17:for(;B<14;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(_.nlen=257+(31&C),C>>>=5,B-=5,_.ndist=1+(31&C),C>>>=5,B-=5,_.ncode=4+(15&C),C>>>=4,B-=4,286<_.nlen||30<_.ndist){E.msg="too many length or distance symbols",_.mode=30;break}_.have=0,_.mode=18;case 18:for(;_.have<_.ncode;){for(;B<3;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.lens[z[_.have++]]=7&C,C>>>=3,B-=3}for(;_.have<19;)_.lens[z[_.have++]]=0;if(_.lencode=_.lendyn,_.lenbits=7,N={bits:_.lenbits},D=s(0,_.lens,0,19,_.lencode,0,_.work,N),_.lenbits=N.bits,D){E.msg="invalid code lengths set",_.mode=30;break}_.have=0,_.mode=19;case 19:for(;_.have<_.nlen+_.ndist;){for(;ce=(w=_.lencode[C&(1<<_.lenbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(Ee<16)C>>>=le,B-=le,_.lens[_.have++]=Ee;else{if(Ee===16){for(v=le+2;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C>>>=le,B-=le,_.have===0){E.msg="invalid bit length repeat",_.mode=30;break}d=_.lens[_.have-1],Y=3+(3&C),C>>>=2,B-=2}else if(Ee===17){for(v=le+3;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}B-=le,d=0,Y=3+(7&(C>>>=le)),C>>>=3,B-=3}else{for(v=le+7;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}B-=le,d=0,Y=11+(127&(C>>>=le)),C>>>=7,B-=7}if(_.have+Y>_.nlen+_.ndist){E.msg="invalid bit length repeat",_.mode=30;break}for(;Y--;)_.lens[_.have++]=d}}if(_.mode===30)break;if(_.lens[256]===0){E.msg="invalid code -- missing end-of-block",_.mode=30;break}if(_.lenbits=9,N={bits:_.lenbits},D=s(f,_.lens,0,_.nlen,_.lencode,0,_.work,N),_.lenbits=N.bits,D){E.msg="invalid literal/lengths set",_.mode=30;break}if(_.distbits=6,_.distcode=_.distdyn,N={bits:_.distbits},D=s(l,_.lens,_.nlen,_.ndist,_.distcode,0,_.work,N),_.distbits=N.bits,D){E.msg="invalid distances set",_.mode=30;break}if(_.mode=20,O===6)break e;case 20:_.mode=21;case 21:if(6<=G&&258<=Q){E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,o(E,$),ne=E.next_out,te=E.output,Q=E.avail_out,j=E.next_in,M=E.input,G=E.avail_in,C=_.hold,B=_.bits,_.mode===12&&(_.back=-1);break}for(_.back=0;ce=(w=_.lencode[C&(1<<_.lenbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(ce&&!(240&ce)){for(ge=le,ot=ce,Je=Ee;ce=(w=_.lencode[Je+((C&(1<<ge+ot)-1)>>ge)])>>>16&255,Ee=65535&w,!(ge+(le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}C>>>=ge,B-=ge,_.back+=ge}if(C>>>=le,B-=le,_.back+=le,_.length=Ee,ce===0){_.mode=26;break}if(32&ce){_.back=-1,_.mode=12;break}if(64&ce){E.msg="invalid literal/length code",_.mode=30;break}_.extra=15&ce,_.mode=22;case 22:if(_.extra){for(v=_.extra;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.length+=C&(1<<_.extra)-1,C>>>=_.extra,B-=_.extra,_.back+=_.extra}_.was=_.length,_.mode=23;case 23:for(;ce=(w=_.distcode[C&(1<<_.distbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(!(240&ce)){for(ge=le,ot=ce,Je=Ee;ce=(w=_.distcode[Je+((C&(1<<ge+ot)-1)>>ge)])>>>16&255,Ee=65535&w,!(ge+(le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}C>>>=ge,B-=ge,_.back+=ge}if(C>>>=le,B-=le,_.back+=le,64&ce){E.msg="invalid distance code",_.mode=30;break}_.offset=Ee,_.extra=15&ce,_.mode=24;case 24:if(_.extra){for(v=_.extra;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.offset+=C&(1<<_.extra)-1,C>>>=_.extra,B-=_.extra,_.back+=_.extra}if(_.offset>_.dmax){E.msg="invalid distance too far back",_.mode=30;break}_.mode=25;case 25:if(Q===0)break e;if(Y=$-Q,_.offset>Y){if((Y=_.offset-Y)>_.whave&&_.sane){E.msg="invalid distance too far back",_.mode=30;break}ye=Y>_.wnext?(Y-=_.wnext,_.wsize-Y):_.wnext-Y,Y>_.length&&(Y=_.length),Te=_.window}else Te=te,ye=ne-_.offset,Y=_.length;for(Q<Y&&(Y=Q),Q-=Y,_.length-=Y;te[ne++]=Te[ye++],--Y;);_.length===0&&(_.mode=21);break;case 26:if(Q===0)break e;te[ne++]=_.length,Q--,_.mode=21;break;case 27:if(_.wrap){for(;B<32;){if(G===0)break e;G--,C|=M[j++]<<B,B+=8}if($-=Q,E.total_out+=$,_.total+=$,$&&(E.adler=_.check=_.flags?a(_.check,te,$,ne-$):i(_.check,te,$,ne-$)),$=Q,(_.flags?C:m(C))!==_.check){E.msg="incorrect data check",_.mode=30;break}B=C=0}_.mode=28;case 28:if(_.wrap&&_.flags){for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C!==(4294967295&_.total)){E.msg="incorrect length check",_.mode=30;break}B=C=0}_.mode=29;case 29:D=1;break e;case 30:D=-3;break e;case 31:return-4;case 32:default:return c}return E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,(_.wsize||$!==E.avail_out&&_.mode<30&&(_.mode<27||O!==4))&&Z(E,E.output,E.next_out,$-E.avail_out)?(_.mode=31,-4):(ee-=E.avail_in,$-=E.avail_out,E.total_in+=ee,E.total_out+=$,_.total+=$,_.wrap&&$&&(E.adler=_.check=_.flags?a(_.check,te,$,E.next_out-$):i(_.check,te,$,E.next_out-$)),E.data_type=_.bits+(_.last?64:0)+(_.mode===12?128:0)+(_.mode===20||_.mode===15?256:0),(ee==0&&$===0||O===4)&&D===u&&(D=-5),D)},r.inflateEnd=function(E){if(!E||!E.state)return c;var O=E.state;return O.window&&(O.window=null),E.state=null,u},r.inflateGetHeader=function(E,O){var _;return E&&E.state&&2&(_=E.state).wrap?((_.head=O).done=!1,u):c},r.inflateSetDictionary=function(E,O){var _,M=O.length;return E&&E.state?(_=E.state).wrap!==0&&_.mode!==11?c:_.mode===11&&i(1,O,M,0)!==_.check?-3:Z(E,O,M,M)?(_.mode=31,-4):(_.havedict=1,u):c},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(f,l,u,c,p,h,y,m){var g,b,A,x,T,S,L,k,F,Z=m.bits,E=0,O=0,_=0,M=0,te=0,j=0,ne=0,G=0,Q=0,C=0,B=null,ee=0,$=new n.Buf16(16),Y=new n.Buf16(16),ye=null,Te=0;for(E=0;E<=15;E++)$[E]=0;for(O=0;O<c;O++)$[l[u+O]]++;for(te=Z,M=15;1<=M&&$[M]===0;M--);if(M<te&&(te=M),M===0)return p[h++]=20971520,p[h++]=20971520,m.bits=1,0;for(_=1;_<M&&$[_]===0;_++);for(te<_&&(te=_),E=G=1;E<=15;E++)if(G<<=1,(G-=$[E])<0)return-1;if(0<G&&(f===0||M!==1))return-1;for(Y[1]=0,E=1;E<15;E++)Y[E+1]=Y[E]+$[E];for(O=0;O<c;O++)l[u+O]!==0&&(y[Y[l[u+O]]++]=O);if(S=f===0?(B=ye=y,19):f===1?(B=i,ee-=257,ye=a,Te-=257,256):(B=o,ye=s,-1),E=_,T=h,ne=O=C=0,A=-1,x=(Q=1<<(j=te))-1,f===1&&852<Q||f===2&&592<Q)return 1;for(;;){for(L=E-ne,F=y[O]<S?(k=0,y[O]):y[O]>S?(k=ye[Te+y[O]],B[ee+y[O]]):(k=96,0),g=1<<E-ne,_=b=1<<j;p[T+(C>>ne)+(b-=g)]=L<<24|k<<16|F|0,b!==0;);for(g=1<<E-1;C&g;)g>>=1;if(g!==0?(C&=g-1,C+=g):C=0,O++,--$[E]==0){if(E===M)break;E=l[u+y[O]]}if(te<E&&(C&x)!==A){for(ne===0&&(ne=te),T+=_,G=1<<(j=E-ne);j+ne<M&&!((G-=$[j+ne])<=0);)j++,G<<=1;if(Q+=1<<j,f===1&&852<Q||f===2&&592<Q)return 1;p[A=C&x]=te<<24|j<<16|T-h|0}}return C!==0&&(p[T+C]=E-ne<<24|64<<16|0),m.bits=te,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common"),i=0,a=1;function o(w){for(var I=w.length;0<=--I;)w[I]=0}var s=0,f=29,l=256,u=l+1+f,c=30,p=19,h=2*u+1,y=15,m=16,g=7,b=256,A=16,x=17,T=18,S=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],L=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],k=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Z=new Array(2*(u+2));o(Z);var E=new Array(2*c);o(E);var O=new Array(512);o(O);var _=new Array(256);o(_);var M=new Array(f);o(M);var te,j,ne,G=new Array(c);function Q(w,I,z,U,R){this.static_tree=w,this.extra_bits=I,this.extra_base=z,this.elems=U,this.max_length=R,this.has_stree=w&&w.length}function C(w,I){this.dyn_tree=w,this.max_code=0,this.stat_desc=I}function B(w){return w<256?O[w]:O[256+(w>>>7)]}function ee(w,I){w.pending_buf[w.pending++]=255&I,w.pending_buf[w.pending++]=I>>>8&255}function $(w,I,z){w.bi_valid>m-z?(w.bi_buf|=I<<w.bi_valid&65535,ee(w,w.bi_buf),w.bi_buf=I>>m-w.bi_valid,w.bi_valid+=z-m):(w.bi_buf|=I<<w.bi_valid&65535,w.bi_valid+=z)}function Y(w,I,z){$(w,z[2*I],z[2*I+1])}function ye(w,I){for(var z=0;z|=1&w,w>>>=1,z<<=1,0<--I;);return z>>>1}function Te(w,I,z){var U,R,q=new Array(y+1),K=0;for(U=1;U<=y;U++)q[U]=K=K+z[U-1]<<1;for(R=0;R<=I;R++){var V=w[2*R+1];V!==0&&(w[2*R]=ye(q[V]++,V))}}function le(w){var I;for(I=0;I<u;I++)w.dyn_ltree[2*I]=0;for(I=0;I<c;I++)w.dyn_dtree[2*I]=0;for(I=0;I<p;I++)w.bl_tree[2*I]=0;w.dyn_ltree[2*b]=1,w.opt_len=w.static_len=0,w.last_lit=w.matches=0}function ce(w){8<w.bi_valid?ee(w,w.bi_buf):0<w.bi_valid&&(w.pending_buf[w.pending++]=w.bi_buf),w.bi_buf=0,w.bi_valid=0}function Ee(w,I,z,U){var R=2*I,q=2*z;return w[R]<w[q]||w[R]===w[q]&&U[I]<=U[z]}function ge(w,I,z){for(var U=w.heap[z],R=z<<1;R<=w.heap_len&&(R<w.heap_len&&Ee(I,w.heap[R+1],w.heap[R],w.depth)&&R++,!Ee(I,U,w.heap[R],w.depth));)w.heap[z]=w.heap[R],z=R,R<<=1;w.heap[z]=U}function ot(w,I,z){var U,R,q,K,V=0;if(w.last_lit!==0)for(;U=w.pending_buf[w.d_buf+2*V]<<8|w.pending_buf[w.d_buf+2*V+1],R=w.pending_buf[w.l_buf+V],V++,U===0?Y(w,R,I):(Y(w,(q=_[R])+l+1,I),(K=S[q])!==0&&$(w,R-=M[q],K),Y(w,q=B(--U),z),(K=L[q])!==0&&$(w,U-=G[q],K)),V<w.last_lit;);Y(w,b,I)}function Je(w,I){var z,U,R,q=I.dyn_tree,K=I.stat_desc.static_tree,V=I.stat_desc.has_stree,J=I.stat_desc.elems,de=-1;for(w.heap_len=0,w.heap_max=h,z=0;z<J;z++)q[2*z]!==0?(w.heap[++w.heap_len]=de=z,w.depth[z]=0):q[2*z+1]=0;for(;w.heap_len<2;)q[2*(R=w.heap[++w.heap_len]=de<2?++de:0)]=1,w.depth[R]=0,w.opt_len--,V&&(w.static_len-=K[2*R+1]);for(I.max_code=de,z=w.heap_len>>1;1<=z;z--)ge(w,q,z);for(R=J;z=w.heap[1],w.heap[1]=w.heap[w.heap_len--],ge(w,q,1),U=w.heap[1],w.heap[--w.heap_max]=z,w.heap[--w.heap_max]=U,q[2*R]=q[2*z]+q[2*U],w.depth[R]=(w.depth[z]>=w.depth[U]?w.depth[z]:w.depth[U])+1,q[2*z+1]=q[2*U+1]=R,w.heap[1]=R++,ge(w,q,1),2<=w.heap_len;);w.heap[--w.heap_max]=w.heap[1],function(fe,Ze){var Gr,st,Zr,be,Fn,zi,bt=Ze.dyn_tree,jo=Ze.max_code,Qh=Ze.stat_desc.static_tree,ed=Ze.stat_desc.has_stree,td=Ze.stat_desc.extra_bits,Go=Ze.stat_desc.extra_base,qr=Ze.stat_desc.max_length,Ln=0;for(be=0;be<=y;be++)fe.bl_count[be]=0;for(bt[2*fe.heap[fe.heap_max]+1]=0,Gr=fe.heap_max+1;Gr<h;Gr++)qr<(be=bt[2*bt[2*(st=fe.heap[Gr])+1]+1]+1)&&(be=qr,Ln++),bt[2*st+1]=be,jo<st||(fe.bl_count[be]++,Fn=0,Go<=st&&(Fn=td[st-Go]),zi=bt[2*st],fe.opt_len+=zi*(be+Fn),ed&&(fe.static_len+=zi*(Qh[2*st+1]+Fn)));if(Ln!==0){do{for(be=qr-1;fe.bl_count[be]===0;)be--;fe.bl_count[be]--,fe.bl_count[be+1]+=2,fe.bl_count[qr]--,Ln-=2}while(0<Ln);for(be=qr;be!==0;be--)for(st=fe.bl_count[be];st!==0;)jo<(Zr=fe.heap[--Gr])||(bt[2*Zr+1]!==be&&(fe.opt_len+=(be-bt[2*Zr+1])*bt[2*Zr],bt[2*Zr+1]=be),st--)}}(w,I),Te(q,de,w.bl_count)}function d(w,I,z){var U,R,q=-1,K=I[1],V=0,J=7,de=4;for(K===0&&(J=138,de=3),I[2*(z+1)+1]=65535,U=0;U<=z;U++)R=K,K=I[2*(U+1)+1],++V<J&&R===K||(V<de?w.bl_tree[2*R]+=V:R!==0?(R!==q&&w.bl_tree[2*R]++,w.bl_tree[2*A]++):V<=10?w.bl_tree[2*x]++:w.bl_tree[2*T]++,q=R,de=(V=0)===K?(J=138,3):R===K?(J=6,3):(J=7,4))}function D(w,I,z){var U,R,q=-1,K=I[1],V=0,J=7,de=4;for(K===0&&(J=138,de=3),U=0;U<=z;U++)if(R=K,K=I[2*(U+1)+1],!(++V<J&&R===K)){if(V<de)for(;Y(w,R,w.bl_tree),--V!=0;);else R!==0?(R!==q&&(Y(w,R,w.bl_tree),V--),Y(w,A,w.bl_tree),$(w,V-3,2)):V<=10?(Y(w,x,w.bl_tree),$(w,V-3,3)):(Y(w,T,w.bl_tree),$(w,V-11,7));q=R,de=(V=0)===K?(J=138,3):R===K?(J=6,3):(J=7,4)}}o(G);var N=!1;function v(w,I,z,U){$(w,(s<<1)+(U?1:0),3),function(R,q,K,V){ce(R),V&&(ee(R,K),ee(R,~K)),n.arraySet(R.pending_buf,R.window,q,K,R.pending),R.pending+=K}(w,I,z,!0)}r._tr_init=function(w){N||(function(){var I,z,U,R,q,K=new Array(y+1);for(R=U=0;R<f-1;R++)for(M[R]=U,I=0;I<1<<S[R];I++)_[U++]=R;for(_[U-1]=R,R=q=0;R<16;R++)for(G[R]=q,I=0;I<1<<L[R];I++)O[q++]=R;for(q>>=7;R<c;R++)for(G[R]=q<<7,I=0;I<1<<L[R]-7;I++)O[256+q++]=R;for(z=0;z<=y;z++)K[z]=0;for(I=0;I<=143;)Z[2*I+1]=8,I++,K[8]++;for(;I<=255;)Z[2*I+1]=9,I++,K[9]++;for(;I<=279;)Z[2*I+1]=7,I++,K[7]++;for(;I<=287;)Z[2*I+1]=8,I++,K[8]++;for(Te(Z,u+1,K),I=0;I<c;I++)E[2*I+1]=5,E[2*I]=ye(I,5);te=new Q(Z,S,l+1,u,y),j=new Q(E,L,0,c,y),ne=new Q(new Array(0),k,0,p,g)}(),N=!0),w.l_desc=new C(w.dyn_ltree,te),w.d_desc=new C(w.dyn_dtree,j),w.bl_desc=new C(w.bl_tree,ne),w.bi_buf=0,w.bi_valid=0,le(w)},r._tr_stored_block=v,r._tr_flush_block=function(w,I,z,U){var R,q,K=0;0<w.level?(w.strm.data_type===2&&(w.strm.data_type=function(V){var J,de=4093624447;for(J=0;J<=31;J++,de>>>=1)if(1&de&&V.dyn_ltree[2*J]!==0)return i;if(V.dyn_ltree[18]!==0||V.dyn_ltree[20]!==0||V.dyn_ltree[26]!==0)return a;for(J=32;J<l;J++)if(V.dyn_ltree[2*J]!==0)return a;return i}(w)),Je(w,w.l_desc),Je(w,w.d_desc),K=function(V){var J;for(d(V,V.dyn_ltree,V.l_desc.max_code),d(V,V.dyn_dtree,V.d_desc.max_code),Je(V,V.bl_desc),J=p-1;3<=J&&V.bl_tree[2*F[J]+1]===0;J--);return V.opt_len+=3*(J+1)+5+5+4,J}(w),R=w.opt_len+3+7>>>3,(q=w.static_len+3+7>>>3)<=R&&(R=q)):R=q=z+5,z+4<=R&&I!==-1?v(w,I,z,U):w.strategy===4||q===R?($(w,2+(U?1:0),3),ot(w,Z,E)):($(w,4+(U?1:0),3),function(V,J,de,fe){var Ze;for($(V,J-257,5),$(V,de-1,5),$(V,fe-4,4),Ze=0;Ze<fe;Ze++)$(V,V.bl_tree[2*F[Ze]+1],3);D(V,V.dyn_ltree,J-1),D(V,V.dyn_dtree,de-1)}(w,w.l_desc.max_code+1,w.d_desc.max_code+1,K+1),ot(w,w.dyn_ltree,w.dyn_dtree)),le(w),U&&ce(w)},r._tr_tally=function(w,I,z){return w.pending_buf[w.d_buf+2*w.last_lit]=I>>>8&255,w.pending_buf[w.d_buf+2*w.last_lit+1]=255&I,w.pending_buf[w.l_buf+w.last_lit]=255&z,w.last_lit++,I===0?w.dyn_ltree[2*z]++:(w.matches++,I--,w.dyn_ltree[2*(_[z]+l+1)]++,w.dyn_dtree[2*B(I)]++),w.last_lit===w.lit_bufsize-1},r._tr_align=function(w){$(w,2,3),Y(w,b,Z),function(I){I.bi_valid===16?(ee(I,I.bi_buf),I.bi_buf=0,I.bi_valid=0):8<=I.bi_valid&&(I.pending_buf[I.pending++]=255&I.bi_buf,I.bi_buf>>=8,I.bi_valid-=8)}(w)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(n){(function(i,a){"use strict";if(!i.setImmediate){var o,s,f,l,u=1,c={},p=!1,h=i.document,y=Object.getPrototypeOf&&Object.getPrototypeOf(i);y=y&&y.setTimeout?y:i,o={}.toString.call(i.process)==="[object process]"?function(A){process.nextTick(function(){g(A)})}:function(){if(i.postMessage&&!i.importScripts){var A=!0,x=i.onmessage;return i.onmessage=function(){A=!1},i.postMessage("","*"),i.onmessage=x,A}}()?(l="setImmediate$"+Math.random()+"$",i.addEventListener?i.addEventListener("message",b,!1):i.attachEvent("onmessage",b),function(A){i.postMessage(l+A,"*")}):i.MessageChannel?((f=new MessageChannel).port1.onmessage=function(A){g(A.data)},function(A){f.port2.postMessage(A)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,function(A){var x=h.createElement("script");x.onreadystatechange=function(){g(A),x.onreadystatechange=null,s.removeChild(x),x=null},s.appendChild(x)}):function(A){setTimeout(g,0,A)},y.setImmediate=function(A){typeof A!="function"&&(A=new Function(""+A));for(var x=new Array(arguments.length-1),T=0;T<x.length;T++)x[T]=arguments[T+1];var S={callback:A,args:x};return c[u]=S,o(u),u++},y.clearImmediate=m}function m(A){delete c[A]}function g(A){if(p)setTimeout(g,0,A);else{var x=c[A];if(x){p=!0;try{(function(T){var S=T.callback,L=T.args;switch(L.length){case 0:S();break;case 1:S(L[0]);break;case 2:S(L[0],L[1]);break;case 3:S(L[0],L[1],L[2]);break;default:S.apply(a,L)}})(x)}finally{m(A),p=!1}}}}function b(A){A.source===i&&typeof A.data=="string"&&A.data.indexOf(l)===0&&g(+A.data.slice(l.length))}})(typeof self>"u"?n===void 0?this:n:self)}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})});var Yy={};sd(Yy,{Gltf:()=>we,GltfBuilder:()=>Hr,GltfOptimizer:()=>Wr,Mbx:()=>Be,convertMbxToGltf:()=>Jh,convertZmbxToGltf:()=>Wy});var Be;(t=>{let e;(s=>(s[s.QUAD=1]="QUAD",s[s.MATERIAL=2]="MATERIAL",s[s.UVS=8]="UVS",s[s.NORMALS=32]="NORMALS",s[s.COLORS=128]="COLORS"))(e=t.FaceFlags||(t.FaceFlags={}))})(Be||(Be={}));var we;(t=>{let e;(x=>(x[x.I8=5120]="I8",x[x.U8=5121]="U8",x[x.I16=5122]="I16",x[x.U16=5123]="U16",x[x.U32=5125]="U32",x[x.F32=5126]="F32",x[x.NEAREST=9728]="NEAREST",x[x.LINEAR=9729]="LINEAR",x[x.REPEAT=10497]="REPEAT",x[x.NEAREST_MIPMAP_NEAREST=9984]="NEAREST_MIPMAP_NEAREST",x[x.LINEAR_MIPMAP_NEAREST=9985]="LINEAR_MIPMAP_NEAREST",x[x.NEAREST_MIPMAP_LINEAR=9986]="NEAREST_MIPMAP_LINEAR",x[x.LINEAR_MIPMAP_LINEAR=9987]="LINEAR_MIPMAP_LINEAR",x[x.CLAMP_TO_EDGE=33071]="CLAMP_TO_EDGE",x[x.MIRRORED_REPEAT=33648]="MIRRORED_REPEAT",x[x.ARRAY_BUFFER=34962]="ARRAY_BUFFER",x[x.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER"))(e=t.Const||(t.Const={}))})(we||(we={}));var Qe=(e,t)=>{let r=e.get(t);if(r===void 0)throw new RangeError(String(t));return r},lt=(e,t,r)=>{if(e.has(t))throw new RangeError(String(t));e.set(t,r)},Hr=class{constructor(){this.reset()}reset(){this._file={asset:{version:"2.0"}},this._imageIndices=new Map,this._bufferIndices=new Map,this._bufferViewIndices=new Map,this._accessorIndices=new Map,this._meshIndices=new Map,this._nodeIndices=new Map,this._sceneIndices=new Map,this._materialIndices=new Map,this._textureIndices=new Map,this._samplerIndices=new Map}build(){let t=this._file;return this.reset(),t}setMetadata(t){Object.assign(this._file.asset,t)}useExtension(t){var r;(r=this._file).extensionsUsed??(r.extensionsUsed=[]),this._file.extensionsUsed.push(t)}setMainScene(t){this._file.scene=t}getImageIndex(t){return Qe(this._imageIndices,t)}getImage(t){let r=Qe(this._imageIndices,t);return this._file.images[r]}addImage(t,r){var i;(i=this._file).images??(i.images=[]);let n=this._file.images.length;return lt(this._imageIndices,t,n),this._file.images.push(r),n}getBufferIndex(t){return Qe(this._bufferIndices,t)}addBuffer(t,r){var i;(i=this._file).buffers??(i.buffers=[]);let n=this._file.buffers.length;return lt(this._bufferIndices,t,n),this._file.buffers.push(r),n}getBufferViewIndex(t){return Qe(this._bufferViewIndices,t)}addBufferView(t,r){var i;(i=this._file).bufferViews??(i.bufferViews=[]);let n=this._file.bufferViews.length;return lt(this._bufferViewIndices,t,n),this._file.bufferViews.push(r),n}tryGetAccessorIndex(t){return this._accessorIndices.get(t)}getAccessorIndex(t){return Qe(this._accessorIndices,t)}addAccessor(t,r){var i;(i=this._file).accessors??(i.accessors=[]);let n=this._file.accessors.length;return lt(this._accessorIndices,t,n),this._file.accessors.push(r),n}getMeshIndex(t){return Qe(this._meshIndices,t)}addMesh(t,r){var i;(i=this._file).meshes??(i.meshes=[]);let n=this._file.meshes.length;return lt(this._meshIndices,t,n),this._file.meshes.push(r),n}getNodeIndex(t){return Qe(this._nodeIndices,t)}addNode(t,r){var i;(i=this._file).nodes??(i.nodes=[]);let n=this._file.nodes.length;return lt(this._nodeIndices,t,n),this._file.nodes.push(r),n}getSceneIndex(t){return Qe(this._sceneIndices,t)}addScene(t,r){var i;(i=this._file).scenes??(i.scenes=[]);let n=this._file.scenes.length;return lt(this._sceneIndices,t,n),this._file.scenes.push(r),n}hasMaterial(t){return this._materialIndices.has(t)}getMaterialIndex(t){return Qe(this._materialIndices,t)}addMaterial(t,r){var i;(i=this._file).materials??(i.materials=[]);let n=this._file.materials.length;return lt(this._materialIndices,t,n),this._file.materials.push(r),n}getTextureIndex(t){return Qe(this._textureIndices,t)}addTexture(t,r){var i;(i=this._file).textures??(i.textures=[]);let n=this._file.textures.length;return lt(this._textureIndices,t,n),this._file.textures.push(r),n}getSamplerIndex(t){return Qe(this._samplerIndices,t)}addSampler(t,r){var i;(i=this._file).samplers??(i.samplers=[]);let n=this._file.samplers.length;return lt(this._samplerIndices,t,n),this._file.samplers.push(r),n}};var he=(e,t)=>({get:()=>e[t],set:r=>e[t]=r}),dr=(e,t)=>({get:()=>e?.[t],set:r=>e?e[t]=r:r}),Dt=(e,t)=>{let r=e.get();if(!r)return;let n=new Set;for(let s of t()){let f=s.get();f!==void 0&&n.add(f)}if(n.size===0){e.set(void 0);return}let i=new Map,a=0;for(let s of n)i.set(s,a++);for(let s of t()){let f=s.get();f!==void 0&&s.set(i.get(f))}let o=r.slice(0,i.size);for(let[s,f]of i)o[f]=r[s];e.set(o)},pr=(e,t,r)=>{let n=e.get();if(!n)return;let i=new Map,a=new Map;for(let[o,s]of n.entries()){let f=t(s),l=a.get(f);l!==void 0?i.set(o,l):a.set(f,o)}for(let o of r()){let s=o.get();s!==void 0&&o.set(i.get(s)??s)}Dt(e,r)},Wr=class{constructor(t){this.file=t}*_textureIndexRefs(){for(let t of this.file.materials??[]){t.emissiveTexture&&(yield he(t.emissiveTexture,"index")),t.normalTexture&&(yield he(t.normalTexture,"index")),t.occlusionTexture&&(yield he(t.occlusionTexture,"index"));let r=t.pbrMetallicRoughness;r?.baseColorTexture&&(yield he(r.baseColorTexture,"index")),r?.metallicTexture&&(yield he(r.metallicTexture,"index")),r?.roughnessTexture&&(yield he(r.roughnessTexture,"index"))}}*_samplerIndexRefs(){for(let t of this.file.textures??[])yield he(t,"sampler")}*_imageIndexRefs(){for(let t of this.file.textures??[])yield he(t,"source")}*_accessorIndexRefs(){for(let t of this.file.meshes??[])for(let r of t.primitives){yield he(r,"indices");for(let n in r.attributes)yield he(r.attributes,n)}for(let t of this.file.skins??[])yield he(t,"inverseBindMatrices");for(let t of this.file.animations??[])for(let r of t.samplers??[])yield he(r,"input"),yield he(r,"output")}*_bufferViewIndexRefs(){for(let t of this.file.accessors??[])yield he(t,"bufferView");for(let t of this.file.images??[])yield he(t,"bufferView")}*_bufferIndexRefs(){for(let t of this.file.bufferViews??[])yield he(t,"buffer")}_collectUnusedTexCoords(){for(let t of this.file.meshes??[])for(let r of t.primitives){let n=r.material?this.file.materials?.[r.material]:void 0,i=[dr(n?.emissiveTexture,"texCoord"),dr(n?.normalTexture,"texCoord"),dr(n?.occlusionTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.baseColorTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.metallicTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.roughnessTexture,"texCoord")],a=new Set;for(let f of i){let l=f.get();l!==void 0&&a.add(l)}let o=new Map,s=0;for(let f of a)o.set(f,s++);for(let f of i){let l=f.get();l!==void 0&&f.set(o.get(l))}for(let[f,l]of o)r.attributes[`TEXCOORD_${l}`]=r.attributes[`TEXCOORD_${f}`];for(let f=a.size;`TEXCOORD_${f}`in r.attributes;f++)delete r.attributes[`TEXCOORD_${f}`]}}collectUnused(t){t.textures&&Dt(he(this.file,"textures"),()=>this._textureIndexRefs()),t.samplers&&Dt(he(this.file,"samplers"),()=>this._samplerIndexRefs()),t.images&&Dt(he(this.file,"images"),()=>this._imageIndexRefs()),t.texCoords&&this._collectUnusedTexCoords(),t.accessors&&Dt(he(this.file,"accessors"),()=>this._accessorIndexRefs()),t.bufferViews&&Dt(he(this.file,"bufferViews"),()=>this._bufferViewIndexRefs()),t.buffers&&Dt(he(this.file,"buffers"),()=>this._bufferIndexRefs())}deduplicate(t){let r=({name:n,...i})=>JSON.stringify(i);t.buffers&&pr(he(this.file,"buffers"),r,()=>this._bufferIndexRefs()),t.bufferViews&&pr(he(this.file,"bufferViews"),r,()=>this._bufferViewIndexRefs()),t.accessors&&pr(he(this.file,"accessors"),r,()=>this._accessorIndexRefs()),t.images&&pr(he(this.file,"images"),r,()=>this._imageIndexRefs()),t.samplers&&pr(he(this.file,"samplers"),r,()=>this._samplerIndexRefs()),t.textures&&pr(he(this.file,"textures"),r,()=>this._textureIndexRefs())}};var zt=(e,t)=>typeof t=="string"?`data:${e};base64,${t}`:`data:${e};base64,${Buffer.from(t.buffer).toString("base64")}`,Vo=e=>[e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15]];var Ho=(e,t,r)=>{for(let[n,i]of Object.entries(e.textures[1]??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))Ui(`/textures/${n}/${a}`,o,t);for(let[n,i]of Object.entries(e.textures[2]?.official??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))Ui(`/textures/${n}/${a}`,o,t);for(let[n,i]of Object.entries(e.textures[2]?.custom??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))Ui(`/textures/${n}/${a}`,o,t)},Ui=(e,t,r)=>{r.addImage(e,{name:e,uri:zt("image/png",t)})};var Ut=e=>({flags:e,position:-1,normal:-1,color:-1,uvs:[]});function*Wo(e,t){let r=0;for(;r<e.length;){let n=e[r];if(r+=1,n&Be.FaceFlags.QUAD){let i=Ut(n),a=Ut(n),o=Ut(n),s=Ut(n);if(i.position=e[r+0],a.position=e[r+1],o.position=e[r+2],s.position=e[r+3],r+=4,n&Be.FaceFlags.MATERIAL&&(r+=1),n&Be.FaceFlags.UVS)for(let f=0;f<t;f++)i.uvs.push(e[r+0]),a.uvs.push(e[r+1]),o.uvs.push(e[r+2]),s.uvs.push(e[r+3]),r+=4;n&Be.FaceFlags.NORMALS&&(i.normal=e[r+0],a.normal=e[r+1],o.normal=e[r+2],s.normal=e[r+3],r+=4),n&Be.FaceFlags.COLORS&&(r+=4),yield i,yield a,yield o,yield o,yield s,yield i}else{let i=Ut(n),a=Ut(n),o=Ut(n);if(i.position=e[r+0],a.position=e[r+1],o.position=e[r+2],r+=3,n&Be.FaceFlags.MATERIAL&&(r+=1),n&Be.FaceFlags.UVS)for(let s=0;s<t;s++)i.uvs.push(e[r+0]),a.uvs.push(e[r+1]),o.uvs.push(e[r+2]),r+=3;n&Be.FaceFlags.NORMALS&&(i.normal=e[r+0],a.normal=e[r+1],o.normal=e[r+2],r+=3),n&Be.FaceFlags.COLORS&&(r+=3),yield i,yield a,yield o}}}var Yo=(e,t,r)=>{if(r.logos)for(let[n,i]of Object.entries(e.details.logos))Yr(`/details/logos/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.knobs))Yr(`/details/knobs/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.tubes))Yr(`/details/tubes/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.pins))Yr(`/details/pins/${n}.json`,i,t);for(let[n,i]of Object.entries(e.geometries))for(let[a,o]of Object.entries(i))Yr(`/geometries/${a}`,o,t)},Yr=(e,t,r)=>{let n=b=>JSON.stringify(b),i=new Map,a=0,o=[],s=[],f=[],l=(t.uvs??[]).map(()=>[]),u=t.uvs?.length??0;for(let b of Wo(t.faces,u)){let A=n(b),x=i.get(A);if(x!==void 0){o.push(x);continue}let T=a++;o.push(T),i.set(A,T),s.push(t.vertices[b.position*3+0]),s.push(t.vertices[b.position*3+1]),s.push(t.vertices[b.position*3+2]);for(let S=0;S<u;S++)l[S].push(t.uvs[S][b.uvs[S]*2+0]),l[S].push(1-t.uvs[S][b.uvs[S]*2+1]);b.flags&Be.FaceFlags.NORMALS&&(f.push(t.normals[b.normal*3+0]),f.push(t.normals[b.normal*3+1]),f.push(t.normals[b.normal*3+2]))}let c=o.length<255?new Uint8Array(o):new Uint16Array(o),p=new Float32Array(s),h=new Float32Array(f),y=l.map(b=>new Float32Array(b)),m=[p[0],p[1],p[2]],g=[p[0],p[1],p[2]];for(let b=0;b<s.length;b+=3)m[0]=Math.min(m[0],p[b+0]),m[1]=Math.min(m[1],p[b+1]),m[2]=Math.min(m[2],p[b+2]),g[0]=Math.max(g[0],p[b+0]),g[1]=Math.max(g[1],p[b+1]),g[2]=Math.max(g[2],p[b+2]);r.addAccessor(e+"#indices",{name:e+"#indices",byteOffset:0,count:c.length,type:"SCALAR",componentType:c instanceof Uint8Array?we.Const.U8:we.Const.U16,bufferView:r.addBufferView(e+"#indices",{name:e+"#indices",byteOffset:0,byteLength:c.byteLength,target:we.Const.ELEMENT_ARRAY_BUFFER,buffer:r.addBuffer(e+"#indices",{name:e+"#indices",byteLength:c.byteLength,uri:zt("application/octet-stream",c)})})}),r.addAccessor(e+"#positions",{name:e+"#positions",byteOffset:0,count:p.length/3,type:"VEC3",componentType:we.Const.F32,min:m,max:g,bufferView:r.addBufferView(e+"#positions",{name:e+"#positions",byteOffset:0,byteLength:p.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+"#positions",{name:e+"#positions",byteLength:p.byteLength,uri:zt("application/octet-stream",p)})})}),f&&r.addAccessor(e+"#normals",{name:e+"#normals",byteOffset:0,count:h.length/3,type:"VEC3",componentType:we.Const.F32,bufferView:r.addBufferView(e+"#normals",{name:e+"#normals",byteOffset:0,byteLength:h.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+"#normals",{name:e+"#normals",byteLength:h.byteLength,uri:zt("application/octet-stream",h)})})});for(let[b,A]of y.entries())r.addAccessor(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteOffset:0,count:A.length/2,type:"VEC2",componentType:we.Const.F32,bufferView:r.addBufferView(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteOffset:0,byteLength:A.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteLength:A.byteLength,uri:zt("application/octet-stream",A)})})})};var zo=qo(Zh());var qh={1:{name:"White",type:"solid",color:[.95686274766922,.95686274766922,.95686274766922,1]},2:{name:"Grey",type:"solid",color:[.5411764979362488,.572549045085907,.5529412031173706,1]},3:{name:"Light Yellow",type:"solid",color:[1,.8392156958580017,.5529412031173706,1]},4:{name:"Brick Red",type:"solid",color:[.9490196108818054,.43921568989753723,.3686274588108063,1]},5:{name:"Brick Yellow",type:"solid",color:[.800000011920929,.7254902124404907,.5529412031173706,1]},6:{name:"Light Green",type:"solid",color:[.6784313917160034,.8509804010391235,.658823549747467,1]},7:{name:"Orange",type:"solid",color:[1,.5215686559677124,0,1]},8:{name:"Cobalt Blue",type:"solid",color:[.5490196347236633,0,1,1]},9:{name:"Light Reddish Violet",type:"solid",color:[.9647058844566345,.6627451181411743,.7333333492279053,1]},10:{name:"Clear* / Transparent*",type:"transparent",color:[1,1,.7411764860153198,.20000000298023224]},11:{name:"Pastel Blue",type:"solid",color:[.6705882549285889,.8509804010391235,1,1]},12:{name:"Light Orange Brown",type:"solid",color:[.8470588326454163,.4274509847164154,.1725490242242813,1]},13:{name:"Red Orange",type:"solid",color:[1,.501960813999176,.0784313753247261,1]},14:{name:"Pastel Green",type:"solid",color:[.47058823704719543,.9882352948188782,.47058823704719543,1]},15:{name:"Lemon",type:"solid",color:[1,.9490196108818054,.1882352977991104,1]},16:{name:"Pink",type:"solid",color:[1,.529411792755127,.6117647290229797,1]},17:{name:"Rose",type:"solid",color:[1,.5803921818733215,.5803921818733215,1]},18:{name:"Nougat",type:"solid",color:[.7333333492279053,.501960813999176,.3529411852359772,1]},19:{name:"Light Brown",type:"solid",color:[.8117647171020508,.5411764979362488,.27843138575553894,1]},20:{name:"Nature",type:"milky",color:[.8745098114013672,.8745098114013672,.8745098114013672,1]},21:{name:"Bright Red",type:"solid",color:[.7058823704719543,0,0,1]},22:{name:"Medium Reddish Violet",type:"solid",color:[.8156862854957581,.3137255012989044,.5960784554481506,1]},23:{name:"Bright Blue",type:"solid",color:[.11764705926179886,.3529411852359772,.658823549747467,1]},24:{name:"Bright Yellow",type:"solid",color:[.9803921580314636,.7843137383460999,.03921568766236305,1]},25:{name:"Earth Orange",type:"solid",color:[.3294117748737335,.20000000298023224,.1411764770746231,1]},26:{name:"Black",type:"solid",color:[0,0,0,1]},27:{name:"Dark Grey",type:"solid",color:[.3294117748737335,.3490196168422699,.3333333432674408,1]},28:{name:"Dark Green",type:"solid",color:[0,.5215686559677124,.16862745583057404,1]},29:{name:"Medium Green",type:"solid",color:[.49803921580314636,.7686274647712708,.4588235318660736,1]},36:{name:"Light Yellowish Orange",type:"solid",color:[.9921568632125854,.7647058963775635,.5137255191802979,1]},37:{name:"Bright Green",type:"solid",color:[.3450980484485626,.6705882549285889,.2549019753932953,1]},38:{name:"Dark Orange",type:"solid",color:[.5686274766921997,.3137255012989044,.10980392247438431,1]},39:{name:"Light Bluish Violet",type:"solid",color:[.686274528503418,.7450980544090271,.8392156958580017,1]},40:{name:"Transparent",type:"transparent",color:[0,0,0,.20000000298023224]},41:{name:"Transparent Red",type:"transparent",color:[.7215686440467834,0,0,.699999988079071]},42:{name:"Transparent Light Blue",type:"transparent",color:[.6784313917160034,.8666666746139526,.929411768913269,.699999988079071]},43:{name:"Transparent Blue",type:"transparent",color:[0,.5215686559677124,.7215686440467834,.699999988079071]},44:{name:"Transparent Yellow",type:"transparent",color:[1,.9019607901573181,.13333334028720856,.699999988079071]},45:{name:"Light Blue",type:"solid",color:[.5921568870544434,.7960784435272217,.8509804010391235,1]},47:{name:"Transparent Fluorescent Reddish Orange",type:"transparent",color:[.7960784435272217,.30588236451148987,.16078431904315948,.699999988079071]},48:{name:"Transparent Green",type:"transparent",color:[.45098039507865906,.7058823704719543,.3921568691730499,.699999988079071]},49:{name:"Transparent Fluorescent Green",type:"transparent",color:[.9803921580314636,.9450980424880981,.35686275362968445,.699999988079071]},50:{name:"Phosphorescent White",type:"milky",color:[.8980392217636108,.8745098114013672,.8274509906768799,1]},100:{name:"Light Red",type:"solid",color:[.9764705896377563,.7176470756530762,.6470588445663452,1]},101:{name:"Medium Red",type:"solid",color:[.9411764740943909,.4274509847164154,.3803921639919281,1]},102:{name:"Medium Blue",type:"solid",color:[.45098039507865906,.5882353186607361,.7843137383460999,1]},103:{name:"Light Grey",type:"solid",color:[.7372549176216125,.7058823704719543,.6470588445663452,1]},104:{name:"Bright Violet",type:"solid",color:[.40392157435417175,.12156862765550613,.5058823823928833,1]},105:{name:"Bright Yellowish Orange",type:"solid",color:[.9607843160629272,.5254902243614197,.1411764770746231,1]},106:{name:"Bright Orange",type:"solid",color:[.8392156958580017,.4745098054409027,.13725490868091583,1]},107:{name:"Bright Bluish Green",type:"solid",color:[.0235294122248888,.615686297416687,.6235294342041016,1]},108:{name:"Earth Yellow",type:"solid",color:[.33725491166114807,.27843138575553894,.18431372940540314,1]},109:{name:"(PC) Black IR",type:"transparent",color:[0,.0784313753247261,.0784313753247261,.699999988079071]},110:{name:"Bright Bluish Violet",type:"solid",color:[.14901961386203766,.27450981736183167,.6039215922355652,1]},111:{name:"Transparent Brown",type:"transparent",color:[.7333333492279053,.6980392336845398,.6196078658103943,.699999988079071]},112:{name:"Medium Bluish Violet",type:"solid",color:[.2823529541492462,.3803921639919281,.6745098233222961,1]},113:{name:"Transparent Medium Reddish Violet",type:"transparent",color:[.9921568632125854,.5568627715110779,.8117647171020508,.699999988079071]},114:{name:"Transparent Pink Glitter / Transparent Medium Reddish Violet Glitter",type:"glitter",color:[.9960784316062927,0,.9960784316062927,1]},115:{name:"Medium Yellowish Green",type:"solid",color:[.7176470756530762,.8313725590705872,.14509804546833038,1]},116:{name:"Medium Bluish Green",type:"solid",color:[0,.6666666865348816,.6431372761726379,1]},117:{name:"Transparent with Glitter",type:"glitter",color:[.9686274528503418,.9686274528503418,.9686274528503418,1]},118:{name:"Light Bluish Green",type:"solid",color:[.6117647290229797,.8392156958580017,.800000011920929,1]},119:{name:"Bright Yellowish Green",type:"solid",color:[.6470588445663452,.7921568751335144,.0941176488995552,1]},120:{name:"Light Yellowish Green",type:"solid",color:[.8705882430076599,.9176470637321472,.572549045085907,1]},121:{name:"Medium Yellowish Orange",type:"solid",color:[.9725490212440491,.6039215922355652,.2235294133424759,1]},122:{name:"Nature with Glitter",type:"glitter",color:[.9960784316062927,.7960784435272217,.5960784554481506,1]},123:{name:"Bright Reddish Orange",type:"solid",color:[.9333333373069763,.3294117748737335,.20392157137393951,1]},124:{name:"Bright Reddish Violet",type:"solid",color:[.5647059082984924,.12156862765550613,.4627451002597809,1]},125:{name:"Light Orange",type:"solid",color:[.9764705896377563,.6549019813537598,.46666666865348816,1]},126:{name:"Transparent Bright Bluish Violet",type:"transparent",color:[.43529412150382996,.47843137383461,.7215686440467834,.699999988079071]},127:{name:"Gold",type:"pearl",color:[.8705882430076599,.6745098233222961,.4000000059604645,1]},128:{name:"Dark Nougat",type:"solid",color:[.6784313917160034,.3803921639919281,.250980406999588,1]},129:{name:"Transparent Bluish Violet (Glitter)",type:"glitter",color:[.26274511218070984,.3294117748737335,.5764706134796143,1]},131:{name:"Silver",type:"pearl",color:[.6274510025978088,.6274510025978088,.6274510025978088,1]},133:{name:"Neon Orange",type:"solid",color:[.9372549057006836,.3450980484485626,.1568627506494522,1]},134:{name:"Neon Green",type:"solid",color:[.8039215803146362,.8666666746139526,.20392157137393951,1]},135:{name:"Sand Blue",type:"solid",color:[.43921568989753723,.5058823823928833,.6039215922355652,1]},136:{name:"Sand Violet",type:"solid",color:[.4588235318660736,.3960784375667572,.4901960790157318,1]},137:{name:"Medium Orange",type:"solid",color:[.95686274766922,.5058823823928833,.27843138575553894,1]},138:{name:"Sand Yellow",type:"solid",color:[.5372549295425415,.4901960790157318,.3843137323856354,1]},139:{name:"Copper",type:"pearl",color:[.4627451002597809,.3019607961177826,.23137255012989044,1]},140:{name:"Earth Blue",type:"solid",color:[.09803921729326248,.19607843458652496,.3529411852359772,1]},141:{name:"Earth Green",type:"solid",color:[0,.2705882489681244,.10196078568696976,1]},143:{name:"Transparent Fluorescent Blue",type:"transparent",color:[.6470588445663452,.8039215803146362,.9411764740943909,.699999988079071]},145:{name:"Metallic Sand Blue",type:"pearl",color:[.35686275362968445,.4588235318660736,.5647059082984924,1]},146:{name:"Metallic Sand Violet",type:"pearl",color:[.5058823823928833,.4588235318660736,.5647059082984924,1]},147:{name:"Metallic Sand Yellow",type:"pearl",color:[.5137255191802979,.4470588266849518,.30980393290519714,1]},148:{name:"Metallic Dark Grey",type:"pearl",color:[.2823529541492462,.3019607961177826,.2823529541492462,1]},149:{name:"Metallic Black",type:"pearl",color:[.03921568766236305,.07450980693101883,.15294118225574493,1]},150:{name:"Metallic Light Grey",type:"pearl",color:[.5960784554481506,.6078431606292725,.6000000238418579,1]},151:{name:"Sand Green",type:"solid",color:[.43921568989753723,.5568627715110779,.48627451062202454,1]},153:{name:"Sand Red",type:"solid",color:[.5333333611488342,.3764705955982208,.3686274588108063,1]},154:{name:"(New) Dark Red",type:"solid",color:[.4470588266849518,0,.07058823853731155,1]},157:{name:"Transparent Fluorescent Yellow",type:"transparent",color:[1,.9647058844566345,.3607843220233917,.699999988079071]},158:{name:"Transparent Fluorescent Red",type:"transparent",color:[.9450980424880981,.5568627715110779,.7333333492279053,.699999988079071]},168:{name:"Gun Metallic",type:"pearl",color:[.3764705955982208,.33725491166114807,.2980392277240753,1]},176:{name:"Red Flip/Flop",type:"pearl",color:[.5803921818733215,.3176470696926117,.2823529541492462,1]},178:{name:"Yellow Flip/Flop",type:"pearl",color:[.6705882549285889,.40392157435417175,.22745098173618317,1]},179:{name:"Silver Flip/Flop",type:"pearl",color:[.45098039507865906,.4470588266849518,.4431372582912445,1]},180:{name:"Curry",type:"solid",color:[.8666666746139526,.5960784554481506,.18039216101169586,1]},182:{name:"Transparent Bright Orange",type:"transparent",color:[.8823529481887817,.5529412031173706,.03921568766236305,.699999988079071]},183:{name:"Metallic White",type:"pearl",color:[.9647058844566345,.9490196108818054,.8745098114013672,1]},184:{name:"Metallic Bright Red",type:"pearl",color:[.8392156958580017,0,.14901961386203766,1]},185:{name:"Metallic Bright Blue",type:"pearl",color:[0,.3490196168422699,.6392157077789307,1]},186:{name:"Metallic Dark Green",type:"pearl",color:[0,.5568627715110779,.23529411852359772,1]},187:{name:"Metallic Earth Orange",type:"pearl",color:[.34117648005485535,.2235294133424759,.1725490242242813,1]},188:{name:"Tiny Blue",type:"solid",color:[0,.6196078658103943,.8078431487083435,1]},189:{name:"Reddish Gold / Gold Metallic",type:"pearl",color:[.6745098233222961,.5098039507865906,.27843138575553894,1]},190:{name:"Fire Yellow",type:"solid",color:[1,.8117647171020508,.04313725605607033,1]},191:{name:"Flame Yellowish Orange",type:"solid",color:[.9882352948188782,.6745098233222961,0,1]},192:{name:"Reddish Brown",type:"solid",color:[.37254902720451355,.1921568661928177,.03529411926865578,1]},193:{name:"Flame Reddish Orange",type:"solid",color:[.9254902005195618,.2666666805744171,.11372549086809158,1]},194:{name:"Medium Stone Grey",type:"solid",color:[.5882353186607361,.5882353186607361,.5882353186607361,1]},195:{name:"Royal Blue",type:"solid",color:[.10980392247438431,.3450980484485626,.6549019813537598,1]},196:{name:"Dark Royal Blue",type:"solid",color:[.054901961237192154,.24313725531101227,.6039215922355652,1]},197:{name:"Bright Lilac",type:"solid",color:[.1921568661928177,.16862745583057404,.529411792755127,1]},198:{name:"Bright Reddish Lilac",type:"solid",color:[.5411764979362488,.07058823853731155,.658823549747467,1]},199:{name:"Dark Stone Grey",type:"solid",color:[.3921568691730499,.3921568691730499,.3921568691730499,1]},200:{name:"Lemon Metallic",type:"pearl",color:[.4156862795352936,.4745098054409027,.2666666805744171,1]},208:{name:"Light Stone Grey",type:"solid",color:[.7843137383460999,.7843137383460999,.7843137383460999,1]},209:{name:"Dark Curry",type:"solid",color:[.6431372761726379,.4627451002597809,.1411764770746231,1]},210:{name:"Faded Green",type:"solid",color:[.27450981736183167,.5411764979362488,.37254902720451355,1]},211:{name:"Turquoise",type:"solid",color:[.24705882370471954,.7137255072593689,.6627451181411743,1]},212:{name:"Light Royal Blue",type:"solid",color:[.615686297416687,.7647058963775635,.9686274528503418,1]},213:{name:"Medium Royal Blue",type:"solid",color:[.27843138575553894,.43529412150382996,.7137255072593689,1]},216:{name:"Rust",type:"solid",color:[.529411792755127,.16862745583057404,.09019608050584793,1]},217:{name:"Brown",type:"solid",color:[.48235294222831726,.364705890417099,.2549019753932953,1]},218:{name:"Reddish Lilac",type:"solid",color:[.5568627715110779,.3333333432674408,.5921568870544434,1]},219:{name:"Lilac",type:"solid",color:[.33725491166114807,.30588236451148987,.615686297416687,1]},220:{name:"Light Lilac",type:"solid",color:[.5686274766921997,.5843137502670288,.7921568751335144,1]},221:{name:"Bright Purple",type:"solid",color:[.7843137383460999,.3137255012989044,.6078431606292725,1]},222:{name:"Light Purple",type:"solid",color:[1,.6196078658103943,.8039215803146362,1]},223:{name:"Light Pink",type:"solid",color:[.9450980424880981,.47058823704719543,.501960813999176,1]},224:{name:"Light Brick Yellow",type:"solid",color:[.9529411792755127,.7882353067398071,.5333333611488342,1]},225:{name:"Warm Yellowish Orange",type:"solid",color:[.9803921580314636,.6627451181411743,.3921568691730499,1]},226:{name:"Cool Yellow",type:"solid",color:[1,.9254902005195618,.42352941632270813,1]},227:{name:"Transparent Bright Yellowish Green",type:"transparent",color:[.7882353067398071,.9058823585510254,.5333333611488342,.699999988079071]},228:{name:"Transparent Medium Bluish Green",type:"transparent",color:[.3333333432674408,.6470588445663452,.686274528503418,.699999988079071]},229:{name:"Transparent Light Bluish Green",type:"transparent",color:[.6745098233222961,.8313725590705872,.8705882430076599,.699999988079071]},230:{name:"Transparent Bright Purple",type:"transparent",color:[.9254902005195618,.6392157077789307,.7882353067398071,.699999988079071]},231:{name:"Transparent Flame Yellowish Orange",type:"transparent",color:[.9882352948188782,.7176470756530762,.4274509847164154,.699999988079071]},232:{name:"Dove Blue",type:"solid",color:[.46666666865348816,.7882353067398071,.8470588326454163,1]},233:{name:"Light Faded Green",type:"solid",color:[.3764705955982208,.729411780834198,.4627451002597809,1]},234:{name:"Transparent Fire Yellow",type:"transparent",color:[.9843137264251709,.9098039269447327,.5647059082984924,.699999988079071]},236:{name:"Transparent Bright Reddish Lilac",type:"transparent",color:[.5529412031173706,.45098039507865906,.7019608020782471,.699999988079071]},268:{name:"Medium Lilac",type:"solid",color:[.2666666805744171,.10196078568696976,.5686274766921997,1]},269:{name:"Tiny-Medium Blue",type:"solid",color:[.24313725531101227,.5843137502670288,.7137255072593689,1]},283:{name:"Light Nougat",type:"solid",color:[1,.7882353067398071,.5843137502670288,1]},284:{name:"Transparent Reddish Lilac",type:"transparent",color:[.8784313797950745,.8156862854957581,.8980392217636108,.699999988079071]},285:{name:"Transparent Light Green",type:"transparent",color:[.8941176533699036,.8392156958580017,.8549019694328308,.699999988079071]},294:{name:"Phosphorescent Green",type:"milky",color:[.8352941274642944,.8627451062202454,.5411764979362488,1]},295:{name:"Flamingo Pink",type:"solid",color:[.21568627655506134,.12941177189350128,0,1]},296:{name:"Cool Silver",type:"pearl",color:[.6784313917160034,.6784313917160034,.6784313917160034,1]},297:{name:"Warm Gold",type:"pearl",color:[.7254902124404907,.5843137502670288,.23137255012989044,1]},298:{name:"Cool Silver, Drum Lacquered",type:"metallic",color:[.4627451002597809,.4627451002597809,.4627451002597809,1]},308:{name:"Dark Brown",type:"solid",color:[.2078431397676468,.12941177189350128,0,1]},309:{name:"Metalized Silver",type:"chrome",color:[.8078431487083435,.8078431487083435,.8078431487083435,1]},310:{name:"Metalized Gold",type:"chrome",color:[.8745098114013672,.7568627595901489,.4627451002597809,1]},311:{name:"Transparent Bright Green",type:"transparent",color:[.686274528503418,.8235294222831726,.27450981736183167,.699999988079071]},312:{name:"Medium Nougat",type:"solid",color:[.6666666865348816,.4901960790157318,.3333333432674408,1]},315:{name:"Silver Metallic",type:"pearl",color:[.5490196347236633,.5490196347236633,.5490196347236633,1]},316:{name:"Titanium Metallic",type:"pearl",color:[.24313725531101227,.23529411852359772,.2235294133424759,1]},321:{name:"Dark Azur",type:"solid",color:[.27450981736183167,.6078431606292725,.7647058963775635,1]},322:{name:"Medium Azur",type:"solid",color:[.40784314274787903,.7647058963775635,.886274516582489,1]},323:{name:"Aqua",type:"solid",color:[.8274509906768799,.9490196108818054,.9176470637321472,1]},324:{name:"Medium Lavender",type:"solid",color:[.6274510025978088,.4313725531101227,.7254902124404907,1]},325:{name:"Lavender",type:"solid",color:[.8039215803146362,.6431372761726379,.8705882430076599,1]},326:{name:"Spring Yellowish Green",type:"solid",color:[.886274516582489,.9764705896377563,.6039215922355652,1]},329:{name:"White Glow",type:"milky",color:[.9607843160629272,.9529411792755127,.843137264251709,1]},330:{name:"Olive Green",type:"solid",color:[.545098066329956,.5176470875740051,.30980393290519714,1]},331:{name:"Lacquer",type:"ink",color:[.9333333373069763,.9333333373069763,.9333333373069763,1]},332:{name:"Fluorescent Red Ink",type:"ink",color:[.8156862854957581,.4274509847164154,.30980393290519714,1]},333:{name:"Fluorescent Green Ink",type:"ink",color:[.8588235378265381,.9176470637321472,.47843137383461,1]},334:{name:"Copper Ink",type:"ink",color:[.4627451002597809,.3019607961177826,.23137255012989044,1]},335:{name:"Gold Ink",type:"ink",color:[.7254902124404907,.5843137502670288,.23137255012989044,1]},336:{name:"Silver Ink",type:"ink",color:[.5490196347236633,.5490196347236633,.5490196347236633,1]},337:{name:"Titanium",type:"ink",color:[.24313725531101227,.23529411852359772,.2235294133424759,1]},353:{name:"Vibrant Coral",type:"solid",color:[1,.4274509847164154,.46666666865348816,1]},429:{name:"Yellow",type:"process",color:[.9490196108818054,.8705882430076599,.16470588743686676,1]},439:{name:"Magenta",type:"process",color:[.7607843279838562,0,.5176470875740051,1]},454:{name:"Cyan",type:"process",color:[.21568627655506134,.5921568870544434,.8039215803146362,1]},1026:{name:"(?) Black Rubber",type:"rubber",color:[901960811461322e-19,901960811461322e-19,901960811461322e-19,1]}};var Vh=(e,t,r,n,i)=>{t??(t=[]),r??(r={});let a=(!i.normalMaps||t.length===0)&&(!i.decals||Object.keys(r).length===0),o=`/materials/${a?e:Math.random()}`;if(a&&n.hasMaterial(o))return n.getMaterialIndex(o);let s=qh[e];if(!s){console.warn("material not found: "+e);return}let f;switch(s.type){case"solid":f={name:s.name,pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:.1}};break;case"transparent":f={name:s.name,alphaMode:"BLEND",pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:0}};break;case"rubber":f={name:s.name,pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:.75}};break;default:console.warn("add this material"),console.warn(s)}if(f){if(i.decals&&r.uv&&r.color){let l=f.pbrMetallicRoughness.baseColorFactor,u=Buffer.from(n.getImage(`/textures/color/${r.color.name}`).uri.split(",")[1],"base64"),c=zo.PNG.sync.read(u);for(let h=0;h<c.data.length;h+=4){let y=c.data[h+3]/255;c.data[h+0]=Math.round(c.data[h+0]*y+255*l[0]*(1-y)),c.data[h+1]=Math.round(c.data[h+1]*y+255*l[1]*(1-y)),c.data[h+2]=Math.round(c.data[h+2]*y+255*l[2]*(1-y)),c.data[h+3]=Math.round(255*l[3])}let p="data:image/png;base64,"+zo.PNG.sync.write(c).toString("base64");f.pbrMetallicRoughness.baseColorTexture={texCoord:r.uv,index:n.addTexture(o+"#color",{name:o+"#color",source:n.addImage(o+"#color",{name:o+"#color",uri:p}),sampler:n.addSampler(o+"#color",{name:o+"#color",wrapS:we.Const.CLAMP_TO_EDGE,wrapT:we.Const.CLAMP_TO_EDGE})})}}return i.normalMaps&&t[0]&&(f.normalTexture={texCoord:t[0].uv,index:n.addTexture(o+"#normals",{name:o+"#normals",source:n.getImageIndex(`/textures/normal/${t[0].file}`),sampler:n.addSampler(o+"#normals",{name:o+"#normals",wrapS:t[0].repeat?we.Const.REPEAT:we.Const.CLAMP_TO_EDGE,wrapT:t[0].repeat?we.Const.REPEAT:we.Const.CLAMP_TO_EDGE})})}),n.addMaterial(o,f)}};var Hh=(e,t,r)=>{let n=[];for(let[i,a]of e.parts.entries())n.push(qy(`/parts/${i}.json`,a,e,t,r));t.setMainScene(t.addScene("/scene.json",{nodes:n}))},qy=(e,t,r,n,i)=>{let a=r.configurations[t.version][t.configuration],o=Vh(t.material.base[0],a.normals,t.material.decoration,n,i),s=Vy(e,a,o,r,n,i);return n.addNode(s.name,{...s,matrix:Vo(t.matrix)})},Vy=(e,t,r,n,i,a)=>{let o=[];for(let[c,p]of Object.entries(t.geometry.extras))if(!(c==="logos"&&!a.logos))for(let[h,y]of p.entries()){let{node:m,mesh:g}=Hy(e,c,h,y,r,n,i);o.push(i.addNode(m.name,{...m,mesh:i.addMesh(g.name,g)}))}let s=`/geometries/${t.geometry.file}`,l=n.geometries[t.version][t.geometry.file].uvs?.length??0,u={};for(let c=0;c<l;c++)u[`TEXCOORD_${c}`]=i.getAccessorIndex(`${s}#uvs/${c}`);return{name:e+"#main",children:o.length>0?o:void 0,mesh:i.addMesh(e+"#main",{name:e+"#main",primitives:[{material:r,indices:i.getAccessorIndex(s+"#indices"),attributes:{POSITION:i.getAccessorIndex(s+"#positions"),NORMAL:i.tryGetAccessorIndex(s+"#normals"),...u}}]})}},Hy=(e,t,r,n,i,a,o)=>{let f=a.details[t][n.type].uvs?.length??0,l={};for(let u=0;u<f;u++)l[`TEXCOORD_${u}`]=o.getAccessorIndex(`/details/${t}/${n.type}.json#uvs/${u}`);return{node:{name:e+`#extra/${t}/${r}`,translation:n.transform.position,rotation:n.transform.quaternion},mesh:{name:e+`#extra/${t}/${r}`,primitives:[{material:i,indices:o.getAccessorIndex(`/details/${t}/${n.type}.json#indices`),attributes:{POSITION:o.getAccessorIndex(`/details/${t}/${n.type}.json#positions`),NORMAL:o.tryGetAccessorIndex(`/details/${t}/${n.type}.json#normals`),...l}}]}}};var Wh=(e,t,r)=>{Ho(e,t,r),Yo(e,t,r),Hh(e,t,r)};var Xh=qo($h());var Kh=()=>({logos:!1,normalMaps:!1,bumpMaps:!1,decals:!0,optimize:!0});var Wy=async(e,t)=>{let n=await(await Xh.loadAsync(e)).file("scene.mbx")?.async("string");if(!n)throw new Error("invalid file format");return Jh(JSON.parse(n),t)},Jh=(e,t)=>{let r={...Kh(),...t},n=new Hr;Wh(e,n,r);let i=n.build();if(!r.optimize)return i;let a=new Wr(i);return a.collectUnused({textures:!0,samplers:!0,images:!0,texCoords:!0,accessors:!0,bufferViews:!0,buffers:!0}),a.deduplicate({buffers:!0,bufferViews:!0,accessors:!0,images:!0,samplers:!0,textures:!0}),a.file};return ld(Yy);})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

jszip/dist/jszip.min.js:
  (*!
  
  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
  <http://stuartk.com/jszip>
  
  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
  
  JSZip uses the library pako released under the MIT license :
  https://github.com/nodeca/pako/blob/main/LICENSE
  *)
*/
//# sourceMappingURL=data:application/json;base64,
