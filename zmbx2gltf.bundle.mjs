var ed=Object.create;var Go=Object.defineProperty;var td=Object.getOwnPropertyDescriptor;var rd=Object.getOwnPropertyNames;var nd=Object.getPrototypeOf,id=Object.prototype.hasOwnProperty;var Vr=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var W=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var ad=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of rd(t))!id.call(e,i)&&i!==r&&Go(e,i,{get:()=>t[i],enumerable:!(n=td(t,i))||n.enumerable});return e};var Zo=(e,t,r)=>(r=e!=null?ed(nd(e)):{},ad(t||!e||!e.__esModule?Go(r,"default",{value:e,enumerable:!0}):r,e));var Ui=W((pg,Yo)=>{"use strict";Yo.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var t={},r=Symbol("test"),n=Object(r);if(typeof r=="string"||Object.prototype.toString.call(r)!=="[object Symbol]"||Object.prototype.toString.call(n)!=="[object Symbol]")return!1;var i=42;t[r]=i;for(r in t)return!1;if(typeof Object.keys=="function"&&Object.keys(t).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(t).length!==0)return!1;var a=Object.getOwnPropertySymbols(t);if(a.length!==1||a[0]!==r||!Object.prototype.propertyIsEnumerable.call(t,r))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var o=Object.getOwnPropertyDescriptor(t,r);if(o.value!==i||o.enumerable!==!0)return!1}return!0}});var Wr=W((_g,$o)=>{"use strict";var od=Ui();$o.exports=function(){return od()&&!!Symbol.toStringTag}});var Jo=W((mg,Xo)=>{"use strict";var Ko=typeof Symbol<"u"&&Symbol,sd=Ui();Xo.exports=function(){return typeof Ko!="function"||typeof Symbol!="function"||typeof Ko("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:sd()}});var es=W((yg,Qo)=>{"use strict";var ld="Function.prototype.bind called on incompatible ",ji=Array.prototype.slice,fd=Object.prototype.toString,ud="[object Function]";Qo.exports=function(t){var r=this;if(typeof r!="function"||fd.call(r)!==ud)throw new TypeError(ld+r);for(var n=ji.call(arguments,1),i,a=function(){if(this instanceof i){var u=r.apply(this,n.concat(ji.call(arguments)));return Object(u)===u?u:this}else return r.apply(t,n.concat(ji.call(arguments)))},o=Math.max(0,r.length-n.length),s=[],f=0;f<o;f++)s.push("$"+f);if(i=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(a),r.prototype){var l=function(){};l.prototype=r.prototype,i.prototype=new l,l.prototype=null}return i}});var Nn=W((gg,ts)=>{"use strict";var cd=es();ts.exports=Function.prototype.bind||cd});var ns=W((bg,rs)=>{"use strict";var hd=Nn();rs.exports=hd.call(Function.call,Object.prototype.hasOwnProperty)});var $r=W((wg,ls)=>{"use strict";var oe,gr=SyntaxError,ss=Function,yr=TypeError,Gi=function(e){try{return ss('"use strict"; return ('+e+").constructor;")()}catch{}},jt=Object.getOwnPropertyDescriptor;if(jt)try{jt({},"")}catch{jt=null}var Zi=function(){throw new yr},dd=jt?function(){try{return arguments.callee,Zi}catch{try{return jt(arguments,"callee").get}catch{return Zi}}}():Zi,_r=Jo()(),ft=Object.getPrototypeOf||function(e){return e.__proto__},mr={},pd=typeof Uint8Array>"u"?oe:ft(Uint8Array),Gt={"%AggregateError%":typeof AggregateError>"u"?oe:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?oe:ArrayBuffer,"%ArrayIteratorPrototype%":_r?ft([][Symbol.iterator]()):oe,"%AsyncFromSyncIteratorPrototype%":oe,"%AsyncFunction%":mr,"%AsyncGenerator%":mr,"%AsyncGeneratorFunction%":mr,"%AsyncIteratorPrototype%":mr,"%Atomics%":typeof Atomics>"u"?oe:Atomics,"%BigInt%":typeof BigInt>"u"?oe:BigInt,"%BigInt64Array%":typeof BigInt64Array>"u"?oe:BigInt64Array,"%BigUint64Array%":typeof BigUint64Array>"u"?oe:BigUint64Array,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?oe:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?oe:Float32Array,"%Float64Array%":typeof Float64Array>"u"?oe:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?oe:FinalizationRegistry,"%Function%":ss,"%GeneratorFunction%":mr,"%Int8Array%":typeof Int8Array>"u"?oe:Int8Array,"%Int16Array%":typeof Int16Array>"u"?oe:Int16Array,"%Int32Array%":typeof Int32Array>"u"?oe:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":_r?ft(ft([][Symbol.iterator]())):oe,"%JSON%":typeof JSON=="object"?JSON:oe,"%Map%":typeof Map>"u"?oe:Map,"%MapIteratorPrototype%":typeof Map>"u"||!_r?oe:ft(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?oe:Promise,"%Proxy%":typeof Proxy>"u"?oe:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?oe:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?oe:Set,"%SetIteratorPrototype%":typeof Set>"u"||!_r?oe:ft(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?oe:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":_r?ft(""[Symbol.iterator]()):oe,"%Symbol%":_r?Symbol:oe,"%SyntaxError%":gr,"%ThrowTypeError%":dd,"%TypedArray%":pd,"%TypeError%":yr,"%Uint8Array%":typeof Uint8Array>"u"?oe:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?oe:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?oe:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?oe:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?oe:WeakMap,"%WeakRef%":typeof WeakRef>"u"?oe:WeakRef,"%WeakSet%":typeof WeakSet>"u"?oe:WeakSet};try{null.error}catch(e){is=ft(ft(e)),Gt["%Error.prototype%"]=is}var is,_d=function e(t){var r;if(t==="%AsyncFunction%")r=Gi("async function () {}");else if(t==="%GeneratorFunction%")r=Gi("function* () {}");else if(t==="%AsyncGeneratorFunction%")r=Gi("async function* () {}");else if(t==="%AsyncGenerator%"){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if(t==="%AsyncIteratorPrototype%"){var i=e("%AsyncGenerator%");i&&(r=ft(i.prototype))}return Gt[t]=r,r},as={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},Yr=Nn(),Pn=ns(),md=Yr.call(Function.call,Array.prototype.concat),yd=Yr.call(Function.apply,Array.prototype.splice),os=Yr.call(Function.call,String.prototype.replace),Mn=Yr.call(Function.call,String.prototype.slice),gd=Yr.call(Function.call,RegExp.prototype.exec),bd=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,wd=/\\(\\)?/g,vd=function(t){var r=Mn(t,0,1),n=Mn(t,-1);if(r==="%"&&n!=="%")throw new gr("invalid intrinsic syntax, expected closing `%`");if(n==="%"&&r!=="%")throw new gr("invalid intrinsic syntax, expected opening `%`");var i=[];return os(t,bd,function(a,o,s,f){i[i.length]=s?os(f,wd,"$1"):o||a}),i},xd=function(t,r){var n=t,i;if(Pn(as,n)&&(i=as[n],n="%"+i[0]+"%"),Pn(Gt,n)){var a=Gt[n];if(a===mr&&(a=_d(n)),typeof a>"u"&&!r)throw new yr("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:i,name:n,value:a}}throw new gr("intrinsic "+t+" does not exist!")};ls.exports=function(t,r){if(typeof t!="string"||t.length===0)throw new yr("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof r!="boolean")throw new yr('"allowMissing" argument must be a boolean');if(gd(/^%?[^%]*%?$/,t)===null)throw new gr("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=vd(t),i=n.length>0?n[0]:"",a=xd("%"+i+"%",r),o=a.name,s=a.value,f=!1,l=a.alias;l&&(i=l[0],yd(n,md([0,1],l)));for(var u=1,c=!0;u<n.length;u+=1){var p=n[u],h=Mn(p,0,1),y=Mn(p,-1);if((h==='"'||h==="'"||h==="`"||y==='"'||y==="'"||y==="`")&&h!==y)throw new gr("property names with quotes must have matching quotes");if((p==="constructor"||!c)&&(f=!0),i+="."+p,o="%"+i+"%",Pn(Gt,o))s=Gt[o];else if(s!=null){if(!(p in s)){if(!r)throw new yr("base intrinsic for "+t+" exists, but the property is not available.");return}if(jt&&u+1>=n.length){var m=jt(s,p);c=!!m,c&&"get"in m&&!("originalValue"in m.get)?s=m.get:s=s[p]}else c=Pn(s,p),s=s[p];c&&!f&&(Gt[o]=s)}}return s}});var zn=W((vg,Dn)=>{"use strict";var qi=Nn(),br=$r(),cs=br("%Function.prototype.apply%"),hs=br("%Function.prototype.call%"),ds=br("%Reflect.apply%",!0)||qi.call(hs,cs),fs=br("%Object.getOwnPropertyDescriptor%",!0),Zt=br("%Object.defineProperty%",!0),Ed=br("%Math.max%");if(Zt)try{Zt({},"a",{value:1})}catch{Zt=null}Dn.exports=function(t){var r=ds(qi,hs,arguments);if(fs&&Zt){var n=fs(r,"length");n.configurable&&Zt(r,"length",{value:1+Ed(0,t.length-(arguments.length-1))})}return r};var us=function(){return ds(qi,cs,arguments)};Zt?Zt(Dn.exports,"apply",{value:us}):Dn.exports.apply=us});var Un=W((xg,ms)=>{"use strict";var ps=$r(),_s=zn(),Ad=_s(ps("String.prototype.indexOf"));ms.exports=function(t,r){var n=ps(t,!!r);return typeof n=="function"&&Ad(t,".prototype.")>-1?_s(n):n}});var bs=W((Eg,gs)=>{"use strict";var Sd=Wr()(),Id=Un(),Vi=Id("Object.prototype.toString"),jn=function(t){return Sd&&t&&typeof t=="object"&&Symbol.toStringTag in t?!1:Vi(t)==="[object Arguments]"},ys=function(t){return jn(t)?!0:t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&Vi(t)!=="[object Array]"&&Vi(t.callee)==="[object Function]"},kd=function(){return jn(arguments)}();jn.isLegacyArguments=ys;gs.exports=kd?jn:ys});var xs=W((Ag,vs)=>{"use strict";var Td=Object.prototype.toString,Od=Function.prototype.toString,Rd=/^\s*(?:function)?\*/,ws=Wr()(),Hi=Object.getPrototypeOf,Bd=function(){if(!ws)return!1;try{return Function("return function*() {}")()}catch{}},Wi;vs.exports=function(t){if(typeof t!="function")return!1;if(Rd.test(Od.call(t)))return!0;if(!ws){var r=Td.call(t);return r==="[object GeneratorFunction]"}if(!Hi)return!1;if(typeof Wi>"u"){var n=Bd();Wi=n?Hi(n):!1}return Hi(t)===Wi}});var Is=W((Sg,Ss)=>{"use strict";var As=Function.prototype.toString,wr=typeof Reflect=="object"&&Reflect!==null&&Reflect.apply,$i,Gn;if(typeof wr=="function"&&typeof Object.defineProperty=="function")try{$i=Object.defineProperty({},"length",{get:function(){throw Gn}}),Gn={},wr(function(){throw 42},null,$i)}catch(e){e!==Gn&&(wr=null)}else wr=null;var Cd=/^\s*class\b/,Ki=function(t){try{var r=As.call(t);return Cd.test(r)}catch{return!1}},Yi=function(t){try{return Ki(t)?!1:(As.call(t),!0)}catch{return!1}},Zn=Object.prototype.toString,Fd="[object Object]",Ld="[object Function]",Nd="[object GeneratorFunction]",Pd="[object HTMLAllCollection]",Md="[object HTML document.all class]",Dd="[object HTMLCollection]",zd=typeof Symbol=="function"&&!!Symbol.toStringTag,Ud=!(0 in[,]),Xi=function(){return!1};typeof document=="object"&&(Es=document.all,Zn.call(Es)===Zn.call(document.all)&&(Xi=function(t){if((Ud||!t)&&(typeof t>"u"||typeof t=="object"))try{var r=Zn.call(t);return(r===Pd||r===Md||r===Dd||r===Fd)&&t("")==null}catch{}return!1}));var Es;Ss.exports=wr?function(t){if(Xi(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;try{wr(t,null,$i)}catch(r){if(r!==Gn)return!1}return!Ki(t)&&Yi(t)}:function(t){if(Xi(t))return!0;if(!t||typeof t!="function"&&typeof t!="object")return!1;if(zd)return Yi(t);if(Ki(t))return!1;var r=Zn.call(t);return r!==Ld&&r!==Nd&&!/^\[object HTML/.test(r)?!1:Yi(t)}});var Ji=W((Ig,Ts)=>{"use strict";var jd=Is(),Gd=Object.prototype.toString,ks=Object.prototype.hasOwnProperty,Zd=function(t,r,n){for(var i=0,a=t.length;i<a;i++)ks.call(t,i)&&(n==null?r(t[i],i,t):r.call(n,t[i],i,t))},qd=function(t,r,n){for(var i=0,a=t.length;i<a;i++)n==null?r(t.charAt(i),i,t):r.call(n,t.charAt(i),i,t)},Vd=function(t,r,n){for(var i in t)ks.call(t,i)&&(n==null?r(t[i],i,t):r.call(n,t[i],i,t))},Hd=function(t,r,n){if(!jd(r))throw new TypeError("iterator must be a function");var i;arguments.length>=3&&(i=n),Gd.call(t)==="[object Array]"?Zd(t,r,i):typeof t=="string"?qd(t,r,i):Vd(t,r,i)};Ts.exports=Hd});var ea=W((kg,Os)=>{"use strict";var Qi=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],Wd=typeof globalThis>"u"?global:globalThis;Os.exports=function(){for(var t=[],r=0;r<Qi.length;r++)typeof Wd[Qi[r]]=="function"&&(t[t.length]=Qi[r]);return t}});var ta=W((Tg,Rs)=>{"use strict";var Yd=$r(),qn=Yd("%Object.getOwnPropertyDescriptor%",!0);if(qn)try{qn([],"length")}catch{qn=null}Rs.exports=qn});var ia=W((Og,Ns)=>{"use strict";var Bs=Ji(),$d=ea(),na=Un(),Kd=na("Object.prototype.toString"),Cs=Wr()(),Vn=ta(),Xd=typeof globalThis>"u"?global:globalThis,Fs=$d(),Jd=na("Array.prototype.indexOf",!0)||function(t,r){for(var n=0;n<t.length;n+=1)if(t[n]===r)return n;return-1},Qd=na("String.prototype.slice"),Ls={},ra=Object.getPrototypeOf;Cs&&Vn&&ra&&Bs(Fs,function(e){var t=new Xd[e];if(Symbol.toStringTag in t){var r=ra(t),n=Vn(r,Symbol.toStringTag);if(!n){var i=ra(r);n=Vn(i,Symbol.toStringTag)}Ls[e]=n.get}});var e0=function(t){var r=!1;return Bs(Ls,function(n,i){if(!r)try{r=n.call(t)===i}catch{}}),r};Ns.exports=function(t){if(!t||typeof t!="object")return!1;if(!Cs||!(Symbol.toStringTag in t)){var r=Qd(Kd(t),8,-1);return Jd(Fs,r)>-1}return Vn?e0(t):!1}});var Gs=W((Rg,js)=>{"use strict";var Ms=Ji(),t0=ea(),Ds=Un(),aa=ta(),r0=Ds("Object.prototype.toString"),zs=Wr()(),Ps=typeof globalThis>"u"?global:globalThis,n0=t0(),i0=Ds("String.prototype.slice"),Us={},oa=Object.getPrototypeOf;zs&&aa&&oa&&Ms(n0,function(e){if(typeof Ps[e]=="function"){var t=new Ps[e];if(Symbol.toStringTag in t){var r=oa(t),n=aa(r,Symbol.toStringTag);if(!n){var i=oa(r);n=aa(i,Symbol.toStringTag)}Us[e]=n.get}}});var a0=function(t){var r=!1;return Ms(Us,function(n,i){if(!r)try{var a=n.call(t);a===i&&(r=a)}catch{}}),r},o0=ia();js.exports=function(t){return o0(t)?!zs||!(Symbol.toStringTag in t)?i0(r0(t),8,-1):a0(t):!1}});var rl=W(ie=>{"use strict";var s0=bs(),l0=xs(),et=Gs(),Zs=ia();function vr(e){return e.call.bind(e)}var qs=typeof BigInt<"u",Vs=typeof Symbol<"u",qe=vr(Object.prototype.toString),f0=vr(Number.prototype.valueOf),u0=vr(String.prototype.valueOf),c0=vr(Boolean.prototype.valueOf);qs&&(Hs=vr(BigInt.prototype.valueOf));var Hs;Vs&&(Ws=vr(Symbol.prototype.valueOf));var Ws;function Xr(e,t){if(typeof e!="object")return!1;try{return t(e),!0}catch{return!1}}ie.isArgumentsObject=s0;ie.isGeneratorFunction=l0;ie.isTypedArray=Zs;function h0(e){return typeof Promise<"u"&&e instanceof Promise||e!==null&&typeof e=="object"&&typeof e.then=="function"&&typeof e.catch=="function"}ie.isPromise=h0;function d0(e){return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?ArrayBuffer.isView(e):Zs(e)||$s(e)}ie.isArrayBufferView=d0;function p0(e){return et(e)==="Uint8Array"}ie.isUint8Array=p0;function _0(e){return et(e)==="Uint8ClampedArray"}ie.isUint8ClampedArray=_0;function m0(e){return et(e)==="Uint16Array"}ie.isUint16Array=m0;function y0(e){return et(e)==="Uint32Array"}ie.isUint32Array=y0;function g0(e){return et(e)==="Int8Array"}ie.isInt8Array=g0;function b0(e){return et(e)==="Int16Array"}ie.isInt16Array=b0;function w0(e){return et(e)==="Int32Array"}ie.isInt32Array=w0;function v0(e){return et(e)==="Float32Array"}ie.isFloat32Array=v0;function x0(e){return et(e)==="Float64Array"}ie.isFloat64Array=x0;function E0(e){return et(e)==="BigInt64Array"}ie.isBigInt64Array=E0;function A0(e){return et(e)==="BigUint64Array"}ie.isBigUint64Array=A0;function Hn(e){return qe(e)==="[object Map]"}Hn.working=typeof Map<"u"&&Hn(new Map);function S0(e){return typeof Map>"u"?!1:Hn.working?Hn(e):e instanceof Map}ie.isMap=S0;function Wn(e){return qe(e)==="[object Set]"}Wn.working=typeof Set<"u"&&Wn(new Set);function I0(e){return typeof Set>"u"?!1:Wn.working?Wn(e):e instanceof Set}ie.isSet=I0;function Yn(e){return qe(e)==="[object WeakMap]"}Yn.working=typeof WeakMap<"u"&&Yn(new WeakMap);function k0(e){return typeof WeakMap>"u"?!1:Yn.working?Yn(e):e instanceof WeakMap}ie.isWeakMap=k0;function la(e){return qe(e)==="[object WeakSet]"}la.working=typeof WeakSet<"u"&&la(new WeakSet);function T0(e){return la(e)}ie.isWeakSet=T0;function $n(e){return qe(e)==="[object ArrayBuffer]"}$n.working=typeof ArrayBuffer<"u"&&$n(new ArrayBuffer);function Ys(e){return typeof ArrayBuffer>"u"?!1:$n.working?$n(e):e instanceof ArrayBuffer}ie.isArrayBuffer=Ys;function Kn(e){return qe(e)==="[object DataView]"}Kn.working=typeof ArrayBuffer<"u"&&typeof DataView<"u"&&Kn(new DataView(new ArrayBuffer(1),0,1));function $s(e){return typeof DataView>"u"?!1:Kn.working?Kn(e):e instanceof DataView}ie.isDataView=$s;var sa=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:void 0;function Kr(e){return qe(e)==="[object SharedArrayBuffer]"}function Ks(e){return typeof sa>"u"?!1:(typeof Kr.working>"u"&&(Kr.working=Kr(new sa)),Kr.working?Kr(e):e instanceof sa)}ie.isSharedArrayBuffer=Ks;function O0(e){return qe(e)==="[object AsyncFunction]"}ie.isAsyncFunction=O0;function R0(e){return qe(e)==="[object Map Iterator]"}ie.isMapIterator=R0;function B0(e){return qe(e)==="[object Set Iterator]"}ie.isSetIterator=B0;function C0(e){return qe(e)==="[object Generator]"}ie.isGeneratorObject=C0;function F0(e){return qe(e)==="[object WebAssembly.Module]"}ie.isWebAssemblyCompiledModule=F0;function Xs(e){return Xr(e,f0)}ie.isNumberObject=Xs;function Js(e){return Xr(e,u0)}ie.isStringObject=Js;function Qs(e){return Xr(e,c0)}ie.isBooleanObject=Qs;function el(e){return qs&&Xr(e,Hs)}ie.isBigIntObject=el;function tl(e){return Vs&&Xr(e,Ws)}ie.isSymbolObject=tl;function L0(e){return Xs(e)||Js(e)||Qs(e)||el(e)||tl(e)}ie.isBoxedPrimitive=L0;function N0(e){return typeof Uint8Array<"u"&&(Ys(e)||Ks(e))}ie.isAnyArrayBuffer=N0;["isProxy","isExternal","isModuleNamespaceObject"].forEach(function(e){Object.defineProperty(ie,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})})});var il=W((Cg,nl)=>{nl.exports=function(t){return t&&typeof t=="object"&&typeof t.copy=="function"&&typeof t.fill=="function"&&typeof t.readUInt8=="function"}});var al=W((Fg,fa)=>{typeof Object.create=="function"?fa.exports=function(t,r){r&&(t.super_=r,t.prototype=Object.create(r.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:fa.exports=function(t,r){if(r){t.super_=r;var n=function(){};n.prototype=r.prototype,t.prototype=new n,t.prototype.constructor=t}}});var De=W(ae=>{var ol=Object.getOwnPropertyDescriptors||function(t){for(var r=Object.keys(t),n={},i=0;i<r.length;i++)n[r[i]]=Object.getOwnPropertyDescriptor(t,r[i]);return n},P0=/%[sdj%]/g;ae.format=function(e){if(!ni(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(Et(arguments[r]));return t.join(" ")}for(var r=1,n=arguments,i=n.length,a=String(e).replace(P0,function(s){if(s==="%%")return"%";if(r>=i)return s;switch(s){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch{return"[Circular]"}default:return s}}),o=n[r];r<i;o=n[++r])ri(o)||!xr(o)?a+=" "+o:a+=" "+Et(o);return a};ae.deprecate=function(e,t){if(typeof process<"u"&&process.noDeprecation===!0)return e;if(typeof process>"u")return function(){return ae.deprecate(e,t).apply(this,arguments)};var r=!1;function n(){if(!r){if(process.throwDeprecation)throw new Error(t);process.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)}return n};var Xn={},sl=/^$/;process.env.NODE_DEBUG&&(Jn=process.env.NODE_DEBUG,Jn=Jn.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),sl=new RegExp("^"+Jn+"$","i"));var Jn;ae.debuglog=function(e){if(e=e.toUpperCase(),!Xn[e])if(sl.test(e)){var t=process.pid;Xn[e]=function(){var r=ae.format.apply(ae,arguments);console.error("%s %d: %s",e,t,r)}}else Xn[e]=function(){};return Xn[e]};function Et(e,t){var r={seen:[],stylize:D0};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),da(t)?r.showHidden=t:t&&ae._extend(r,t),Vt(r.showHidden)&&(r.showHidden=!1),Vt(r.depth)&&(r.depth=2),Vt(r.colors)&&(r.colors=!1),Vt(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=M0),ei(r,e,r.depth)}ae.inspect=Et;Et.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]};Et.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function M0(e,t){var r=Et.styles[t];return r?"\x1B["+Et.colors[r][0]+"m"+e+"\x1B["+Et.colors[r][1]+"m":e}function D0(e,t){return e}function z0(e){var t={};return e.forEach(function(r,n){t[r]=!0}),t}function ei(e,t,r){if(e.customInspect&&t&&Qn(t.inspect)&&t.inspect!==ae.inspect&&!(t.constructor&&t.constructor.prototype===t)){var n=t.inspect(r,e);return ni(n)||(n=ei(e,n,r)),n}var i=U0(e,t);if(i)return i;var a=Object.keys(t),o=z0(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),Qr(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return ua(t);if(a.length===0){if(Qn(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(Jr(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(ti(t))return e.stylize(Date.prototype.toString.call(t),"date");if(Qr(t))return ua(t)}var f="",l=!1,u=["{","}"];if(ll(t)&&(l=!0,u=["[","]"]),Qn(t)){var c=t.name?": "+t.name:"";f=" [Function"+c+"]"}if(Jr(t)&&(f=" "+RegExp.prototype.toString.call(t)),ti(t)&&(f=" "+Date.prototype.toUTCString.call(t)),Qr(t)&&(f=" "+ua(t)),a.length===0&&(!l||t.length==0))return u[0]+f+u[1];if(r<0)return Jr(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special");e.seen.push(t);var p;return l?p=j0(e,t,r,o,a):p=a.map(function(h){return ha(e,t,r,o,h,l)}),e.seen.pop(),G0(p,f,u)}function U0(e,t){if(Vt(t))return e.stylize("undefined","undefined");if(ni(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(fl(t))return e.stylize(""+t,"number");if(da(t))return e.stylize(""+t,"boolean");if(ri(t))return e.stylize("null","null")}function ua(e){return"["+Error.prototype.toString.call(e)+"]"}function j0(e,t,r,n,i){for(var a=[],o=0,s=t.length;o<s;++o)ul(t,String(o))?a.push(ha(e,t,r,n,String(o),!0)):a.push("");return i.forEach(function(f){f.match(/^\d+$/)||a.push(ha(e,t,r,n,f,!0))}),a}function ha(e,t,r,n,i,a){var o,s,f;if(f=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},f.get?f.set?s=e.stylize("[Getter/Setter]","special"):s=e.stylize("[Getter]","special"):f.set&&(s=e.stylize("[Setter]","special")),ul(n,i)||(o="["+i+"]"),s||(e.seen.indexOf(f.value)<0?(ri(r)?s=ei(e,f.value,null):s=ei(e,f.value,r-1),s.indexOf(`
`)>-1&&(a?s=s.split(`
`).map(function(l){return"  "+l}).join(`
`).slice(2):s=`
`+s.split(`
`).map(function(l){return"   "+l}).join(`
`))):s=e.stylize("[Circular]","special")),Vt(o)){if(a&&i.match(/^\d+$/))return s;o=JSON.stringify(""+i),o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.slice(1,-1),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function G0(e,t,r){var n=0,i=e.reduce(function(a,o){return n++,o.indexOf(`
`)>=0&&n++,a+o.replace(/\u001b\[\d\d?m/g,"").length+1},0);return i>60?r[0]+(t===""?"":t+`
 `)+" "+e.join(`,
  `)+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}ae.types=rl();function ll(e){return Array.isArray(e)}ae.isArray=ll;function da(e){return typeof e=="boolean"}ae.isBoolean=da;function ri(e){return e===null}ae.isNull=ri;function Z0(e){return e==null}ae.isNullOrUndefined=Z0;function fl(e){return typeof e=="number"}ae.isNumber=fl;function ni(e){return typeof e=="string"}ae.isString=ni;function q0(e){return typeof e=="symbol"}ae.isSymbol=q0;function Vt(e){return e===void 0}ae.isUndefined=Vt;function Jr(e){return xr(e)&&pa(e)==="[object RegExp]"}ae.isRegExp=Jr;ae.types.isRegExp=Jr;function xr(e){return typeof e=="object"&&e!==null}ae.isObject=xr;function ti(e){return xr(e)&&pa(e)==="[object Date]"}ae.isDate=ti;ae.types.isDate=ti;function Qr(e){return xr(e)&&(pa(e)==="[object Error]"||e instanceof Error)}ae.isError=Qr;ae.types.isNativeError=Qr;function Qn(e){return typeof e=="function"}ae.isFunction=Qn;function V0(e){return e===null||typeof e=="boolean"||typeof e=="number"||typeof e=="string"||typeof e=="symbol"||typeof e>"u"}ae.isPrimitive=V0;ae.isBuffer=il();function pa(e){return Object.prototype.toString.call(e)}function ca(e){return e<10?"0"+e.toString(10):e.toString(10)}var H0=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function W0(){var e=new Date,t=[ca(e.getHours()),ca(e.getMinutes()),ca(e.getSeconds())].join(":");return[e.getDate(),H0[e.getMonth()],t].join(" ")}ae.log=function(){console.log("%s - %s",W0(),ae.format.apply(ae,arguments))};ae.inherits=al();ae._extend=function(e,t){if(!t||!xr(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};function ul(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var qt=typeof Symbol<"u"?Symbol("util.promisify.custom"):void 0;ae.promisify=function(t){if(typeof t!="function")throw new TypeError('The "original" argument must be of type Function');if(qt&&t[qt]){var r=t[qt];if(typeof r!="function")throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(r,qt,{value:r,enumerable:!1,writable:!1,configurable:!0}),r}function r(){for(var n,i,a=new Promise(function(f,l){n=f,i=l}),o=[],s=0;s<arguments.length;s++)o.push(arguments[s]);o.push(function(f,l){f?i(f):n(l)});try{t.apply(this,o)}catch(f){i(f)}return a}return Object.setPrototypeOf(r,Object.getPrototypeOf(t)),qt&&Object.defineProperty(r,qt,{value:r,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(r,ol(t))};ae.promisify.custom=qt;function Y0(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}function $0(e){if(typeof e!="function")throw new TypeError('The "original" argument must be of type Function');function t(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if(typeof i!="function")throw new TypeError("The last argument must be of type Function");var a=this,o=function(){return i.apply(a,arguments)};e.apply(this,r).then(function(s){process.nextTick(o.bind(null,null,s))},function(s){process.nextTick(Y0.bind(null,s,o))})}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,ol(e)),t}ae.callbackify=$0});var hl=W((Ng,cl)=>{cl.exports=ze;function ze(e){if(e)return K0(e)}function K0(e){for(var t in ze.prototype)e[t]=ze.prototype[t];return e}ze.prototype.on=ze.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks[e]=this._callbacks[e]||[]).push(t),this};ze.prototype.once=function(e,t){var r=this;this._callbacks=this._callbacks||{};function n(){r.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this};ze.prototype.off=ze.prototype.removeListener=ze.prototype.removeAllListeners=ze.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var r=this._callbacks[e];if(!r)return this;if(arguments.length==1)return delete this._callbacks[e],this;for(var n,i=0;i<r.length;i++)if(n=r[i],n===t||n.fn===t){r.splice(i,1);break}return this};ze.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),r=this._callbacks[e];if(r){r=r.slice(0);for(var n=0,i=r.length;n<i;++n)r[n].apply(this,t)}return this};ze.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks[e]||[]};ze.prototype.hasListeners=function(e){return!!this.listeners(e).length}});var tn=W((Pg,pl)=>{var dl=hl();function en(){dl.call(this)}en.prototype=new dl;pl.exports=en;en.Stream=en;en.prototype.pipe=function(e,t){var r=this;function n(u){e.writable&&e.write(u)===!1&&r.pause&&r.pause()}r.on("data",n);function i(){r.readable&&r.resume&&r.resume()}e.on("drain",i),!e._isStdio&&(!t||t.end!==!1)&&(r.on("end",o),r.on("close",s));var a=!1;function o(){a||(a=!0,e.end())}function s(){a||(a=!0,typeof e.destroy=="function"&&e.destroy())}function f(u){if(l(),!this.hasListeners("error"))throw u}r.on("error",f),e.on("error",f);function l(){r.off("data",n),e.off("drain",i),r.off("end",o),r.off("close",s),r.off("error",f),e.off("error",f),r.off("end",l),r.off("close",l),e.off("end",l),e.off("close",l)}return r.on("end",l),r.on("close",l),e.on("end",l),e.on("close",l),e.emit("pipe",r),e}});var yl=W(ii=>{"use strict";ii.byteLength=J0;ii.toByteArray=ep;ii.fromByteArray=np;var ut=[],Ve=[],X0=typeof Uint8Array<"u"?Uint8Array:Array,_a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(Ht=0,_l=_a.length;Ht<_l;++Ht)ut[Ht]=_a[Ht],Ve[_a.charCodeAt(Ht)]=Ht;var Ht,_l;Ve["-".charCodeAt(0)]=62;Ve["_".charCodeAt(0)]=63;function ml(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");r===-1&&(r=t);var n=r===t?0:4-r%4;return[r,n]}function J0(e){var t=ml(e),r=t[0],n=t[1];return(r+n)*3/4-n}function Q0(e,t,r){return(t+r)*3/4-r}function ep(e){var t,r=ml(e),n=r[0],i=r[1],a=new X0(Q0(e,n,i)),o=0,s=i>0?n-4:n,f;for(f=0;f<s;f+=4)t=Ve[e.charCodeAt(f)]<<18|Ve[e.charCodeAt(f+1)]<<12|Ve[e.charCodeAt(f+2)]<<6|Ve[e.charCodeAt(f+3)],a[o++]=t>>16&255,a[o++]=t>>8&255,a[o++]=t&255;return i===2&&(t=Ve[e.charCodeAt(f)]<<2|Ve[e.charCodeAt(f+1)]>>4,a[o++]=t&255),i===1&&(t=Ve[e.charCodeAt(f)]<<10|Ve[e.charCodeAt(f+1)]<<4|Ve[e.charCodeAt(f+2)]>>2,a[o++]=t>>8&255,a[o++]=t&255),a}function tp(e){return ut[e>>18&63]+ut[e>>12&63]+ut[e>>6&63]+ut[e&63]}function rp(e,t,r){for(var n,i=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(e[a+2]&255),i.push(tp(n));return i.join("")}function np(e){for(var t,r=e.length,n=r%3,i=[],a=16383,o=0,s=r-n;o<s;o+=a)i.push(rp(e,o,o+a>s?s:o+a));return n===1?(t=e[r-1],i.push(ut[t>>2]+ut[t<<4&63]+"==")):n===2&&(t=(e[r-2]<<8)+e[r-1],i.push(ut[t>>10]+ut[t>>4&63]+ut[t<<2&63]+"=")),i.join("")}});var gl=W(ma=>{ma.read=function(e,t,r,n,i){var a,o,s=i*8-n-1,f=(1<<s)-1,l=f>>1,u=-7,c=r?i-1:0,p=r?-1:1,h=e[t+c];for(c+=p,a=h&(1<<-u)-1,h>>=-u,u+=s;u>0;a=a*256+e[t+c],c+=p,u-=8);for(o=a&(1<<-u)-1,a>>=-u,u+=n;u>0;o=o*256+e[t+c],c+=p,u-=8);if(a===0)a=1-l;else{if(a===f)return o?NaN:(h?-1:1)*(1/0);o=o+Math.pow(2,n),a=a-l}return(h?-1:1)*o*Math.pow(2,a-n)};ma.write=function(e,t,r,n,i,a){var o,s,f,l=a*8-i-1,u=(1<<l)-1,c=u>>1,p=i===23?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:a-1,y=n?1:-1,m=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-o))<1&&(o--,f*=2),o+c>=1?t+=p/f:t+=p*Math.pow(2,1-c),t*f>=2&&(o++,f/=2),o+c>=u?(s=0,o=u):o+c>=1?(s=(t*f-1)*Math.pow(2,i),o=o+c):(s=t*Math.pow(2,c-1)*Math.pow(2,i),o=0));i>=8;e[r+h]=s&255,h+=y,s/=256,i-=8);for(o=o<<i|s,l+=i;l>0;e[r+h]=o&255,h+=y,o/=256,l-=8);e[r+h-y]|=m*128}});var si=W(Ir=>{"use strict";var ya=yl(),Ar=gl(),bl=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;Ir.Buffer=P;Ir.SlowBuffer=fp;Ir.INSPECT_MAX_BYTES=50;var ai=2147483647;Ir.kMaxLength=ai;P.TYPED_ARRAY_SUPPORT=ip();!P.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function ip(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),e.foo()===42}catch{return!1}}Object.defineProperty(P.prototype,"parent",{enumerable:!0,get:function(){if(P.isBuffer(this))return this.buffer}});Object.defineProperty(P.prototype,"offset",{enumerable:!0,get:function(){if(P.isBuffer(this))return this.byteOffset}});function wt(e){if(e>ai)throw new RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,P.prototype),t}function P(e,t,r){if(typeof e=="number"){if(typeof t=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return va(e)}return El(e,t,r)}P.poolSize=8192;function El(e,t,r){if(typeof e=="string")return op(e,t);if(ArrayBuffer.isView(e))return sp(e);if(e==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(ct(e,ArrayBuffer)||e&&ct(e.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(ct(e,SharedArrayBuffer)||e&&ct(e.buffer,SharedArrayBuffer)))return ba(e,t,r);if(typeof e=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');let n=e.valueOf&&e.valueOf();if(n!=null&&n!==e)return P.from(n,t,r);let i=lp(e);if(i)return i;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]=="function")return P.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}P.from=function(e,t,r){return El(e,t,r)};Object.setPrototypeOf(P.prototype,Uint8Array.prototype);Object.setPrototypeOf(P,Uint8Array);function Al(e){if(typeof e!="number")throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function ap(e,t,r){return Al(e),e<=0?wt(e):t!==void 0?typeof r=="string"?wt(e).fill(t,r):wt(e).fill(t):wt(e)}P.alloc=function(e,t,r){return ap(e,t,r)};function va(e){return Al(e),wt(e<0?0:xa(e)|0)}P.allocUnsafe=function(e){return va(e)};P.allocUnsafeSlow=function(e){return va(e)};function op(e,t){if((typeof t!="string"||t==="")&&(t="utf8"),!P.isEncoding(t))throw new TypeError("Unknown encoding: "+t);let r=Sl(e,t)|0,n=wt(r),i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}function ga(e){let t=e.length<0?0:xa(e.length)|0,r=wt(t);for(let n=0;n<t;n+=1)r[n]=e[n]&255;return r}function sp(e){if(ct(e,Uint8Array)){let t=new Uint8Array(e);return ba(t.buffer,t.byteOffset,t.byteLength)}return ga(e)}function ba(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return t===void 0&&r===void 0?n=new Uint8Array(e):r===void 0?n=new Uint8Array(e,t):n=new Uint8Array(e,t,r),Object.setPrototypeOf(n,P.prototype),n}function lp(e){if(P.isBuffer(e)){let t=xa(e.length)|0,r=wt(t);return r.length===0||e.copy(r,0,0,t),r}if(e.length!==void 0)return typeof e.length!="number"||Aa(e.length)?wt(0):ga(e);if(e.type==="Buffer"&&Array.isArray(e.data))return ga(e.data)}function xa(e){if(e>=ai)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ai.toString(16)+" bytes");return e|0}function fp(e){return+e!=e&&(e=0),P.alloc(+e)}P.isBuffer=function(t){return t!=null&&t._isBuffer===!0&&t!==P.prototype};P.compare=function(t,r){if(ct(t,Uint8Array)&&(t=P.from(t,t.offset,t.byteLength)),ct(r,Uint8Array)&&(r=P.from(r,r.offset,r.byteLength)),!P.isBuffer(t)||!P.isBuffer(r))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===r)return 0;let n=t.length,i=r.length;for(let a=0,o=Math.min(n,i);a<o;++a)if(t[a]!==r[a]){n=t[a],i=r[a];break}return n<i?-1:i<n?1:0};P.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}};P.concat=function(t,r){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(t.length===0)return P.alloc(0);let n;if(r===void 0)for(r=0,n=0;n<t.length;++n)r+=t[n].length;let i=P.allocUnsafe(r),a=0;for(n=0;n<t.length;++n){let o=t[n];if(ct(o,Uint8Array))a+o.length>i.length?(P.isBuffer(o)||(o=P.from(o)),o.copy(i,a)):Uint8Array.prototype.set.call(i,o,a);else if(P.isBuffer(o))o.copy(i,a);else throw new TypeError('"list" argument must be an Array of Buffers');a+=o.length}return i};function Sl(e,t){if(P.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||ct(e,ArrayBuffer))return e.byteLength;if(typeof e!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&arguments[2]===!0;if(!n&&r===0)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return wa(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return r*2;case"hex":return r>>>1;case"base64":return Ll(e).length;default:if(i)return n?-1:wa(e).length;t=(""+t).toLowerCase(),i=!0}}P.byteLength=Sl;function up(e,t,r){let n=!1;if((t===void 0||t<0)&&(t=0),t>this.length||((r===void 0||r>this.length)&&(r=this.length),r<=0)||(r>>>=0,t>>>=0,r<=t))return"";for(e||(e="utf8");;)switch(e){case"hex":return wp(this,t,r);case"utf8":case"utf-8":return kl(this,t,r);case"ascii":return gp(this,t,r);case"latin1":case"binary":return bp(this,t,r);case"base64":return mp(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return vp(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}P.prototype._isBuffer=!0;function Wt(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}P.prototype.swap16=function(){let t=this.length;if(t%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let r=0;r<t;r+=2)Wt(this,r,r+1);return this};P.prototype.swap32=function(){let t=this.length;if(t%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let r=0;r<t;r+=4)Wt(this,r,r+3),Wt(this,r+1,r+2);return this};P.prototype.swap64=function(){let t=this.length;if(t%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let r=0;r<t;r+=8)Wt(this,r,r+7),Wt(this,r+1,r+6),Wt(this,r+2,r+5),Wt(this,r+3,r+4);return this};P.prototype.toString=function(){let t=this.length;return t===0?"":arguments.length===0?kl(this,0,t):up.apply(this,arguments)};P.prototype.toLocaleString=P.prototype.toString;P.prototype.equals=function(t){if(!P.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?!0:P.compare(this,t)===0};P.prototype.inspect=function(){let t="",r=Ir.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"};bl&&(P.prototype[bl]=P.prototype.inspect);P.prototype.compare=function(t,r,n,i,a){if(ct(t,Uint8Array)&&(t=P.from(t,t.offset,t.byteLength)),!P.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(r===void 0&&(r=0),n===void 0&&(n=t?t.length:0),i===void 0&&(i=0),a===void 0&&(a=this.length),r<0||n>t.length||i<0||a>this.length)throw new RangeError("out of range index");if(i>=a&&r>=n)return 0;if(i>=a)return-1;if(r>=n)return 1;if(r>>>=0,n>>>=0,i>>>=0,a>>>=0,this===t)return 0;let o=a-i,s=n-r,f=Math.min(o,s),l=this.slice(i,a),u=t.slice(r,n);for(let c=0;c<f;++c)if(l[c]!==u[c]){o=l[c],s=u[c];break}return o<s?-1:s<o?1:0};function Il(e,t,r,n,i){if(e.length===0)return-1;if(typeof r=="string"?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,Aa(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0)if(i)r=0;else return-1;if(typeof t=="string"&&(t=P.from(t,n)),P.isBuffer(t))return t.length===0?-1:wl(e,t,r,n,i);if(typeof t=="number")return t=t&255,typeof Uint8Array.prototype.indexOf=="function"?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):wl(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function wl(e,t,r,n,i){let a=1,o=e.length,s=t.length;if(n!==void 0&&(n=String(n).toLowerCase(),n==="ucs2"||n==="ucs-2"||n==="utf16le"||n==="utf-16le")){if(e.length<2||t.length<2)return-1;a=2,o/=2,s/=2,r/=2}function f(u,c){return a===1?u[c]:u.readUInt16BE(c*a)}let l;if(i){let u=-1;for(l=r;l<o;l++)if(f(e,l)===f(t,u===-1?0:l-u)){if(u===-1&&(u=l),l-u+1===s)return u*a}else u!==-1&&(l-=l-u),u=-1}else for(r+s>o&&(r=o-s),l=r;l>=0;l--){let u=!0;for(let c=0;c<s;c++)if(f(e,l+c)!==f(t,c)){u=!1;break}if(u)return l}return-1}P.prototype.includes=function(t,r,n){return this.indexOf(t,r,n)!==-1};P.prototype.indexOf=function(t,r,n){return Il(this,t,r,n,!0)};P.prototype.lastIndexOf=function(t,r,n){return Il(this,t,r,n,!1)};function cp(e,t,r,n){r=Number(r)||0;let i=e.length-r;n?(n=Number(n),n>i&&(n=i)):n=i;let a=t.length;n>a/2&&(n=a/2);let o;for(o=0;o<n;++o){let s=parseInt(t.substr(o*2,2),16);if(Aa(s))return o;e[r+o]=s}return o}function hp(e,t,r,n){return oi(wa(t,e.length-r),e,r,n)}function dp(e,t,r,n){return oi(Sp(t),e,r,n)}function pp(e,t,r,n){return oi(Ll(t),e,r,n)}function _p(e,t,r,n){return oi(Ip(t,e.length-r),e,r,n)}P.prototype.write=function(t,r,n,i){if(r===void 0)i="utf8",n=this.length,r=0;else if(n===void 0&&typeof r=="string")i=r,n=this.length,r=0;else if(isFinite(r))r=r>>>0,isFinite(n)?(n=n>>>0,i===void 0&&(i="utf8")):(i=n,n=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let a=this.length-r;if((n===void 0||n>a)&&(n=a),t.length>0&&(n<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let o=!1;for(;;)switch(i){case"hex":return cp(this,t,r,n);case"utf8":case"utf-8":return hp(this,t,r,n);case"ascii":case"latin1":case"binary":return dp(this,t,r,n);case"base64":return pp(this,t,r,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _p(this,t,r,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}};P.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function mp(e,t,r){return t===0&&r===e.length?ya.fromByteArray(e):ya.fromByteArray(e.slice(t,r))}function kl(e,t,r){r=Math.min(e.length,r);let n=[],i=t;for(;i<r;){let a=e[i],o=null,s=a>239?4:a>223?3:a>191?2:1;if(i+s<=r){let f,l,u,c;switch(s){case 1:a<128&&(o=a);break;case 2:f=e[i+1],(f&192)===128&&(c=(a&31)<<6|f&63,c>127&&(o=c));break;case 3:f=e[i+1],l=e[i+2],(f&192)===128&&(l&192)===128&&(c=(a&15)<<12|(f&63)<<6|l&63,c>2047&&(c<55296||c>57343)&&(o=c));break;case 4:f=e[i+1],l=e[i+2],u=e[i+3],(f&192)===128&&(l&192)===128&&(u&192)===128&&(c=(a&15)<<18|(f&63)<<12|(l&63)<<6|u&63,c>65535&&c<1114112&&(o=c))}}o===null?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|o&1023),n.push(o),i+=s}return yp(n)}var vl=4096;function yp(e){let t=e.length;if(t<=vl)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=vl));return r}function gp(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]&127);return n}function bp(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function wp(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let a=t;a<r;++a)i+=kp[e[a]];return i}function vp(e,t,r){let n=e.slice(t,r),i="";for(let a=0;a<n.length-1;a+=2)i+=String.fromCharCode(n[a]+n[a+1]*256);return i}P.prototype.slice=function(t,r){let n=this.length;t=~~t,r=r===void 0?n:~~r,t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),r<0?(r+=n,r<0&&(r=0)):r>n&&(r=n),r<t&&(r=t);let i=this.subarray(t,r);return Object.setPrototypeOf(i,P.prototype),i};function Ae(e,t,r){if(e%1!==0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}P.prototype.readUintLE=P.prototype.readUIntLE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t],a=1,o=0;for(;++o<r&&(a*=256);)i+=this[t+o]*a;return i};P.prototype.readUintBE=P.prototype.readUIntBE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t+--r],a=1;for(;r>0&&(a*=256);)i+=this[t+--r]*a;return i};P.prototype.readUint8=P.prototype.readUInt8=function(t,r){return t=t>>>0,r||Ae(t,1,this.length),this[t]};P.prototype.readUint16LE=P.prototype.readUInt16LE=function(t,r){return t=t>>>0,r||Ae(t,2,this.length),this[t]|this[t+1]<<8};P.prototype.readUint16BE=P.prototype.readUInt16BE=function(t,r){return t=t>>>0,r||Ae(t,2,this.length),this[t]<<8|this[t+1]};P.prototype.readUint32LE=P.prototype.readUInt32LE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+this[t+3]*16777216};P.prototype.readUint32BE=P.prototype.readUInt32BE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]*16777216+(this[t+1]<<16|this[t+2]<<8|this[t+3])};P.prototype.readBigUInt64LE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&rn(t,this.length-8);let i=r+this[++t]*2**8+this[++t]*2**16+this[++t]*2**24,a=this[++t]+this[++t]*2**8+this[++t]*2**16+n*2**24;return BigInt(i)+(BigInt(a)<<BigInt(32))});P.prototype.readBigUInt64BE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&rn(t,this.length-8);let i=r*2**24+this[++t]*2**16+this[++t]*2**8+this[++t],a=this[++t]*2**24+this[++t]*2**16+this[++t]*2**8+n;return(BigInt(i)<<BigInt(32))+BigInt(a)});P.prototype.readIntLE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=this[t],a=1,o=0;for(;++o<r&&(a*=256);)i+=this[t+o]*a;return a*=128,i>=a&&(i-=Math.pow(2,8*r)),i};P.prototype.readIntBE=function(t,r,n){t=t>>>0,r=r>>>0,n||Ae(t,r,this.length);let i=r,a=1,o=this[t+--i];for(;i>0&&(a*=256);)o+=this[t+--i]*a;return a*=128,o>=a&&(o-=Math.pow(2,8*r)),o};P.prototype.readInt8=function(t,r){return t=t>>>0,r||Ae(t,1,this.length),this[t]&128?(255-this[t]+1)*-1:this[t]};P.prototype.readInt16LE=function(t,r){t=t>>>0,r||Ae(t,2,this.length);let n=this[t]|this[t+1]<<8;return n&32768?n|4294901760:n};P.prototype.readInt16BE=function(t,r){t=t>>>0,r||Ae(t,2,this.length);let n=this[t+1]|this[t]<<8;return n&32768?n|4294901760:n};P.prototype.readInt32LE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24};P.prototype.readInt32BE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]};P.prototype.readBigInt64LE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&rn(t,this.length-8);let i=this[t+4]+this[t+5]*2**8+this[t+6]*2**16+(n<<24);return(BigInt(i)<<BigInt(32))+BigInt(r+this[++t]*2**8+this[++t]*2**16+this[++t]*2**24)});P.prototype.readBigInt64BE=At(function(t){t=t>>>0,Sr(t,"offset");let r=this[t],n=this[t+7];(r===void 0||n===void 0)&&rn(t,this.length-8);let i=(r<<24)+this[++t]*2**16+this[++t]*2**8+this[++t];return(BigInt(i)<<BigInt(32))+BigInt(this[++t]*2**24+this[++t]*2**16+this[++t]*2**8+n)});P.prototype.readFloatLE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),Ar.read(this,t,!0,23,4)};P.prototype.readFloatBE=function(t,r){return t=t>>>0,r||Ae(t,4,this.length),Ar.read(this,t,!1,23,4)};P.prototype.readDoubleLE=function(t,r){return t=t>>>0,r||Ae(t,8,this.length),Ar.read(this,t,!0,52,8)};P.prototype.readDoubleBE=function(t,r){return t=t>>>0,r||Ae(t,8,this.length),Ar.read(this,t,!1,52,8)};function Pe(e,t,r,n,i,a){if(!P.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}P.prototype.writeUintLE=P.prototype.writeUIntLE=function(t,r,n,i){if(t=+t,r=r>>>0,n=n>>>0,!i){let s=Math.pow(2,8*n)-1;Pe(this,t,r,n,s,0)}let a=1,o=0;for(this[r]=t&255;++o<n&&(a*=256);)this[r+o]=t/a&255;return r+n};P.prototype.writeUintBE=P.prototype.writeUIntBE=function(t,r,n,i){if(t=+t,r=r>>>0,n=n>>>0,!i){let s=Math.pow(2,8*n)-1;Pe(this,t,r,n,s,0)}let a=n-1,o=1;for(this[r+a]=t&255;--a>=0&&(o*=256);)this[r+a]=t/o&255;return r+n};P.prototype.writeUint8=P.prototype.writeUInt8=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,1,255,0),this[r]=t&255,r+1};P.prototype.writeUint16LE=P.prototype.writeUInt16LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,65535,0),this[r]=t&255,this[r+1]=t>>>8,r+2};P.prototype.writeUint16BE=P.prototype.writeUInt16BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,65535,0),this[r]=t>>>8,this[r+1]=t&255,r+2};P.prototype.writeUint32LE=P.prototype.writeUInt32LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,4294967295,0),this[r+3]=t>>>24,this[r+2]=t>>>16,this[r+1]=t>>>8,this[r]=t&255,r+4};P.prototype.writeUint32BE=P.prototype.writeUInt32BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,4294967295,0),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=t&255,r+4};function Tl(e,t,r,n,i){Fl(t,n,i,e,r,7);let a=Number(t&BigInt(4294967295));e[r++]=a,a=a>>8,e[r++]=a,a=a>>8,e[r++]=a,a=a>>8,e[r++]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o=o>>8,e[r++]=o,o=o>>8,e[r++]=o,o=o>>8,e[r++]=o,r}function Ol(e,t,r,n,i){Fl(t,n,i,e,r,7);let a=Number(t&BigInt(4294967295));e[r+7]=a,a=a>>8,e[r+6]=a,a=a>>8,e[r+5]=a,a=a>>8,e[r+4]=a;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o=o>>8,e[r+2]=o,o=o>>8,e[r+1]=o,o=o>>8,e[r]=o,r+8}P.prototype.writeBigUInt64LE=At(function(t,r=0){return Tl(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))});P.prototype.writeBigUInt64BE=At(function(t,r=0){return Ol(this,t,r,BigInt(0),BigInt("0xffffffffffffffff"))});P.prototype.writeIntLE=function(t,r,n,i){if(t=+t,r=r>>>0,!i){let f=Math.pow(2,8*n-1);Pe(this,t,r,n,f-1,-f)}let a=0,o=1,s=0;for(this[r]=t&255;++a<n&&(o*=256);)t<0&&s===0&&this[r+a-1]!==0&&(s=1),this[r+a]=(t/o>>0)-s&255;return r+n};P.prototype.writeIntBE=function(t,r,n,i){if(t=+t,r=r>>>0,!i){let f=Math.pow(2,8*n-1);Pe(this,t,r,n,f-1,-f)}let a=n-1,o=1,s=0;for(this[r+a]=t&255;--a>=0&&(o*=256);)t<0&&s===0&&this[r+a+1]!==0&&(s=1),this[r+a]=(t/o>>0)-s&255;return r+n};P.prototype.writeInt8=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,1,127,-128),t<0&&(t=255+t+1),this[r]=t&255,r+1};P.prototype.writeInt16LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,32767,-32768),this[r]=t&255,this[r+1]=t>>>8,r+2};P.prototype.writeInt16BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,2,32767,-32768),this[r]=t>>>8,this[r+1]=t&255,r+2};P.prototype.writeInt32LE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,2147483647,-2147483648),this[r]=t&255,this[r+1]=t>>>8,this[r+2]=t>>>16,this[r+3]=t>>>24,r+4};P.prototype.writeInt32BE=function(t,r,n){return t=+t,r=r>>>0,n||Pe(this,t,r,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=t&255,r+4};P.prototype.writeBigInt64LE=At(function(t,r=0){return Tl(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});P.prototype.writeBigInt64BE=At(function(t,r=0){return Ol(this,t,r,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function Rl(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Bl(e,t,r,n,i){return t=+t,r=r>>>0,i||Rl(e,t,r,4,34028234663852886e22,-34028234663852886e22),Ar.write(e,t,r,n,23,4),r+4}P.prototype.writeFloatLE=function(t,r,n){return Bl(this,t,r,!0,n)};P.prototype.writeFloatBE=function(t,r,n){return Bl(this,t,r,!1,n)};function Cl(e,t,r,n,i){return t=+t,r=r>>>0,i||Rl(e,t,r,8,17976931348623157e292,-17976931348623157e292),Ar.write(e,t,r,n,52,8),r+8}P.prototype.writeDoubleLE=function(t,r,n){return Cl(this,t,r,!0,n)};P.prototype.writeDoubleBE=function(t,r,n){return Cl(this,t,r,!1,n)};P.prototype.copy=function(t,r,n,i){if(!P.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),!i&&i!==0&&(i=this.length),r>=t.length&&(r=t.length),r||(r=0),i>0&&i<n&&(i=n),i===n||t.length===0||this.length===0)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-r<i-n&&(i=t.length-r+n);let a=i-n;return this===t&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(r,n,i):Uint8Array.prototype.set.call(t,this.subarray(n,i),r),a};P.prototype.fill=function(t,r,n,i){if(typeof t=="string"){if(typeof r=="string"?(i=r,r=0,n=this.length):typeof n=="string"&&(i=n,n=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!P.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(t.length===1){let o=t.charCodeAt(0);(i==="utf8"&&o<128||i==="latin1")&&(t=o)}}else typeof t=="number"?t=t&255:typeof t=="boolean"&&(t=Number(t));if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;r=r>>>0,n=n===void 0?this.length:n>>>0,t||(t=0);let a;if(typeof t=="number")for(a=r;a<n;++a)this[a]=t;else{let o=P.isBuffer(t)?t:P.from(t,i),s=o.length;if(s===0)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(a=0;a<n-r;++a)this[a+r]=o[a%s]}return this};var Er={};function Ea(e,t,r){Er[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(i){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:i,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}Ea("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError);Ea("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError);Ea("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=xl(String(r)):typeof r=="bigint"&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=xl(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n},RangeError);function xl(e){let t="",r=e.length,n=e[0]==="-"?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function xp(e,t,r){Sr(t,"offset"),(e[t]===void 0||e[t+r]===void 0)&&rn(t,e.length-(r+1))}function Fl(e,t,r,n,i,a){if(e>r||e<t){let o=typeof t=="bigint"?"n":"",s;throw a>3?t===0||t===BigInt(0)?s=`>= 0${o} and < 2${o} ** ${(a+1)*8}${o}`:s=`>= -(2${o} ** ${(a+1)*8-1}${o}) and < 2 ** ${(a+1)*8-1}${o}`:s=`>= ${t}${o} and <= ${r}${o}`,new Er.ERR_OUT_OF_RANGE("value",s,e)}xp(n,i,a)}function Sr(e,t){if(typeof e!="number")throw new Er.ERR_INVALID_ARG_TYPE(t,"number",e)}function rn(e,t,r){throw Math.floor(e)!==e?(Sr(e,r),new Er.ERR_OUT_OF_RANGE(r||"offset","an integer",e)):t<0?new Er.ERR_BUFFER_OUT_OF_BOUNDS:new Er.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}var Ep=/[^+/0-9A-Za-z-_]/g;function Ap(e){if(e=e.split("=")[0],e=e.trim().replace(Ep,""),e.length<2)return"";for(;e.length%4!==0;)e=e+"=";return e}function wa(e,t){t=t||1/0;let r,n=e.length,i=null,a=[];for(let o=0;o<n;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}else if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=(i-55296<<10|r-56320)+65536}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,r&63|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,r&63|128)}else if(r<1114112){if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,r&63|128)}else throw new Error("Invalid code point")}return a}function Sp(e){let t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r)&255);return t}function Ip(e,t){let r,n,i,a=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,a.push(i),a.push(n);return a}function Ll(e){return ya.toByteArray(Ap(e))}function oi(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function ct(e,t){return e instanceof t||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===t.name}function Aa(e){return e!==e}var kp=function(){let e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){let n=r*16;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function At(e){return typeof BigInt>"u"?Tp:e}function Tp(){throw new Error("BigInt not supported")}});var Ta=W((jg,Ml)=>{"use strict";function kr(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?kr=function(r){return typeof r}:kr=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},kr(e)}function Op(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Rp(e,t){return t&&(kr(t)==="object"||typeof t=="function")?t:Bp(e)}function Bp(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ia(e){return Ia=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},Ia(e)}function Cp(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ka(e,t)}function ka(e,t){return ka=Object.setPrototypeOf||function(n,i){return n.__proto__=i,n},ka(e,t)}var Pl={},Tr,Sa;function nn(e,t,r){r||(r=Error);function n(a,o,s){return typeof t=="string"?t:t(a,o,s)}var i=function(a){Cp(o,a);function o(s,f,l){var u;return Op(this,o),u=Rp(this,Ia(o).call(this,n(s,f,l))),u.code=e,u}return o}(r);Pl[e]=i}function Nl(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map(function(n){return String(n)}),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:r===2?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}else return"of ".concat(t," ").concat(String(e))}function Fp(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function Lp(e,t,r){return(r===void 0||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}function Np(e,t,r){return typeof r!="number"&&(r=0),r+t.length>e.length?!1:e.indexOf(t,r)!==-1}nn("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError);nn("ERR_INVALID_ARG_TYPE",function(e,t,r){Tr===void 0&&(Tr=Or()),Tr(typeof e=="string","'name' must be a string");var n;typeof t=="string"&&Fp(t,"not ")?(n="must not be",t=t.replace(/^not /,"")):n="must be";var i;if(Lp(e," argument"))i="The ".concat(e," ").concat(n," ").concat(Nl(t,"type"));else{var a=Np(e,".")?"property":"argument";i='The "'.concat(e,'" ').concat(a," ").concat(n," ").concat(Nl(t,"type"))}return i+=". Received type ".concat(kr(r)),i},TypeError);nn("ERR_INVALID_ARG_VALUE",function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"is invalid";Sa===void 0&&(Sa=De());var n=Sa.inspect(t);return n.length>128&&(n="".concat(n.slice(0,128),"...")),"The argument '".concat(e,"' ").concat(r,". Received ").concat(n)},TypeError,RangeError);nn("ERR_INVALID_RETURN_VALUE",function(e,t,r){var n;return r&&r.constructor&&r.constructor.name?n="instance of ".concat(r.constructor.name):n="type ".concat(kr(r)),"Expected ".concat(e,' to be returned from the "').concat(t,'"')+" function but got ".concat(n,".")},TypeError);nn("ERR_MISSING_ARGS",function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];Tr===void 0&&(Tr=Or()),Tr(t.length>0,"At least one arg needs to be specified");var n="The ",i=t.length;switch(t=t.map(function(a){return'"'.concat(a,'"')}),i){case 1:n+="".concat(t[0]," argument");break;case 2:n+="".concat(t[0]," and ").concat(t[1]," arguments");break;default:n+=t.slice(0,i-1).join(", "),n+=", and ".concat(t[i-1]," arguments");break}return"".concat(n," must be specified")},TypeError);Ml.exports.codes=Pl});var Gl=W((Gg,jl)=>{"use strict";function Pp(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{},n=Object.keys(r);typeof Object.getOwnPropertySymbols=="function"&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(i){return Object.getOwnPropertyDescriptor(r,i).enumerable}))),n.forEach(function(i){Mp(e,i,r[i])})}return e}function Mp(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Dp(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Dl(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function zp(e,t,r){return t&&Dl(e.prototype,t),r&&Dl(e,r),e}function Rr(e,t){return t&&(He(t)==="object"||typeof t=="function")?t:Oa(e)}function Oa(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Up(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ln(e,t)}function Ra(e){var t=typeof Map=="function"?new Map:void 0;return Ra=function(n){if(n===null||!Gp(n))return n;if(typeof n!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t<"u"){if(t.has(n))return t.get(n);t.set(n,i)}function i(){return li(n,arguments,St(this).constructor)}return i.prototype=Object.create(n.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),ln(i,n)},Ra(e)}function jp(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch{return!1}}function li(e,t,r){return jp()?li=Reflect.construct:li=function(i,a,o){var s=[null];s.push.apply(s,a);var f=Function.bind.apply(i,s),l=new f;return o&&ln(l,o.prototype),l},li.apply(null,arguments)}function Gp(e){return Function.toString.call(e).indexOf("[native code]")!==-1}function ln(e,t){return ln=Object.setPrototypeOf||function(n,i){return n.__proto__=i,n},ln(e,t)}function St(e){return St=Object.setPrototypeOf?Object.getPrototypeOf:function(r){return r.__proto__||Object.getPrototypeOf(r)},St(e)}function He(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?He=function(r){return typeof r}:He=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},He(e)}var Zp=De(),Ba=Zp.inspect,qp=Ta(),Vp=qp.codes.ERR_INVALID_ARG_TYPE;function zl(e,t,r){return(r===void 0||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}function Hp(e,t){if(t=Math.floor(t),e.length==0||t==0)return"";var r=e.length*t;for(t=Math.floor(Math.log(t)/Math.log(2));t;)e+=e,t--;return e+=e.substring(0,r-e.length),e}var tt="",an="",on="",Ie="",Yt={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},Wp=10;function Ul(e){var t=Object.keys(e),r=Object.create(Object.getPrototypeOf(e));return t.forEach(function(n){r[n]=e[n]}),Object.defineProperty(r,"message",{value:e.message}),r}function sn(e){return Ba(e,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}function Yp(e,t,r){var n="",i="",a=0,o="",s=!1,f=sn(e),l=f.split(`
`),u=sn(t).split(`
`),c=0,p="";if(r==="strictEqual"&&He(e)==="object"&&He(t)==="object"&&e!==null&&t!==null&&(r="strictEqualObject"),l.length===1&&u.length===1&&l[0]!==u[0]){var h=l[0].length+u[0].length;if(h<=Wp){if((He(e)!=="object"||e===null)&&(He(t)!=="object"||t===null)&&(e!==0||t!==0))return"".concat(Yt[r],`

`)+"".concat(l[0]," !== ").concat(u[0],`
`)}else if(r!=="strictEqualObject"){var y=process.stderr&&process.stderr.isTTY?process.stderr.columns:80;if(h<y){for(;l[0][c]===u[0][c];)c++;c>2&&(p=`
  `.concat(Hp(" ",c),"^"),c=0)}}}for(var m=l[l.length-1],g=u[u.length-1];m===g&&(c++<2?o=`
  `.concat(m).concat(o):n=m,l.pop(),u.pop(),!(l.length===0||u.length===0));)m=l[l.length-1],g=u[u.length-1];var b=Math.max(l.length,u.length);if(b===0){var A=f.split(`
`);if(A.length>30)for(A[26]="".concat(tt,"...").concat(Ie);A.length>27;)A.pop();return"".concat(Yt.notIdentical,`

`).concat(A.join(`
`),`
`)}c>3&&(o=`
`.concat(tt,"...").concat(Ie).concat(o),s=!0),n!==""&&(o=`
  `.concat(n).concat(o),n="");var x=0,T=Yt[r]+`
`.concat(an,"+ actual").concat(Ie," ").concat(on,"- expected").concat(Ie),S=" ".concat(tt,"...").concat(Ie," Lines skipped");for(c=0;c<b;c++){var L=c-a;if(l.length<c+1)L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(u[c-2]),x++),i+=`
  `.concat(u[c-1]),x++),a=c,n+=`
`.concat(on,"-").concat(Ie," ").concat(u[c]),x++;else if(u.length<c+1)L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(l[c-2]),x++),i+=`
  `.concat(l[c-1]),x++),a=c,i+=`
`.concat(an,"+").concat(Ie," ").concat(l[c]),x++;else{var k=u[c],F=l[c],Z=F!==k&&(!zl(F,",")||F.slice(0,-1)!==k);Z&&zl(k,",")&&k.slice(0,-1)===F&&(Z=!1,F+=","),Z?(L>1&&c>2&&(L>4?(i+=`
`.concat(tt,"...").concat(Ie),s=!0):L>3&&(i+=`
  `.concat(l[c-2]),x++),i+=`
  `.concat(l[c-1]),x++),a=c,i+=`
`.concat(an,"+").concat(Ie," ").concat(F),n+=`
`.concat(on,"-").concat(Ie," ").concat(k),x+=2):(i+=n,n="",(L===1||c===0)&&(i+=`
  `.concat(F),x++))}if(x>20&&c<b-2)return"".concat(T).concat(S,`
`).concat(i,`
`).concat(tt,"...").concat(Ie).concat(n,`
`)+"".concat(tt,"...").concat(Ie)}return"".concat(T).concat(s?S:"",`
`).concat(i).concat(n).concat(o).concat(p)}var $p=function(e){Up(t,e);function t(r){var n;if(Dp(this,t),He(r)!=="object"||r===null)throw new Vp("options","Object",r);var i=r.message,a=r.operator,o=r.stackStartFn,s=r.actual,f=r.expected,l=Error.stackTraceLimit;if(Error.stackTraceLimit=0,i!=null)n=Rr(this,St(t).call(this,String(i)));else if(process.stderr&&process.stderr.isTTY&&(process.stderr&&process.stderr.getColorDepth&&process.stderr.getColorDepth()!==1?(tt="\x1B[34m",an="\x1B[32m",Ie="\x1B[39m",on="\x1B[31m"):(tt="",an="",Ie="",on="")),He(s)==="object"&&s!==null&&He(f)==="object"&&f!==null&&"stack"in s&&s instanceof Error&&"stack"in f&&f instanceof Error&&(s=Ul(s),f=Ul(f)),a==="deepStrictEqual"||a==="strictEqual")n=Rr(this,St(t).call(this,Yp(s,f,a)));else if(a==="notDeepStrictEqual"||a==="notStrictEqual"){var u=Yt[a],c=sn(s).split(`
`);if(a==="notStrictEqual"&&He(s)==="object"&&s!==null&&(u=Yt.notStrictEqualObject),c.length>30)for(c[26]="".concat(tt,"...").concat(Ie);c.length>27;)c.pop();c.length===1?n=Rr(this,St(t).call(this,"".concat(u," ").concat(c[0]))):n=Rr(this,St(t).call(this,"".concat(u,`

`).concat(c.join(`
`),`
`)))}else{var p=sn(s),h="",y=Yt[a];a==="notDeepEqual"||a==="notEqual"?(p="".concat(Yt[a],`

`).concat(p),p.length>1024&&(p="".concat(p.slice(0,1021),"..."))):(h="".concat(sn(f)),p.length>512&&(p="".concat(p.slice(0,509),"...")),h.length>512&&(h="".concat(h.slice(0,509),"...")),a==="deepEqual"||a==="equal"?p="".concat(y,`

`).concat(p,`

should equal

`):h=" ".concat(a," ").concat(h)),n=Rr(this,St(t).call(this,"".concat(p).concat(h)))}return Error.stackTraceLimit=l,n.generatedMessage=!i,Object.defineProperty(Oa(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=s,n.expected=f,n.operator=a,Error.captureStackTrace&&Error.captureStackTrace(Oa(n),o),n.stack,n.name="AssertionError",Rr(n)}return zp(t,[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:Ba.custom,value:function(n,i){return Ba(this,Pp({},i,{customInspect:!1,depth:0}))}}]),t}(Ra(Error));jl.exports=$p});var Vl=W((Zg,ql)=>{"use strict";function Zl(e,t){if(e==null)throw new TypeError("Cannot convert first argument to object");for(var r=Object(e),n=1;n<arguments.length;n++){var i=arguments[n];if(i!=null)for(var a=Object.keys(Object(i)),o=0,s=a.length;o<s;o++){var f=a[o],l=Object.getOwnPropertyDescriptor(i,f);l!==void 0&&l.enumerable&&(r[f]=i[f])}}return r}function Kp(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:Zl})}ql.exports={assign:Zl,polyfill:Kp}});var Ca=W((qg,Wl)=>{"use strict";var Hl=Object.prototype.toString;Wl.exports=function(t){var r=Hl.call(t),n=r==="[object Arguments]";return n||(n=r!=="[object Array]"&&t!==null&&typeof t=="object"&&typeof t.length=="number"&&t.length>=0&&Hl.call(t.callee)==="[object Function]"),n}});var rf=W((Vg,tf)=>{"use strict";var ef;Object.keys||(fn=Object.prototype.hasOwnProperty,Fa=Object.prototype.toString,Yl=Ca(),La=Object.prototype.propertyIsEnumerable,$l=!La.call({toString:null},"toString"),Kl=La.call(function(){},"prototype"),un=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],fi=function(e){var t=e.constructor;return t&&t.prototype===e},Xl={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},Jl=function(){if(typeof window>"u")return!1;for(var e in window)try{if(!Xl["$"+e]&&fn.call(window,e)&&window[e]!==null&&typeof window[e]=="object")try{fi(window[e])}catch{return!0}}catch{return!0}return!1}(),Ql=function(e){if(typeof window>"u"||!Jl)return fi(e);try{return fi(e)}catch{return!1}},ef=function(t){var r=t!==null&&typeof t=="object",n=Fa.call(t)==="[object Function]",i=Yl(t),a=r&&Fa.call(t)==="[object String]",o=[];if(!r&&!n&&!i)throw new TypeError("Object.keys called on a non-object");var s=Kl&&n;if(a&&t.length>0&&!fn.call(t,0))for(var f=0;f<t.length;++f)o.push(String(f));if(i&&t.length>0)for(var l=0;l<t.length;++l)o.push(String(l));else for(var u in t)!(s&&u==="prototype")&&fn.call(t,u)&&o.push(String(u));if($l)for(var c=Ql(t),p=0;p<un.length;++p)!(c&&un[p]==="constructor")&&fn.call(t,un[p])&&o.push(un[p]);return o});var fn,Fa,Yl,La,$l,Kl,un,fi,Xl,Jl,Ql;tf.exports=ef});var sf=W((Hg,of)=>{"use strict";var Xp=Array.prototype.slice,Jp=Ca(),nf=Object.keys,ui=nf?function(t){return nf(t)}:rf(),af=Object.keys;ui.shim=function(){if(Object.keys){var t=function(){var r=Object.keys(arguments);return r&&r.length===arguments.length}(1,2);t||(Object.keys=function(n){return Jp(n)?af(Xp.call(n)):af(n)})}else Object.keys=ui;return Object.keys||ui};of.exports=ui});var ff=W((Wg,lf)=>{"use strict";var Qp=$r(),Na=Qp("%Object.defineProperty%",!0),Pa=function(){if(Na)try{return Na({},"a",{value:1}),!0}catch{return!1}return!1};Pa.hasArrayLengthDefineBug=function(){if(!Pa())return null;try{return Na([],"length",{value:1}).length!==1}catch{return!0}};lf.exports=Pa});var cn=W((Yg,df)=>{"use strict";var e1=sf(),t1=typeof Symbol=="function"&&typeof Symbol("foo")=="symbol",r1=Object.prototype.toString,n1=Array.prototype.concat,uf=Object.defineProperty,i1=function(e){return typeof e=="function"&&r1.call(e)==="[object Function]"},a1=ff()(),cf=uf&&a1,o1=function(e,t,r,n){if(t in e){if(n===!0){if(e[t]===r)return}else if(!i1(n)||!n())return}cf?uf(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r},hf=function(e,t){var r=arguments.length>2?arguments[2]:{},n=e1(t);t1&&(n=n1.call(n,Object.getOwnPropertySymbols(t)));for(var i=0;i<n.length;i+=1)o1(e,n[i],t[n[i]],r[n[i]])};hf.supportsDescriptors=!!cf;df.exports=hf});var Ma=W(($g,_f)=>{"use strict";var pf=function(e){return e!==e};_f.exports=function(t,r){return t===0&&r===0?1/t===1/r:!!(t===r||pf(t)&&pf(r))}});var Da=W((Kg,mf)=>{"use strict";var s1=Ma();mf.exports=function(){return typeof Object.is=="function"?Object.is:s1}});var gf=W((Xg,yf)=>{"use strict";var l1=Da(),f1=cn();yf.exports=function(){var t=l1();return f1(Object,{is:t},{is:function(){return Object.is!==t}}),t}});var za=W((Jg,vf)=>{"use strict";var u1=cn(),c1=zn(),h1=Ma(),bf=Da(),d1=gf(),wf=c1(bf(),Object);u1(wf,{getPolyfill:bf,implementation:h1,shim:d1});vf.exports=wf});var Ua=W((Qg,xf)=>{"use strict";xf.exports=function(t){return t!==t}});var ja=W((e2,Ef)=>{"use strict";var p1=Ua();Ef.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:p1}});var Sf=W((t2,Af)=>{"use strict";var _1=cn(),m1=ja();Af.exports=function(){var t=m1();return _1(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}});var Of=W((r2,Tf)=>{"use strict";var y1=zn(),g1=cn(),b1=Ua(),If=ja(),w1=Sf(),kf=y1(If(),Number);g1(kf,{getPolyfill:If,implementation:b1,shim:w1});Tf.exports=kf});var Yf=W((n2,Wf)=>{"use strict";function Rf(e,t){return E1(e)||x1(e,t)||v1()}function v1(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function x1(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o=e[Symbol.iterator](),s;!(n=(s=o.next()).done)&&(r.push(s.value),!(t&&r.length===t));n=!0);}catch(f){i=!0,a=f}finally{try{!n&&o.return!=null&&o.return()}finally{if(i)throw a}}return r}function E1(e){if(Array.isArray(e))return e}function Ue(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Ue=function(r){return typeof r}:Ue=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},Ue(e)}var A1=/a/g.flags!==void 0,yi=function(t){var r=[];return t.forEach(function(n){return r.push(n)}),r},Bf=function(t){var r=[];return t.forEach(function(n,i){return r.push([i,n])}),r},Gf=Object.is?Object.is:za(),_i=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},Ga=Number.isNaN?Number.isNaN:Of();function qa(e){return e.call.bind(e)}var dn=qa(Object.prototype.hasOwnProperty),mi=qa(Object.prototype.propertyIsEnumerable),Cf=qa(Object.prototype.toString),Be=De().types,S1=Be.isAnyArrayBuffer,I1=Be.isArrayBufferView,Ff=Be.isDate,ci=Be.isMap,Lf=Be.isRegExp,hi=Be.isSet,k1=Be.isNativeError,T1=Be.isBoxedPrimitive,Nf=Be.isNumberObject,Pf=Be.isStringObject,Mf=Be.isBooleanObject,Df=Be.isBigIntObject,O1=Be.isSymbolObject,R1=Be.isFloat32Array,B1=Be.isFloat64Array;function C1(e){if(e.length===0||e.length>10)return!0;for(var t=0;t<e.length;t++){var r=e.charCodeAt(t);if(r<48||r>57)return!0}return e.length===10&&e>=Math.pow(2,32)}function di(e){return Object.keys(e).filter(C1).concat(_i(e).filter(Object.prototype.propertyIsEnumerable.bind(e)))}function Zf(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}var pi=void 0,F1=!0,L1=!1,Za=0,Va=1,qf=2,Vf=3;function N1(e,t){return A1?e.source===t.source&&e.flags===t.flags:RegExp.prototype.toString.call(e)===RegExp.prototype.toString.call(t)}function P1(e,t){if(e.byteLength!==t.byteLength)return!1;for(var r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0}function M1(e,t){return e.byteLength!==t.byteLength?!1:Zf(new Uint8Array(e.buffer,e.byteOffset,e.byteLength),new Uint8Array(t.buffer,t.byteOffset,t.byteLength))===0}function D1(e,t){return e.byteLength===t.byteLength&&Zf(new Uint8Array(e),new Uint8Array(t))===0}function z1(e,t){return Nf(e)?Nf(t)&&Gf(Number.prototype.valueOf.call(e),Number.prototype.valueOf.call(t)):Pf(e)?Pf(t)&&String.prototype.valueOf.call(e)===String.prototype.valueOf.call(t):Mf(e)?Mf(t)&&Boolean.prototype.valueOf.call(e)===Boolean.prototype.valueOf.call(t):Df(e)?Df(t)&&BigInt.prototype.valueOf.call(e)===BigInt.prototype.valueOf.call(t):O1(t)&&Symbol.prototype.valueOf.call(e)===Symbol.prototype.valueOf.call(t)}function We(e,t,r,n){if(e===t)return e!==0?!0:r?Gf(e,t):!0;if(r){if(Ue(e)!=="object")return typeof e=="number"&&Ga(e)&&Ga(t);if(Ue(t)!=="object"||e===null||t===null||Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1}else{if(e===null||Ue(e)!=="object")return t===null||Ue(t)!=="object"?e==t:!1;if(t===null||Ue(t)!=="object")return!1}var i=Cf(e),a=Cf(t);if(i!==a)return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;var o=di(e,pi),s=di(t,pi);return o.length!==s.length?!1:hn(e,t,r,n,Va,o)}if(i==="[object Object]"&&(!ci(e)&&ci(t)||!hi(e)&&hi(t)))return!1;if(Ff(e)){if(!Ff(t)||Date.prototype.getTime.call(e)!==Date.prototype.getTime.call(t))return!1}else if(Lf(e)){if(!Lf(t)||!N1(e,t))return!1}else if(k1(e)||e instanceof Error){if(e.message!==t.message||e.name!==t.name)return!1}else if(I1(e)){if(!r&&(R1(e)||B1(e))){if(!P1(e,t))return!1}else if(!M1(e,t))return!1;var f=di(e,pi),l=di(t,pi);return f.length!==l.length?!1:hn(e,t,r,n,Za,f)}else{if(hi(e))return!hi(t)||e.size!==t.size?!1:hn(e,t,r,n,qf);if(ci(e))return!ci(t)||e.size!==t.size?!1:hn(e,t,r,n,Vf);if(S1(e)){if(!D1(e,t))return!1}else if(T1(e)&&!z1(e,t))return!1}return hn(e,t,r,n,Za)}function zf(e,t){return t.filter(function(r){return mi(e,r)})}function hn(e,t,r,n,i,a){if(arguments.length===5){a=Object.keys(e);var o=Object.keys(t);if(a.length!==o.length)return!1}for(var s=0;s<a.length;s++)if(!dn(t,a[s]))return!1;if(r&&arguments.length===5){var f=_i(e);if(f.length!==0){var l=0;for(s=0;s<f.length;s++){var u=f[s];if(mi(e,u)){if(!mi(t,u))return!1;a.push(u),l++}else if(mi(t,u))return!1}var c=_i(t);if(f.length!==c.length&&zf(t,c).length!==l)return!1}else{var p=_i(t);if(p.length!==0&&zf(t,p).length!==0)return!1}}if(a.length===0&&(i===Za||i===Va&&e.length===0||e.size===0))return!0;if(n===void 0)n={val1:new Map,val2:new Map,position:0};else{var h=n.val1.get(e);if(h!==void 0){var y=n.val2.get(t);if(y!==void 0)return h===y}n.position++}n.val1.set(e,n.position),n.val2.set(t,n.position);var m=q1(e,t,r,a,n,i);return n.val1.delete(e),n.val2.delete(t),m}function Uf(e,t,r,n){for(var i=yi(e),a=0;a<i.length;a++){var o=i[a];if(We(t,o,r,n))return e.delete(o),!0}return!1}function Hf(e){switch(Ue(e)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":e=+e;case"number":if(Ga(e))return!1}return!0}function U1(e,t,r){var n=Hf(r);return n??(t.has(n)&&!e.has(n))}function j1(e,t,r,n,i){var a=Hf(r);if(a!=null)return a;var o=t.get(a);return o===void 0&&!t.has(a)||!We(n,o,!1,i)?!1:!e.has(a)&&We(n,o,!1,i)}function G1(e,t,r,n){for(var i=null,a=yi(e),o=0;o<a.length;o++){var s=a[o];if(Ue(s)==="object"&&s!==null)i===null&&(i=new Set),i.add(s);else if(!t.has(s)){if(r||!U1(e,t,s))return!1;i===null&&(i=new Set),i.add(s)}}if(i!==null){for(var f=yi(t),l=0;l<f.length;l++){var u=f[l];if(Ue(u)==="object"&&u!==null){if(!Uf(i,u,r,n))return!1}else if(!r&&!e.has(u)&&!Uf(i,u,r,n))return!1}return i.size===0}return!0}function jf(e,t,r,n,i,a){for(var o=yi(e),s=0;s<o.length;s++){var f=o[s];if(We(r,f,i,a)&&We(n,t.get(f),i,a))return e.delete(f),!0}return!1}function Z1(e,t,r,n){for(var i=null,a=Bf(e),o=0;o<a.length;o++){var s=Rf(a[o],2),f=s[0],l=s[1];if(Ue(f)==="object"&&f!==null)i===null&&(i=new Set),i.add(f);else{var u=t.get(f);if(u===void 0&&!t.has(f)||!We(l,u,r,n)){if(r||!j1(e,t,f,l,n))return!1;i===null&&(i=new Set),i.add(f)}}}if(i!==null){for(var c=Bf(t),p=0;p<c.length;p++){var h=Rf(c[p],2),f=h[0],y=h[1];if(Ue(f)==="object"&&f!==null){if(!jf(i,e,f,y,r,n))return!1}else if(!r&&(!e.has(f)||!We(e.get(f),y,!1,n))&&!jf(i,e,f,y,!1,n))return!1}return i.size===0}return!0}function q1(e,t,r,n,i,a){var o=0;if(a===qf){if(!G1(e,t,r,i))return!1}else if(a===Vf){if(!Z1(e,t,r,i))return!1}else if(a===Va)for(;o<e.length;o++)if(dn(e,o)){if(!dn(t,o)||!We(e[o],t[o],r,i))return!1}else{if(dn(t,o))return!1;for(var s=Object.keys(e);o<s.length;o++){var f=s[o];if(!dn(t,f)||!We(e[f],t[f],r,i))return!1}return s.length===Object.keys(t).length}for(o=0;o<n.length;o++){var l=n[o];if(!We(e[l],t[l],r,i))return!1}return!0}function V1(e,t){return We(e,t,L1)}function H1(e,t){return We(e,t,F1)}Wf.exports={isDeepEqual:V1,isDeepStrictEqual:H1}});var Or=W((i2,uu)=>{"use strict";function It(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?It=function(r){return typeof r}:It=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},It(e)}function W1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var Y1=Ta(),_n=Y1.codes,$f=_n.ERR_AMBIGUOUS_ARGUMENT,pn=_n.ERR_INVALID_ARG_TYPE,$1=_n.ERR_INVALID_ARG_VALUE,K1=_n.ERR_INVALID_RETURN_VALUE,Tt=_n.ERR_MISSING_ARGS,$t=Gl(),X1=De(),J1=X1.inspect,Qf=De().types,Q1=Qf.isPromise,Ha=Qf.isRegExp,e_=Object.assign?Object.assign:Vl().assign,eu=Object.is?Object.is:za(),kt,gi;function mn(){var e=Yf();kt=e.isDeepEqual,gi=e.isDeepStrictEqual}var Kf=!1,pe=uu.exports=Wa,bi={};function rt(e){throw e.message instanceof Error?e.message:new $t(e)}function tu(e,t,r,n,i){var a=arguments.length,o;if(a===0)o="Failed";else if(a===1)r=e,e=void 0;else{if(Kf===!1){Kf=!0;var s=process.emitWarning?process.emitWarning:console.warn.bind(console);s("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}a===2&&(n="!=")}if(r instanceof Error)throw r;var f={actual:e,expected:t,operator:n===void 0?"fail":n,stackStartFn:i||tu};r!==void 0&&(f.message=r);var l=new $t(f);throw o&&(l.message=o,l.generatedMessage=!0),l}pe.fail=tu;pe.AssertionError=$t;function ru(e,t,r,n){if(!r){var i=!1;if(t===0)i=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var a=new $t({actual:r,expected:!0,message:n,operator:"==",stackStartFn:e});throw a.generatedMessage=i,a}}function Wa(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];ru.apply(void 0,[Wa,t.length].concat(t))}pe.ok=Wa;pe.equal=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");t!=r&&rt({actual:t,expected:r,message:n,operator:"==",stackStartFn:e})};pe.notEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");t==r&&rt({actual:t,expected:r,message:n,operator:"!=",stackStartFn:e})};pe.deepEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&mn(),kt(t,r)||rt({actual:t,expected:r,message:n,operator:"deepEqual",stackStartFn:e})};pe.notDeepEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&mn(),kt(t,r)&&rt({actual:t,expected:r,message:n,operator:"notDeepEqual",stackStartFn:e})};pe.deepStrictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&mn(),gi(t,r)||rt({actual:t,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:e})};pe.notDeepStrictEqual=nu;function nu(e,t,r){if(arguments.length<2)throw new Tt("actual","expected");kt===void 0&&mn(),gi(e,t)&&rt({actual:e,expected:t,message:r,operator:"notDeepStrictEqual",stackStartFn:nu})}pe.strictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");eu(t,r)||rt({actual:t,expected:r,message:n,operator:"strictEqual",stackStartFn:e})};pe.notStrictEqual=function e(t,r,n){if(arguments.length<2)throw new Tt("actual","expected");eu(t,r)&&rt({actual:t,expected:r,message:n,operator:"notStrictEqual",stackStartFn:e})};var Xf=function e(t,r,n){var i=this;W1(this,e),r.forEach(function(a){a in t&&(n!==void 0&&typeof n[a]=="string"&&Ha(t[a])&&t[a].test(n[a])?i[a]=n[a]:i[a]=t[a])})};function t_(e,t,r,n,i,a){if(!(r in e)||!gi(e[r],t[r])){if(!n){var o=new Xf(e,i),s=new Xf(t,i,e),f=new $t({actual:o,expected:s,operator:"deepStrictEqual",stackStartFn:a});throw f.actual=e,f.expected=t,f.operator=a.name,f}rt({actual:e,expected:t,message:n,operator:a.name,stackStartFn:a})}}function iu(e,t,r,n){if(typeof t!="function"){if(Ha(t))return t.test(e);if(arguments.length===2)throw new pn("expected",["Function","RegExp"],t);if(It(e)!=="object"||e===null){var i=new $t({actual:e,expected:t,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var a=Object.keys(t);if(t instanceof Error)a.push("name","message");else if(a.length===0)throw new $1("error",t,"may not be an empty object");return kt===void 0&&mn(),a.forEach(function(o){typeof e[o]=="string"&&Ha(t[o])&&t[o].test(e[o])||t_(e,t,o,r,a,n)}),!0}return t.prototype!==void 0&&e instanceof t?!0:Error.isPrototypeOf(t)?!1:t.call({},e)===!0}function au(e){if(typeof e!="function")throw new pn("fn","Function",e);try{e()}catch(t){return t}return bi}function Jf(e){return Q1(e)||e!==null&&It(e)==="object"&&typeof e.then=="function"&&typeof e.catch=="function"}function ou(e){return Promise.resolve().then(function(){var t;if(typeof e=="function"){if(t=e(),!Jf(t))throw new K1("instance of Promise","promiseFn",t)}else if(Jf(e))t=e;else throw new pn("promiseFn",["Function","Promise"],e);return Promise.resolve().then(function(){return t}).then(function(){return bi}).catch(function(r){return r})})}function su(e,t,r,n){if(typeof r=="string"){if(arguments.length===4)throw new pn("error",["Object","Error","Function","RegExp"],r);if(It(t)==="object"&&t!==null){if(t.message===r)throw new $f("error/message",'The error message "'.concat(t.message,'" is identical to the message.'))}else if(t===r)throw new $f("error/message",'The error "'.concat(t,'" is identical to the message.'));n=r,r=void 0}else if(r!=null&&It(r)!=="object"&&typeof r!="function")throw new pn("error",["Object","Error","Function","RegExp"],r);if(t===bi){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a=e.name==="rejects"?"rejection":"exception";rt({actual:void 0,expected:r,operator:e.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:e})}if(r&&!iu(t,r,n,e))throw t}function lu(e,t,r,n){if(t!==bi){if(typeof r=="string"&&(n=r,r=void 0),!r||iu(t,r)){var i=n?": ".concat(n):".",a=e.name==="doesNotReject"?"rejection":"exception";rt({actual:t,expected:r,operator:e.name,message:"Got unwanted ".concat(a).concat(i,`
`)+'Actual message: "'.concat(t&&t.message,'"'),stackStartFn:e})}throw t}}pe.throws=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];su.apply(void 0,[e,au(t)].concat(n))};pe.rejects=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return ou(t).then(function(a){return su.apply(void 0,[e,a].concat(n))})};pe.doesNotThrow=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];lu.apply(void 0,[e,au(t)].concat(n))};pe.doesNotReject=function e(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return ou(t).then(function(a){return lu.apply(void 0,[e,a].concat(n))})};pe.ifError=function e(t){if(t!=null){var r="ifError got unwanted exception: ";It(t)==="object"&&typeof t.message=="string"?t.message.length===0&&t.constructor?r+=t.constructor.name:r+=t.message:r+=J1(t);var n=new $t({actual:t,expected:null,operator:"ifError",message:r,stackStartFn:e}),i=t.stack;if(typeof i=="string"){var a=i.split(`
`);a.shift();for(var o=n.stack.split(`
`),s=0;s<a.length;s++){var f=o.indexOf(a[s]);if(f!==-1){o=o.slice(0,f);break}}n.stack="".concat(o.join(`
`),`
`).concat(a.join(`
`))}throw n}};function fu(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];ru.apply(void 0,[fu,t.length].concat(t))}pe.strict=e_(fu,pe,{equal:pe.strictEqual,deepEqual:pe.deepStrictEqual,notEqual:pe.notStrictEqual,notDeepEqual:pe.notDeepStrictEqual});pe.strict.strict=pe.strict});var hu=W((a2,cu)=>{"use strict";function r_(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}cu.exports=r_});var yn=W(Ce=>{"use strict";var n_=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function i_(e,t){return Object.prototype.hasOwnProperty.call(e,t)}Ce.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(typeof r!="object")throw new TypeError(r+"must be non-object");for(var n in r)i_(r,n)&&(e[n]=r[n])}}return e};Ce.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var a_={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray){e.set(t.subarray(r,r+n),i);return}for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){var t,r,n,i,a,o;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),i=0,t=0,r=e.length;t<r;t++)a=e[t],o.set(a,i),i+=a.length;return o}},o_={arraySet:function(e,t,r,n,i){for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){return[].concat.apply([],e)}};Ce.setTyped=function(e){e?(Ce.Buf8=Uint8Array,Ce.Buf16=Uint16Array,Ce.Buf32=Int32Array,Ce.assign(Ce,a_)):(Ce.Buf8=Array,Ce.Buf16=Array,Ce.Buf32=Array,Ce.assign(Ce,o_))};Ce.setTyped(n_)});var Nu=W(Fr=>{"use strict";var s_=yn(),l_=4,du=0,pu=1,f_=2;function Cr(e){for(var t=e.length;--t>=0;)e[t]=0}var u_=0,wu=1,c_=2,h_=3,d_=258,eo=29,En=256,bn=En+1+eo,Br=30,to=19,vu=2*bn+1,Kt=15,Ya=16,p_=7,ro=256,xu=16,Eu=17,Au=18,Ja=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],wi=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],__=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Su=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],m_=512,vt=new Array((bn+2)*2);Cr(vt);var gn=new Array(Br*2);Cr(gn);var wn=new Array(m_);Cr(wn);var vn=new Array(d_-h_+1);Cr(vn);var no=new Array(eo);Cr(no);var vi=new Array(Br);Cr(vi);function $a(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}var Iu,ku,Tu;function Ka(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function Ou(e){return e<256?wn[e]:wn[256+(e>>>7)]}function xn(e,t){e.pending_buf[e.pending++]=t&255,e.pending_buf[e.pending++]=t>>>8&255}function Me(e,t,r){e.bi_valid>Ya-r?(e.bi_buf|=t<<e.bi_valid&65535,xn(e,e.bi_buf),e.bi_buf=t>>Ya-e.bi_valid,e.bi_valid+=r-Ya):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function ht(e,t,r){Me(e,r[t*2],r[t*2+1])}function Ru(e,t){var r=0;do r|=e&1,e>>>=1,r<<=1;while(--t>0);return r>>>1}function y_(e){e.bi_valid===16?(xn(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)}function g_(e,t){var r=t.dyn_tree,n=t.max_code,i=t.stat_desc.static_tree,a=t.stat_desc.has_stree,o=t.stat_desc.extra_bits,s=t.stat_desc.extra_base,f=t.stat_desc.max_length,l,u,c,p,h,y,m=0;for(p=0;p<=Kt;p++)e.bl_count[p]=0;for(r[e.heap[e.heap_max]*2+1]=0,l=e.heap_max+1;l<vu;l++)u=e.heap[l],p=r[r[u*2+1]*2+1]+1,p>f&&(p=f,m++),r[u*2+1]=p,!(u>n)&&(e.bl_count[p]++,h=0,u>=s&&(h=o[u-s]),y=r[u*2],e.opt_len+=y*(p+h),a&&(e.static_len+=y*(i[u*2+1]+h)));if(m!==0){do{for(p=f-1;e.bl_count[p]===0;)p--;e.bl_count[p]--,e.bl_count[p+1]+=2,e.bl_count[f]--,m-=2}while(m>0);for(p=f;p!==0;p--)for(u=e.bl_count[p];u!==0;)c=e.heap[--l],!(c>n)&&(r[c*2+1]!==p&&(e.opt_len+=(p-r[c*2+1])*r[c*2],r[c*2+1]=p),u--)}}function Bu(e,t,r){var n=new Array(Kt+1),i=0,a,o;for(a=1;a<=Kt;a++)n[a]=i=i+r[a-1]<<1;for(o=0;o<=t;o++){var s=e[o*2+1];s!==0&&(e[o*2]=Ru(n[s]++,s))}}function b_(){var e,t,r,n,i,a=new Array(Kt+1);for(r=0,n=0;n<eo-1;n++)for(no[n]=r,e=0;e<1<<Ja[n];e++)vn[r++]=n;for(vn[r-1]=n,i=0,n=0;n<16;n++)for(vi[n]=i,e=0;e<1<<wi[n];e++)wn[i++]=n;for(i>>=7;n<Br;n++)for(vi[n]=i<<7,e=0;e<1<<wi[n]-7;e++)wn[256+i++]=n;for(t=0;t<=Kt;t++)a[t]=0;for(e=0;e<=143;)vt[e*2+1]=8,e++,a[8]++;for(;e<=255;)vt[e*2+1]=9,e++,a[9]++;for(;e<=279;)vt[e*2+1]=7,e++,a[7]++;for(;e<=287;)vt[e*2+1]=8,e++,a[8]++;for(Bu(vt,bn+1,a),e=0;e<Br;e++)gn[e*2+1]=5,gn[e*2]=Ru(e,5);Iu=new $a(vt,Ja,En+1,bn,Kt),ku=new $a(gn,wi,0,Br,Kt),Tu=new $a(new Array(0),__,0,to,p_)}function Cu(e){var t;for(t=0;t<bn;t++)e.dyn_ltree[t*2]=0;for(t=0;t<Br;t++)e.dyn_dtree[t*2]=0;for(t=0;t<to;t++)e.bl_tree[t*2]=0;e.dyn_ltree[ro*2]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Fu(e){e.bi_valid>8?xn(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function w_(e,t,r,n){Fu(e),n&&(xn(e,r),xn(e,~r)),s_.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}function _u(e,t,r,n){var i=t*2,a=r*2;return e[i]<e[a]||e[i]===e[a]&&n[t]<=n[r]}function Xa(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&_u(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!_u(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function mu(e,t,r){var n,i,a=0,o,s;if(e.last_lit!==0)do n=e.pending_buf[e.d_buf+a*2]<<8|e.pending_buf[e.d_buf+a*2+1],i=e.pending_buf[e.l_buf+a],a++,n===0?ht(e,i,t):(o=vn[i],ht(e,o+En+1,t),s=Ja[o],s!==0&&(i-=no[o],Me(e,i,s)),n--,o=Ou(n),ht(e,o,r),s=wi[o],s!==0&&(n-=vi[o],Me(e,n,s)));while(a<e.last_lit);ht(e,ro,t)}function Qa(e,t){var r=t.dyn_tree,n=t.stat_desc.static_tree,i=t.stat_desc.has_stree,a=t.stat_desc.elems,o,s,f=-1,l;for(e.heap_len=0,e.heap_max=vu,o=0;o<a;o++)r[o*2]!==0?(e.heap[++e.heap_len]=f=o,e.depth[o]=0):r[o*2+1]=0;for(;e.heap_len<2;)l=e.heap[++e.heap_len]=f<2?++f:0,r[l*2]=1,e.depth[l]=0,e.opt_len--,i&&(e.static_len-=n[l*2+1]);for(t.max_code=f,o=e.heap_len>>1;o>=1;o--)Xa(e,r,o);l=a;do o=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Xa(e,r,1),s=e.heap[1],e.heap[--e.heap_max]=o,e.heap[--e.heap_max]=s,r[l*2]=r[o*2]+r[s*2],e.depth[l]=(e.depth[o]>=e.depth[s]?e.depth[o]:e.depth[s])+1,r[o*2+1]=r[s*2+1]=l,e.heap[1]=l++,Xa(e,r,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],g_(e,t),Bu(r,f,e.bl_count)}function yu(e,t,r){var n,i=-1,a,o=t[0*2+1],s=0,f=7,l=4;for(o===0&&(f=138,l=3),t[(r+1)*2+1]=65535,n=0;n<=r;n++)a=o,o=t[(n+1)*2+1],!(++s<f&&a===o)&&(s<l?e.bl_tree[a*2]+=s:a!==0?(a!==i&&e.bl_tree[a*2]++,e.bl_tree[xu*2]++):s<=10?e.bl_tree[Eu*2]++:e.bl_tree[Au*2]++,s=0,i=a,o===0?(f=138,l=3):a===o?(f=6,l=3):(f=7,l=4))}function gu(e,t,r){var n,i=-1,a,o=t[0*2+1],s=0,f=7,l=4;for(o===0&&(f=138,l=3),n=0;n<=r;n++)if(a=o,o=t[(n+1)*2+1],!(++s<f&&a===o)){if(s<l)do ht(e,a,e.bl_tree);while(--s!==0);else a!==0?(a!==i&&(ht(e,a,e.bl_tree),s--),ht(e,xu,e.bl_tree),Me(e,s-3,2)):s<=10?(ht(e,Eu,e.bl_tree),Me(e,s-3,3)):(ht(e,Au,e.bl_tree),Me(e,s-11,7));s=0,i=a,o===0?(f=138,l=3):a===o?(f=6,l=3):(f=7,l=4)}}function v_(e){var t;for(yu(e,e.dyn_ltree,e.l_desc.max_code),yu(e,e.dyn_dtree,e.d_desc.max_code),Qa(e,e.bl_desc),t=to-1;t>=3&&e.bl_tree[Su[t]*2+1]===0;t--);return e.opt_len+=3*(t+1)+5+5+4,t}function x_(e,t,r,n){var i;for(Me(e,t-257,5),Me(e,r-1,5),Me(e,n-4,4),i=0;i<n;i++)Me(e,e.bl_tree[Su[i]*2+1],3);gu(e,e.dyn_ltree,t-1),gu(e,e.dyn_dtree,r-1)}function E_(e){var t=4093624447,r;for(r=0;r<=31;r++,t>>>=1)if(t&1&&e.dyn_ltree[r*2]!==0)return du;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return pu;for(r=32;r<En;r++)if(e.dyn_ltree[r*2]!==0)return pu;return du}var bu=!1;function A_(e){bu||(b_(),bu=!0),e.l_desc=new Ka(e.dyn_ltree,Iu),e.d_desc=new Ka(e.dyn_dtree,ku),e.bl_desc=new Ka(e.bl_tree,Tu),e.bi_buf=0,e.bi_valid=0,Cu(e)}function Lu(e,t,r,n){Me(e,(u_<<1)+(n?1:0),3),w_(e,t,r,!0)}function S_(e){Me(e,wu<<1,3),ht(e,ro,vt),y_(e)}function I_(e,t,r,n){var i,a,o=0;e.level>0?(e.strm.data_type===f_&&(e.strm.data_type=E_(e)),Qa(e,e.l_desc),Qa(e,e.d_desc),o=v_(e),i=e.opt_len+3+7>>>3,a=e.static_len+3+7>>>3,a<=i&&(i=a)):i=a=r+5,r+4<=i&&t!==-1?Lu(e,t,r,n):e.strategy===l_||a===i?(Me(e,(wu<<1)+(n?1:0),3),mu(e,vt,gn)):(Me(e,(c_<<1)+(n?1:0),3),x_(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),mu(e,e.dyn_ltree,e.dyn_dtree)),Cu(e),n&&Fu(e)}function k_(e,t,r){return e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255,e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255,e.pending_buf[e.l_buf+e.last_lit]=r&255,e.last_lit++,t===0?e.dyn_ltree[r*2]++:(e.matches++,t--,e.dyn_ltree[(vn[r]+En+1)*2]++,e.dyn_dtree[Ou(t)*2]++),e.last_lit===e.lit_bufsize-1}Fr._tr_init=A_;Fr._tr_stored_block=Lu;Fr._tr_flush_block=I_;Fr._tr_tally=k_;Fr._tr_align=S_});var io=W((l2,Pu)=>{"use strict";function T_(e,t,r,n){for(var i=e&65535|0,a=e>>>16&65535|0,o=0;r!==0;){o=r>2e3?2e3:r,r-=o;do i=i+t[n++]|0,a=a+i|0;while(--o);i%=65521,a%=65521}return i|a<<16|0}Pu.exports=T_});var ao=W((f2,Mu)=>{"use strict";function O_(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;t[r]=e}return t}var R_=O_();function B_(e,t,r,n){var i=R_,a=n+r;e^=-1;for(var o=n;o<a;o++)e=e>>>8^i[(e^t[o])&255];return e^-1}Mu.exports=B_});var zu=W((u2,Du)=>{"use strict";Du.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}});var Yu=W(_t=>{"use strict";var Fe=yn(),Ye=Nu(),Zu=io(),Ot=ao(),C_=zu(),er=0,F_=1,L_=3,Lt=4,Uu=5,pt=0,ju=1,$e=-2,N_=-3,oo=-5,P_=-1,M_=1,xi=2,D_=3,z_=4,U_=0,j_=2,Ii=8,G_=9,Z_=15,q_=8,V_=29,H_=256,lo=H_+1+V_,W_=30,Y_=19,$_=2*lo+1,K_=15,se=3,Ct=258,nt=Ct+se+1,X_=32,ki=42,fo=69,Ei=73,Ai=91,Si=103,Xt=113,Sn=666,ve=1,In=2,Jt=3,Pr=4,J_=3;function Ft(e,t){return e.msg=C_[t],t}function Gu(e){return(e<<1)-(e>4?9:0)}function Bt(e){for(var t=e.length;--t>=0;)e[t]=0}function Rt(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),r!==0&&(Fe.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,t.pending===0&&(t.pending_out=0))}function ke(e,t){Ye._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Rt(e.strm)}function ue(e,t){e.pending_buf[e.pending++]=t}function An(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=t&255}function Q_(e,t,r,n){var i=e.avail_in;return i>n&&(i=n),i===0?0:(e.avail_in-=i,Fe.arraySet(t,e.input,e.next_in,i,r),e.state.wrap===1?e.adler=Zu(e.adler,t,i,r):e.state.wrap===2&&(e.adler=Ot(e.adler,t,i,r)),e.next_in+=i,e.total_in+=i,i)}function qu(e,t){var r=e.max_chain_length,n=e.strstart,i,a,o=e.prev_length,s=e.nice_match,f=e.strstart>e.w_size-nt?e.strstart-(e.w_size-nt):0,l=e.window,u=e.w_mask,c=e.prev,p=e.strstart+Ct,h=l[n+o-1],y=l[n+o];e.prev_length>=e.good_match&&(r>>=2),s>e.lookahead&&(s=e.lookahead);do if(i=t,!(l[i+o]!==y||l[i+o-1]!==h||l[i]!==l[n]||l[++i]!==l[n+1])){n+=2,i++;do;while(l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&l[++n]===l[++i]&&n<p);if(a=Ct-(p-n),n=p-Ct,a>o){if(e.match_start=t,o=a,a>=s)break;h=l[n+o-1],y=l[n+o]}}while((t=c[t&u])>f&&--r!==0);return o<=e.lookahead?o:e.lookahead}function Qt(e){var t=e.w_size,r,n,i,a,o;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-nt)){Fe.arraySet(e.window,e.window,t,t,0),e.match_start-=t,e.strstart-=t,e.block_start-=t,n=e.hash_size,r=n;do i=e.head[--r],e.head[r]=i>=t?i-t:0;while(--n);n=t,r=n;do i=e.prev[--r],e.prev[r]=i>=t?i-t:0;while(--n);a+=t}if(e.strm.avail_in===0)break;if(n=Q_(e.strm,e.window,e.strstart+e.lookahead,a),e.lookahead+=n,e.lookahead+e.insert>=se)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+se-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<se)););}while(e.lookahead<nt&&e.strm.avail_in!==0)}function em(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Qt(e),e.lookahead===0&&t===er)return ve;if(e.lookahead===0)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((e.strstart===0||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,ke(e,!1),e.strm.avail_out===0)||e.strstart-e.block_start>=e.w_size-nt&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):(e.strstart>e.block_start&&(ke(e,!1),e.strm.avail_out===0),ve)}function so(e,t){for(var r,n;;){if(e.lookahead<nt){if(Qt(e),e.lookahead<nt&&t===er)return ve;if(e.lookahead===0)break}if(r=0,e.lookahead>=se&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),r!==0&&e.strstart-r<=e.w_size-nt&&(e.match_length=qu(e,r)),e.match_length>=se)if(n=Ye._tr_tally(e,e.strstart-e.match_start,e.match_length-se),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=se){e.match_length--;do e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=e.strstart<se-1?e.strstart:se-1,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:In}function Lr(e,t){for(var r,n,i;;){if(e.lookahead<nt){if(Qt(e),e.lookahead<nt&&t===er)return ve;if(e.lookahead===0)break}if(r=0,e.lookahead>=se&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=se-1,r!==0&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-nt&&(e.match_length=qu(e,r),e.match_length<=5&&(e.strategy===M_||e.match_length===se&&e.strstart-e.match_start>4096)&&(e.match_length=se-1)),e.prev_length>=se&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-se,n=Ye._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-se),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+se-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=se-1,e.strstart++,n&&(ke(e,!1),e.strm.avail_out===0))return ve}else if(e.match_available){if(n=Ye._tr_tally(e,0,e.window[e.strstart-1]),n&&ke(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return ve}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Ye._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<se-1?e.strstart:se-1,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:In}function tm(e,t){for(var r,n,i,a,o=e.window;;){if(e.lookahead<=Ct){if(Qt(e),e.lookahead<=Ct&&t===er)return ve;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=se&&e.strstart>0&&(i=e.strstart-1,n=o[i],n===o[++i]&&n===o[++i]&&n===o[++i])){a=e.strstart+Ct;do;while(n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&n===o[++i]&&i<a);e.match_length=Ct-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=se?(r=Ye._tr_tally(e,1,e.match_length-se),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:In}function rm(e,t){for(var r;;){if(e.lookahead===0&&(Qt(e),e.lookahead===0)){if(t===er)return ve;break}if(e.match_length=0,r=Ye._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(ke(e,!1),e.strm.avail_out===0))return ve}return e.insert=0,t===Lt?(ke(e,!0),e.strm.avail_out===0?Jt:Pr):e.last_lit&&(ke(e,!1),e.strm.avail_out===0)?ve:In}function dt(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}var Nr;Nr=[new dt(0,0,0,0,em),new dt(4,4,8,4,so),new dt(4,5,16,8,so),new dt(4,6,32,32,so),new dt(4,4,16,16,Lr),new dt(8,16,32,32,Lr),new dt(8,16,128,128,Lr),new dt(8,32,128,256,Lr),new dt(32,128,258,1024,Lr),new dt(32,258,258,4096,Lr)];function nm(e){e.window_size=2*e.w_size,Bt(e.head),e.max_lazy_match=Nr[e.level].max_lazy,e.good_match=Nr[e.level].good_length,e.nice_match=Nr[e.level].nice_length,e.max_chain_length=Nr[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=se-1,e.match_available=0,e.ins_h=0}function im(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Ii,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Fe.Buf16($_*2),this.dyn_dtree=new Fe.Buf16((2*W_+1)*2),this.bl_tree=new Fe.Buf16((2*Y_+1)*2),Bt(this.dyn_ltree),Bt(this.dyn_dtree),Bt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Fe.Buf16(K_+1),this.heap=new Fe.Buf16(2*lo+1),Bt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Fe.Buf16(2*lo+1),Bt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Vu(e){var t;return!e||!e.state?Ft(e,$e):(e.total_in=e.total_out=0,e.data_type=j_,t=e.state,t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?ki:Xt,e.adler=t.wrap===2?0:1,t.last_flush=er,Ye._tr_init(t),pt)}function Hu(e){var t=Vu(e);return t===pt&&nm(e.state),t}function am(e,t){return!e||!e.state||e.state.wrap!==2?$e:(e.state.gzhead=t,pt)}function Wu(e,t,r,n,i,a){if(!e)return $e;var o=1;if(t===P_&&(t=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),i<1||i>G_||r!==Ii||n<8||n>15||t<0||t>9||a<0||a>z_)return Ft(e,$e);n===8&&(n=9);var s=new im;return e.state=s,s.strm=e,s.wrap=o,s.gzhead=null,s.w_bits=n,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=i+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+se-1)/se),s.window=new Fe.Buf8(s.w_size*2),s.head=new Fe.Buf16(s.hash_size),s.prev=new Fe.Buf16(s.w_size),s.lit_bufsize=1<<i+6,s.pending_buf_size=s.lit_bufsize*4,s.pending_buf=new Fe.Buf8(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=(1+2)*s.lit_bufsize,s.level=t,s.strategy=a,s.method=r,Hu(e)}function om(e,t){return Wu(e,t,Ii,Z_,q_,U_)}function sm(e,t){var r,n,i,a;if(!e||!e.state||t>Uu||t<0)return e?Ft(e,$e):$e;if(n=e.state,!e.output||!e.input&&e.avail_in!==0||n.status===Sn&&t!==Lt)return Ft(e,e.avail_out===0?oo:$e);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===ki)if(n.wrap===2)e.adler=0,ue(n,31),ue(n,139),ue(n,8),n.gzhead?(ue(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),ue(n,n.gzhead.time&255),ue(n,n.gzhead.time>>8&255),ue(n,n.gzhead.time>>16&255),ue(n,n.gzhead.time>>24&255),ue(n,n.level===9?2:n.strategy>=xi||n.level<2?4:0),ue(n,n.gzhead.os&255),n.gzhead.extra&&n.gzhead.extra.length&&(ue(n,n.gzhead.extra.length&255),ue(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Ot(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=fo):(ue(n,0),ue(n,0),ue(n,0),ue(n,0),ue(n,0),ue(n,n.level===9?2:n.strategy>=xi||n.level<2?4:0),ue(n,J_),n.status=Xt);else{var o=Ii+(n.w_bits-8<<4)<<8,s=-1;n.strategy>=xi||n.level<2?s=0:n.level<6?s=1:n.level===6?s=2:s=3,o|=s<<6,n.strstart!==0&&(o|=X_),o+=31-o%31,n.status=Xt,An(n,o),n.strstart!==0&&(An(n,e.adler>>>16),An(n,e.adler&65535)),e.adler=1}if(n.status===fo)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(n.gzhead.extra.length&65535)&&!(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size));)ue(n,n.gzhead.extra[n.gzindex]&255),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=Ei)}else n.status=Ei;if(n.status===Ei)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.name.length?a=n.gzhead.name.charCodeAt(n.gzindex++)&255:a=0,ue(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.gzindex=0,n.status=Ai)}else n.status=Ai;if(n.status===Ai)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),Rt(e),i=n.pending,n.pending===n.pending_buf_size)){a=1;break}n.gzindex<n.gzhead.comment.length?a=n.gzhead.comment.charCodeAt(n.gzindex++)&255:a=0,ue(n,a)}while(a!==0);n.gzhead.hcrc&&n.pending>i&&(e.adler=Ot(e.adler,n.pending_buf,n.pending-i,i)),a===0&&(n.status=Si)}else n.status=Si;if(n.status===Si&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Rt(e),n.pending+2<=n.pending_buf_size&&(ue(n,e.adler&255),ue(n,e.adler>>8&255),e.adler=0,n.status=Xt)):n.status=Xt),n.pending!==0){if(Rt(e),e.avail_out===0)return n.last_flush=-1,pt}else if(e.avail_in===0&&Gu(t)<=Gu(r)&&t!==Lt)return Ft(e,oo);if(n.status===Sn&&e.avail_in!==0)return Ft(e,oo);if(e.avail_in!==0||n.lookahead!==0||t!==er&&n.status!==Sn){var f=n.strategy===xi?rm(n,t):n.strategy===D_?tm(n,t):Nr[n.level].func(n,t);if((f===Jt||f===Pr)&&(n.status=Sn),f===ve||f===Jt)return e.avail_out===0&&(n.last_flush=-1),pt;if(f===In&&(t===F_?Ye._tr_align(n):t!==Uu&&(Ye._tr_stored_block(n,0,0,!1),t===L_&&(Bt(n.head),n.lookahead===0&&(n.strstart=0,n.block_start=0,n.insert=0))),Rt(e),e.avail_out===0))return n.last_flush=-1,pt}return t!==Lt?pt:n.wrap<=0?ju:(n.wrap===2?(ue(n,e.adler&255),ue(n,e.adler>>8&255),ue(n,e.adler>>16&255),ue(n,e.adler>>24&255),ue(n,e.total_in&255),ue(n,e.total_in>>8&255),ue(n,e.total_in>>16&255),ue(n,e.total_in>>24&255)):(An(n,e.adler>>>16),An(n,e.adler&65535)),Rt(e),n.wrap>0&&(n.wrap=-n.wrap),n.pending!==0?pt:ju)}function lm(e){var t;return!e||!e.state?$e:(t=e.state.status,t!==ki&&t!==fo&&t!==Ei&&t!==Ai&&t!==Si&&t!==Xt&&t!==Sn?Ft(e,$e):(e.state=null,t===Xt?Ft(e,N_):pt))}function fm(e,t){var r=t.length,n,i,a,o,s,f,l,u;if(!e||!e.state||(n=e.state,o=n.wrap,o===2||o===1&&n.status!==ki||n.lookahead))return $e;for(o===1&&(e.adler=Zu(e.adler,t,r,0)),n.wrap=0,r>=n.w_size&&(o===0&&(Bt(n.head),n.strstart=0,n.block_start=0,n.insert=0),u=new Fe.Buf8(n.w_size),Fe.arraySet(u,t,r-n.w_size,n.w_size,0),t=u,r=n.w_size),s=e.avail_in,f=e.next_in,l=e.input,e.avail_in=r,e.next_in=0,e.input=t,Qt(n);n.lookahead>=se;){i=n.strstart,a=n.lookahead-(se-1);do n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+se-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++;while(--a);n.strstart=i,n.lookahead=se-1,Qt(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=se-1,n.match_available=0,e.next_in=f,e.input=l,e.avail_in=s,n.wrap=o,pt}_t.deflateInit=om;_t.deflateInit2=Wu;_t.deflateReset=Hu;_t.deflateResetKeep=Vu;_t.deflateSetHeader=am;_t.deflate=sm;_t.deflateEnd=lm;_t.deflateSetDictionary=fm;_t.deflateInfo="pako deflate (from Nodeca project)"});var Ku=W((h2,$u)=>{"use strict";var Ti=30,um=12;$u.exports=function(t,r){var n,i,a,o,s,f,l,u,c,p,h,y,m,g,b,A,x,T,S,L,k,F,Z,E,O;n=t.state,i=t.next_in,E=t.input,a=i+(t.avail_in-5),o=t.next_out,O=t.output,s=o-(r-t.avail_out),f=o+(t.avail_out-257),l=n.dmax,u=n.wsize,c=n.whave,p=n.wnext,h=n.window,y=n.hold,m=n.bits,g=n.lencode,b=n.distcode,A=(1<<n.lenbits)-1,x=(1<<n.distbits)-1;e:do{m<15&&(y+=E[i++]<<m,m+=8,y+=E[i++]<<m,m+=8),T=g[y&A];t:for(;;){if(S=T>>>24,y>>>=S,m-=S,S=T>>>16&255,S===0)O[o++]=T&65535;else if(S&16){L=T&65535,S&=15,S&&(m<S&&(y+=E[i++]<<m,m+=8),L+=y&(1<<S)-1,y>>>=S,m-=S),m<15&&(y+=E[i++]<<m,m+=8,y+=E[i++]<<m,m+=8),T=b[y&x];r:for(;;){if(S=T>>>24,y>>>=S,m-=S,S=T>>>16&255,S&16){if(k=T&65535,S&=15,m<S&&(y+=E[i++]<<m,m+=8,m<S&&(y+=E[i++]<<m,m+=8)),k+=y&(1<<S)-1,k>l){t.msg="invalid distance too far back",n.mode=Ti;break e}if(y>>>=S,m-=S,S=o-s,k>S){if(S=k-S,S>c&&n.sane){t.msg="invalid distance too far back",n.mode=Ti;break e}if(F=0,Z=h,p===0){if(F+=u-S,S<L){L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}}else if(p<S){if(F+=u+p-S,S-=p,S<L){L-=S;do O[o++]=h[F++];while(--S);if(F=0,p<L){S=p,L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}}}else if(F+=p-S,S<L){L-=S;do O[o++]=h[F++];while(--S);F=o-k,Z=O}for(;L>2;)O[o++]=Z[F++],O[o++]=Z[F++],O[o++]=Z[F++],L-=3;L&&(O[o++]=Z[F++],L>1&&(O[o++]=Z[F++]))}else{F=o-k;do O[o++]=O[F++],O[o++]=O[F++],O[o++]=O[F++],L-=3;while(L>2);L&&(O[o++]=O[F++],L>1&&(O[o++]=O[F++]))}}else if(S&64){t.msg="invalid distance code",n.mode=Ti;break e}else{T=b[(T&65535)+(y&(1<<S)-1)];continue r}break}}else if(S&64)if(S&32){n.mode=um;break e}else{t.msg="invalid literal/length code",n.mode=Ti;break e}else{T=g[(T&65535)+(y&(1<<S)-1)];continue t}break}}while(i<a&&o<f);L=m>>3,i-=L,m-=L<<3,y&=(1<<m)-1,t.next_in=i,t.next_out=o,t.avail_in=i<a?5+(a-i):5-(i-a),t.avail_out=o<f?257+(f-o):257-(o-f),n.hold=y,n.bits=m}});var nc=W((d2,rc)=>{"use strict";var Xu=yn(),Mr=15,Ju=852,Qu=592,ec=0,uo=1,tc=2,cm=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],hm=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],dm=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],pm=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];rc.exports=function(t,r,n,i,a,o,s,f){var l=f.bits,u=0,c=0,p=0,h=0,y=0,m=0,g=0,b=0,A=0,x=0,T,S,L,k,F,Z=null,E=0,O,_=new Xu.Buf16(Mr+1),M=new Xu.Buf16(Mr+1),te=null,j=0,ne,G,Q;for(u=0;u<=Mr;u++)_[u]=0;for(c=0;c<i;c++)_[r[n+c]]++;for(y=l,h=Mr;h>=1&&_[h]===0;h--);if(y>h&&(y=h),h===0)return a[o++]=1<<24|64<<16|0,a[o++]=1<<24|64<<16|0,f.bits=1,0;for(p=1;p<h&&_[p]===0;p++);for(y<p&&(y=p),b=1,u=1;u<=Mr;u++)if(b<<=1,b-=_[u],b<0)return-1;if(b>0&&(t===ec||h!==1))return-1;for(M[1]=0,u=1;u<Mr;u++)M[u+1]=M[u]+_[u];for(c=0;c<i;c++)r[n+c]!==0&&(s[M[r[n+c]]++]=c);if(t===ec?(Z=te=s,O=19):t===uo?(Z=cm,E-=257,te=hm,j-=257,O=256):(Z=dm,te=pm,O=-1),x=0,c=0,u=p,F=o,m=y,g=0,L=-1,A=1<<y,k=A-1,t===uo&&A>Ju||t===tc&&A>Qu)return 1;for(;;){ne=u-g,s[c]<O?(G=0,Q=s[c]):s[c]>O?(G=te[j+s[c]],Q=Z[E+s[c]]):(G=32+64,Q=0),T=1<<u-g,S=1<<m,p=S;do S-=T,a[F+(x>>g)+S]=ne<<24|G<<16|Q|0;while(S!==0);for(T=1<<u-1;x&T;)T>>=1;if(T!==0?(x&=T-1,x+=T):x=0,c++,--_[u]===0){if(u===h)break;u=r[n+s[c]]}if(u>y&&(x&k)!==L){for(g===0&&(g=y),F+=p,m=u-g,b=1<<m;m+g<h&&(b-=_[m+g],!(b<=0));)m++,b<<=1;if(A+=1<<m,t===uo&&A>Ju||t===tc&&A>Qu)return 1;L=x&k,a[L]=y<<24|m<<16|F-o|0}}return x!==0&&(a[F+x]=u-g<<24|64<<16|0),f.bits=y,0}});var Dc=W(it=>{"use strict";var je=yn(),yo=io(),mt=ao(),_m=Ku(),kn=nc(),mm=0,Oc=1,Rc=2,ic=4,ym=5,Oi=6,tr=0,gm=1,bm=2,Ke=-2,Bc=-3,go=-4,wm=-5,ac=8,Cc=1,oc=2,sc=3,lc=4,fc=5,uc=6,cc=7,hc=8,dc=9,pc=10,Ci=11,xt=12,co=13,_c=14,ho=15,mc=16,yc=17,gc=18,bc=19,Ri=20,Bi=21,wc=22,vc=23,xc=24,Ec=25,Ac=26,po=27,Sc=28,Ic=29,_e=30,bo=31,vm=32,xm=852,Em=592,Am=15,Sm=Am;function kc(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function Im(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new je.Buf16(320),this.work=new je.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Fc(e){var t;return!e||!e.state?Ke:(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=t.wrap&1),t.mode=Cc,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new je.Buf32(xm),t.distcode=t.distdyn=new je.Buf32(Em),t.sane=1,t.back=-1,tr)}function Lc(e){var t;return!e||!e.state?Ke:(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,Fc(e))}function Nc(e,t){var r,n;return!e||!e.state||(n=e.state,t<0?(r=0,t=-t):(r=(t>>4)+1,t<48&&(t&=15)),t&&(t<8||t>15))?Ke:(n.window!==null&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,Lc(e))}function Pc(e,t){var r,n;return e?(n=new Im,e.state=n,n.window=null,r=Nc(e,t),r!==tr&&(e.state=null),r):Ke}function km(e){return Pc(e,Sm)}var Tc=!0,_o,mo;function Tm(e){if(Tc){var t;for(_o=new je.Buf32(512),mo=new je.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(kn(Oc,e.lens,0,288,_o,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;kn(Rc,e.lens,0,32,mo,0,e.work,{bits:5}),Tc=!1}e.lencode=_o,e.lenbits=9,e.distcode=mo,e.distbits=5}function Mc(e,t,r,n){var i,a=e.state;return a.window===null&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new je.Buf8(a.wsize)),n>=a.wsize?(je.arraySet(a.window,t,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i=a.wsize-a.wnext,i>n&&(i=n),je.arraySet(a.window,t,r-n,i,a.wnext),n-=i,n?(je.arraySet(a.window,t,r-n,n,0),a.wnext=n,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0}function Om(e,t){var r,n,i,a,o,s,f,l,u,c,p,h,y,m,g=0,b,A,x,T,S,L,k,F,Z=new je.Buf8(4),E,O,_=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0)return Ke;r=e.state,r.mode===xt&&(r.mode=co),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,c=s,p=f,F=tr;e:for(;;)switch(r.mode){case Cc:if(r.wrap===0){r.mode=co;break}for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.wrap&2&&l===35615){r.check=0,Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0),l=0,u=0,r.mode=oc;break}if(r.flags=0,r.head&&(r.head.done=!1),!(r.wrap&1)||(((l&255)<<8)+(l>>8))%31){e.msg="incorrect header check",r.mode=_e;break}if((l&15)!==ac){e.msg="unknown compression method",r.mode=_e;break}if(l>>>=4,u-=4,k=(l&15)+8,r.wbits===0)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=_e;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=l&512?pc:xt,l=0,u=0;break;case oc:for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.flags=l,(r.flags&255)!==ac){e.msg="unknown compression method",r.mode=_e;break}if(r.flags&57344){e.msg="unknown header flags set",r.mode=_e;break}r.head&&(r.head.text=l>>8&1),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0,r.mode=sc;case sc:for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.time=l),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,Z[2]=l>>>16&255,Z[3]=l>>>24&255,r.check=mt(r.check,Z,4,0)),l=0,u=0,r.mode=lc;case lc:for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.xflags=l&255,r.head.os=l>>8),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0,r.mode=fc;case fc:if(r.flags&1024){for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),r.flags&512&&(Z[0]=l&255,Z[1]=l>>>8&255,r.check=mt(r.check,Z,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=uc;case uc:if(r.flags&1024&&(h=r.length,h>s&&(h=s),h&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),je.arraySet(r.head.extra,n,a,h,k)),r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,r.length-=h),r.length))break e;r.length=0,r.mode=cc;case cc:if(r.flags&2048){if(s===0)break e;h=0;do k=n[a+h++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k));while(k&&h<s);if(r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=hc;case hc:if(r.flags&4096){if(s===0)break e;h=0;do k=n[a+h++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k));while(k&&h<s);if(r.flags&512&&(r.check=mt(r.check,n,h,a)),s-=h,a+=h,k)break e}else r.head&&(r.head.comment=null);r.mode=dc;case dc:if(r.flags&512){for(;u<16;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(r.check&65535)){e.msg="header crc mismatch",r.mode=_e;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=xt;break;case pc:for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}e.adler=r.check=kc(l),l=0,u=0,r.mode=Ci;case Ci:if(r.havedict===0)return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,bm;e.adler=r.check=1,r.mode=xt;case xt:if(t===ym||t===Oi)break e;case co:if(r.last){l>>>=u&7,u-=u&7,r.mode=po;break}for(;u<3;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}switch(r.last=l&1,l>>>=1,u-=1,l&3){case 0:r.mode=_c;break;case 1:if(Tm(r),r.mode=Ri,t===Oi){l>>>=2,u-=2;break e}break;case 2:r.mode=yc;break;case 3:e.msg="invalid block type",r.mode=_e}l>>>=2,u-=2;break;case _c:for(l>>>=u&7,u-=u&7;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if((l&65535)!==(l>>>16^65535)){e.msg="invalid stored block lengths",r.mode=_e;break}if(r.length=l&65535,l=0,u=0,r.mode=ho,t===Oi)break e;case ho:r.mode=mc;case mc:if(h=r.length,h){if(h>s&&(h=s),h>f&&(h=f),h===0)break e;je.arraySet(i,n,a,h,o),s-=h,a+=h,f-=h,o+=h,r.length-=h;break}r.mode=xt;break;case yc:for(;u<14;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(r.nlen=(l&31)+257,l>>>=5,u-=5,r.ndist=(l&31)+1,l>>>=5,u-=5,r.ncode=(l&15)+4,l>>>=4,u-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=_e;break}r.have=0,r.mode=gc;case gc:for(;r.have<r.ncode;){for(;u<3;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.lens[_[r.have++]]=l&7,l>>>=3,u-=3}for(;r.have<19;)r.lens[_[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,E={bits:r.lenbits},F=kn(mm,r.lens,0,19,r.lencode,0,r.work,E),r.lenbits=E.bits,F){e.msg="invalid code lengths set",r.mode=_e;break}r.have=0,r.mode=bc;case bc:for(;r.have<r.nlen+r.ndist;){for(;g=r.lencode[l&(1<<r.lenbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(x<16)l>>>=b,u-=b,r.lens[r.have++]=x;else{if(x===16){for(O=b+2;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l>>>=b,u-=b,r.have===0){e.msg="invalid bit length repeat",r.mode=_e;break}k=r.lens[r.have-1],h=3+(l&3),l>>>=2,u-=2}else if(x===17){for(O=b+3;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=b,u-=b,k=0,h=3+(l&7),l>>>=3,u-=3}else{for(O=b+7;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=b,u-=b,k=0,h=11+(l&127),l>>>=7,u-=7}if(r.have+h>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=_e;break}for(;h--;)r.lens[r.have++]=k}}if(r.mode===_e)break;if(r.lens[256]===0){e.msg="invalid code -- missing end-of-block",r.mode=_e;break}if(r.lenbits=9,E={bits:r.lenbits},F=kn(Oc,r.lens,0,r.nlen,r.lencode,0,r.work,E),r.lenbits=E.bits,F){e.msg="invalid literal/lengths set",r.mode=_e;break}if(r.distbits=6,r.distcode=r.distdyn,E={bits:r.distbits},F=kn(Rc,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,E),r.distbits=E.bits,F){e.msg="invalid distances set",r.mode=_e;break}if(r.mode=Ri,t===Oi)break e;case Ri:r.mode=Bi;case Bi:if(s>=6&&f>=258){e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,_m(e,p),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,r.mode===xt&&(r.back=-1);break}for(r.back=0;g=r.lencode[l&(1<<r.lenbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(A&&!(A&240)){for(T=b,S=A,L=x;g=r.lencode[L+((l&(1<<T+S)-1)>>T)],b=g>>>24,A=g>>>16&255,x=g&65535,!(T+b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=T,u-=T,r.back+=T}if(l>>>=b,u-=b,r.back+=b,r.length=x,A===0){r.mode=Ac;break}if(A&32){r.back=-1,r.mode=xt;break}if(A&64){e.msg="invalid literal/length code",r.mode=_e;break}r.extra=A&15,r.mode=wc;case wc:if(r.extra){for(O=r.extra;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=vc;case vc:for(;g=r.distcode[l&(1<<r.distbits)-1],b=g>>>24,A=g>>>16&255,x=g&65535,!(b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(!(A&240)){for(T=b,S=A,L=x;g=r.distcode[L+((l&(1<<T+S)-1)>>T)],b=g>>>24,A=g>>>16&255,x=g&65535,!(T+b<=u);){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}l>>>=T,u-=T,r.back+=T}if(l>>>=b,u-=b,r.back+=b,A&64){e.msg="invalid distance code",r.mode=_e;break}r.offset=x,r.extra=A&15,r.mode=xc;case xc:if(r.extra){for(O=r.extra;u<O;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=_e;break}r.mode=Ec;case Ec:if(f===0)break e;if(h=p-f,r.offset>h){if(h=r.offset-h,h>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=_e;break}h>r.wnext?(h-=r.wnext,y=r.wsize-h):y=r.wnext-h,h>r.length&&(h=r.length),m=r.window}else m=i,y=o-r.offset,h=r.length;h>f&&(h=f),f-=h,r.length-=h;do i[o++]=m[y++];while(--h);r.length===0&&(r.mode=Bi);break;case Ac:if(f===0)break e;i[o++]=r.length,f--,r.mode=Bi;break;case po:if(r.wrap){for(;u<32;){if(s===0)break e;s--,l|=n[a++]<<u,u+=8}if(p-=f,e.total_out+=p,r.total+=p,p&&(e.adler=r.check=r.flags?mt(r.check,i,p,o-p):yo(r.check,i,p,o-p)),p=f,(r.flags?l:kc(l))!==r.check){e.msg="incorrect data check",r.mode=_e;break}l=0,u=0}r.mode=Sc;case Sc:if(r.wrap&&r.flags){for(;u<32;){if(s===0)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(r.total&4294967295)){e.msg="incorrect length check",r.mode=_e;break}l=0,u=0}r.mode=Ic;case Ic:F=gm;break e;case _e:F=Bc;break e;case bo:return go;case vm:default:return Ke}return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,(r.wsize||p!==e.avail_out&&r.mode<_e&&(r.mode<po||t!==ic))&&Mc(e,e.output,e.next_out,p-e.avail_out)?(r.mode=bo,go):(c-=e.avail_in,p-=e.avail_out,e.total_in+=c,e.total_out+=p,r.total+=p,r.wrap&&p&&(e.adler=r.check=r.flags?mt(r.check,i,p,e.next_out-p):yo(r.check,i,p,e.next_out-p)),e.data_type=r.bits+(r.last?64:0)+(r.mode===xt?128:0)+(r.mode===Ri||r.mode===ho?256:0),(c===0&&p===0||t===ic)&&F===tr&&(F=wm),F)}function Rm(e){if(!e||!e.state)return Ke;var t=e.state;return t.window&&(t.window=null),e.state=null,tr}function Bm(e,t){var r;return!e||!e.state||(r=e.state,!(r.wrap&2))?Ke:(r.head=t,t.done=!1,tr)}function Cm(e,t){var r=t.length,n,i,a;return!e||!e.state||(n=e.state,n.wrap!==0&&n.mode!==Ci)?Ke:n.mode===Ci&&(i=1,i=yo(i,t,r,0),i!==n.check)?Bc:(a=Mc(e,t,r,r),a?(n.mode=bo,go):(n.havedict=1,tr))}it.inflateReset=Lc;it.inflateReset2=Nc;it.inflateResetKeep=Fc;it.inflateInit=km;it.inflateInit2=Pc;it.inflate=Om;it.inflateEnd=Rm;it.inflateGetHeader=Bm;it.inflateSetDictionary=Cm;it.inflateInfo="pako inflate (from Nodeca project)"});var Uc=W((_2,zc)=>{"use strict";zc.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}});var Gc=W(H=>{"use strict";var Ge=Or(),Fm=hu(),Tn=Yu(),rr=Dc(),jc=Uc();for(wo in jc)H[wo]=jc[wo];var wo;H.NONE=0;H.DEFLATE=1;H.INFLATE=2;H.GZIP=3;H.GUNZIP=4;H.DEFLATERAW=5;H.INFLATERAW=6;H.UNZIP=7;var Lm=31,Nm=139;function Oe(e){if(typeof e!="number"||e<H.DEFLATE||e>H.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=e,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}Oe.prototype.close=function(){if(this.write_in_progress){this.pending_close=!0;return}this.pending_close=!1,Ge(this.init_done,"close before init"),Ge(this.mode<=H.UNZIP),this.mode===H.DEFLATE||this.mode===H.GZIP||this.mode===H.DEFLATERAW?Tn.deflateEnd(this.strm):(this.mode===H.INFLATE||this.mode===H.GUNZIP||this.mode===H.INFLATERAW||this.mode===H.UNZIP)&&rr.inflateEnd(this.strm),this.mode=H.NONE,this.dictionary=null};Oe.prototype.write=function(e,t,r,n,i,a,o){return this._write(!0,e,t,r,n,i,a,o)};Oe.prototype.writeSync=function(e,t,r,n,i,a,o){return this._write(!1,e,t,r,n,i,a,o)};Oe.prototype._write=function(e,t,r,n,i,a,o,s){if(Ge.equal(arguments.length,8),Ge(this.init_done,"write before init"),Ge(this.mode!==H.NONE,"already finalized"),Ge.equal(!1,this.write_in_progress,"write already in progress"),Ge.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,Ge.equal(!1,t===void 0,"must provide flush value"),this.write_in_progress=!0,t!==H.Z_NO_FLUSH&&t!==H.Z_PARTIAL_FLUSH&&t!==H.Z_SYNC_FLUSH&&t!==H.Z_FULL_FLUSH&&t!==H.Z_FINISH&&t!==H.Z_BLOCK)throw new Error("Invalid flush value");if(r==null&&(r=Buffer.alloc(0),i=0,n=0),this.strm.avail_in=i,this.strm.input=r,this.strm.next_in=n,this.strm.avail_out=s,this.strm.output=a,this.strm.next_out=o,this.flush=t,!e)return this._process(),this._checkError()?this._afterSync():void 0;var f=this;return process.nextTick(function(){f._process(),f._after()}),this};Oe.prototype._afterSync=function(){var e=this.strm.avail_out,t=this.strm.avail_in;return this.write_in_progress=!1,[t,e]};Oe.prototype._process=function(){var e=null;switch(this.mode){case H.DEFLATE:case H.GZIP:case H.DEFLATERAW:this.err=Tn.deflate(this.strm,this.flush);break;case H.UNZIP:switch(this.strm.avail_in>0&&(e=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(e===null)break;if(this.strm.input[e]===Lm){if(this.gzip_id_bytes_read=1,e++,this.strm.avail_in===1)break}else{this.mode=H.INFLATE;break}case 1:if(e===null)break;this.strm.input[e]===Nm?(this.gzip_id_bytes_read=2,this.mode=H.GUNZIP):this.mode=H.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case H.INFLATE:case H.GUNZIP:case H.INFLATERAW:for(this.err=rr.inflate(this.strm,this.flush),this.err===H.Z_NEED_DICT&&this.dictionary&&(this.err=rr.inflateSetDictionary(this.strm,this.dictionary),this.err===H.Z_OK?this.err=rr.inflate(this.strm,this.flush):this.err===H.Z_DATA_ERROR&&(this.err=H.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===H.GUNZIP&&this.err===H.Z_STREAM_END&&this.strm.next_in[0]!==0;)this.reset(),this.err=rr.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}};Oe.prototype._checkError=function(){switch(this.err){case H.Z_OK:case H.Z_BUF_ERROR:if(this.strm.avail_out!==0&&this.flush===H.Z_FINISH)return this._error("unexpected end of file"),!1;break;case H.Z_STREAM_END:break;case H.Z_NEED_DICT:return this.dictionary==null?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0};Oe.prototype._after=function(){if(this._checkError()){var e=this.strm.avail_out,t=this.strm.avail_in;this.write_in_progress=!1,this.callback(t,e),this.pending_close&&this.close()}};Oe.prototype._error=function(e){this.strm.msg&&(e=this.strm.msg),this.onerror(e,this.err),this.write_in_progress=!1,this.pending_close&&this.close()};Oe.prototype.init=function(e,t,r,n,i){Ge(arguments.length===4||arguments.length===5,"init(windowBits, level, memLevel, strategy, [dictionary])"),Ge(e>=8&&e<=15,"invalid windowBits"),Ge(t>=-1&&t<=9,"invalid compression level"),Ge(r>=1&&r<=9,"invalid memlevel"),Ge(n===H.Z_FILTERED||n===H.Z_HUFFMAN_ONLY||n===H.Z_RLE||n===H.Z_FIXED||n===H.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(t,e,r,n,i),this._setDictionary()};Oe.prototype.params=function(){throw new Error("deflateParams Not supported")};Oe.prototype.reset=function(){this._reset(),this._setDictionary()};Oe.prototype._init=function(e,t,r,n,i){switch(this.level=e,this.windowBits=t,this.memLevel=r,this.strategy=n,this.flush=H.Z_NO_FLUSH,this.err=H.Z_OK,(this.mode===H.GZIP||this.mode===H.GUNZIP)&&(this.windowBits+=16),this.mode===H.UNZIP&&(this.windowBits+=32),(this.mode===H.DEFLATERAW||this.mode===H.INFLATERAW)&&(this.windowBits=-1*this.windowBits),this.strm=new Fm,this.mode){case H.DEFLATE:case H.GZIP:case H.DEFLATERAW:this.err=Tn.deflateInit2(this.strm,this.level,H.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case H.INFLATE:case H.GUNZIP:case H.INFLATERAW:case H.UNZIP:this.err=rr.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==H.Z_OK&&this._error("Init error"),this.dictionary=i,this.write_in_progress=!1,this.init_done=!0};Oe.prototype._setDictionary=function(){if(this.dictionary!=null){switch(this.err=H.Z_OK,this.mode){case H.DEFLATE:case H.DEFLATERAW:this.err=Tn.deflateSetDictionary(this.strm,this.dictionary);break;default:break}this.err!==H.Z_OK&&this._error("Failed to set dictionary")}};Oe.prototype._reset=function(){switch(this.err=H.Z_OK,this.mode){case H.DEFLATE:case H.DEFLATERAW:case H.GZIP:this.err=Tn.deflateReset(this.strm);break;case H.INFLATE:case H.INFLATERAW:case H.GUNZIP:this.err=rr.inflateReset(this.strm);break;default:break}this.err!==H.Z_OK&&this._error("Failed to reset stream")};H.Zlib=Oe});var Dr=W(X=>{"use strict";var yt=si().Buffer,Hc=tn().Transform,re=Gc(),Nt=De(),On=Or().ok,xo=si().kMaxLength,Wc="Cannot create final Buffer. It would be larger than 0x"+xo.toString(16)+" bytes";re.Z_MIN_WINDOWBITS=8;re.Z_MAX_WINDOWBITS=15;re.Z_DEFAULT_WINDOWBITS=15;re.Z_MIN_CHUNK=64;re.Z_MAX_CHUNK=1/0;re.Z_DEFAULT_CHUNK=16*1024;re.Z_MIN_MEMLEVEL=1;re.Z_MAX_MEMLEVEL=9;re.Z_DEFAULT_MEMLEVEL=8;re.Z_MIN_LEVEL=-1;re.Z_MAX_LEVEL=9;re.Z_DEFAULT_LEVEL=re.Z_DEFAULT_COMPRESSION;var Zc=Object.keys(re);for(Fi=0;Fi<Zc.length;Fi++)Li=Zc[Fi],Li.match(/^Z/)&&Object.defineProperty(X,Li,{enumerable:!0,value:re[Li],writable:!1});var Li,Fi,Pi={Z_OK:re.Z_OK,Z_STREAM_END:re.Z_STREAM_END,Z_NEED_DICT:re.Z_NEED_DICT,Z_ERRNO:re.Z_ERRNO,Z_STREAM_ERROR:re.Z_STREAM_ERROR,Z_DATA_ERROR:re.Z_DATA_ERROR,Z_MEM_ERROR:re.Z_MEM_ERROR,Z_BUF_ERROR:re.Z_BUF_ERROR,Z_VERSION_ERROR:re.Z_VERSION_ERROR},qc=Object.keys(Pi);for(Ni=0;Ni<qc.length;Ni++)vo=qc[Ni],Pi[Pi[vo]]=vo;var vo,Ni;Object.defineProperty(X,"codes",{enumerable:!0,value:Object.freeze(Pi),writable:!1});X.Deflate=nr;X.Inflate=ir;X.Gzip=ar;X.Gunzip=or;X.DeflateRaw=sr;X.InflateRaw=lr;X.Unzip=fr;X.createDeflate=function(e){return new nr(e)};X.createInflate=function(e){return new ir(e)};X.createDeflateRaw=function(e){return new sr(e)};X.createInflateRaw=function(e){return new lr(e)};X.createGzip=function(e){return new ar(e)};X.createGunzip=function(e){return new or(e)};X.createUnzip=function(e){return new fr(e)};X.deflate=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new nr(t),e,r)};X.deflateSync=function(e,t){return cr(new nr(t),e)};X.gzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new ar(t),e,r)};X.gzipSync=function(e,t){return cr(new ar(t),e)};X.deflateRaw=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new sr(t),e,r)};X.deflateRawSync=function(e,t){return cr(new sr(t),e)};X.unzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new fr(t),e,r)};X.unzipSync=function(e,t){return cr(new fr(t),e)};X.inflate=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new ir(t),e,r)};X.inflateSync=function(e,t){return cr(new ir(t),e)};X.gunzip=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new or(t),e,r)};X.gunzipSync=function(e,t){return cr(new or(t),e)};X.inflateRaw=function(e,t,r){return typeof t=="function"&&(r=t,t={}),ur(new lr(t),e,r)};X.inflateRawSync=function(e,t){return cr(new lr(t),e)};function ur(e,t,r){var n=[],i=0;e.on("error",o),e.on("end",s),e.end(t),a();function a(){for(var f;(f=e.read())!==null;)n.push(f),i+=f.length;e.once("readable",a)}function o(f){e.removeListener("end",s),e.removeListener("readable",a),r(f)}function s(){var f,l=null;i>=xo?l=new RangeError(Wc):f=yt.concat(n,i),n=[],e.close(),r(l,f)}}function cr(e,t){if(typeof t=="string"&&(t=yt.from(t)),!yt.isBuffer(t))throw new TypeError("Not a string or buffer");var r=e._finishFlushFlag;return e._processChunk(t,r)}function nr(e){if(!(this instanceof nr))return new nr(e);me.call(this,e,re.DEFLATE)}function ir(e){if(!(this instanceof ir))return new ir(e);me.call(this,e,re.INFLATE)}function ar(e){if(!(this instanceof ar))return new ar(e);me.call(this,e,re.GZIP)}function or(e){if(!(this instanceof or))return new or(e);me.call(this,e,re.GUNZIP)}function sr(e){if(!(this instanceof sr))return new sr(e);me.call(this,e,re.DEFLATERAW)}function lr(e){if(!(this instanceof lr))return new lr(e);me.call(this,e,re.INFLATERAW)}function fr(e){if(!(this instanceof fr))return new fr(e);me.call(this,e,re.UNZIP)}function Vc(e){return e===re.Z_NO_FLUSH||e===re.Z_PARTIAL_FLUSH||e===re.Z_SYNC_FLUSH||e===re.Z_FULL_FLUSH||e===re.Z_FINISH||e===re.Z_BLOCK}function me(e,t){var r=this;if(this._opts=e=e||{},this._chunkSize=e.chunkSize||X.Z_DEFAULT_CHUNK,Hc.call(this,e),e.flush&&!Vc(e.flush))throw new Error("Invalid flush flag: "+e.flush);if(e.finishFlush&&!Vc(e.finishFlush))throw new Error("Invalid flush flag: "+e.finishFlush);if(this._flushFlag=e.flush||re.Z_NO_FLUSH,this._finishFlushFlag=typeof e.finishFlush<"u"?e.finishFlush:re.Z_FINISH,e.chunkSize&&(e.chunkSize<X.Z_MIN_CHUNK||e.chunkSize>X.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<X.Z_MIN_WINDOWBITS||e.windowBits>X.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<X.Z_MIN_LEVEL||e.level>X.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<X.Z_MIN_MEMLEVEL||e.memLevel>X.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=X.Z_FILTERED&&e.strategy!=X.Z_HUFFMAN_ONLY&&e.strategy!=X.Z_RLE&&e.strategy!=X.Z_FIXED&&e.strategy!=X.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!yt.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new re.Zlib(t);var n=this;this._hadError=!1,this._handle.onerror=function(o,s){Mi(n),n._hadError=!0;var f=new Error(o);f.errno=s,f.code=X.codes[s],n.emit("error",f)};var i=X.Z_DEFAULT_COMPRESSION;typeof e.level=="number"&&(i=e.level);var a=X.Z_DEFAULT_STRATEGY;typeof e.strategy=="number"&&(a=e.strategy),this._handle.init(e.windowBits||X.Z_DEFAULT_WINDOWBITS,i,e.memLevel||X.Z_DEFAULT_MEMLEVEL,a,e.dictionary),this._buffer=yt.allocUnsafe(this._chunkSize),this._offset=0,this._level=i,this._strategy=a,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!r._handle},configurable:!0,enumerable:!0})}Nt.inherits(me,Hc);me.prototype.params=function(e,t,r){if(e<X.Z_MIN_LEVEL||e>X.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(t!=X.Z_FILTERED&&t!=X.Z_HUFFMAN_ONLY&&t!=X.Z_RLE&&t!=X.Z_FIXED&&t!=X.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+t);if(this._level!==e||this._strategy!==t){var n=this;this.flush(re.Z_SYNC_FLUSH,function(){On(n._handle,"zlib binding closed"),n._handle.params(e,t),n._hadError||(n._level=e,n._strategy=t,r&&r())})}else process.nextTick(r)};me.prototype.reset=function(){return On(this._handle,"zlib binding closed"),this._handle.reset()};me.prototype._flush=function(e){this._transform(yt.alloc(0),"",e)};me.prototype.flush=function(e,t){var r=this,n=this._writableState;(typeof e=="function"||e===void 0&&!t)&&(t=e,e=re.Z_FULL_FLUSH),n.ended?t&&process.nextTick(t):n.ending?t&&this.once("end",t):n.needDrain?t&&this.once("drain",function(){return r.flush(e,t)}):(this._flushFlag=e,this.write(yt.alloc(0),"",t))};me.prototype.close=function(e){Mi(this,e),process.nextTick(Pm,this)};function Mi(e,t){t&&process.nextTick(t),e._handle&&(e._handle.close(),e._handle=null)}function Pm(e){e.emit("close")}me.prototype._transform=function(e,t,r){var n,i=this._writableState,a=i.ending||i.ended,o=a&&(!e||i.length===e.length);if(e!==null&&!yt.isBuffer(e))return r(new Error("invalid input"));if(!this._handle)return r(new Error("zlib binding closed"));o?n=this._finishFlushFlag:(n=this._flushFlag,e.length>=i.length&&(this._flushFlag=this._opts.flush||re.Z_NO_FLUSH)),this._processChunk(e,n,r)};me.prototype._processChunk=function(e,t,r){var n=e&&e.length,i=this._chunkSize-this._offset,a=0,o=this,s=typeof r=="function";if(!s){var f=[],l=0,u;this.on("error",function(m){u=m}),On(this._handle,"zlib binding closed");do var c=this._handle.writeSync(t,e,a,n,this._buffer,this._offset,i);while(!this._hadError&&y(c[0],c[1]));if(this._hadError)throw u;if(l>=xo)throw Mi(this),new RangeError(Wc);var p=yt.concat(f,l);return Mi(this),p}On(this._handle,"zlib binding closed");var h=this._handle.write(t,e,a,n,this._buffer,this._offset,i);h.buffer=e,h.callback=y;function y(m,g){if(this&&(this.buffer=null,this.callback=null),!o._hadError){var b=i-g;if(On(b>=0,"have should not go down"),b>0){var A=o._buffer.slice(o._offset,o._offset+b);o._offset+=b,s?o.push(A):(f.push(A),l+=A.length)}if((g===0||o._offset>=o._chunkSize)&&(i=o._chunkSize,o._offset=0,o._buffer=yt.allocUnsafe(o._chunkSize)),g===0){if(a+=n-m,n=m,!s)return!0;var x=o._handle.write(t,e,a,n,o._buffer,o._offset,o._chunkSize);x.callback=y,x.buffer=e;return}if(!s)return!1;r()}}};Nt.inherits(nr,me);Nt.inherits(ir,me);Nt.inherits(ar,me);Nt.inherits(or,me);Nt.inherits(sr,me);Nt.inherits(lr,me);Nt.inherits(fr,me)});var Eo=W((g2,$c)=>{"use strict";var Mm=De(),Yc=tn(),at=$c.exports=function(){Yc.call(this),this._buffers=[],this._buffered=0,this._reads=[],this._paused=!1,this._encoding="utf8",this.writable=!0};Mm.inherits(at,Yc);at.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t}),process.nextTick(function(){this._process(),this._paused&&this._reads&&this._reads.length>0&&(this._paused=!1,this.emit("drain"))}.bind(this))};at.prototype.write=function(e,t){if(!this.writable)return this.emit("error",new Error("Stream not writable")),!1;let r;return Buffer.isBuffer(e)?r=e:r=Buffer.from(e,t||this._encoding),this._buffers.push(r),this._buffered+=r.length,this._process(),this._reads&&this._reads.length===0&&(this._paused=!0),this.writable&&!this._paused};at.prototype.end=function(e,t){e&&this.write(e,t),this.writable=!1,this._buffers&&(this._buffers.length===0?this._end():(this._buffers.push(null),this._process()))};at.prototype.destroySoon=at.prototype.end;at.prototype._end=function(){this._reads.length>0&&this.emit("error",new Error("Unexpected end of input")),this.destroy()};at.prototype.destroy=function(){this._buffers&&(this.writable=!1,this._reads=null,this._buffers=null,this.emit("close"))};at.prototype._processReadAllowingLess=function(e){this._reads.shift();let t=this._buffers[0];t.length>e.length?(this._buffered-=e.length,this._buffers[0]=t.slice(e.length),e.func.call(this,t.slice(0,e.length))):(this._buffered-=t.length,this._buffers.shift(),e.func.call(this,t))};at.prototype._processRead=function(e){this._reads.shift();let t=0,r=0,n=Buffer.alloc(e.length);for(;t<e.length;){let i=this._buffers[r++],a=Math.min(i.length,e.length-t);i.copy(n,t,0,a),t+=a,a!==i.length&&(this._buffers[--r]=i.slice(a))}r>0&&this._buffers.splice(0,r),this._buffered-=e.length,e.func.call(this,n)};at.prototype._process=function(){try{for(;this._buffered>0&&this._reads&&this._reads.length>0;){let e=this._reads[0];if(e.allowLess)this._processReadAllowingLess(e);else if(this._buffered>=e.length)this._processRead(e);else break}this._buffers&&!this.writable&&this._end()}catch(e){this.emit("error",e)}}});var So=W(Ao=>{"use strict";var Pt=[{x:[0],y:[0]},{x:[4],y:[0]},{x:[0,4],y:[4]},{x:[2,6],y:[0,4]},{x:[0,2,4,6],y:[2,6]},{x:[1,3,5,7],y:[0,2,4,6]},{x:[0,1,2,3,4,5,6,7],y:[1,3,5,7]}];Ao.getImagePasses=function(e,t){let r=[],n=e%8,i=t%8,a=(e-n)/8,o=(t-i)/8;for(let s=0;s<Pt.length;s++){let f=Pt[s],l=a*f.x.length,u=o*f.y.length;for(let c=0;c<f.x.length&&f.x[c]<n;c++)l++;for(let c=0;c<f.y.length&&f.y[c]<i;c++)u++;l>0&&u>0&&r.push({width:l,height:u,index:s})}return r};Ao.getInterlaceIterator=function(e){return function(t,r,n){let i=t%Pt[n].x.length,a=(t-i)/Pt[n].x.length*8+Pt[n].x[i],o=r%Pt[n].y.length,s=(r-o)/Pt[n].y.length*8+Pt[n].y[o];return a*4+s*e*4}}});var Io=W((w2,Kc)=>{"use strict";Kc.exports=function(t,r,n){let i=t+r-n,a=Math.abs(i-t),o=Math.abs(i-r),s=Math.abs(i-n);return a<=o&&a<=s?t:o<=s?r:n}});var ko=W((v2,Jc)=>{"use strict";var Dm=So(),zm=Io();function Xc(e,t,r){let n=e*t;return r!==8&&(n=Math.ceil(n/(8/r))),n}var zr=Jc.exports=function(e,t){let r=e.width,n=e.height,i=e.interlace,a=e.bpp,o=e.depth;if(this.read=t.read,this.write=t.write,this.complete=t.complete,this._imageIndex=0,this._images=[],i){let s=Dm.getImagePasses(r,n);for(let f=0;f<s.length;f++)this._images.push({byteWidth:Xc(s[f].width,a,o),height:s[f].height,lineIndex:0})}else this._images.push({byteWidth:Xc(r,a,o),height:n,lineIndex:0});o===8?this._xComparison=a:o===16?this._xComparison=a*2:this._xComparison=1};zr.prototype.start=function(){this.read(this._images[this._imageIndex].byteWidth+1,this._reverseFilterLine.bind(this))};zr.prototype._unFilterType1=function(e,t,r){let n=this._xComparison,i=n-1;for(let a=0;a<r;a++){let o=e[1+a],s=a>i?t[a-n]:0;t[a]=o+s}};zr.prototype._unFilterType2=function(e,t,r){let n=this._lastLine;for(let i=0;i<r;i++){let a=e[1+i],o=n?n[i]:0;t[i]=a+o}};zr.prototype._unFilterType3=function(e,t,r){let n=this._xComparison,i=n-1,a=this._lastLine;for(let o=0;o<r;o++){let s=e[1+o],f=a?a[o]:0,l=o>i?t[o-n]:0,u=Math.floor((l+f)/2);t[o]=s+u}};zr.prototype._unFilterType4=function(e,t,r){let n=this._xComparison,i=n-1,a=this._lastLine;for(let o=0;o<r;o++){let s=e[1+o],f=a?a[o]:0,l=o>i?t[o-n]:0,u=o>i&&a?a[o-n]:0,c=zm(l,f,u);t[o]=s+c}};zr.prototype._reverseFilterLine=function(e){let t=e[0],r,n=this._images[this._imageIndex],i=n.byteWidth;if(t===0)r=e.slice(1,i+1);else switch(r=Buffer.alloc(i),t){case 1:this._unFilterType1(e,r,i);break;case 2:this._unFilterType2(e,r,i);break;case 3:this._unFilterType3(e,r,i);break;case 4:this._unFilterType4(e,r,i);break;default:throw new Error("Unrecognised filter type - "+t)}this.write(r),n.lineIndex++,n.lineIndex>=n.height?(this._lastLine=null,this._imageIndex++,n=this._images[this._imageIndex]):this._lastLine=r,n?this.read(n.byteWidth+1,this._reverseFilterLine.bind(this)):(this._lastLine=null,this.complete())}});var th=W((x2,eh)=>{"use strict";var Um=De(),Qc=Eo(),jm=ko(),Gm=eh.exports=function(e){Qc.call(this);let t=[],r=this;this._filter=new jm(e,{read:this.read.bind(this),write:function(n){t.push(n)},complete:function(){r.emit("complete",Buffer.concat(t))}}),this._filter.start()};Um.inherits(Gm,Qc)});var Ur=W((E2,rh)=>{"use strict";rh.exports={PNG_SIGNATURE:[137,80,78,71,13,10,26,10],TYPE_IHDR:1229472850,TYPE_IEND:1229278788,TYPE_IDAT:1229209940,TYPE_PLTE:1347179589,TYPE_tRNS:1951551059,TYPE_gAMA:1732332865,COLORTYPE_GRAYSCALE:0,COLORTYPE_PALETTE:1,COLORTYPE_COLOR:2,COLORTYPE_ALPHA:4,COLORTYPE_PALETTE_COLOR:3,COLORTYPE_COLOR_ALPHA:6,COLORTYPE_TO_BPP_MAP:{0:1,2:3,3:1,4:2,6:4},GAMMA_DIVISION:1e5}});var Ro=W((A2,nh)=>{"use strict";var To=[];(function(){for(let e=0;e<256;e++){let t=e;for(let r=0;r<8;r++)t&1?t=3988292384^t>>>1:t=t>>>1;To[e]=t}})();var Oo=nh.exports=function(){this._crc=-1};Oo.prototype.write=function(e){for(let t=0;t<e.length;t++)this._crc=To[(this._crc^e[t])&255]^this._crc>>>8;return!0};Oo.prototype.crc32=function(){return this._crc^-1};Oo.crc32=function(e){let t=-1;for(let r=0;r<e.length;r++)t=To[(t^e[r])&255]^t>>>8;return t^-1}});var Bo=W((S2,ih)=>{"use strict";var xe=Ur(),Zm=Ro(),Se=ih.exports=function(e,t){this._options=e,e.checkCRC=e.checkCRC!==!1,this._hasIHDR=!1,this._hasIEND=!1,this._emittedHeadersFinished=!1,this._palette=[],this._colorType=0,this._chunks={},this._chunks[xe.TYPE_IHDR]=this._handleIHDR.bind(this),this._chunks[xe.TYPE_IEND]=this._handleIEND.bind(this),this._chunks[xe.TYPE_IDAT]=this._handleIDAT.bind(this),this._chunks[xe.TYPE_PLTE]=this._handlePLTE.bind(this),this._chunks[xe.TYPE_tRNS]=this._handleTRNS.bind(this),this._chunks[xe.TYPE_gAMA]=this._handleGAMA.bind(this),this.read=t.read,this.error=t.error,this.metadata=t.metadata,this.gamma=t.gamma,this.transColor=t.transColor,this.palette=t.palette,this.parsed=t.parsed,this.inflateData=t.inflateData,this.finished=t.finished,this.simpleTransparency=t.simpleTransparency,this.headersFinished=t.headersFinished||function(){}};Se.prototype.start=function(){this.read(xe.PNG_SIGNATURE.length,this._parseSignature.bind(this))};Se.prototype._parseSignature=function(e){let t=xe.PNG_SIGNATURE;for(let r=0;r<t.length;r++)if(e[r]!==t[r]){this.error(new Error("Invalid file signature"));return}this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._parseChunkBegin=function(e){let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n="";for(let a=4;a<8;a++)n+=String.fromCharCode(e[a]);let i=!!(e[4]&32);if(!this._hasIHDR&&r!==xe.TYPE_IHDR){this.error(new Error("Expected IHDR on beggining"));return}if(this._crc=new Zm,this._crc.write(Buffer.from(n)),this._chunks[r])return this._chunks[r](t);if(!i){this.error(new Error("Unsupported critical chunk type "+n));return}this.read(t+4,this._skipChunk.bind(this))};Se.prototype._skipChunk=function(){this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._handleChunkEnd=function(){this.read(4,this._parseChunkEnd.bind(this))};Se.prototype._parseChunkEnd=function(e){let t=e.readInt32BE(0),r=this._crc.crc32();if(this._options.checkCRC&&r!==t){this.error(new Error("Crc error - "+t+" - "+r));return}this._hasIEND||this.read(8,this._parseChunkBegin.bind(this))};Se.prototype._handleIHDR=function(e){this.read(e,this._parseIHDR.bind(this))};Se.prototype._parseIHDR=function(e){this._crc.write(e);let t=e.readUInt32BE(0),r=e.readUInt32BE(4),n=e[8],i=e[9],a=e[10],o=e[11],s=e[12];if(n!==8&&n!==4&&n!==2&&n!==1&&n!==16){this.error(new Error("Unsupported bit depth "+n));return}if(!(i in xe.COLORTYPE_TO_BPP_MAP)){this.error(new Error("Unsupported color type"));return}if(a!==0){this.error(new Error("Unsupported compression method"));return}if(o!==0){this.error(new Error("Unsupported filter method"));return}if(s!==0&&s!==1){this.error(new Error("Unsupported interlace method"));return}this._colorType=i;let f=xe.COLORTYPE_TO_BPP_MAP[this._colorType];this._hasIHDR=!0,this.metadata({width:t,height:r,depth:n,interlace:!!s,palette:!!(i&xe.COLORTYPE_PALETTE),color:!!(i&xe.COLORTYPE_COLOR),alpha:!!(i&xe.COLORTYPE_ALPHA),bpp:f,colorType:i}),this._handleChunkEnd()};Se.prototype._handlePLTE=function(e){this.read(e,this._parsePLTE.bind(this))};Se.prototype._parsePLTE=function(e){this._crc.write(e);let t=Math.floor(e.length/3);for(let r=0;r<t;r++)this._palette.push([e[r*3],e[r*3+1],e[r*3+2],255]);this.palette(this._palette),this._handleChunkEnd()};Se.prototype._handleTRNS=function(e){this.simpleTransparency(),this.read(e,this._parseTRNS.bind(this))};Se.prototype._parseTRNS=function(e){if(this._crc.write(e),this._colorType===xe.COLORTYPE_PALETTE_COLOR){if(this._palette.length===0){this.error(new Error("Transparency chunk must be after palette"));return}if(e.length>this._palette.length){this.error(new Error("More transparent colors than palette size"));return}for(let t=0;t<e.length;t++)this._palette[t][3]=e[t];this.palette(this._palette)}this._colorType===xe.COLORTYPE_GRAYSCALE&&this.transColor([e.readUInt16BE(0)]),this._colorType===xe.COLORTYPE_COLOR&&this.transColor([e.readUInt16BE(0),e.readUInt16BE(2),e.readUInt16BE(4)]),this._handleChunkEnd()};Se.prototype._handleGAMA=function(e){this.read(e,this._parseGAMA.bind(this))};Se.prototype._parseGAMA=function(e){this._crc.write(e),this.gamma(e.readUInt32BE(0)/xe.GAMMA_DIVISION),this._handleChunkEnd()};Se.prototype._handleIDAT=function(e){this._emittedHeadersFinished||(this._emittedHeadersFinished=!0,this.headersFinished()),this.read(-e,this._parseIDAT.bind(this,e))};Se.prototype._parseIDAT=function(e,t){if(this._crc.write(t),this._colorType===xe.COLORTYPE_PALETTE_COLOR&&this._palette.length===0)throw new Error("Expected palette not found");this.inflateData(t);let r=e-t.length;r>0?this._handleIDAT(r):this._handleChunkEnd()};Se.prototype._handleIEND=function(e){this.read(e,this._parseIEND.bind(this))};Se.prototype._parseIEND=function(e){this._crc.write(e),this._hasIEND=!0,this._handleChunkEnd(),this.finished&&this.finished()}});var Co=W(oh=>{"use strict";var ah=So(),qm=[function(){},function(e,t,r,n){if(n===t.length)throw new Error("Ran out of data");let i=t[n];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=255},function(e,t,r,n){if(n+1>=t.length)throw new Error("Ran out of data");let i=t[n];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=t[n+1]},function(e,t,r,n){if(n+2>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=255},function(e,t,r,n){if(n+3>=t.length)throw new Error("Ran out of data");e[r]=t[n],e[r+1]=t[n+1],e[r+2]=t[n+2],e[r+3]=t[n+3]}],Vm=[function(){},function(e,t,r,n){let i=t[0];e[r]=i,e[r+1]=i,e[r+2]=i,e[r+3]=n},function(e,t,r){let n=t[0];e[r]=n,e[r+1]=n,e[r+2]=n,e[r+3]=t[1]},function(e,t,r,n){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=n},function(e,t,r){e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=t[3]}];function Hm(e,t){let r=[],n=0;function i(){if(n===e.length)throw new Error("Ran out of data");let a=e[n];n++;let o,s,f,l,u,c,p,h;switch(t){default:throw new Error("unrecognised depth");case 16:p=e[n],n++,r.push((a<<8)+p);break;case 4:p=a&15,h=a>>4,r.push(h,p);break;case 2:u=a&3,c=a>>2&3,p=a>>4&3,h=a>>6&3,r.push(h,p,c,u);break;case 1:o=a&1,s=a>>1&1,f=a>>2&1,l=a>>3&1,u=a>>4&1,c=a>>5&1,p=a>>6&1,h=a>>7&1,r.push(h,p,c,u,l,f,s,o);break}}return{get:function(a){for(;r.length<a;)i();let o=r.slice(0,a);return r=r.slice(a),o},resetAfterLine:function(){r.length=0},end:function(){if(n!==e.length)throw new Error("extra data found")}}}function Wm(e,t,r,n,i,a){let o=e.width,s=e.height,f=e.index;for(let l=0;l<s;l++)for(let u=0;u<o;u++){let c=r(u,l,f);qm[n](t,i,c,a),a+=n}return a}function Ym(e,t,r,n,i,a){let o=e.width,s=e.height,f=e.index;for(let l=0;l<s;l++){for(let u=0;u<o;u++){let c=i.get(n),p=r(u,l,f);Vm[n](t,c,p,a)}i.resetAfterLine()}}oh.dataToBitMap=function(e,t){let r=t.width,n=t.height,i=t.depth,a=t.bpp,o=t.interlace,s;i!==8&&(s=Hm(e,i));let f;i<=8?f=Buffer.alloc(r*n*4):f=new Uint16Array(r*n*4);let l=Math.pow(2,i)-1,u=0,c,p;if(o)c=ah.getImagePasses(r,n),p=ah.getInterlaceIterator(r,n);else{let h=0;p=function(){let y=h;return h+=4,y},c=[{width:r,height:n}]}for(let h=0;h<c.length;h++)i===8?u=Wm(c[h],f,p,a,e,u):Ym(c[h],f,p,a,s,l);if(i===8){if(u!==e.length)throw new Error("extra data found")}else s.end();return f}});var Fo=W((k2,sh)=>{"use strict";function $m(e,t,r,n,i){let a=0;for(let o=0;o<n;o++)for(let s=0;s<r;s++){let f=i[e[a]];if(!f)throw new Error("index "+e[a]+" not in palette");for(let l=0;l<4;l++)t[a+l]=f[l];a+=4}}function Km(e,t,r,n,i){let a=0;for(let o=0;o<n;o++)for(let s=0;s<r;s++){let f=!1;if(i.length===1?i[0]===e[a]&&(f=!0):i[0]===e[a]&&i[1]===e[a+1]&&i[2]===e[a+2]&&(f=!0),f)for(let l=0;l<4;l++)t[a+l]=0;a+=4}}function Xm(e,t,r,n,i){let a=255,o=Math.pow(2,i)-1,s=0;for(let f=0;f<n;f++)for(let l=0;l<r;l++){for(let u=0;u<4;u++)t[s+u]=Math.floor(e[s+u]*a/o+.5);s+=4}}sh.exports=function(e,t,r=!1){let n=t.depth,i=t.width,a=t.height,o=t.colorType,s=t.transColor,f=t.palette,l=e;return o===3?$m(e,l,i,a,f):(s&&Km(e,l,i,a,s),n!==8&&!r&&(n===16&&(l=Buffer.alloc(i*a*4)),Xm(e,l,i,a,n))),l}});var uh=W((T2,fh)=>{"use strict";var Jm=De(),Lo=Dr(),lh=Eo(),Qm=th(),ey=Bo(),ty=Co(),ry=Fo(),gt=fh.exports=function(e){lh.call(this),this._parser=new ey(e,{read:this.read.bind(this),error:this._handleError.bind(this),metadata:this._handleMetaData.bind(this),gamma:this.emit.bind(this,"gamma"),palette:this._handlePalette.bind(this),transColor:this._handleTransColor.bind(this),finished:this._finished.bind(this),inflateData:this._inflateData.bind(this),simpleTransparency:this._simpleTransparency.bind(this),headersFinished:this._headersFinished.bind(this)}),this._options=e,this.writable=!0,this._parser.start()};Jm.inherits(gt,lh);gt.prototype._handleError=function(e){this.emit("error",e),this.writable=!1,this.destroy(),this._inflate&&this._inflate.destroy&&this._inflate.destroy(),this._filter&&(this._filter.destroy(),this._filter.on("error",function(){})),this.errord=!0};gt.prototype._inflateData=function(e){if(!this._inflate)if(this._bitmapInfo.interlace)this._inflate=Lo.createInflate(),this._inflate.on("error",this.emit.bind(this,"error")),this._filter.on("complete",this._complete.bind(this)),this._inflate.pipe(this._filter);else{let r=((this._bitmapInfo.width*this._bitmapInfo.bpp*this._bitmapInfo.depth+7>>3)+1)*this._bitmapInfo.height,n=Math.max(r,Lo.Z_MIN_CHUNK);this._inflate=Lo.createInflate({chunkSize:n});let i=r,a=this.emit.bind(this,"error");this._inflate.on("error",function(s){i&&a(s)}),this._filter.on("complete",this._complete.bind(this));let o=this._filter.write.bind(this._filter);this._inflate.on("data",function(s){i&&(s.length>i&&(s=s.slice(0,i)),i-=s.length,o(s))}),this._inflate.on("end",this._filter.end.bind(this._filter))}this._inflate.write(e)};gt.prototype._handleMetaData=function(e){this._metaData=e,this._bitmapInfo=Object.create(e),this._filter=new Qm(this._bitmapInfo)};gt.prototype._handleTransColor=function(e){this._bitmapInfo.transColor=e};gt.prototype._handlePalette=function(e){this._bitmapInfo.palette=e};gt.prototype._simpleTransparency=function(){this._metaData.alpha=!0};gt.prototype._headersFinished=function(){this.emit("metadata",this._metaData)};gt.prototype._finished=function(){this.errord||(this._inflate?this._inflate.end():this.emit("error","No Inflate block"))};gt.prototype._complete=function(e){if(this.errord)return;let t;try{let r=ty.dataToBitMap(e,this._bitmapInfo);t=ry(r,this._bitmapInfo,this._options.skipRescale),r=null}catch(r){this._handleError(r);return}this.emit("parsed",t)}});var hh=W((O2,ch)=>{"use strict";var Xe=Ur();ch.exports=function(e,t,r,n){let i=[Xe.COLORTYPE_COLOR_ALPHA,Xe.COLORTYPE_ALPHA].indexOf(n.colorType)!==-1;if(n.colorType===n.inputColorType){let y=function(){let m=new ArrayBuffer(2);return new DataView(m).setInt16(0,256,!0),new Int16Array(m)[0]!==256}();if(n.bitDepth===8||n.bitDepth===16&&y)return e}let a=n.bitDepth!==16?e:new Uint16Array(e.buffer),o=255,s=Xe.COLORTYPE_TO_BPP_MAP[n.inputColorType];s===4&&!n.inputHasAlpha&&(s=3);let f=Xe.COLORTYPE_TO_BPP_MAP[n.colorType];n.bitDepth===16&&(o=65535,f*=2);let l=Buffer.alloc(t*r*f),u=0,c=0,p=n.bgColor||{};p.red===void 0&&(p.red=o),p.green===void 0&&(p.green=o),p.blue===void 0&&(p.blue=o);function h(){let y,m,g,b=o;switch(n.inputColorType){case Xe.COLORTYPE_COLOR_ALPHA:b=a[u+3],y=a[u],m=a[u+1],g=a[u+2];break;case Xe.COLORTYPE_COLOR:y=a[u],m=a[u+1],g=a[u+2];break;case Xe.COLORTYPE_ALPHA:b=a[u+1],y=a[u],m=y,g=y;break;case Xe.COLORTYPE_GRAYSCALE:y=a[u],m=y,g=y;break;default:throw new Error("input color type:"+n.inputColorType+" is not supported at present")}return n.inputHasAlpha&&(i||(b/=o,y=Math.min(Math.max(Math.round((1-b)*p.red+b*y),0),o),m=Math.min(Math.max(Math.round((1-b)*p.green+b*m),0),o),g=Math.min(Math.max(Math.round((1-b)*p.blue+b*g),0),o))),{red:y,green:m,blue:g,alpha:b}}for(let y=0;y<r;y++)for(let m=0;m<t;m++){let g=h(a,u);switch(n.colorType){case Xe.COLORTYPE_COLOR_ALPHA:case Xe.COLORTYPE_COLOR:n.bitDepth===8?(l[c]=g.red,l[c+1]=g.green,l[c+2]=g.blue,i&&(l[c+3]=g.alpha)):(l.writeUInt16BE(g.red,c),l.writeUInt16BE(g.green,c+2),l.writeUInt16BE(g.blue,c+4),i&&l.writeUInt16BE(g.alpha,c+6));break;case Xe.COLORTYPE_ALPHA:case Xe.COLORTYPE_GRAYSCALE:{let b=(g.red+g.green+g.blue)/3;n.bitDepth===8?(l[c]=b,i&&(l[c+1]=g.alpha)):(l.writeUInt16BE(b,c),i&&l.writeUInt16BE(g.alpha,c+2));break}default:throw new Error("unrecognised color Type "+n.colorType)}u+=s,c+=f}return l}});var _h=W((R2,ph)=>{"use strict";var dh=Io();function ny(e,t,r,n,i){for(let a=0;a<r;a++)n[i+a]=e[t+a]}function iy(e,t,r){let n=0,i=t+r;for(let a=t;a<i;a++)n+=Math.abs(e[a]);return n}function ay(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=e[t+o]-s;n[i+o]=f}}function oy(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=e[t+a]-o;i+=Math.abs(s)}return i}function sy(e,t,r,n,i){for(let a=0;a<r;a++){let o=t>0?e[t+a-r]:0,s=e[t+a]-o;n[i+a]=s}}function ly(e,t,r){let n=0,i=t+r;for(let a=t;a<i;a++){let o=t>0?e[a-r]:0,s=e[a]-o;n+=Math.abs(s)}return n}function fy(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=t>0?e[t+o-r]:0,l=e[t+o]-(s+f>>1);n[i+o]=l}}function uy(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=t>0?e[t+a-r]:0,f=e[t+a]-(o+s>>1);i+=Math.abs(f)}return i}function cy(e,t,r,n,i,a){for(let o=0;o<r;o++){let s=o>=a?e[t+o-a]:0,f=t>0?e[t+o-r]:0,l=t>0&&o>=a?e[t+o-(r+a)]:0,u=e[t+o]-dh(s,f,l);n[i+o]=u}}function hy(e,t,r,n){let i=0;for(let a=0;a<r;a++){let o=a>=n?e[t+a-n]:0,s=t>0?e[t+a-r]:0,f=t>0&&a>=n?e[t+a-(r+n)]:0,l=e[t+a]-dh(o,s,f);i+=Math.abs(l)}return i}var dy={0:ny,1:ay,2:sy,3:fy,4:cy},py={0:iy,1:oy,2:ly,3:uy,4:hy};ph.exports=function(e,t,r,n,i){let a;if(!("filterType"in n)||n.filterType===-1)a=[0,1,2,3,4];else if(typeof n.filterType=="number")a=[n.filterType];else throw new Error("unrecognised filter types");n.bitDepth===16&&(i*=2);let o=t*i,s=0,f=0,l=Buffer.alloc((o+1)*r),u=a[0];for(let c=0;c<r;c++){if(a.length>1){let p=1/0;for(let h=0;h<a.length;h++){let y=py[a[h]](e,f,o,i);y<p&&(u=a[h],p=y)}}l[s]=u,s++,dy[u](e,f,o,l,s,i),s+=o,f+=o}return l}});var No=W((B2,mh)=>{"use strict";var Re=Ur(),_y=Ro(),my=hh(),yy=_h(),gy=Dr(),Mt=mh.exports=function(e){if(this._options=e,e.deflateChunkSize=e.deflateChunkSize||32*1024,e.deflateLevel=e.deflateLevel!=null?e.deflateLevel:9,e.deflateStrategy=e.deflateStrategy!=null?e.deflateStrategy:3,e.inputHasAlpha=e.inputHasAlpha!=null?e.inputHasAlpha:!0,e.deflateFactory=e.deflateFactory||gy.createDeflate,e.bitDepth=e.bitDepth||8,e.colorType=typeof e.colorType=="number"?e.colorType:Re.COLORTYPE_COLOR_ALPHA,e.inputColorType=typeof e.inputColorType=="number"?e.inputColorType:Re.COLORTYPE_COLOR_ALPHA,[Re.COLORTYPE_GRAYSCALE,Re.COLORTYPE_COLOR,Re.COLORTYPE_COLOR_ALPHA,Re.COLORTYPE_ALPHA].indexOf(e.colorType)===-1)throw new Error("option color type:"+e.colorType+" is not supported at present");if([Re.COLORTYPE_GRAYSCALE,Re.COLORTYPE_COLOR,Re.COLORTYPE_COLOR_ALPHA,Re.COLORTYPE_ALPHA].indexOf(e.inputColorType)===-1)throw new Error("option input color type:"+e.inputColorType+" is not supported at present");if(e.bitDepth!==8&&e.bitDepth!==16)throw new Error("option bit depth:"+e.bitDepth+" is not supported at present")};Mt.prototype.getDeflateOptions=function(){return{chunkSize:this._options.deflateChunkSize,level:this._options.deflateLevel,strategy:this._options.deflateStrategy}};Mt.prototype.createDeflate=function(){return this._options.deflateFactory(this.getDeflateOptions())};Mt.prototype.filterData=function(e,t,r){let n=my(e,t,r,this._options),i=Re.COLORTYPE_TO_BPP_MAP[this._options.colorType];return yy(n,t,r,this._options,i)};Mt.prototype._packChunk=function(e,t){let r=t?t.length:0,n=Buffer.alloc(r+12);return n.writeUInt32BE(r,0),n.writeUInt32BE(e,4),t&&t.copy(n,8),n.writeInt32BE(_y.crc32(n.slice(4,n.length-4)),n.length-4),n};Mt.prototype.packGAMA=function(e){let t=Buffer.alloc(4);return t.writeUInt32BE(Math.floor(e*Re.GAMMA_DIVISION),0),this._packChunk(Re.TYPE_gAMA,t)};Mt.prototype.packIHDR=function(e,t){let r=Buffer.alloc(13);return r.writeUInt32BE(e,0),r.writeUInt32BE(t,4),r[8]=this._options.bitDepth,r[9]=this._options.colorType,r[10]=0,r[11]=0,r[12]=0,this._packChunk(Re.TYPE_IHDR,r)};Mt.prototype.packIDAT=function(e){return this._packChunk(Re.TYPE_IDAT,e)};Mt.prototype.packIEND=function(){return this._packChunk(Re.TYPE_IEND,null)}});var wh=W((C2,bh)=>{"use strict";var by=De(),yh=tn(),wy=Ur(),vy=No(),gh=bh.exports=function(e){yh.call(this);let t=e||{};this._packer=new vy(t),this._deflate=this._packer.createDeflate(),this.readable=!0};by.inherits(gh,yh);gh.prototype.pack=function(e,t,r,n){this.emit("data",Buffer.from(wy.PNG_SIGNATURE)),this.emit("data",this._packer.packIHDR(t,r)),n&&this.emit("data",this._packer.packGAMA(n));let i=this._packer.filterData(e,t,r);this._deflate.on("error",this.emit.bind(this,"error")),this._deflate.on("data",function(a){this.emit("data",this._packer.packIDAT(a))}.bind(this)),this._deflate.on("end",function(){this.emit("data",this._packer.packIEND()),this.emit("end")}.bind(this)),this._deflate.end(i)}});var Ih=W((Rn,Sh)=>{"use strict";var vh=Or().ok,jr=Dr(),xy=De(),xh=si().kMaxLength;function hr(e){if(!(this instanceof hr))return new hr(e);e&&e.chunkSize<jr.Z_MIN_CHUNK&&(e.chunkSize=jr.Z_MIN_CHUNK),jr.Inflate.call(this,e),this._offset=this._offset===void 0?this._outOffset:this._offset,this._buffer=this._buffer||this._outBuffer,e&&e.maxLength!=null&&(this._maxLength=e.maxLength)}function Ey(e){return new hr(e)}function Eh(e,t){t&&process.nextTick(t),e._handle&&(e._handle.close(),e._handle=null)}hr.prototype._processChunk=function(e,t,r){if(typeof r=="function")return jr.Inflate._processChunk.call(this,e,t,r);let n=this,i=e&&e.length,a=this._chunkSize-this._offset,o=this._maxLength,s=0,f=[],l=0,u;this.on("error",function(y){u=y});function c(y,m){if(n._hadError)return;let g=a-m;if(vh(g>=0,"have should not go down"),g>0){let b=n._buffer.slice(n._offset,n._offset+g);if(n._offset+=g,b.length>o&&(b=b.slice(0,o)),f.push(b),l+=b.length,o-=b.length,o===0)return!1}return(m===0||n._offset>=n._chunkSize)&&(a=n._chunkSize,n._offset=0,n._buffer=Buffer.allocUnsafe(n._chunkSize)),m===0?(s+=i-y,i=y,!0):!1}vh(this._handle,"zlib binding closed");let p;do p=this._handle.writeSync(t,e,s,i,this._buffer,this._offset,a),p=p||this._writeState;while(!this._hadError&&c(p[0],p[1]));if(this._hadError)throw u;if(l>=xh)throw Eh(this),new RangeError("Cannot create final Buffer. It would be larger than 0x"+xh.toString(16)+" bytes");let h=Buffer.concat(f,l);return Eh(this),h};xy.inherits(hr,jr.Inflate);function Ay(e,t){if(typeof t=="string"&&(t=Buffer.from(t)),!(t instanceof Buffer))throw new TypeError("Not a string or buffer");let r=e._finishFlushFlag;return r==null&&(r=jr.Z_FINISH),e._processChunk(t,r)}function Ah(e,t){return Ay(new hr(t),e)}Sh.exports=Rn=Ah;Rn.Inflate=hr;Rn.createInflate=Ey;Rn.inflateSync=Ah});var Po=W((F2,Th)=>{"use strict";var kh=Th.exports=function(e){this._buffer=e,this._reads=[]};kh.prototype.read=function(e,t){this._reads.push({length:Math.abs(e),allowLess:e<0,func:t})};kh.prototype.process=function(){for(;this._reads.length>0&&this._buffer.length;){let e=this._reads[0];if(this._buffer.length&&(this._buffer.length>=e.length||e.allowLess)){this._reads.shift();let t=this._buffer;this._buffer=t.slice(e.length),e.func.call(this,t.slice(0,e.length))}else break}if(this._reads.length>0)throw new Error("There are some read requests waitng on finished stream");if(this._buffer.length>0)throw new Error("unrecognised content at end of stream")}});var Rh=W(Oh=>{"use strict";var Sy=Po(),Iy=ko();Oh.process=function(e,t){let r=[],n=new Sy(e);return new Iy(t,{read:n.read.bind(n),write:function(a){r.push(a)},complete:function(){}}).start(),n.process(),Buffer.concat(r)}});var Lh=W((N2,Fh)=>{"use strict";var Bh=!0,Ch=Dr(),ky=Ih();Ch.deflateSync||(Bh=!1);var Ty=Po(),Oy=Rh(),Ry=Bo(),By=Co(),Cy=Fo();Fh.exports=function(e,t){if(!Bh)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r;function n(T){r=T}let i;function a(T){i=T}function o(T){i.transColor=T}function s(T){i.palette=T}function f(){i.alpha=!0}let l;function u(T){l=T}let c=[];function p(T){c.push(T)}let h=new Ty(e);if(new Ry(t,{read:h.read.bind(h),error:n,metadata:a,gamma:u,palette:s,transColor:o,inflateData:p,simpleTransparency:f}).start(),h.process(),r)throw r;let m=Buffer.concat(c);c.length=0;let g;if(i.interlace)g=Ch.inflateSync(m);else{let S=((i.width*i.bpp*i.depth+7>>3)+1)*i.height;g=ky(m,{chunkSize:S,maxLength:S})}if(m=null,!g||!g.length)throw new Error("bad png - invalid inflate data response");let b=Oy.process(g,i);m=null;let A=By.dataToBitMap(b,i);b=null;let x=Cy(A,i,t.skipRescale);return i.data=x,i.gamma=l||0,i}});var Dh=W((P2,Mh)=>{"use strict";var Nh=!0,Ph=Dr();Ph.deflateSync||(Nh=!1);var Fy=Ur(),Ly=No();Mh.exports=function(e,t){if(!Nh)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let r=t||{},n=new Ly(r),i=[];i.push(Buffer.from(Fy.PNG_SIGNATURE)),i.push(n.packIHDR(e.width,e.height)),e.gamma&&i.push(n.packGAMA(e.gamma));let a=n.filterData(e.data,e.width,e.height),o=Ph.deflateSync(a,n.getDeflateOptions());if(a=null,!o||!o.length)throw new Error("bad png - invalid compressed data response");return i.push(n.packIDAT(o)),i.push(n.packIEND()),Buffer.concat(i)}});var zh=W(Mo=>{"use strict";var Ny=Lh(),Py=Dh();Mo.read=function(e,t){return Ny(e,t||{})};Mo.write=function(e,t){return Py(e,t)}});var Gh=W(jh=>{"use strict";var My=De(),Uh=tn(),Dy=uh(),zy=wh(),Uy=zh(),Le=jh.PNG=function(e){Uh.call(this),e=e||{},this.width=e.width|0,this.height=e.height|0,this.data=this.width>0&&this.height>0?Buffer.alloc(4*this.width*this.height):null,e.fill&&this.data&&this.data.fill(0),this.gamma=0,this.readable=this.writable=!0,this._parser=new Dy(e),this._parser.on("error",this.emit.bind(this,"error")),this._parser.on("close",this._handleClose.bind(this)),this._parser.on("metadata",this._metadata.bind(this)),this._parser.on("gamma",this._gamma.bind(this)),this._parser.on("parsed",function(t){this.data=t,this.emit("parsed",t)}.bind(this)),this._packer=new zy(e),this._packer.on("data",this.emit.bind(this,"data")),this._packer.on("end",this.emit.bind(this,"end")),this._parser.on("close",this._handleClose.bind(this)),this._packer.on("error",this.emit.bind(this,"error"))};My.inherits(Le,Uh);Le.sync=Uy;Le.prototype.pack=function(){return!this.data||!this.data.length?(this.emit("error","No data provided"),this):(process.nextTick(function(){this._packer.pack(this.data,this.width,this.height,this.gamma)}.bind(this)),this)};Le.prototype.parse=function(e,t){if(t){let r,n;r=function(i){this.removeListener("error",n),this.data=i,t(null,this)}.bind(this),n=function(i){this.removeListener("parsed",r),t(i,null)}.bind(this),this.once("parsed",r),this.once("error",n)}return this.end(e),this};Le.prototype.write=function(e){return this._parser.write(e),!0};Le.prototype.end=function(e){this._parser.end(e)};Le.prototype._metadata=function(e){this.width=e.width,this.height=e.height,this.emit("metadata",e)};Le.prototype._gamma=function(e){this.gamma=e};Le.prototype._handleClose=function(){!this._parser.writable&&!this._packer.readable&&this.emit("close")};Le.bitblt=function(e,t,r,n,i,a,o,s){if(r|=0,n|=0,i|=0,a|=0,o|=0,s|=0,r>e.width||n>e.height||r+i>e.width||n+a>e.height)throw new Error("bitblt reading outside image");if(o>t.width||s>t.height||o+i>t.width||s+a>t.height)throw new Error("bitblt writing outside image");for(let f=0;f<a;f++)e.data.copy(t.data,(s+f)*t.width+o<<2,(n+f)*e.width+r<<2,(n+f)*e.width+r+i<<2)};Le.prototype.bitblt=function(e,t,r,n,i,a,o){return Le.bitblt(this,e,t,r,n,i,a,o),this};Le.adjustGamma=function(e){if(e.gamma){for(let t=0;t<e.height;t++)for(let r=0;r<e.width;r++){let n=e.width*t+r<<2;for(let i=0;i<3;i++){let a=e.data[n+i]/255;a=Math.pow(a,1/2.2/e.gamma),e.data[n+i]=Math.round(a*255)}}e.gamma=0}};Le.prototype.adjustGamma=function(){Le.adjustGamma(this)}});var Yh=W((Wh,zo)=>{(function(e){typeof Wh=="object"&&typeof zo<"u"?zo.exports=e():typeof define=="function"&&define.amd?define([],e):(typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:this).JSZip=e()})(function(){return function e(t,r,n){function i(s,f){if(!r[s]){if(!t[s]){var l=typeof Vr=="function"&&Vr;if(!f&&l)return l(s,!0);if(a)return a(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[s]={exports:{}};t[s][0].call(c.exports,function(p){var h=t[s][1][p];return i(h||p)},c,c.exports,e,t,r,n)}return r[s].exports}for(var a=typeof Vr=="function"&&Vr,o=0;o<n.length;o++)i(n[o]);return i}({1:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./support"),a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(o){for(var s,f,l,u,c,p,h,y=[],m=0,g=o.length,b=g,A=n.getTypeOf(o)!=="string";m<o.length;)b=g-m,l=A?(s=o[m++],f=m<g?o[m++]:0,m<g?o[m++]:0):(s=o.charCodeAt(m++),f=m<g?o.charCodeAt(m++):0,m<g?o.charCodeAt(m++):0),u=s>>2,c=(3&s)<<4|f>>4,p=1<b?(15&f)<<2|l>>6:64,h=2<b?63&l:64,y.push(a.charAt(u)+a.charAt(c)+a.charAt(p)+a.charAt(h));return y.join("")},r.decode=function(o){var s,f,l,u,c,p,h=0,y=0,m="data:";if(o.substr(0,m.length)===m)throw new Error("Invalid base64 input, it looks like a data url.");var g,b=3*(o=o.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(o.charAt(o.length-1)===a.charAt(64)&&b--,o.charAt(o.length-2)===a.charAt(64)&&b--,b%1!=0)throw new Error("Invalid base64 input, bad content length.");for(g=i.uint8array?new Uint8Array(0|b):new Array(0|b);h<o.length;)s=a.indexOf(o.charAt(h++))<<2|(u=a.indexOf(o.charAt(h++)))>>4,f=(15&u)<<4|(c=a.indexOf(o.charAt(h++)))>>2,l=(3&c)<<6|(p=a.indexOf(o.charAt(h++))),g[y++]=s,c!==64&&(g[y++]=f),p!==64&&(g[y++]=l);return g}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),a=e("./stream/Crc32Probe"),o=e("./stream/DataLengthProbe");function s(f,l,u,c,p){this.compressedSize=f,this.uncompressedSize=l,this.crc32=u,this.compression=c,this.compressedContent=p}s.prototype={getContentWorker:function(){var f=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),l=this;return f.on("end",function(){if(this.streamInfo.data_length!==l.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),f},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(f,l,u){return f.pipe(new a).pipe(new o("uncompressedSize")).pipe(l.compressWorker(u)).pipe(new o("compressedSize")).withStreamInfo("compression",l)},t.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),i=function(){for(var a,o=[],s=0;s<256;s++){a=s;for(var f=0;f<8;f++)a=1&a?3988292384^a>>>1:a>>>1;o[s]=a}return o}();t.exports=function(a,o){return a!==void 0&&a.length?n.getTypeOf(a)!=="string"?function(s,f,l,u){var c=i,p=u+l;s^=-1;for(var h=u;h<p;h++)s=s>>>8^c[255&(s^f[h])];return-1^s}(0|o,a,a.length,0):function(s,f,l,u){var c=i,p=u+l;s^=-1;for(var h=u;h<p;h++)s=s>>>8^c[255&(s^f.charCodeAt(h))];return-1^s}(0|o,a,a.length,0):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n=null;n=typeof Promise<"u"?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",i=e("pako"),a=e("./utils"),o=e("./stream/GenericWorker"),s=n?"uint8array":"array";function f(l,u){o.call(this,"FlateWorker/"+l),this._pako=null,this._pakoAction=l,this._pakoOptions=u,this.meta={}}r.magic="\b\0",a.inherits(f,o),f.prototype.processChunk=function(l){this.meta=l.meta,this._pako===null&&this._createPako(),this._pako.push(a.transformTo(s,l.data),!1)},f.prototype.flush=function(){o.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},f.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null},f.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var l=this;this._pako.onData=function(u){l.push({data:u,meta:l.meta})}},r.compressWorker=function(l){return new f("Deflate",l)},r.uncompressWorker=function(){return new f("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function n(c,p){var h,y="";for(h=0;h<p;h++)y+=String.fromCharCode(255&c),c>>>=8;return y}function i(c,p,h,y,m,g){var b,A,x=c.file,T=c.compression,S=g!==s.utf8encode,L=a.transformTo("string",g(x.name)),k=a.transformTo("string",s.utf8encode(x.name)),F=x.comment,Z=a.transformTo("string",g(F)),E=a.transformTo("string",s.utf8encode(F)),O=k.length!==x.name.length,_=E.length!==F.length,M="",te="",j="",ne=x.dir,G=x.date,Q={crc32:0,compressedSize:0,uncompressedSize:0};p&&!h||(Q.crc32=c.crc32,Q.compressedSize=c.compressedSize,Q.uncompressedSize=c.uncompressedSize);var C=0;p&&(C|=8),S||!O&&!_||(C|=2048);var B=0,ee=0;ne&&(B|=16),m==="UNIX"?(ee=798,B|=function(Y,ye){var Te=Y;return Y||(Te=ye?16893:33204),(65535&Te)<<16}(x.unixPermissions,ne)):(ee=20,B|=function(Y){return 63&(Y||0)}(x.dosPermissions)),b=G.getUTCHours(),b<<=6,b|=G.getUTCMinutes(),b<<=5,b|=G.getUTCSeconds()/2,A=G.getUTCFullYear()-1980,A<<=4,A|=G.getUTCMonth()+1,A<<=5,A|=G.getUTCDate(),O&&(te=n(1,1)+n(f(L),4)+k,M+="up"+n(te.length,2)+te),_&&(j=n(1,1)+n(f(Z),4)+E,M+="uc"+n(j.length,2)+j);var $="";return $+=`
\0`,$+=n(C,2),$+=T.magic,$+=n(b,2),$+=n(A,2),$+=n(Q.crc32,4),$+=n(Q.compressedSize,4),$+=n(Q.uncompressedSize,4),$+=n(L.length,2),$+=n(M.length,2),{fileRecord:l.LOCAL_FILE_HEADER+$+L+M,dirRecord:l.CENTRAL_FILE_HEADER+n(ee,2)+$+n(Z.length,2)+"\0\0\0\0"+n(B,4)+n(y,4)+L+M+Z}}var a=e("../utils"),o=e("../stream/GenericWorker"),s=e("../utf8"),f=e("../crc32"),l=e("../signature");function u(c,p,h,y){o.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=p,this.zipPlatform=h,this.encodeFileName=y,this.streamFiles=c,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}a.inherits(u,o),u.prototype.push=function(c){var p=c.meta.percent||0,h=this.entriesCount,y=this._sources.length;this.accumulate?this.contentBuffer.push(c):(this.bytesWritten+=c.data.length,o.prototype.push.call(this,{data:c.data,meta:{currentFile:this.currentFile,percent:h?(p+100*(h-y-1))/h:100}}))},u.prototype.openedSource=function(c){this.currentSourceOffset=this.bytesWritten,this.currentFile=c.file.name;var p=this.streamFiles&&!c.file.dir;if(p){var h=i(c,p,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:h.fileRecord,meta:{percent:0}})}else this.accumulate=!0},u.prototype.closedSource=function(c){this.accumulate=!1;var p=this.streamFiles&&!c.file.dir,h=i(c,p,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(h.dirRecord),p)this.push({data:function(y){return l.DATA_DESCRIPTOR+n(y.crc32,4)+n(y.compressedSize,4)+n(y.uncompressedSize,4)}(c),meta:{percent:100}});else for(this.push({data:h.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},u.prototype.flush=function(){for(var c=this.bytesWritten,p=0;p<this.dirRecords.length;p++)this.push({data:this.dirRecords[p],meta:{percent:100}});var h=this.bytesWritten-c,y=function(m,g,b,A,x){var T=a.transformTo("string",x(A));return l.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(m,2)+n(m,2)+n(g,4)+n(b,4)+n(T.length,2)+T}(this.dirRecords.length,h,c,this.zipComment,this.encodeFileName);this.push({data:y,meta:{percent:100}})},u.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},u.prototype.registerPrevious=function(c){this._sources.push(c);var p=this;return c.on("data",function(h){p.processChunk(h)}),c.on("end",function(){p.closedSource(p.previous.streamInfo),p._sources.length?p.prepareNextSource():p.end()}),c.on("error",function(h){p.error(h)}),this},u.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},u.prototype.error=function(c){var p=this._sources;if(!o.prototype.error.call(this,c))return!1;for(var h=0;h<p.length;h++)try{p[h].error(c)}catch{}return!0},u.prototype.lock=function(){o.prototype.lock.call(this);for(var c=this._sources,p=0;p<c.length;p++)c[p].lock()},t.exports=u},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var n=e("../compressions"),i=e("./ZipFileWorker");r.generateWorker=function(a,o,s){var f=new i(o.streamFiles,s,o.platform,o.encodeFileName),l=0;try{a.forEach(function(u,c){l++;var p=function(g,b){var A=g||b,x=n[A];if(!x)throw new Error(A+" is not a valid compression method !");return x}(c.options.compression,o.compression),h=c.options.compressionOptions||o.compressionOptions||{},y=c.dir,m=c.date;c._compressWorker(p,h).withStreamInfo("file",{name:u,dir:y,date:m,comment:c.comment||"",unixPermissions:c.unixPermissions,dosPermissions:c.dosPermissions}).pipe(f)}),f.entriesCount=l}catch(u){f.error(u)}return f}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var i=new n;for(var a in this)typeof this[a]!="function"&&(i[a]=this[a]);return i}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(i,a){return new n().loadAsync(i,a)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),a=e("./utf8"),o=e("./zipEntries"),s=e("./stream/Crc32Probe"),f=e("./nodejsUtils");function l(u){return new i.Promise(function(c,p){var h=u.decompressed.getContentWorker().pipe(new s);h.on("error",function(y){p(y)}).on("end",function(){h.streamInfo.crc32!==u.decompressed.crc32?p(new Error("Corrupted zip : CRC32 mismatch")):c()}).resume()})}t.exports=function(u,c){var p=this;return c=n.extend(c||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:a.utf8decode}),f.isNode&&f.isStream(u)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",u,!0,c.optimizedBinaryString,c.base64).then(function(h){var y=new o(c);return y.load(h),y}).then(function(h){var y=[i.Promise.resolve(h)],m=h.files;if(c.checkCRC32)for(var g=0;g<m.length;g++)y.push(l(m[g]));return i.Promise.all(y)}).then(function(h){for(var y=h.shift(),m=y.files,g=0;g<m.length;g++){var b=m[g],A=b.fileNameStr,x=n.resolve(b.fileNameStr);p.file(x,b.decompressed,{binary:!0,optimizedBinaryString:!0,date:b.date,dir:b.dir,comment:b.fileCommentStr.length?b.fileCommentStr:null,unixPermissions:b.unixPermissions,dosPermissions:b.dosPermissions,createFolders:c.createFolders}),b.dir||(p.file(x).unsafeOriginalName=A)}return y.zipComment.length&&(p.comment=y.zipComment),p})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function a(o,s){i.call(this,"Nodejs stream input adapter for "+o),this._upstreamEnded=!1,this._bindStream(s)}n.inherits(a,i),a.prototype._bindStream=function(o){var s=this;(this._stream=o).pause(),o.on("data",function(f){s.push({data:f,meta:{percent:0}})}).on("error",function(f){s.isPaused?this.generatedError=f:s.error(f)}).on("end",function(){s.isPaused?s._upstreamEnded=!0:s.end()})},a.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},a.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=a},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var n=e("readable-stream").Readable;function i(a,o,s){n.call(this,o),this._helper=a;var f=this;a.on("data",function(l,u){f.push(l)||f._helper.pause(),s&&s(u)}).on("error",function(l){f.emit("error",l)}).on("end",function(){f.push(null)})}e("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:typeof Buffer<"u",newBufferFrom:function(n,i){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(n,i);if(typeof n=="number")throw new Error('The "data" argument must not be a number');return new Buffer(n,i)},allocBuffer:function(n){if(Buffer.alloc)return Buffer.alloc(n);var i=new Buffer(n);return i.fill(0),i},isBuffer:function(n){return Buffer.isBuffer(n)},isStream:function(n){return n&&typeof n.on=="function"&&typeof n.pause=="function"&&typeof n.resume=="function"}}},{}],15:[function(e,t,r){"use strict";function n(x,T,S){var L,k=a.getTypeOf(T),F=a.extend(S||{},f);F.date=F.date||new Date,F.compression!==null&&(F.compression=F.compression.toUpperCase()),typeof F.unixPermissions=="string"&&(F.unixPermissions=parseInt(F.unixPermissions,8)),F.unixPermissions&&16384&F.unixPermissions&&(F.dir=!0),F.dosPermissions&&16&F.dosPermissions&&(F.dir=!0),F.dir&&(x=m(x)),F.createFolders&&(L=y(x))&&g.call(this,L,!0);var Z=k==="string"&&F.binary===!1&&F.base64===!1;S&&S.binary!==void 0||(F.binary=!Z),(T instanceof l&&T.uncompressedSize===0||F.dir||!T||T.length===0)&&(F.base64=!1,F.binary=!0,T="",F.compression="STORE",k="string");var E=null;E=T instanceof l||T instanceof o?T:p.isNode&&p.isStream(T)?new h(x,T):a.prepareContent(x,T,F.binary,F.optimizedBinaryString,F.base64);var O=new u(x,E,F);this.files[x]=O}var i=e("./utf8"),a=e("./utils"),o=e("./stream/GenericWorker"),s=e("./stream/StreamHelper"),f=e("./defaults"),l=e("./compressedObject"),u=e("./zipObject"),c=e("./generate"),p=e("./nodejsUtils"),h=e("./nodejs/NodejsStreamInputAdapter"),y=function(x){x.slice(-1)==="/"&&(x=x.substring(0,x.length-1));var T=x.lastIndexOf("/");return 0<T?x.substring(0,T):""},m=function(x){return x.slice(-1)!=="/"&&(x+="/"),x},g=function(x,T){return T=T!==void 0?T:f.createFolders,x=m(x),this.files[x]||n.call(this,x,null,{dir:!0,createFolders:T}),this.files[x]};function b(x){return Object.prototype.toString.call(x)==="[object RegExp]"}var A={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(x){var T,S,L;for(T in this.files)L=this.files[T],(S=T.slice(this.root.length,T.length))&&T.slice(0,this.root.length)===this.root&&x(S,L)},filter:function(x){var T=[];return this.forEach(function(S,L){x(S,L)&&T.push(L)}),T},file:function(x,T,S){if(arguments.length!==1)return x=this.root+x,n.call(this,x,T,S),this;if(b(x)){var L=x;return this.filter(function(F,Z){return!Z.dir&&L.test(F)})}var k=this.files[this.root+x];return k&&!k.dir?k:null},folder:function(x){if(!x)return this;if(b(x))return this.filter(function(k,F){return F.dir&&x.test(k)});var T=this.root+x,S=g.call(this,T),L=this.clone();return L.root=S.name,L},remove:function(x){x=this.root+x;var T=this.files[x];if(T||(x.slice(-1)!=="/"&&(x+="/"),T=this.files[x]),T&&!T.dir)delete this.files[x];else for(var S=this.filter(function(k,F){return F.name.slice(0,x.length)===x}),L=0;L<S.length;L++)delete this.files[S[L].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(x){var T,S={};try{if((S=a.extend(x||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=S.type.toLowerCase(),S.compression=S.compression.toUpperCase(),S.type==="binarystring"&&(S.type="string"),!S.type)throw new Error("No output type specified.");a.checkSupport(S.type),S.platform!=="darwin"&&S.platform!=="freebsd"&&S.platform!=="linux"&&S.platform!=="sunos"||(S.platform="UNIX"),S.platform==="win32"&&(S.platform="DOS");var L=S.comment||this.comment||"";T=c.generateWorker(this,S,L)}catch(k){(T=new o("error")).error(k)}return new s(T,S.type||"string",S.mimeType)},generateAsync:function(x,T){return this.generateInternalStream(x).accumulate(T)},generateNodeStream:function(x,T){return(x=x||{}).type||(x.type="nodebuffer"),this.generateInternalStream(x).toNodejsStream(T)}};t.exports=A},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(a){n.call(this,a);for(var o=0;o<this.data.length;o++)a[o]=255&a[o]}e("../utils").inherits(i,n),i.prototype.byteAt=function(a){return this.data[this.zero+a]},i.prototype.lastIndexOfSignature=function(a){for(var o=a.charCodeAt(0),s=a.charCodeAt(1),f=a.charCodeAt(2),l=a.charCodeAt(3),u=this.length-4;0<=u;--u)if(this.data[u]===o&&this.data[u+1]===s&&this.data[u+2]===f&&this.data[u+3]===l)return u-this.zero;return-1},i.prototype.readAndCheckSignature=function(a){var o=a.charCodeAt(0),s=a.charCodeAt(1),f=a.charCodeAt(2),l=a.charCodeAt(3),u=this.readData(4);return o===u[0]&&s===u[1]&&f===u[2]&&l===u[3]},i.prototype.readData=function(a){if(this.checkOffset(a),a===0)return[];var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(a){this.data=a,this.length=a.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+a+"). Corrupted zip ?")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(){},readInt:function(a){var o,s=0;for(this.checkOffset(a),o=this.index+a-1;o>=this.index;o--)s=(s<<8)+this.byteAt(o);return this.index+=a,s},readString:function(a){return n.transformTo("string",this.readData(a))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var a=this.readInt(4);return new Date(Date.UTC(1980+(a>>25&127),(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.readData=function(a){this.checkOffset(a);var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},i.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},i.prototype.readAndCheckSignature=function(a){return a===this.readData(4)},i.prototype.readData=function(a){this.checkOffset(a);var o=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(a){n.call(this,a)}e("../utils").inherits(i,n),i.prototype.readData=function(a){if(this.checkOffset(a),a===0)return new Uint8Array(0);var o=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,o},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),a=e("./ArrayReader"),o=e("./StringReader"),s=e("./NodeBufferReader"),f=e("./Uint8ArrayReader");t.exports=function(l){var u=n.getTypeOf(l);return n.checkSupport(u),u!=="string"||i.uint8array?u==="nodebuffer"?new s(l):i.uint8array?new f(n.transformTo("uint8array",l)):new a(n.transformTo("array",l)):new o(l)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function a(o){n.call(this,"ConvertWorker to "+o),this.destType=o}i.inherits(a,n),a.prototype.processChunk=function(o){this.push({data:i.transformTo(this.destType,o.data),meta:o.meta})},t.exports=a},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function a(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(a,n),a.prototype.processChunk=function(o){this.streamInfo.crc32=i(o.data,this.streamInfo.crc32||0),this.push(o)},t.exports=a},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function a(o){i.call(this,"DataLengthProbe for "+o),this.propName=o,this.withStreamInfo(o,0)}n.inherits(a,i),a.prototype.processChunk=function(o){if(o){var s=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=s+o.data.length}i.prototype.processChunk.call(this,o)},t.exports=a},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function a(o){i.call(this,"DataWorker");var s=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,o.then(function(f){s.dataIsReady=!0,s.data=f,s.max=f&&f.length||0,s.type=n.getTypeOf(f),s.isPaused||s._tickAndRepeat()},function(f){s.error(f)})}n.inherits(a,i),a.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},a.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},a.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},a.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var o=null,s=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":o=this.data.substring(this.index,s);break;case"uint8array":o=this.data.subarray(this.index,s);break;case"array":case"nodebuffer":o=this.data.slice(this.index,s)}return this.index=s,this.push({data:o,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=a},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(i){this.name=i||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(i){this.emit("data",i)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(i){this.emit("error",i)}return!0},error:function(i){return!this.isFinished&&(this.isPaused?this.generatedError=i:(this.isFinished=!0,this.emit("error",i),this.previous&&this.previous.error(i),this.cleanUp()),!0)},on:function(i,a){return this._listeners[i].push(a),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(i,a){if(this._listeners[i])for(var o=0;o<this._listeners[i].length;o++)this._listeners[i][o].call(this,a)},pipe:function(i){return i.registerPrevious(this)},registerPrevious:function(i){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=i.streamInfo,this.mergeStreamInfo(),this.previous=i;var a=this;return i.on("data",function(o){a.processChunk(o)}),i.on("end",function(){a.end()}),i.on("error",function(o){a.error(o)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var i=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),i=!0),this.previous&&this.previous.resume(),!i},flush:function(){},processChunk:function(i){this.push(i)},withStreamInfo:function(i,a){return this.extraStreamInfo[i]=a,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var i in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,i)&&(this.streamInfo[i]=this.extraStreamInfo[i])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var i="Worker "+this.name;return this.previous?this.previous+" -> "+i:i}},t.exports=n},{}],29:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./ConvertWorker"),a=e("./GenericWorker"),o=e("../base64"),s=e("../support"),f=e("../external"),l=null;if(s.nodestream)try{l=e("../nodejs/NodejsStreamOutputAdapter")}catch{}function u(p,h){return new f.Promise(function(y,m){var g=[],b=p._internalType,A=p._outputType,x=p._mimeType;p.on("data",function(T,S){g.push(T),h&&h(S)}).on("error",function(T){g=[],m(T)}).on("end",function(){try{var T=function(S,L,k){switch(S){case"blob":return n.newBlob(n.transformTo("arraybuffer",L),k);case"base64":return o.encode(L);default:return n.transformTo(S,L)}}(A,function(S,L){var k,F=0,Z=null,E=0;for(k=0;k<L.length;k++)E+=L[k].length;switch(S){case"string":return L.join("");case"array":return Array.prototype.concat.apply([],L);case"uint8array":for(Z=new Uint8Array(E),k=0;k<L.length;k++)Z.set(L[k],F),F+=L[k].length;return Z;case"nodebuffer":return Buffer.concat(L);default:throw new Error("concat : unsupported type '"+S+"'")}}(b,g),x);y(T)}catch(S){m(S)}g=[]}).resume()})}function c(p,h,y){var m=h;switch(h){case"blob":case"arraybuffer":m="uint8array";break;case"base64":m="string"}try{this._internalType=m,this._outputType=h,this._mimeType=y,n.checkSupport(m),this._worker=p.pipe(new i(m)),p.lock()}catch(g){this._worker=new a("error"),this._worker.error(g)}}c.prototype={accumulate:function(p){return u(this,p)},on:function(p,h){var y=this;return p==="data"?this._worker.on(p,function(m){h.call(y,m.data,m.meta)}):this._worker.on(p,function(){n.delay(h,arguments,y)}),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(p){if(n.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:this._outputType!=="nodebuffer"},p)}},t.exports=c},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",r.nodebuffer=typeof Buffer<"u",r.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=new Blob([n],{type:"application/zip"}).size===0}catch{try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=i.getBlob("application/zip").size===0}catch{r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch{r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){"use strict";for(var n=e("./utils"),i=e("./support"),a=e("./nodejsUtils"),o=e("./stream/GenericWorker"),s=new Array(256),f=0;f<256;f++)s[f]=252<=f?6:248<=f?5:240<=f?4:224<=f?3:192<=f?2:1;s[254]=s[254]=1;function l(){o.call(this,"utf-8 decode"),this.leftOver=null}function u(){o.call(this,"utf-8 encode")}r.utf8encode=function(c){return i.nodebuffer?a.newBufferFrom(c,"utf-8"):function(p){var h,y,m,g,b,A=p.length,x=0;for(g=0;g<A;g++)(64512&(y=p.charCodeAt(g)))==55296&&g+1<A&&(64512&(m=p.charCodeAt(g+1)))==56320&&(y=65536+(y-55296<<10)+(m-56320),g++),x+=y<128?1:y<2048?2:y<65536?3:4;for(h=i.uint8array?new Uint8Array(x):new Array(x),g=b=0;b<x;g++)(64512&(y=p.charCodeAt(g)))==55296&&g+1<A&&(64512&(m=p.charCodeAt(g+1)))==56320&&(y=65536+(y-55296<<10)+(m-56320),g++),y<128?h[b++]=y:(y<2048?h[b++]=192|y>>>6:(y<65536?h[b++]=224|y>>>12:(h[b++]=240|y>>>18,h[b++]=128|y>>>12&63),h[b++]=128|y>>>6&63),h[b++]=128|63&y);return h}(c)},r.utf8decode=function(c){return i.nodebuffer?n.transformTo("nodebuffer",c).toString("utf-8"):function(p){var h,y,m,g,b=p.length,A=new Array(2*b);for(h=y=0;h<b;)if((m=p[h++])<128)A[y++]=m;else if(4<(g=s[m]))A[y++]=65533,h+=g-1;else{for(m&=g===2?31:g===3?15:7;1<g&&h<b;)m=m<<6|63&p[h++],g--;1<g?A[y++]=65533:m<65536?A[y++]=m:(m-=65536,A[y++]=55296|m>>10&1023,A[y++]=56320|1023&m)}return A.length!==y&&(A.subarray?A=A.subarray(0,y):A.length=y),n.applyFromCharCode(A)}(c=n.transformTo(i.uint8array?"uint8array":"array",c))},n.inherits(l,o),l.prototype.processChunk=function(c){var p=n.transformTo(i.uint8array?"uint8array":"array",c.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var h=p;(p=new Uint8Array(h.length+this.leftOver.length)).set(this.leftOver,0),p.set(h,this.leftOver.length)}else p=this.leftOver.concat(p);this.leftOver=null}var y=function(g,b){var A;for((b=b||g.length)>g.length&&(b=g.length),A=b-1;0<=A&&(192&g[A])==128;)A--;return A<0||A===0?b:A+s[g[A]]>b?A:b}(p),m=p;y!==p.length&&(i.uint8array?(m=p.subarray(0,y),this.leftOver=p.subarray(y,p.length)):(m=p.slice(0,y),this.leftOver=p.slice(y,p.length))),this.push({data:r.utf8decode(m),meta:c.meta})},l.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=l,n.inherits(u,o),u.prototype.processChunk=function(c){this.push({data:r.utf8encode(c.data),meta:c.meta})},r.Utf8EncodeWorker=u},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){"use strict";var n=e("./support"),i=e("./base64"),a=e("./nodejsUtils"),o=e("./external");function s(h){return h}function f(h,y){for(var m=0;m<h.length;++m)y[m]=255&h.charCodeAt(m);return y}e("setimmediate"),r.newBlob=function(h,y){r.checkSupport("blob");try{return new Blob([h],{type:y})}catch{try{var m=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return m.append(h),m.getBlob(y)}catch{throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(h,y,m){var g=[],b=0,A=h.length;if(A<=m)return String.fromCharCode.apply(null,h);for(;b<A;)y==="array"||y==="nodebuffer"?g.push(String.fromCharCode.apply(null,h.slice(b,Math.min(b+m,A)))):g.push(String.fromCharCode.apply(null,h.subarray(b,Math.min(b+m,A)))),b+=m;return g.join("")},stringifyByChar:function(h){for(var y="",m=0;m<h.length;m++)y+=String.fromCharCode(h[m]);return y},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&String.fromCharCode.apply(null,a.allocBuffer(1)).length===1}catch{return!1}}()}};function u(h){var y=65536,m=r.getTypeOf(h),g=!0;if(m==="uint8array"?g=l.applyCanBeUsed.uint8array:m==="nodebuffer"&&(g=l.applyCanBeUsed.nodebuffer),g)for(;1<y;)try{return l.stringifyByChunk(h,m,y)}catch{y=Math.floor(y/2)}return l.stringifyByChar(h)}function c(h,y){for(var m=0;m<h.length;m++)y[m]=h[m];return y}r.applyFromCharCode=u;var p={};p.string={string:s,array:function(h){return f(h,new Array(h.length))},arraybuffer:function(h){return p.string.uint8array(h).buffer},uint8array:function(h){return f(h,new Uint8Array(h.length))},nodebuffer:function(h){return f(h,a.allocBuffer(h.length))}},p.array={string:u,array:s,arraybuffer:function(h){return new Uint8Array(h).buffer},uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(h)}},p.arraybuffer={string:function(h){return u(new Uint8Array(h))},array:function(h){return c(new Uint8Array(h),new Array(h.byteLength))},arraybuffer:s,uint8array:function(h){return new Uint8Array(h)},nodebuffer:function(h){return a.newBufferFrom(new Uint8Array(h))}},p.uint8array={string:u,array:function(h){return c(h,new Array(h.length))},arraybuffer:function(h){return h.buffer},uint8array:s,nodebuffer:function(h){return a.newBufferFrom(h)}},p.nodebuffer={string:u,array:function(h){return c(h,new Array(h.length))},arraybuffer:function(h){return p.nodebuffer.uint8array(h).buffer},uint8array:function(h){return c(h,new Uint8Array(h.length))},nodebuffer:s},r.transformTo=function(h,y){if(y=y||"",!h)return y;r.checkSupport(h);var m=r.getTypeOf(y);return p[m][h](y)},r.resolve=function(h){for(var y=h.split("/"),m=[],g=0;g<y.length;g++){var b=y[g];b==="."||b===""&&g!==0&&g!==y.length-1||(b===".."?m.pop():m.push(b))}return m.join("/")},r.getTypeOf=function(h){return typeof h=="string"?"string":Object.prototype.toString.call(h)==="[object Array]"?"array":n.nodebuffer&&a.isBuffer(h)?"nodebuffer":n.uint8array&&h instanceof Uint8Array?"uint8array":n.arraybuffer&&h instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(h){if(!n[h.toLowerCase()])throw new Error(h+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(h){var y,m,g="";for(m=0;m<(h||"").length;m++)g+="\\x"+((y=h.charCodeAt(m))<16?"0":"")+y.toString(16).toUpperCase();return g},r.delay=function(h,y,m){setImmediate(function(){h.apply(m||null,y||[])})},r.inherits=function(h,y){function m(){}m.prototype=y.prototype,h.prototype=new m},r.extend=function(){var h,y,m={};for(h=0;h<arguments.length;h++)for(y in arguments[h])Object.prototype.hasOwnProperty.call(arguments[h],y)&&m[y]===void 0&&(m[y]=arguments[h][y]);return m},r.prepareContent=function(h,y,m,g,b){return o.Promise.resolve(y).then(function(A){return n.blob&&(A instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(A))!==-1)&&typeof FileReader<"u"?new o.Promise(function(x,T){var S=new FileReader;S.onload=function(L){x(L.target.result)},S.onerror=function(L){T(L.target.error)},S.readAsArrayBuffer(A)}):A}).then(function(A){var x=r.getTypeOf(A);return x?(x==="arraybuffer"?A=r.transformTo("uint8array",A):x==="string"&&(b?A=i.decode(A):m&&g!==!0&&(A=function(T){return f(T,n.uint8array?new Uint8Array(T.length):new Array(T.length))}(A))),A):o.Promise.reject(new Error("Can't read the data of '"+h+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),a=e("./signature"),o=e("./zipEntry"),s=e("./support");function f(l){this.files=[],this.loadOptions=l}f.prototype={checkSignature:function(l){if(!this.reader.readAndCheckSignature(l)){this.reader.index-=4;var u=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(u)+", expected "+i.pretty(l)+")")}},isSignature:function(l,u){var c=this.reader.index;this.reader.setIndex(l);var p=this.reader.readString(4)===u;return this.reader.setIndex(c),p},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var l=this.reader.readData(this.zipCommentLength),u=s.uint8array?"uint8array":"array",c=i.transformTo(u,l);this.zipComment=this.loadOptions.decodeFileName(c)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var l,u,c,p=this.zip64EndOfCentralSize-44;0<p;)l=this.reader.readInt(2),u=this.reader.readInt(4),c=this.reader.readData(u),this.zip64ExtensibleData[l]={id:l,length:u,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var l,u;for(l=0;l<this.files.length;l++)u=this.files[l],this.reader.setIndex(u.localHeaderOffset),this.checkSignature(a.LOCAL_FILE_HEADER),u.readLocalPart(this.reader),u.handleUTF8(),u.processAttributes()},readCentralDir:function(){var l;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(a.CENTRAL_FILE_HEADER);)(l=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(l);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var l=this.reader.lastIndexOfSignature(a.CENTRAL_DIRECTORY_END);if(l<0)throw this.isSignature(0,a.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(l);var u=l;if(this.checkSignature(a.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(l=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(l),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,a.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(a.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var c=this.centralDirOffset+this.centralDirSize;this.zip64&&(c+=20,c+=12+this.zip64EndOfCentralSize);var p=u-c;if(0<p)this.isSignature(u,a.CENTRAL_FILE_HEADER)||(this.reader.zero=p);else if(p<0)throw new Error("Corrupted zip: missing "+Math.abs(p)+" bytes.")},prepareReader:function(l){this.reader=n(l)},load:function(l){this.prepareReader(l),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=f},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),a=e("./compressedObject"),o=e("./crc32"),s=e("./utf8"),f=e("./compressions"),l=e("./support");function u(c,p){this.options=c,this.loadOptions=p}u.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(c){var p,h;if(c.skip(22),this.fileNameLength=c.readInt(2),h=c.readInt(2),this.fileName=c.readData(this.fileNameLength),c.skip(h),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((p=function(y){for(var m in f)if(Object.prototype.hasOwnProperty.call(f,m)&&f[m].magic===y)return f[m];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new a(this.compressedSize,this.uncompressedSize,this.crc32,p,c.readData(this.compressedSize))},readCentralPart:function(c){this.versionMadeBy=c.readInt(2),c.skip(2),this.bitFlag=c.readInt(2),this.compressionMethod=c.readString(2),this.date=c.readDate(),this.crc32=c.readInt(4),this.compressedSize=c.readInt(4),this.uncompressedSize=c.readInt(4);var p=c.readInt(2);if(this.extraFieldsLength=c.readInt(2),this.fileCommentLength=c.readInt(2),this.diskNumberStart=c.readInt(2),this.internalFileAttributes=c.readInt(2),this.externalFileAttributes=c.readInt(4),this.localHeaderOffset=c.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");c.skip(p),this.readExtraFields(c),this.parseZIP64ExtraField(c),this.fileComment=c.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var c=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),c==0&&(this.dosPermissions=63&this.externalFileAttributes),c==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var c=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=c.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=c.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=c.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=c.readInt(4))}},readExtraFields:function(c){var p,h,y,m=c.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});c.index+4<m;)p=c.readInt(2),h=c.readInt(2),y=c.readData(h),this.extraFields[p]={id:p,length:h,value:y};c.setIndex(m)},handleUTF8:function(){var c=l.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var p=this.findExtraFieldUnicodePath();if(p!==null)this.fileNameStr=p;else{var h=i.transformTo(c,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(h)}var y=this.findExtraFieldUnicodeComment();if(y!==null)this.fileCommentStr=y;else{var m=i.transformTo(c,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(m)}}},findExtraFieldUnicodePath:function(){var c=this.extraFields[28789];if(c){var p=n(c.value);return p.readInt(1)!==1||o(this.fileName)!==p.readInt(4)?null:s.utf8decode(p.readData(c.length-5))}return null},findExtraFieldUnicodeComment:function(){var c=this.extraFields[25461];if(c){var p=n(c.value);return p.readInt(1)!==1||o(this.fileComment)!==p.readInt(4)?null:s.utf8decode(p.readData(c.length-5))}return null}},t.exports=u},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(p,h,y){this.name=p,this.dir=y.dir,this.date=y.date,this.comment=y.comment,this.unixPermissions=y.unixPermissions,this.dosPermissions=y.dosPermissions,this._data=h,this._dataBinary=y.binary,this.options={compression:y.compression,compressionOptions:y.compressionOptions}}var i=e("./stream/StreamHelper"),a=e("./stream/DataWorker"),o=e("./utf8"),s=e("./compressedObject"),f=e("./stream/GenericWorker");n.prototype={internalStream:function(p){var h=null,y="string";try{if(!p)throw new Error("No output type specified.");var m=(y=p.toLowerCase())==="string"||y==="text";y!=="binarystring"&&y!=="text"||(y="string"),h=this._decompressWorker();var g=!this._dataBinary;g&&!m&&(h=h.pipe(new o.Utf8EncodeWorker)),!g&&m&&(h=h.pipe(new o.Utf8DecodeWorker))}catch(b){(h=new f("error")).error(b)}return new i(h,y,"")},async:function(p,h){return this.internalStream(p).accumulate(h)},nodeStream:function(p,h){return this.internalStream(p||"nodebuffer").toNodejsStream(h)},_compressWorker:function(p,h){if(this._data instanceof s&&this._data.compression.magic===p.magic)return this._data.getCompressedWorker();var y=this._decompressWorker();return this._dataBinary||(y=y.pipe(new o.Utf8EncodeWorker)),s.createWorkerFrom(y,p,h)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof f?this._data:new a(this._data)}};for(var l=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],u=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},c=0;c<l.length;c++)n.prototype[l[c]]=u;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(n){"use strict";var i,a,o=n.MutationObserver||n.WebKitMutationObserver;if(o){var s=0,f=new o(p),l=n.document.createTextNode("");f.observe(l,{characterData:!0}),i=function(){l.data=s=++s%2}}else if(n.setImmediate||n.MessageChannel===void 0)i="document"in n&&"onreadystatechange"in n.document.createElement("script")?function(){var h=n.document.createElement("script");h.onreadystatechange=function(){p(),h.onreadystatechange=null,h.parentNode.removeChild(h),h=null},n.document.documentElement.appendChild(h)}:function(){setTimeout(p,0)};else{var u=new n.MessageChannel;u.port1.onmessage=p,i=function(){u.port2.postMessage(0)}}var c=[];function p(){var h,y;a=!0;for(var m=c.length;m;){for(y=c,c=[],h=-1;++h<m;)y[h]();m=c.length}a=!1}t.exports=function(h){c.push(h)!==1||a||i()}}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(e,t,r){"use strict";var n=e("immediate");function i(){}var a={},o=["REJECTED"],s=["FULFILLED"],f=["PENDING"];function l(m){if(typeof m!="function")throw new TypeError("resolver must be a function");this.state=f,this.queue=[],this.outcome=void 0,m!==i&&h(this,m)}function u(m,g,b){this.promise=m,typeof g=="function"&&(this.onFulfilled=g,this.callFulfilled=this.otherCallFulfilled),typeof b=="function"&&(this.onRejected=b,this.callRejected=this.otherCallRejected)}function c(m,g,b){n(function(){var A;try{A=g(b)}catch(x){return a.reject(m,x)}A===m?a.reject(m,new TypeError("Cannot resolve promise with itself")):a.resolve(m,A)})}function p(m){var g=m&&m.then;if(m&&(typeof m=="object"||typeof m=="function")&&typeof g=="function")return function(){g.apply(m,arguments)}}function h(m,g){var b=!1;function A(S){b||(b=!0,a.reject(m,S))}function x(S){b||(b=!0,a.resolve(m,S))}var T=y(function(){g(x,A)});T.status==="error"&&A(T.value)}function y(m,g){var b={};try{b.value=m(g),b.status="success"}catch(A){b.status="error",b.value=A}return b}(t.exports=l).prototype.finally=function(m){if(typeof m!="function")return this;var g=this.constructor;return this.then(function(b){return g.resolve(m()).then(function(){return b})},function(b){return g.resolve(m()).then(function(){throw b})})},l.prototype.catch=function(m){return this.then(null,m)},l.prototype.then=function(m,g){if(typeof m!="function"&&this.state===s||typeof g!="function"&&this.state===o)return this;var b=new this.constructor(i);return this.state!==f?c(b,this.state===s?m:g,this.outcome):this.queue.push(new u(b,m,g)),b},u.prototype.callFulfilled=function(m){a.resolve(this.promise,m)},u.prototype.otherCallFulfilled=function(m){c(this.promise,this.onFulfilled,m)},u.prototype.callRejected=function(m){a.reject(this.promise,m)},u.prototype.otherCallRejected=function(m){c(this.promise,this.onRejected,m)},a.resolve=function(m,g){var b=y(p,g);if(b.status==="error")return a.reject(m,b.value);var A=b.value;if(A)h(m,A);else{m.state=s,m.outcome=g;for(var x=-1,T=m.queue.length;++x<T;)m.queue[x].callFulfilled(g)}return m},a.reject=function(m,g){m.state=o,m.outcome=g;for(var b=-1,A=m.queue.length;++b<A;)m.queue[b].callRejected(g);return m},l.resolve=function(m){return m instanceof this?m:a.resolve(new this(i),m)},l.reject=function(m){var g=new this(i);return a.reject(g,m)},l.all=function(m){var g=this;if(Object.prototype.toString.call(m)!=="[object Array]")return this.reject(new TypeError("must be an array"));var b=m.length,A=!1;if(!b)return this.resolve([]);for(var x=new Array(b),T=0,S=-1,L=new this(i);++S<b;)k(m[S],S);return L;function k(F,Z){g.resolve(F).then(function(E){x[Z]=E,++T!==b||A||(A=!0,a.resolve(L,x))},function(E){A||(A=!0,a.reject(L,E))})}},l.race=function(m){var g=this;if(Object.prototype.toString.call(m)!=="[object Array]")return this.reject(new TypeError("must be an array"));var b=m.length,A=!1;if(!b)return this.resolve([]);for(var x=-1,T=new this(i);++x<b;)S=m[x],g.resolve(S).then(function(L){A||(A=!0,a.resolve(T,L))},function(L){A||(A=!0,a.reject(T,L))});var S;return T}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var n=e("./zlib/deflate"),i=e("./utils/common"),a=e("./utils/strings"),o=e("./zlib/messages"),s=e("./zlib/zstream"),f=Object.prototype.toString,l=0,u=-1,c=0,p=8;function h(m){if(!(this instanceof h))return new h(m);this.options=i.assign({level:u,method:p,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},m||{});var g=this.options;g.raw&&0<g.windowBits?g.windowBits=-g.windowBits:g.gzip&&0<g.windowBits&&g.windowBits<16&&(g.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var b=n.deflateInit2(this.strm,g.level,g.method,g.windowBits,g.memLevel,g.strategy);if(b!==l)throw new Error(o[b]);if(g.header&&n.deflateSetHeader(this.strm,g.header),g.dictionary){var A;if(A=typeof g.dictionary=="string"?a.string2buf(g.dictionary):f.call(g.dictionary)==="[object ArrayBuffer]"?new Uint8Array(g.dictionary):g.dictionary,(b=n.deflateSetDictionary(this.strm,A))!==l)throw new Error(o[b]);this._dict_set=!0}}function y(m,g){var b=new h(g);if(b.push(m,!0),b.err)throw b.msg||o[b.err];return b.result}h.prototype.push=function(m,g){var b,A,x=this.strm,T=this.options.chunkSize;if(this.ended)return!1;A=g===~~g?g:g===!0?4:0,typeof m=="string"?x.input=a.string2buf(m):f.call(m)==="[object ArrayBuffer]"?x.input=new Uint8Array(m):x.input=m,x.next_in=0,x.avail_in=x.input.length;do{if(x.avail_out===0&&(x.output=new i.Buf8(T),x.next_out=0,x.avail_out=T),(b=n.deflate(x,A))!==1&&b!==l)return this.onEnd(b),!(this.ended=!0);x.avail_out!==0&&(x.avail_in!==0||A!==4&&A!==2)||(this.options.to==="string"?this.onData(a.buf2binstring(i.shrinkBuf(x.output,x.next_out))):this.onData(i.shrinkBuf(x.output,x.next_out)))}while((0<x.avail_in||x.avail_out===0)&&b!==1);return A===4?(b=n.deflateEnd(this.strm),this.onEnd(b),this.ended=!0,b===l):A!==2||(this.onEnd(l),!(x.avail_out=0))},h.prototype.onData=function(m){this.chunks.push(m)},h.prototype.onEnd=function(m){m===l&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=m,this.msg=this.strm.msg},r.Deflate=h,r.deflate=y,r.deflateRaw=function(m,g){return(g=g||{}).raw=!0,y(m,g)},r.gzip=function(m,g){return(g=g||{}).gzip=!0,y(m,g)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var n=e("./zlib/inflate"),i=e("./utils/common"),a=e("./utils/strings"),o=e("./zlib/constants"),s=e("./zlib/messages"),f=e("./zlib/zstream"),l=e("./zlib/gzheader"),u=Object.prototype.toString;function c(h){if(!(this instanceof c))return new c(h);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},h||{});var y=this.options;y.raw&&0<=y.windowBits&&y.windowBits<16&&(y.windowBits=-y.windowBits,y.windowBits===0&&(y.windowBits=-15)),!(0<=y.windowBits&&y.windowBits<16)||h&&h.windowBits||(y.windowBits+=32),15<y.windowBits&&y.windowBits<48&&!(15&y.windowBits)&&(y.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var m=n.inflateInit2(this.strm,y.windowBits);if(m!==o.Z_OK)throw new Error(s[m]);this.header=new l,n.inflateGetHeader(this.strm,this.header)}function p(h,y){var m=new c(y);if(m.push(h,!0),m.err)throw m.msg||s[m.err];return m.result}c.prototype.push=function(h,y){var m,g,b,A,x,T,S=this.strm,L=this.options.chunkSize,k=this.options.dictionary,F=!1;if(this.ended)return!1;g=y===~~y?y:y===!0?o.Z_FINISH:o.Z_NO_FLUSH,typeof h=="string"?S.input=a.binstring2buf(h):u.call(h)==="[object ArrayBuffer]"?S.input=new Uint8Array(h):S.input=h,S.next_in=0,S.avail_in=S.input.length;do{if(S.avail_out===0&&(S.output=new i.Buf8(L),S.next_out=0,S.avail_out=L),(m=n.inflate(S,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&k&&(T=typeof k=="string"?a.string2buf(k):u.call(k)==="[object ArrayBuffer]"?new Uint8Array(k):k,m=n.inflateSetDictionary(this.strm,T)),m===o.Z_BUF_ERROR&&F===!0&&(m=o.Z_OK,F=!1),m!==o.Z_STREAM_END&&m!==o.Z_OK)return this.onEnd(m),!(this.ended=!0);S.next_out&&(S.avail_out!==0&&m!==o.Z_STREAM_END&&(S.avail_in!==0||g!==o.Z_FINISH&&g!==o.Z_SYNC_FLUSH)||(this.options.to==="string"?(b=a.utf8border(S.output,S.next_out),A=S.next_out-b,x=a.buf2string(S.output,b),S.next_out=A,S.avail_out=L-A,A&&i.arraySet(S.output,S.output,b,A,0),this.onData(x)):this.onData(i.shrinkBuf(S.output,S.next_out)))),S.avail_in===0&&S.avail_out===0&&(F=!0)}while((0<S.avail_in||S.avail_out===0)&&m!==o.Z_STREAM_END);return m===o.Z_STREAM_END&&(g=o.Z_FINISH),g===o.Z_FINISH?(m=n.inflateEnd(this.strm),this.onEnd(m),this.ended=!0,m===o.Z_OK):g!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),!(S.avail_out=0))},c.prototype.onData=function(h){this.chunks.push(h)},c.prototype.onEnd=function(h){h===o.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=h,this.msg=this.strm.msg},r.Inflate=c,r.inflate=p,r.inflateRaw=function(h,y){return(y=y||{}).raw=!0,p(h,y)},r.ungzip=p},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";r.assign=function(o){for(var s=Array.prototype.slice.call(arguments,1);s.length;){var f=s.shift();if(f){if(typeof f!="object")throw new TypeError(f+"must be non-object");for(var l in f)f.hasOwnProperty(l)&&(o[l]=f[l])}}return o},r.shrinkBuf=function(o,s){return o.length===s?o:o.subarray?o.subarray(0,s):(o.length=s,o)};var i={arraySet:function(o,s,f,l,u){if(s.subarray&&o.subarray)o.set(s.subarray(f,f+l),u);else for(var c=0;c<l;c++)o[u+c]=s[f+c]},flattenChunks:function(o){var s,f,l,u,c,p;for(s=l=0,f=o.length;s<f;s++)l+=o[s].length;for(p=new Uint8Array(l),s=u=0,f=o.length;s<f;s++)c=o[s],p.set(c,u),u+=c.length;return p}},a={arraySet:function(o,s,f,l,u){for(var c=0;c<l;c++)o[u+c]=s[f+c]},flattenChunks:function(o){return[].concat.apply([],o)}};r.setTyped=function(o){o?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,a))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var n=e("./common"),i=!0,a=!0;try{String.fromCharCode.apply(null,[0])}catch{i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{a=!1}for(var o=new n.Buf8(256),s=0;s<256;s++)o[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function f(l,u){if(u<65537&&(l.subarray&&a||!l.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(l,u));for(var c="",p=0;p<u;p++)c+=String.fromCharCode(l[p]);return c}o[254]=o[254]=1,r.string2buf=function(l){var u,c,p,h,y,m=l.length,g=0;for(h=0;h<m;h++)(64512&(c=l.charCodeAt(h)))==55296&&h+1<m&&(64512&(p=l.charCodeAt(h+1)))==56320&&(c=65536+(c-55296<<10)+(p-56320),h++),g+=c<128?1:c<2048?2:c<65536?3:4;for(u=new n.Buf8(g),h=y=0;y<g;h++)(64512&(c=l.charCodeAt(h)))==55296&&h+1<m&&(64512&(p=l.charCodeAt(h+1)))==56320&&(c=65536+(c-55296<<10)+(p-56320),h++),c<128?u[y++]=c:(c<2048?u[y++]=192|c>>>6:(c<65536?u[y++]=224|c>>>12:(u[y++]=240|c>>>18,u[y++]=128|c>>>12&63),u[y++]=128|c>>>6&63),u[y++]=128|63&c);return u},r.buf2binstring=function(l){return f(l,l.length)},r.binstring2buf=function(l){for(var u=new n.Buf8(l.length),c=0,p=u.length;c<p;c++)u[c]=l.charCodeAt(c);return u},r.buf2string=function(l,u){var c,p,h,y,m=u||l.length,g=new Array(2*m);for(c=p=0;c<m;)if((h=l[c++])<128)g[p++]=h;else if(4<(y=o[h]))g[p++]=65533,c+=y-1;else{for(h&=y===2?31:y===3?15:7;1<y&&c<m;)h=h<<6|63&l[c++],y--;1<y?g[p++]=65533:h<65536?g[p++]=h:(h-=65536,g[p++]=55296|h>>10&1023,g[p++]=56320|1023&h)}return f(g,p)},r.utf8border=function(l,u){var c;for((u=u||l.length)>l.length&&(u=l.length),c=u-1;0<=c&&(192&l[c])==128;)c--;return c<0||c===0?u:c+o[l[c]]>u?c:u}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(n,i,a,o){for(var s=65535&n|0,f=n>>>16&65535|0,l=0;a!==0;){for(a-=l=2e3<a?2e3:a;f=f+(s=s+i[o++]|0)|0,--l;);s%=65521,f%=65521}return s|f<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var n=function(){for(var i,a=[],o=0;o<256;o++){i=o;for(var s=0;s<8;s++)i=1&i?3988292384^i>>>1:i>>>1;a[o]=i}return a}();t.exports=function(i,a,o,s){var f=n,l=s+o;i^=-1;for(var u=s;u<l;u++)i=i>>>8^f[255&(i^a[u])];return-1^i}},{}],46:[function(e,t,r){"use strict";var n,i=e("../utils/common"),a=e("./trees"),o=e("./adler32"),s=e("./crc32"),f=e("./messages"),l=0,u=4,c=0,p=-2,h=-1,y=4,m=2,g=8,b=9,A=286,x=30,T=19,S=2*A+1,L=15,k=3,F=258,Z=F+k+1,E=42,O=113,_=1,M=2,te=3,j=4;function ne(d,D){return d.msg=f[D],D}function G(d){return(d<<1)-(4<d?9:0)}function Q(d){for(var D=d.length;0<=--D;)d[D]=0}function C(d){var D=d.state,N=D.pending;N>d.avail_out&&(N=d.avail_out),N!==0&&(i.arraySet(d.output,D.pending_buf,D.pending_out,N,d.next_out),d.next_out+=N,D.pending_out+=N,d.total_out+=N,d.avail_out-=N,D.pending-=N,D.pending===0&&(D.pending_out=0))}function B(d,D){a._tr_flush_block(d,0<=d.block_start?d.block_start:-1,d.strstart-d.block_start,D),d.block_start=d.strstart,C(d.strm)}function ee(d,D){d.pending_buf[d.pending++]=D}function $(d,D){d.pending_buf[d.pending++]=D>>>8&255,d.pending_buf[d.pending++]=255&D}function Y(d,D){var N,v,w=d.max_chain_length,I=d.strstart,z=d.prev_length,U=d.nice_match,R=d.strstart>d.w_size-Z?d.strstart-(d.w_size-Z):0,q=d.window,K=d.w_mask,V=d.prev,J=d.strstart+F,de=q[I+z-1],fe=q[I+z];d.prev_length>=d.good_match&&(w>>=2),U>d.lookahead&&(U=d.lookahead);do if(q[(N=D)+z]===fe&&q[N+z-1]===de&&q[N]===q[I]&&q[++N]===q[I+1]){I+=2,N++;do;while(q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&q[++I]===q[++N]&&I<J);if(v=F-(J-I),I=J-F,z<v){if(d.match_start=D,U<=(z=v))break;de=q[I+z-1],fe=q[I+z]}}while((D=V[D&K])>R&&--w!=0);return z<=d.lookahead?z:d.lookahead}function ye(d){var D,N,v,w,I,z,U,R,q,K,V=d.w_size;do{if(w=d.window_size-d.lookahead-d.strstart,d.strstart>=V+(V-Z)){for(i.arraySet(d.window,d.window,V,V,0),d.match_start-=V,d.strstart-=V,d.block_start-=V,D=N=d.hash_size;v=d.head[--D],d.head[D]=V<=v?v-V:0,--N;);for(D=N=V;v=d.prev[--D],d.prev[D]=V<=v?v-V:0,--N;);w+=V}if(d.strm.avail_in===0)break;if(z=d.strm,U=d.window,R=d.strstart+d.lookahead,q=w,K=void 0,K=z.avail_in,q<K&&(K=q),N=K===0?0:(z.avail_in-=K,i.arraySet(U,z.input,z.next_in,K,R),z.state.wrap===1?z.adler=o(z.adler,U,K,R):z.state.wrap===2&&(z.adler=s(z.adler,U,K,R)),z.next_in+=K,z.total_in+=K,K),d.lookahead+=N,d.lookahead+d.insert>=k)for(I=d.strstart-d.insert,d.ins_h=d.window[I],d.ins_h=(d.ins_h<<d.hash_shift^d.window[I+1])&d.hash_mask;d.insert&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[I+k-1])&d.hash_mask,d.prev[I&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=I,I++,d.insert--,!(d.lookahead+d.insert<k)););}while(d.lookahead<Z&&d.strm.avail_in!==0)}function Te(d,D){for(var N,v;;){if(d.lookahead<Z){if(ye(d),d.lookahead<Z&&D===l)return _;if(d.lookahead===0)break}if(N=0,d.lookahead>=k&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),N!==0&&d.strstart-N<=d.w_size-Z&&(d.match_length=Y(d,N)),d.match_length>=k)if(v=a._tr_tally(d,d.strstart-d.match_start,d.match_length-k),d.lookahead-=d.match_length,d.match_length<=d.max_lazy_match&&d.lookahead>=k){for(d.match_length--;d.strstart++,d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart,--d.match_length!=0;);d.strstart++}else d.strstart+=d.match_length,d.match_length=0,d.ins_h=d.window[d.strstart],d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+1])&d.hash_mask;else v=a._tr_tally(d,0,d.window[d.strstart]),d.lookahead--,d.strstart++;if(v&&(B(d,!1),d.strm.avail_out===0))return _}return d.insert=d.strstart<k-1?d.strstart:k-1,D===u?(B(d,!0),d.strm.avail_out===0?te:j):d.last_lit&&(B(d,!1),d.strm.avail_out===0)?_:M}function le(d,D){for(var N,v,w;;){if(d.lookahead<Z){if(ye(d),d.lookahead<Z&&D===l)return _;if(d.lookahead===0)break}if(N=0,d.lookahead>=k&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),d.prev_length=d.match_length,d.prev_match=d.match_start,d.match_length=k-1,N!==0&&d.prev_length<d.max_lazy_match&&d.strstart-N<=d.w_size-Z&&(d.match_length=Y(d,N),d.match_length<=5&&(d.strategy===1||d.match_length===k&&4096<d.strstart-d.match_start)&&(d.match_length=k-1)),d.prev_length>=k&&d.match_length<=d.prev_length){for(w=d.strstart+d.lookahead-k,v=a._tr_tally(d,d.strstart-1-d.prev_match,d.prev_length-k),d.lookahead-=d.prev_length-1,d.prev_length-=2;++d.strstart<=w&&(d.ins_h=(d.ins_h<<d.hash_shift^d.window[d.strstart+k-1])&d.hash_mask,N=d.prev[d.strstart&d.w_mask]=d.head[d.ins_h],d.head[d.ins_h]=d.strstart),--d.prev_length!=0;);if(d.match_available=0,d.match_length=k-1,d.strstart++,v&&(B(d,!1),d.strm.avail_out===0))return _}else if(d.match_available){if((v=a._tr_tally(d,0,d.window[d.strstart-1]))&&B(d,!1),d.strstart++,d.lookahead--,d.strm.avail_out===0)return _}else d.match_available=1,d.strstart++,d.lookahead--}return d.match_available&&(v=a._tr_tally(d,0,d.window[d.strstart-1]),d.match_available=0),d.insert=d.strstart<k-1?d.strstart:k-1,D===u?(B(d,!0),d.strm.avail_out===0?te:j):d.last_lit&&(B(d,!1),d.strm.avail_out===0)?_:M}function ce(d,D,N,v,w){this.good_length=d,this.max_lazy=D,this.nice_length=N,this.max_chain=v,this.func=w}function Ee(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=g,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*S),this.dyn_dtree=new i.Buf16(2*(2*x+1)),this.bl_tree=new i.Buf16(2*(2*T+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(L+1),this.heap=new i.Buf16(2*A+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*A+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function ge(d){var D;return d&&d.state?(d.total_in=d.total_out=0,d.data_type=m,(D=d.state).pending=0,D.pending_out=0,D.wrap<0&&(D.wrap=-D.wrap),D.status=D.wrap?E:O,d.adler=D.wrap===2?0:1,D.last_flush=l,a._tr_init(D),c):ne(d,p)}function ot(d){var D=ge(d);return D===c&&function(N){N.window_size=2*N.w_size,Q(N.head),N.max_lazy_match=n[N.level].max_lazy,N.good_match=n[N.level].good_length,N.nice_match=n[N.level].nice_length,N.max_chain_length=n[N.level].max_chain,N.strstart=0,N.block_start=0,N.lookahead=0,N.insert=0,N.match_length=N.prev_length=k-1,N.match_available=0,N.ins_h=0}(d.state),D}function Je(d,D,N,v,w,I){if(!d)return p;var z=1;if(D===h&&(D=6),v<0?(z=0,v=-v):15<v&&(z=2,v-=16),w<1||b<w||N!==g||v<8||15<v||D<0||9<D||I<0||y<I)return ne(d,p);v===8&&(v=9);var U=new Ee;return(d.state=U).strm=d,U.wrap=z,U.gzhead=null,U.w_bits=v,U.w_size=1<<U.w_bits,U.w_mask=U.w_size-1,U.hash_bits=w+7,U.hash_size=1<<U.hash_bits,U.hash_mask=U.hash_size-1,U.hash_shift=~~((U.hash_bits+k-1)/k),U.window=new i.Buf8(2*U.w_size),U.head=new i.Buf16(U.hash_size),U.prev=new i.Buf16(U.w_size),U.lit_bufsize=1<<w+6,U.pending_buf_size=4*U.lit_bufsize,U.pending_buf=new i.Buf8(U.pending_buf_size),U.d_buf=1*U.lit_bufsize,U.l_buf=3*U.lit_bufsize,U.level=D,U.strategy=I,U.method=N,ot(d)}n=[new ce(0,0,0,0,function(d,D){var N=65535;for(N>d.pending_buf_size-5&&(N=d.pending_buf_size-5);;){if(d.lookahead<=1){if(ye(d),d.lookahead===0&&D===l)return _;if(d.lookahead===0)break}d.strstart+=d.lookahead,d.lookahead=0;var v=d.block_start+N;if((d.strstart===0||d.strstart>=v)&&(d.lookahead=d.strstart-v,d.strstart=v,B(d,!1),d.strm.avail_out===0)||d.strstart-d.block_start>=d.w_size-Z&&(B(d,!1),d.strm.avail_out===0))return _}return d.insert=0,D===u?(B(d,!0),d.strm.avail_out===0?te:j):(d.strstart>d.block_start&&(B(d,!1),d.strm.avail_out),_)}),new ce(4,4,8,4,Te),new ce(4,5,16,8,Te),new ce(4,6,32,32,Te),new ce(4,4,16,16,le),new ce(8,16,32,32,le),new ce(8,16,128,128,le),new ce(8,32,128,256,le),new ce(32,128,258,1024,le),new ce(32,258,258,4096,le)],r.deflateInit=function(d,D){return Je(d,D,g,15,8,0)},r.deflateInit2=Je,r.deflateReset=ot,r.deflateResetKeep=ge,r.deflateSetHeader=function(d,D){return d&&d.state?d.state.wrap!==2?p:(d.state.gzhead=D,c):p},r.deflate=function(d,D){var N,v,w,I;if(!d||!d.state||5<D||D<0)return d?ne(d,p):p;if(v=d.state,!d.output||!d.input&&d.avail_in!==0||v.status===666&&D!==u)return ne(d,d.avail_out===0?-5:p);if(v.strm=d,N=v.last_flush,v.last_flush=D,v.status===E)if(v.wrap===2)d.adler=0,ee(v,31),ee(v,139),ee(v,8),v.gzhead?(ee(v,(v.gzhead.text?1:0)+(v.gzhead.hcrc?2:0)+(v.gzhead.extra?4:0)+(v.gzhead.name?8:0)+(v.gzhead.comment?16:0)),ee(v,255&v.gzhead.time),ee(v,v.gzhead.time>>8&255),ee(v,v.gzhead.time>>16&255),ee(v,v.gzhead.time>>24&255),ee(v,v.level===9?2:2<=v.strategy||v.level<2?4:0),ee(v,255&v.gzhead.os),v.gzhead.extra&&v.gzhead.extra.length&&(ee(v,255&v.gzhead.extra.length),ee(v,v.gzhead.extra.length>>8&255)),v.gzhead.hcrc&&(d.adler=s(d.adler,v.pending_buf,v.pending,0)),v.gzindex=0,v.status=69):(ee(v,0),ee(v,0),ee(v,0),ee(v,0),ee(v,0),ee(v,v.level===9?2:2<=v.strategy||v.level<2?4:0),ee(v,3),v.status=O);else{var z=g+(v.w_bits-8<<4)<<8;z|=(2<=v.strategy||v.level<2?0:v.level<6?1:v.level===6?2:3)<<6,v.strstart!==0&&(z|=32),z+=31-z%31,v.status=O,$(v,z),v.strstart!==0&&($(v,d.adler>>>16),$(v,65535&d.adler)),d.adler=1}if(v.status===69)if(v.gzhead.extra){for(w=v.pending;v.gzindex<(65535&v.gzhead.extra.length)&&(v.pending!==v.pending_buf_size||(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending!==v.pending_buf_size));)ee(v,255&v.gzhead.extra[v.gzindex]),v.gzindex++;v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),v.gzindex===v.gzhead.extra.length&&(v.gzindex=0,v.status=73)}else v.status=73;if(v.status===73)if(v.gzhead.name){w=v.pending;do{if(v.pending===v.pending_buf_size&&(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending===v.pending_buf_size)){I=1;break}I=v.gzindex<v.gzhead.name.length?255&v.gzhead.name.charCodeAt(v.gzindex++):0,ee(v,I)}while(I!==0);v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),I===0&&(v.gzindex=0,v.status=91)}else v.status=91;if(v.status===91)if(v.gzhead.comment){w=v.pending;do{if(v.pending===v.pending_buf_size&&(v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),C(d),w=v.pending,v.pending===v.pending_buf_size)){I=1;break}I=v.gzindex<v.gzhead.comment.length?255&v.gzhead.comment.charCodeAt(v.gzindex++):0,ee(v,I)}while(I!==0);v.gzhead.hcrc&&v.pending>w&&(d.adler=s(d.adler,v.pending_buf,v.pending-w,w)),I===0&&(v.status=103)}else v.status=103;if(v.status===103&&(v.gzhead.hcrc?(v.pending+2>v.pending_buf_size&&C(d),v.pending+2<=v.pending_buf_size&&(ee(v,255&d.adler),ee(v,d.adler>>8&255),d.adler=0,v.status=O)):v.status=O),v.pending!==0){if(C(d),d.avail_out===0)return v.last_flush=-1,c}else if(d.avail_in===0&&G(D)<=G(N)&&D!==u)return ne(d,-5);if(v.status===666&&d.avail_in!==0)return ne(d,-5);if(d.avail_in!==0||v.lookahead!==0||D!==l&&v.status!==666){var U=v.strategy===2?function(R,q){for(var K;;){if(R.lookahead===0&&(ye(R),R.lookahead===0)){if(q===l)return _;break}if(R.match_length=0,K=a._tr_tally(R,0,R.window[R.strstart]),R.lookahead--,R.strstart++,K&&(B(R,!1),R.strm.avail_out===0))return _}return R.insert=0,q===u?(B(R,!0),R.strm.avail_out===0?te:j):R.last_lit&&(B(R,!1),R.strm.avail_out===0)?_:M}(v,D):v.strategy===3?function(R,q){for(var K,V,J,de,fe=R.window;;){if(R.lookahead<=F){if(ye(R),R.lookahead<=F&&q===l)return _;if(R.lookahead===0)break}if(R.match_length=0,R.lookahead>=k&&0<R.strstart&&(V=fe[J=R.strstart-1])===fe[++J]&&V===fe[++J]&&V===fe[++J]){de=R.strstart+F;do;while(V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&V===fe[++J]&&J<de);R.match_length=F-(de-J),R.match_length>R.lookahead&&(R.match_length=R.lookahead)}if(R.match_length>=k?(K=a._tr_tally(R,1,R.match_length-k),R.lookahead-=R.match_length,R.strstart+=R.match_length,R.match_length=0):(K=a._tr_tally(R,0,R.window[R.strstart]),R.lookahead--,R.strstart++),K&&(B(R,!1),R.strm.avail_out===0))return _}return R.insert=0,q===u?(B(R,!0),R.strm.avail_out===0?te:j):R.last_lit&&(B(R,!1),R.strm.avail_out===0)?_:M}(v,D):n[v.level].func(v,D);if(U!==te&&U!==j||(v.status=666),U===_||U===te)return d.avail_out===0&&(v.last_flush=-1),c;if(U===M&&(D===1?a._tr_align(v):D!==5&&(a._tr_stored_block(v,0,0,!1),D===3&&(Q(v.head),v.lookahead===0&&(v.strstart=0,v.block_start=0,v.insert=0))),C(d),d.avail_out===0))return v.last_flush=-1,c}return D!==u?c:v.wrap<=0?1:(v.wrap===2?(ee(v,255&d.adler),ee(v,d.adler>>8&255),ee(v,d.adler>>16&255),ee(v,d.adler>>24&255),ee(v,255&d.total_in),ee(v,d.total_in>>8&255),ee(v,d.total_in>>16&255),ee(v,d.total_in>>24&255)):($(v,d.adler>>>16),$(v,65535&d.adler)),C(d),0<v.wrap&&(v.wrap=-v.wrap),v.pending!==0?c:1)},r.deflateEnd=function(d){var D;return d&&d.state?(D=d.state.status)!==E&&D!==69&&D!==73&&D!==91&&D!==103&&D!==O&&D!==666?ne(d,p):(d.state=null,D===O?ne(d,-3):c):p},r.deflateSetDictionary=function(d,D){var N,v,w,I,z,U,R,q,K=D.length;if(!d||!d.state||(I=(N=d.state).wrap)===2||I===1&&N.status!==E||N.lookahead)return p;for(I===1&&(d.adler=o(d.adler,D,K,0)),N.wrap=0,K>=N.w_size&&(I===0&&(Q(N.head),N.strstart=0,N.block_start=0,N.insert=0),q=new i.Buf8(N.w_size),i.arraySet(q,D,K-N.w_size,N.w_size,0),D=q,K=N.w_size),z=d.avail_in,U=d.next_in,R=d.input,d.avail_in=K,d.next_in=0,d.input=D,ye(N);N.lookahead>=k;){for(v=N.strstart,w=N.lookahead-(k-1);N.ins_h=(N.ins_h<<N.hash_shift^N.window[v+k-1])&N.hash_mask,N.prev[v&N.w_mask]=N.head[N.ins_h],N.head[N.ins_h]=v,v++,--w;);N.strstart=v,N.lookahead=k-1,ye(N)}return N.strstart+=N.lookahead,N.block_start=N.strstart,N.insert=N.lookahead,N.lookahead=0,N.match_length=N.prev_length=k-1,N.match_available=0,d.next_in=U,d.input=R,d.avail_in=z,N.wrap=I,c},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(n,i){var a,o,s,f,l,u,c,p,h,y,m,g,b,A,x,T,S,L,k,F,Z,E,O,_,M;a=n.state,o=n.next_in,_=n.input,s=o+(n.avail_in-5),f=n.next_out,M=n.output,l=f-(i-n.avail_out),u=f+(n.avail_out-257),c=a.dmax,p=a.wsize,h=a.whave,y=a.wnext,m=a.window,g=a.hold,b=a.bits,A=a.lencode,x=a.distcode,T=(1<<a.lenbits)-1,S=(1<<a.distbits)-1;e:do{b<15&&(g+=_[o++]<<b,b+=8,g+=_[o++]<<b,b+=8),L=A[g&T];t:for(;;){if(g>>>=k=L>>>24,b-=k,(k=L>>>16&255)===0)M[f++]=65535&L;else{if(!(16&k)){if(!(64&k)){L=A[(65535&L)+(g&(1<<k)-1)];continue t}if(32&k){a.mode=12;break e}n.msg="invalid literal/length code",a.mode=30;break e}F=65535&L,(k&=15)&&(b<k&&(g+=_[o++]<<b,b+=8),F+=g&(1<<k)-1,g>>>=k,b-=k),b<15&&(g+=_[o++]<<b,b+=8,g+=_[o++]<<b,b+=8),L=x[g&S];r:for(;;){if(g>>>=k=L>>>24,b-=k,!(16&(k=L>>>16&255))){if(!(64&k)){L=x[(65535&L)+(g&(1<<k)-1)];continue r}n.msg="invalid distance code",a.mode=30;break e}if(Z=65535&L,b<(k&=15)&&(g+=_[o++]<<b,(b+=8)<k&&(g+=_[o++]<<b,b+=8)),c<(Z+=g&(1<<k)-1)){n.msg="invalid distance too far back",a.mode=30;break e}if(g>>>=k,b-=k,(k=f-l)<Z){if(h<(k=Z-k)&&a.sane){n.msg="invalid distance too far back",a.mode=30;break e}if(O=m,(E=0)===y){if(E+=p-k,k<F){for(F-=k;M[f++]=m[E++],--k;);E=f-Z,O=M}}else if(y<k){if(E+=p+y-k,(k-=y)<F){for(F-=k;M[f++]=m[E++],--k;);if(E=0,y<F){for(F-=k=y;M[f++]=m[E++],--k;);E=f-Z,O=M}}}else if(E+=y-k,k<F){for(F-=k;M[f++]=m[E++],--k;);E=f-Z,O=M}for(;2<F;)M[f++]=O[E++],M[f++]=O[E++],M[f++]=O[E++],F-=3;F&&(M[f++]=O[E++],1<F&&(M[f++]=O[E++]))}else{for(E=f-Z;M[f++]=M[E++],M[f++]=M[E++],M[f++]=M[E++],2<(F-=3););F&&(M[f++]=M[E++],1<F&&(M[f++]=M[E++]))}break}}break}}while(o<s&&f<u);o-=F=b>>3,g&=(1<<(b-=F<<3))-1,n.next_in=o,n.next_out=f,n.avail_in=o<s?s-o+5:5-(o-s),n.avail_out=f<u?u-f+257:257-(f-u),a.hold=g,a.bits=b}},{}],49:[function(e,t,r){"use strict";var n=e("../utils/common"),i=e("./adler32"),a=e("./crc32"),o=e("./inffast"),s=e("./inftrees"),f=1,l=2,u=0,c=-2,p=1,h=852,y=592;function m(E){return(E>>>24&255)+(E>>>8&65280)+((65280&E)<<8)+((255&E)<<24)}function g(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function b(E){var O;return E&&E.state?(O=E.state,E.total_in=E.total_out=O.total=0,E.msg="",O.wrap&&(E.adler=1&O.wrap),O.mode=p,O.last=0,O.havedict=0,O.dmax=32768,O.head=null,O.hold=0,O.bits=0,O.lencode=O.lendyn=new n.Buf32(h),O.distcode=O.distdyn=new n.Buf32(y),O.sane=1,O.back=-1,u):c}function A(E){var O;return E&&E.state?((O=E.state).wsize=0,O.whave=0,O.wnext=0,b(E)):c}function x(E,O){var _,M;return E&&E.state?(M=E.state,O<0?(_=0,O=-O):(_=1+(O>>4),O<48&&(O&=15)),O&&(O<8||15<O)?c:(M.window!==null&&M.wbits!==O&&(M.window=null),M.wrap=_,M.wbits=O,A(E))):c}function T(E,O){var _,M;return E?(M=new g,(E.state=M).window=null,(_=x(E,O))!==u&&(E.state=null),_):c}var S,L,k=!0;function F(E){if(k){var O;for(S=new n.Buf32(512),L=new n.Buf32(32),O=0;O<144;)E.lens[O++]=8;for(;O<256;)E.lens[O++]=9;for(;O<280;)E.lens[O++]=7;for(;O<288;)E.lens[O++]=8;for(s(f,E.lens,0,288,S,0,E.work,{bits:9}),O=0;O<32;)E.lens[O++]=5;s(l,E.lens,0,32,L,0,E.work,{bits:5}),k=!1}E.lencode=S,E.lenbits=9,E.distcode=L,E.distbits=5}function Z(E,O,_,M){var te,j=E.state;return j.window===null&&(j.wsize=1<<j.wbits,j.wnext=0,j.whave=0,j.window=new n.Buf8(j.wsize)),M>=j.wsize?(n.arraySet(j.window,O,_-j.wsize,j.wsize,0),j.wnext=0,j.whave=j.wsize):(M<(te=j.wsize-j.wnext)&&(te=M),n.arraySet(j.window,O,_-M,te,j.wnext),(M-=te)?(n.arraySet(j.window,O,_-M,M,0),j.wnext=M,j.whave=j.wsize):(j.wnext+=te,j.wnext===j.wsize&&(j.wnext=0),j.whave<j.wsize&&(j.whave+=te))),0}r.inflateReset=A,r.inflateReset2=x,r.inflateResetKeep=b,r.inflateInit=function(E){return T(E,15)},r.inflateInit2=T,r.inflate=function(E,O){var _,M,te,j,ne,G,Q,C,B,ee,$,Y,ye,Te,le,ce,Ee,ge,ot,Je,d,D,N,v,w=0,I=new n.Buf8(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!E||!E.state||!E.output||!E.input&&E.avail_in!==0)return c;(_=E.state).mode===12&&(_.mode=13),ne=E.next_out,te=E.output,Q=E.avail_out,j=E.next_in,M=E.input,G=E.avail_in,C=_.hold,B=_.bits,ee=G,$=Q,D=u;e:for(;;)switch(_.mode){case p:if(_.wrap===0){_.mode=13;break}for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(2&_.wrap&&C===35615){I[_.check=0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0),B=C=0,_.mode=2;break}if(_.flags=0,_.head&&(_.head.done=!1),!(1&_.wrap)||(((255&C)<<8)+(C>>8))%31){E.msg="incorrect header check",_.mode=30;break}if((15&C)!=8){E.msg="unknown compression method",_.mode=30;break}if(B-=4,d=8+(15&(C>>>=4)),_.wbits===0)_.wbits=d;else if(d>_.wbits){E.msg="invalid window size",_.mode=30;break}_.dmax=1<<d,E.adler=_.check=1,_.mode=512&C?10:12,B=C=0;break;case 2:for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(_.flags=C,(255&_.flags)!=8){E.msg="unknown compression method",_.mode=30;break}if(57344&_.flags){E.msg="unknown header flags set",_.mode=30;break}_.head&&(_.head.text=C>>8&1),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0,_.mode=3;case 3:for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.head&&(_.head.time=C),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,I[2]=C>>>16&255,I[3]=C>>>24&255,_.check=a(_.check,I,4,0)),B=C=0,_.mode=4;case 4:for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.head&&(_.head.xflags=255&C,_.head.os=C>>8),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0,_.mode=5;case 5:if(1024&_.flags){for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.length=C,_.head&&(_.head.extra_len=C),512&_.flags&&(I[0]=255&C,I[1]=C>>>8&255,_.check=a(_.check,I,2,0)),B=C=0}else _.head&&(_.head.extra=null);_.mode=6;case 6:if(1024&_.flags&&(G<(Y=_.length)&&(Y=G),Y&&(_.head&&(d=_.head.extra_len-_.length,_.head.extra||(_.head.extra=new Array(_.head.extra_len)),n.arraySet(_.head.extra,M,j,Y,d)),512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,_.length-=Y),_.length))break e;_.length=0,_.mode=7;case 7:if(2048&_.flags){if(G===0)break e;for(Y=0;d=M[j+Y++],_.head&&d&&_.length<65536&&(_.head.name+=String.fromCharCode(d)),d&&Y<G;);if(512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,d)break e}else _.head&&(_.head.name=null);_.length=0,_.mode=8;case 8:if(4096&_.flags){if(G===0)break e;for(Y=0;d=M[j+Y++],_.head&&d&&_.length<65536&&(_.head.comment+=String.fromCharCode(d)),d&&Y<G;);if(512&_.flags&&(_.check=a(_.check,M,Y,j)),G-=Y,j+=Y,d)break e}else _.head&&(_.head.comment=null);_.mode=9;case 9:if(512&_.flags){for(;B<16;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C!==(65535&_.check)){E.msg="header crc mismatch",_.mode=30;break}B=C=0}_.head&&(_.head.hcrc=_.flags>>9&1,_.head.done=!0),E.adler=_.check=0,_.mode=12;break;case 10:for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}E.adler=_.check=m(C),B=C=0,_.mode=11;case 11:if(_.havedict===0)return E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,2;E.adler=_.check=1,_.mode=12;case 12:if(O===5||O===6)break e;case 13:if(_.last){C>>>=7&B,B-=7&B,_.mode=27;break}for(;B<3;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}switch(_.last=1&C,B-=1,3&(C>>>=1)){case 0:_.mode=14;break;case 1:if(F(_),_.mode=20,O!==6)break;C>>>=2,B-=2;break e;case 2:_.mode=17;break;case 3:E.msg="invalid block type",_.mode=30}C>>>=2,B-=2;break;case 14:for(C>>>=7&B,B-=7&B;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if((65535&C)!=(C>>>16^65535)){E.msg="invalid stored block lengths",_.mode=30;break}if(_.length=65535&C,B=C=0,_.mode=15,O===6)break e;case 15:_.mode=16;case 16:if(Y=_.length){if(G<Y&&(Y=G),Q<Y&&(Y=Q),Y===0)break e;n.arraySet(te,M,j,Y,ne),G-=Y,j+=Y,Q-=Y,ne+=Y,_.length-=Y;break}_.mode=12;break;case 17:for(;B<14;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(_.nlen=257+(31&C),C>>>=5,B-=5,_.ndist=1+(31&C),C>>>=5,B-=5,_.ncode=4+(15&C),C>>>=4,B-=4,286<_.nlen||30<_.ndist){E.msg="too many length or distance symbols",_.mode=30;break}_.have=0,_.mode=18;case 18:for(;_.have<_.ncode;){for(;B<3;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.lens[z[_.have++]]=7&C,C>>>=3,B-=3}for(;_.have<19;)_.lens[z[_.have++]]=0;if(_.lencode=_.lendyn,_.lenbits=7,N={bits:_.lenbits},D=s(0,_.lens,0,19,_.lencode,0,_.work,N),_.lenbits=N.bits,D){E.msg="invalid code lengths set",_.mode=30;break}_.have=0,_.mode=19;case 19:for(;_.have<_.nlen+_.ndist;){for(;ce=(w=_.lencode[C&(1<<_.lenbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(Ee<16)C>>>=le,B-=le,_.lens[_.have++]=Ee;else{if(Ee===16){for(v=le+2;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C>>>=le,B-=le,_.have===0){E.msg="invalid bit length repeat",_.mode=30;break}d=_.lens[_.have-1],Y=3+(3&C),C>>>=2,B-=2}else if(Ee===17){for(v=le+3;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}B-=le,d=0,Y=3+(7&(C>>>=le)),C>>>=3,B-=3}else{for(v=le+7;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}B-=le,d=0,Y=11+(127&(C>>>=le)),C>>>=7,B-=7}if(_.have+Y>_.nlen+_.ndist){E.msg="invalid bit length repeat",_.mode=30;break}for(;Y--;)_.lens[_.have++]=d}}if(_.mode===30)break;if(_.lens[256]===0){E.msg="invalid code -- missing end-of-block",_.mode=30;break}if(_.lenbits=9,N={bits:_.lenbits},D=s(f,_.lens,0,_.nlen,_.lencode,0,_.work,N),_.lenbits=N.bits,D){E.msg="invalid literal/lengths set",_.mode=30;break}if(_.distbits=6,_.distcode=_.distdyn,N={bits:_.distbits},D=s(l,_.lens,_.nlen,_.ndist,_.distcode,0,_.work,N),_.distbits=N.bits,D){E.msg="invalid distances set",_.mode=30;break}if(_.mode=20,O===6)break e;case 20:_.mode=21;case 21:if(6<=G&&258<=Q){E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,o(E,$),ne=E.next_out,te=E.output,Q=E.avail_out,j=E.next_in,M=E.input,G=E.avail_in,C=_.hold,B=_.bits,_.mode===12&&(_.back=-1);break}for(_.back=0;ce=(w=_.lencode[C&(1<<_.lenbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(ce&&!(240&ce)){for(ge=le,ot=ce,Je=Ee;ce=(w=_.lencode[Je+((C&(1<<ge+ot)-1)>>ge)])>>>16&255,Ee=65535&w,!(ge+(le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}C>>>=ge,B-=ge,_.back+=ge}if(C>>>=le,B-=le,_.back+=le,_.length=Ee,ce===0){_.mode=26;break}if(32&ce){_.back=-1,_.mode=12;break}if(64&ce){E.msg="invalid literal/length code",_.mode=30;break}_.extra=15&ce,_.mode=22;case 22:if(_.extra){for(v=_.extra;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.length+=C&(1<<_.extra)-1,C>>>=_.extra,B-=_.extra,_.back+=_.extra}_.was=_.length,_.mode=23;case 23:for(;ce=(w=_.distcode[C&(1<<_.distbits)-1])>>>16&255,Ee=65535&w,!((le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(!(240&ce)){for(ge=le,ot=ce,Je=Ee;ce=(w=_.distcode[Je+((C&(1<<ge+ot)-1)>>ge)])>>>16&255,Ee=65535&w,!(ge+(le=w>>>24)<=B);){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}C>>>=ge,B-=ge,_.back+=ge}if(C>>>=le,B-=le,_.back+=le,64&ce){E.msg="invalid distance code",_.mode=30;break}_.offset=Ee,_.extra=15&ce,_.mode=24;case 24:if(_.extra){for(v=_.extra;B<v;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}_.offset+=C&(1<<_.extra)-1,C>>>=_.extra,B-=_.extra,_.back+=_.extra}if(_.offset>_.dmax){E.msg="invalid distance too far back",_.mode=30;break}_.mode=25;case 25:if(Q===0)break e;if(Y=$-Q,_.offset>Y){if((Y=_.offset-Y)>_.whave&&_.sane){E.msg="invalid distance too far back",_.mode=30;break}ye=Y>_.wnext?(Y-=_.wnext,_.wsize-Y):_.wnext-Y,Y>_.length&&(Y=_.length),Te=_.window}else Te=te,ye=ne-_.offset,Y=_.length;for(Q<Y&&(Y=Q),Q-=Y,_.length-=Y;te[ne++]=Te[ye++],--Y;);_.length===0&&(_.mode=21);break;case 26:if(Q===0)break e;te[ne++]=_.length,Q--,_.mode=21;break;case 27:if(_.wrap){for(;B<32;){if(G===0)break e;G--,C|=M[j++]<<B,B+=8}if($-=Q,E.total_out+=$,_.total+=$,$&&(E.adler=_.check=_.flags?a(_.check,te,$,ne-$):i(_.check,te,$,ne-$)),$=Q,(_.flags?C:m(C))!==_.check){E.msg="incorrect data check",_.mode=30;break}B=C=0}_.mode=28;case 28:if(_.wrap&&_.flags){for(;B<32;){if(G===0)break e;G--,C+=M[j++]<<B,B+=8}if(C!==(4294967295&_.total)){E.msg="incorrect length check",_.mode=30;break}B=C=0}_.mode=29;case 29:D=1;break e;case 30:D=-3;break e;case 31:return-4;case 32:default:return c}return E.next_out=ne,E.avail_out=Q,E.next_in=j,E.avail_in=G,_.hold=C,_.bits=B,(_.wsize||$!==E.avail_out&&_.mode<30&&(_.mode<27||O!==4))&&Z(E,E.output,E.next_out,$-E.avail_out)?(_.mode=31,-4):(ee-=E.avail_in,$-=E.avail_out,E.total_in+=ee,E.total_out+=$,_.total+=$,_.wrap&&$&&(E.adler=_.check=_.flags?a(_.check,te,$,E.next_out-$):i(_.check,te,$,E.next_out-$)),E.data_type=_.bits+(_.last?64:0)+(_.mode===12?128:0)+(_.mode===20||_.mode===15?256:0),(ee==0&&$===0||O===4)&&D===u&&(D=-5),D)},r.inflateEnd=function(E){if(!E||!E.state)return c;var O=E.state;return O.window&&(O.window=null),E.state=null,u},r.inflateGetHeader=function(E,O){var _;return E&&E.state&&2&(_=E.state).wrap?((_.head=O).done=!1,u):c},r.inflateSetDictionary=function(E,O){var _,M=O.length;return E&&E.state?(_=E.state).wrap!==0&&_.mode!==11?c:_.mode===11&&i(1,O,M,0)!==_.check?-3:Z(E,O,M,M)?(_.mode=31,-4):(_.havedict=1,u):c},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var n=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(f,l,u,c,p,h,y,m){var g,b,A,x,T,S,L,k,F,Z=m.bits,E=0,O=0,_=0,M=0,te=0,j=0,ne=0,G=0,Q=0,C=0,B=null,ee=0,$=new n.Buf16(16),Y=new n.Buf16(16),ye=null,Te=0;for(E=0;E<=15;E++)$[E]=0;for(O=0;O<c;O++)$[l[u+O]]++;for(te=Z,M=15;1<=M&&$[M]===0;M--);if(M<te&&(te=M),M===0)return p[h++]=20971520,p[h++]=20971520,m.bits=1,0;for(_=1;_<M&&$[_]===0;_++);for(te<_&&(te=_),E=G=1;E<=15;E++)if(G<<=1,(G-=$[E])<0)return-1;if(0<G&&(f===0||M!==1))return-1;for(Y[1]=0,E=1;E<15;E++)Y[E+1]=Y[E]+$[E];for(O=0;O<c;O++)l[u+O]!==0&&(y[Y[l[u+O]]++]=O);if(S=f===0?(B=ye=y,19):f===1?(B=i,ee-=257,ye=a,Te-=257,256):(B=o,ye=s,-1),E=_,T=h,ne=O=C=0,A=-1,x=(Q=1<<(j=te))-1,f===1&&852<Q||f===2&&592<Q)return 1;for(;;){for(L=E-ne,F=y[O]<S?(k=0,y[O]):y[O]>S?(k=ye[Te+y[O]],B[ee+y[O]]):(k=96,0),g=1<<E-ne,_=b=1<<j;p[T+(C>>ne)+(b-=g)]=L<<24|k<<16|F|0,b!==0;);for(g=1<<E-1;C&g;)g>>=1;if(g!==0?(C&=g-1,C+=g):C=0,O++,--$[E]==0){if(E===M)break;E=l[u+y[O]]}if(te<E&&(C&x)!==A){for(ne===0&&(ne=te),T+=_,G=1<<(j=E-ne);j+ne<M&&!((G-=$[j+ne])<=0);)j++,G<<=1;if(Q+=1<<j,f===1&&852<Q||f===2&&592<Q)return 1;p[A=C&x]=te<<24|j<<16|T-h|0}}return C!==0&&(p[T+C]=E-ne<<24|64<<16|0),m.bits=te,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var n=e("../utils/common"),i=0,a=1;function o(w){for(var I=w.length;0<=--I;)w[I]=0}var s=0,f=29,l=256,u=l+1+f,c=30,p=19,h=2*u+1,y=15,m=16,g=7,b=256,A=16,x=17,T=18,S=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],L=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],k=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Z=new Array(2*(u+2));o(Z);var E=new Array(2*c);o(E);var O=new Array(512);o(O);var _=new Array(256);o(_);var M=new Array(f);o(M);var te,j,ne,G=new Array(c);function Q(w,I,z,U,R){this.static_tree=w,this.extra_bits=I,this.extra_base=z,this.elems=U,this.max_length=R,this.has_stree=w&&w.length}function C(w,I){this.dyn_tree=w,this.max_code=0,this.stat_desc=I}function B(w){return w<256?O[w]:O[256+(w>>>7)]}function ee(w,I){w.pending_buf[w.pending++]=255&I,w.pending_buf[w.pending++]=I>>>8&255}function $(w,I,z){w.bi_valid>m-z?(w.bi_buf|=I<<w.bi_valid&65535,ee(w,w.bi_buf),w.bi_buf=I>>m-w.bi_valid,w.bi_valid+=z-m):(w.bi_buf|=I<<w.bi_valid&65535,w.bi_valid+=z)}function Y(w,I,z){$(w,z[2*I],z[2*I+1])}function ye(w,I){for(var z=0;z|=1&w,w>>>=1,z<<=1,0<--I;);return z>>>1}function Te(w,I,z){var U,R,q=new Array(y+1),K=0;for(U=1;U<=y;U++)q[U]=K=K+z[U-1]<<1;for(R=0;R<=I;R++){var V=w[2*R+1];V!==0&&(w[2*R]=ye(q[V]++,V))}}function le(w){var I;for(I=0;I<u;I++)w.dyn_ltree[2*I]=0;for(I=0;I<c;I++)w.dyn_dtree[2*I]=0;for(I=0;I<p;I++)w.bl_tree[2*I]=0;w.dyn_ltree[2*b]=1,w.opt_len=w.static_len=0,w.last_lit=w.matches=0}function ce(w){8<w.bi_valid?ee(w,w.bi_buf):0<w.bi_valid&&(w.pending_buf[w.pending++]=w.bi_buf),w.bi_buf=0,w.bi_valid=0}function Ee(w,I,z,U){var R=2*I,q=2*z;return w[R]<w[q]||w[R]===w[q]&&U[I]<=U[z]}function ge(w,I,z){for(var U=w.heap[z],R=z<<1;R<=w.heap_len&&(R<w.heap_len&&Ee(I,w.heap[R+1],w.heap[R],w.depth)&&R++,!Ee(I,U,w.heap[R],w.depth));)w.heap[z]=w.heap[R],z=R,R<<=1;w.heap[z]=U}function ot(w,I,z){var U,R,q,K,V=0;if(w.last_lit!==0)for(;U=w.pending_buf[w.d_buf+2*V]<<8|w.pending_buf[w.d_buf+2*V+1],R=w.pending_buf[w.l_buf+V],V++,U===0?Y(w,R,I):(Y(w,(q=_[R])+l+1,I),(K=S[q])!==0&&$(w,R-=M[q],K),Y(w,q=B(--U),z),(K=L[q])!==0&&$(w,U-=G[q],K)),V<w.last_lit;);Y(w,b,I)}function Je(w,I){var z,U,R,q=I.dyn_tree,K=I.stat_desc.static_tree,V=I.stat_desc.has_stree,J=I.stat_desc.elems,de=-1;for(w.heap_len=0,w.heap_max=h,z=0;z<J;z++)q[2*z]!==0?(w.heap[++w.heap_len]=de=z,w.depth[z]=0):q[2*z+1]=0;for(;w.heap_len<2;)q[2*(R=w.heap[++w.heap_len]=de<2?++de:0)]=1,w.depth[R]=0,w.opt_len--,V&&(w.static_len-=K[2*R+1]);for(I.max_code=de,z=w.heap_len>>1;1<=z;z--)ge(w,q,z);for(R=J;z=w.heap[1],w.heap[1]=w.heap[w.heap_len--],ge(w,q,1),U=w.heap[1],w.heap[--w.heap_max]=z,w.heap[--w.heap_max]=U,q[2*R]=q[2*z]+q[2*U],w.depth[R]=(w.depth[z]>=w.depth[U]?w.depth[z]:w.depth[U])+1,q[2*z+1]=q[2*U+1]=R,w.heap[1]=R++,ge(w,q,1),2<=w.heap_len;);w.heap[--w.heap_max]=w.heap[1],function(fe,Ze){var Gr,st,Zr,be,Bn,Di,bt=Ze.dyn_tree,Uo=Ze.max_code,Xh=Ze.stat_desc.static_tree,Jh=Ze.stat_desc.has_stree,Qh=Ze.stat_desc.extra_bits,jo=Ze.stat_desc.extra_base,qr=Ze.stat_desc.max_length,Cn=0;for(be=0;be<=y;be++)fe.bl_count[be]=0;for(bt[2*fe.heap[fe.heap_max]+1]=0,Gr=fe.heap_max+1;Gr<h;Gr++)qr<(be=bt[2*bt[2*(st=fe.heap[Gr])+1]+1]+1)&&(be=qr,Cn++),bt[2*st+1]=be,Uo<st||(fe.bl_count[be]++,Bn=0,jo<=st&&(Bn=Qh[st-jo]),Di=bt[2*st],fe.opt_len+=Di*(be+Bn),Jh&&(fe.static_len+=Di*(Xh[2*st+1]+Bn)));if(Cn!==0){do{for(be=qr-1;fe.bl_count[be]===0;)be--;fe.bl_count[be]--,fe.bl_count[be+1]+=2,fe.bl_count[qr]--,Cn-=2}while(0<Cn);for(be=qr;be!==0;be--)for(st=fe.bl_count[be];st!==0;)Uo<(Zr=fe.heap[--Gr])||(bt[2*Zr+1]!==be&&(fe.opt_len+=(be-bt[2*Zr+1])*bt[2*Zr],bt[2*Zr+1]=be),st--)}}(w,I),Te(q,de,w.bl_count)}function d(w,I,z){var U,R,q=-1,K=I[1],V=0,J=7,de=4;for(K===0&&(J=138,de=3),I[2*(z+1)+1]=65535,U=0;U<=z;U++)R=K,K=I[2*(U+1)+1],++V<J&&R===K||(V<de?w.bl_tree[2*R]+=V:R!==0?(R!==q&&w.bl_tree[2*R]++,w.bl_tree[2*A]++):V<=10?w.bl_tree[2*x]++:w.bl_tree[2*T]++,q=R,de=(V=0)===K?(J=138,3):R===K?(J=6,3):(J=7,4))}function D(w,I,z){var U,R,q=-1,K=I[1],V=0,J=7,de=4;for(K===0&&(J=138,de=3),U=0;U<=z;U++)if(R=K,K=I[2*(U+1)+1],!(++V<J&&R===K)){if(V<de)for(;Y(w,R,w.bl_tree),--V!=0;);else R!==0?(R!==q&&(Y(w,R,w.bl_tree),V--),Y(w,A,w.bl_tree),$(w,V-3,2)):V<=10?(Y(w,x,w.bl_tree),$(w,V-3,3)):(Y(w,T,w.bl_tree),$(w,V-11,7));q=R,de=(V=0)===K?(J=138,3):R===K?(J=6,3):(J=7,4)}}o(G);var N=!1;function v(w,I,z,U){$(w,(s<<1)+(U?1:0),3),function(R,q,K,V){ce(R),V&&(ee(R,K),ee(R,~K)),n.arraySet(R.pending_buf,R.window,q,K,R.pending),R.pending+=K}(w,I,z,!0)}r._tr_init=function(w){N||(function(){var I,z,U,R,q,K=new Array(y+1);for(R=U=0;R<f-1;R++)for(M[R]=U,I=0;I<1<<S[R];I++)_[U++]=R;for(_[U-1]=R,R=q=0;R<16;R++)for(G[R]=q,I=0;I<1<<L[R];I++)O[q++]=R;for(q>>=7;R<c;R++)for(G[R]=q<<7,I=0;I<1<<L[R]-7;I++)O[256+q++]=R;for(z=0;z<=y;z++)K[z]=0;for(I=0;I<=143;)Z[2*I+1]=8,I++,K[8]++;for(;I<=255;)Z[2*I+1]=9,I++,K[9]++;for(;I<=279;)Z[2*I+1]=7,I++,K[7]++;for(;I<=287;)Z[2*I+1]=8,I++,K[8]++;for(Te(Z,u+1,K),I=0;I<c;I++)E[2*I+1]=5,E[2*I]=ye(I,5);te=new Q(Z,S,l+1,u,y),j=new Q(E,L,0,c,y),ne=new Q(new Array(0),k,0,p,g)}(),N=!0),w.l_desc=new C(w.dyn_ltree,te),w.d_desc=new C(w.dyn_dtree,j),w.bl_desc=new C(w.bl_tree,ne),w.bi_buf=0,w.bi_valid=0,le(w)},r._tr_stored_block=v,r._tr_flush_block=function(w,I,z,U){var R,q,K=0;0<w.level?(w.strm.data_type===2&&(w.strm.data_type=function(V){var J,de=4093624447;for(J=0;J<=31;J++,de>>>=1)if(1&de&&V.dyn_ltree[2*J]!==0)return i;if(V.dyn_ltree[18]!==0||V.dyn_ltree[20]!==0||V.dyn_ltree[26]!==0)return a;for(J=32;J<l;J++)if(V.dyn_ltree[2*J]!==0)return a;return i}(w)),Je(w,w.l_desc),Je(w,w.d_desc),K=function(V){var J;for(d(V,V.dyn_ltree,V.l_desc.max_code),d(V,V.dyn_dtree,V.d_desc.max_code),Je(V,V.bl_desc),J=p-1;3<=J&&V.bl_tree[2*F[J]+1]===0;J--);return V.opt_len+=3*(J+1)+5+5+4,J}(w),R=w.opt_len+3+7>>>3,(q=w.static_len+3+7>>>3)<=R&&(R=q)):R=q=z+5,z+4<=R&&I!==-1?v(w,I,z,U):w.strategy===4||q===R?($(w,2+(U?1:0),3),ot(w,Z,E)):($(w,4+(U?1:0),3),function(V,J,de,fe){var Ze;for($(V,J-257,5),$(V,de-1,5),$(V,fe-4,4),Ze=0;Ze<fe;Ze++)$(V,V.bl_tree[2*F[Ze]+1],3);D(V,V.dyn_ltree,J-1),D(V,V.dyn_dtree,de-1)}(w,w.l_desc.max_code+1,w.d_desc.max_code+1,K+1),ot(w,w.dyn_ltree,w.dyn_dtree)),le(w),U&&ce(w)},r._tr_tally=function(w,I,z){return w.pending_buf[w.d_buf+2*w.last_lit]=I>>>8&255,w.pending_buf[w.d_buf+2*w.last_lit+1]=255&I,w.pending_buf[w.l_buf+w.last_lit]=255&z,w.last_lit++,I===0?w.dyn_ltree[2*z]++:(w.matches++,I--,w.dyn_ltree[2*(_[z]+l+1)]++,w.dyn_dtree[2*B(I)]++),w.last_lit===w.lit_bufsize-1},r._tr_align=function(w){$(w,2,3),Y(w,b,Z),function(I){I.bi_valid===16?(ee(I,I.bi_buf),I.bi_buf=0,I.bi_valid=0):8<=I.bi_valid&&(I.pending_buf[I.pending++]=255&I.bi_buf,I.bi_buf>>=8,I.bi_valid-=8)}(w)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(n){(function(i,a){"use strict";if(!i.setImmediate){var o,s,f,l,u=1,c={},p=!1,h=i.document,y=Object.getPrototypeOf&&Object.getPrototypeOf(i);y=y&&y.setTimeout?y:i,o={}.toString.call(i.process)==="[object process]"?function(A){process.nextTick(function(){g(A)})}:function(){if(i.postMessage&&!i.importScripts){var A=!0,x=i.onmessage;return i.onmessage=function(){A=!1},i.postMessage("","*"),i.onmessage=x,A}}()?(l="setImmediate$"+Math.random()+"$",i.addEventListener?i.addEventListener("message",b,!1):i.attachEvent("onmessage",b),function(A){i.postMessage(l+A,"*")}):i.MessageChannel?((f=new MessageChannel).port1.onmessage=function(A){g(A.data)},function(A){f.port2.postMessage(A)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,function(A){var x=h.createElement("script");x.onreadystatechange=function(){g(A),x.onreadystatechange=null,s.removeChild(x),x=null},s.appendChild(x)}):function(A){setTimeout(g,0,A)},y.setImmediate=function(A){typeof A!="function"&&(A=new Function(""+A));for(var x=new Array(arguments.length-1),T=0;T<x.length;T++)x[T]=arguments[T+1];var S={callback:A,args:x};return c[u]=S,o(u),u++},y.clearImmediate=m}function m(A){delete c[A]}function g(A){if(p)setTimeout(g,0,A);else{var x=c[A];if(x){p=!0;try{(function(T){var S=T.callback,L=T.args;switch(L.length){case 0:S();break;case 1:S(L[0]);break;case 2:S(L[0],L[1]);break;case 3:S(L[0],L[1],L[2]);break;default:S.apply(a,L)}})(x)}finally{m(A),p=!1}}}}function b(A){A.source===i&&typeof A.data=="string"&&A.data.indexOf(l)===0&&g(+A.data.slice(l.length))}})(typeof self>"u"?n===void 0?this:n:self)}).call(this,typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})});var Ne;(t=>{let e;(s=>(s[s.QUAD=1]="QUAD",s[s.MATERIAL=2]="MATERIAL",s[s.UVS=8]="UVS",s[s.NORMALS=32]="NORMALS",s[s.COLORS=128]="COLORS"))(e=t.FaceFlags||(t.FaceFlags={}))})(Ne||(Ne={}));var we;(t=>{let e;(x=>(x[x.I8=5120]="I8",x[x.U8=5121]="U8",x[x.I16=5122]="I16",x[x.U16=5123]="U16",x[x.U32=5125]="U32",x[x.F32=5126]="F32",x[x.NEAREST=9728]="NEAREST",x[x.LINEAR=9729]="LINEAR",x[x.REPEAT=10497]="REPEAT",x[x.NEAREST_MIPMAP_NEAREST=9984]="NEAREST_MIPMAP_NEAREST",x[x.LINEAR_MIPMAP_NEAREST=9985]="LINEAR_MIPMAP_NEAREST",x[x.NEAREST_MIPMAP_LINEAR=9986]="NEAREST_MIPMAP_LINEAR",x[x.LINEAR_MIPMAP_LINEAR=9987]="LINEAR_MIPMAP_LINEAR",x[x.CLAMP_TO_EDGE=33071]="CLAMP_TO_EDGE",x[x.MIRRORED_REPEAT=33648]="MIRRORED_REPEAT",x[x.ARRAY_BUFFER=34962]="ARRAY_BUFFER",x[x.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER"))(e=t.Const||(t.Const={}))})(we||(we={}));var Qe=(e,t)=>{let r=e.get(t);if(r===void 0)throw new RangeError(String(t));return r},lt=(e,t,r)=>{if(e.has(t))throw new RangeError(String(t));e.set(t,r)},Fn=class{constructor(){this.reset()}reset(){this._file={asset:{version:"2.0"}},this._imageIndices=new Map,this._bufferIndices=new Map,this._bufferViewIndices=new Map,this._accessorIndices=new Map,this._meshIndices=new Map,this._nodeIndices=new Map,this._sceneIndices=new Map,this._materialIndices=new Map,this._textureIndices=new Map,this._samplerIndices=new Map}build(){let t=this._file;return this.reset(),t}setMetadata(t){Object.assign(this._file.asset,t)}useExtension(t){var r;(r=this._file).extensionsUsed??(r.extensionsUsed=[]),this._file.extensionsUsed.push(t)}setMainScene(t){this._file.scene=t}getImageIndex(t){return Qe(this._imageIndices,t)}getImage(t){let r=Qe(this._imageIndices,t);return this._file.images[r]}addImage(t,r){var i;(i=this._file).images??(i.images=[]);let n=this._file.images.length;return lt(this._imageIndices,t,n),this._file.images.push(r),n}getBufferIndex(t){return Qe(this._bufferIndices,t)}addBuffer(t,r){var i;(i=this._file).buffers??(i.buffers=[]);let n=this._file.buffers.length;return lt(this._bufferIndices,t,n),this._file.buffers.push(r),n}getBufferViewIndex(t){return Qe(this._bufferViewIndices,t)}addBufferView(t,r){var i;(i=this._file).bufferViews??(i.bufferViews=[]);let n=this._file.bufferViews.length;return lt(this._bufferViewIndices,t,n),this._file.bufferViews.push(r),n}tryGetAccessorIndex(t){return this._accessorIndices.get(t)}getAccessorIndex(t){return Qe(this._accessorIndices,t)}addAccessor(t,r){var i;(i=this._file).accessors??(i.accessors=[]);let n=this._file.accessors.length;return lt(this._accessorIndices,t,n),this._file.accessors.push(r),n}getMeshIndex(t){return Qe(this._meshIndices,t)}addMesh(t,r){var i;(i=this._file).meshes??(i.meshes=[]);let n=this._file.meshes.length;return lt(this._meshIndices,t,n),this._file.meshes.push(r),n}getNodeIndex(t){return Qe(this._nodeIndices,t)}addNode(t,r){var i;(i=this._file).nodes??(i.nodes=[]);let n=this._file.nodes.length;return lt(this._nodeIndices,t,n),this._file.nodes.push(r),n}getSceneIndex(t){return Qe(this._sceneIndices,t)}addScene(t,r){var i;(i=this._file).scenes??(i.scenes=[]);let n=this._file.scenes.length;return lt(this._sceneIndices,t,n),this._file.scenes.push(r),n}hasMaterial(t){return this._materialIndices.has(t)}getMaterialIndex(t){return Qe(this._materialIndices,t)}addMaterial(t,r){var i;(i=this._file).materials??(i.materials=[]);let n=this._file.materials.length;return lt(this._materialIndices,t,n),this._file.materials.push(r),n}getTextureIndex(t){return Qe(this._textureIndices,t)}addTexture(t,r){var i;(i=this._file).textures??(i.textures=[]);let n=this._file.textures.length;return lt(this._textureIndices,t,n),this._file.textures.push(r),n}getSamplerIndex(t){return Qe(this._samplerIndices,t)}addSampler(t,r){var i;(i=this._file).samplers??(i.samplers=[]);let n=this._file.samplers.length;return lt(this._samplerIndices,t,n),this._file.samplers.push(r),n}};var he=(e,t)=>({get:()=>e[t],set:r=>e[t]=r}),dr=(e,t)=>({get:()=>e?.[t],set:r=>e?e[t]=r:r}),Dt=(e,t)=>{let r=e.get();if(!r)return;let n=new Set;for(let s of t()){let f=s.get();f!==void 0&&n.add(f)}if(n.size===0){e.set(void 0);return}let i=new Map,a=0;for(let s of n)i.set(s,a++);for(let s of t()){let f=s.get();f!==void 0&&s.set(i.get(f))}let o=r.slice(0,i.size);for(let[s,f]of i)o[f]=r[s];e.set(o)},pr=(e,t,r)=>{let n=e.get();if(!n)return;let i=new Map,a=new Map;for(let[o,s]of n.entries()){let f=t(s),l=a.get(f);l!==void 0?i.set(o,l):a.set(f,o)}for(let o of r()){let s=o.get();s!==void 0&&o.set(i.get(s)??s)}Dt(e,r)},Ln=class{constructor(t){this.file=t}*_textureIndexRefs(){for(let t of this.file.materials??[]){t.emissiveTexture&&(yield he(t.emissiveTexture,"index")),t.normalTexture&&(yield he(t.normalTexture,"index")),t.occlusionTexture&&(yield he(t.occlusionTexture,"index"));let r=t.pbrMetallicRoughness;r?.baseColorTexture&&(yield he(r.baseColorTexture,"index")),r?.metallicTexture&&(yield he(r.metallicTexture,"index")),r?.roughnessTexture&&(yield he(r.roughnessTexture,"index"))}}*_samplerIndexRefs(){for(let t of this.file.textures??[])yield he(t,"sampler")}*_imageIndexRefs(){for(let t of this.file.textures??[])yield he(t,"source")}*_accessorIndexRefs(){for(let t of this.file.meshes??[])for(let r of t.primitives){yield he(r,"indices");for(let n in r.attributes)yield he(r.attributes,n)}for(let t of this.file.skins??[])yield he(t,"inverseBindMatrices");for(let t of this.file.animations??[])for(let r of t.samplers??[])yield he(r,"input"),yield he(r,"output")}*_bufferViewIndexRefs(){for(let t of this.file.accessors??[])yield he(t,"bufferView");for(let t of this.file.images??[])yield he(t,"bufferView")}*_bufferIndexRefs(){for(let t of this.file.bufferViews??[])yield he(t,"buffer")}_collectUnusedTexCoords(){for(let t of this.file.meshes??[])for(let r of t.primitives){let n=r.material?this.file.materials?.[r.material]:void 0,i=[dr(n?.emissiveTexture,"texCoord"),dr(n?.normalTexture,"texCoord"),dr(n?.occlusionTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.baseColorTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.metallicTexture,"texCoord"),dr(n?.pbrMetallicRoughness?.roughnessTexture,"texCoord")],a=new Set;for(let f of i){let l=f.get();l!==void 0&&a.add(l)}let o=new Map,s=0;for(let f of a)o.set(f,s++);for(let f of i){let l=f.get();l!==void 0&&f.set(o.get(l))}for(let[f,l]of o)r.attributes[`TEXCOORD_${l}`]=r.attributes[`TEXCOORD_${f}`];for(let f=a.size;`TEXCOORD_${f}`in r.attributes;f++)delete r.attributes[`TEXCOORD_${f}`]}}collectUnused(t){t.textures&&Dt(he(this.file,"textures"),()=>this._textureIndexRefs()),t.samplers&&Dt(he(this.file,"samplers"),()=>this._samplerIndexRefs()),t.images&&Dt(he(this.file,"images"),()=>this._imageIndexRefs()),t.texCoords&&this._collectUnusedTexCoords(),t.accessors&&Dt(he(this.file,"accessors"),()=>this._accessorIndexRefs()),t.bufferViews&&Dt(he(this.file,"bufferViews"),()=>this._bufferViewIndexRefs()),t.buffers&&Dt(he(this.file,"buffers"),()=>this._bufferIndexRefs())}deduplicate(t){let r=({name:n,...i})=>JSON.stringify(i);t.buffers&&pr(he(this.file,"buffers"),r,()=>this._bufferIndexRefs()),t.bufferViews&&pr(he(this.file,"bufferViews"),r,()=>this._bufferViewIndexRefs()),t.accessors&&pr(he(this.file,"accessors"),r,()=>this._accessorIndexRefs()),t.images&&pr(he(this.file,"images"),r,()=>this._imageIndexRefs()),t.samplers&&pr(he(this.file,"samplers"),r,()=>this._samplerIndexRefs()),t.textures&&pr(he(this.file,"textures"),r,()=>this._textureIndexRefs())}};var zt=(e,t)=>typeof t=="string"?`data:${e};base64,${t}`:`data:${e};base64,${Buffer.from(t.buffer).toString("base64")}`,qo=e=>[e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15]];var Vo=(e,t,r)=>{for(let[n,i]of Object.entries(e.textures[1]??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))zi(`/textures/${n}/${a}`,o,t);for(let[n,i]of Object.entries(e.textures[2]?.official??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))zi(`/textures/${n}/${a}`,o,t);for(let[n,i]of Object.entries(e.textures[2]?.custom??{}))if(!(n==="color"&&!r.decals)&&!(n==="bump"&&!r.bumpMaps)&&!(n==="normal"&&!r.normalMaps))for(let[a,o]of Object.entries(i))zi(`/textures/${n}/${a}`,o,t)},zi=(e,t,r)=>{r.addImage(e,{name:e,uri:zt("image/png",t)})};var Ut=e=>({flags:e,position:-1,normal:-1,color:-1,uvs:[]});function*Ho(e,t){let r=0;for(;r<e.length;){let n=e[r];if(r+=1,n&Ne.FaceFlags.QUAD){let i=Ut(n),a=Ut(n),o=Ut(n),s=Ut(n);if(i.position=e[r+0],a.position=e[r+1],o.position=e[r+2],s.position=e[r+3],r+=4,n&Ne.FaceFlags.MATERIAL&&(r+=1),n&Ne.FaceFlags.UVS)for(let f=0;f<t;f++)i.uvs.push(e[r+0]),a.uvs.push(e[r+1]),o.uvs.push(e[r+2]),s.uvs.push(e[r+3]),r+=4;n&Ne.FaceFlags.NORMALS&&(i.normal=e[r+0],a.normal=e[r+1],o.normal=e[r+2],s.normal=e[r+3],r+=4),n&Ne.FaceFlags.COLORS&&(r+=4),yield i,yield a,yield o,yield o,yield s,yield i}else{let i=Ut(n),a=Ut(n),o=Ut(n);if(i.position=e[r+0],a.position=e[r+1],o.position=e[r+2],r+=3,n&Ne.FaceFlags.MATERIAL&&(r+=1),n&Ne.FaceFlags.UVS)for(let s=0;s<t;s++)i.uvs.push(e[r+0]),a.uvs.push(e[r+1]),o.uvs.push(e[r+2]),r+=3;n&Ne.FaceFlags.NORMALS&&(i.normal=e[r+0],a.normal=e[r+1],o.normal=e[r+2],r+=3),n&Ne.FaceFlags.COLORS&&(r+=3),yield i,yield a,yield o}}}var Wo=(e,t,r)=>{if(r.logos)for(let[n,i]of Object.entries(e.details.logos))Hr(`/details/logos/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.knobs))Hr(`/details/knobs/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.tubes))Hr(`/details/tubes/${n}.json`,i,t);for(let[n,i]of Object.entries(e.details.pins))Hr(`/details/pins/${n}.json`,i,t);for(let[n,i]of Object.entries(e.geometries))for(let[a,o]of Object.entries(i))Hr(`/geometries/${a}`,o,t)},Hr=(e,t,r)=>{let n=b=>JSON.stringify(b),i=new Map,a=0,o=[],s=[],f=[],l=(t.uvs??[]).map(()=>[]),u=t.uvs?.length??0;for(let b of Ho(t.faces,u)){let A=n(b),x=i.get(A);if(x!==void 0){o.push(x);continue}let T=a++;o.push(T),i.set(A,T),s.push(t.vertices[b.position*3+0]),s.push(t.vertices[b.position*3+1]),s.push(t.vertices[b.position*3+2]);for(let S=0;S<u;S++)l[S].push(t.uvs[S][b.uvs[S]*2+0]),l[S].push(1-t.uvs[S][b.uvs[S]*2+1]);b.flags&Ne.FaceFlags.NORMALS&&(f.push(t.normals[b.normal*3+0]),f.push(t.normals[b.normal*3+1]),f.push(t.normals[b.normal*3+2]))}let c=o.length<255?new Uint8Array(o):new Uint16Array(o),p=new Float32Array(s),h=new Float32Array(f),y=l.map(b=>new Float32Array(b)),m=[p[0],p[1],p[2]],g=[p[0],p[1],p[2]];for(let b=0;b<s.length;b+=3)m[0]=Math.min(m[0],p[b+0]),m[1]=Math.min(m[1],p[b+1]),m[2]=Math.min(m[2],p[b+2]),g[0]=Math.max(g[0],p[b+0]),g[1]=Math.max(g[1],p[b+1]),g[2]=Math.max(g[2],p[b+2]);r.addAccessor(e+"#indices",{name:e+"#indices",byteOffset:0,count:c.length,type:"SCALAR",componentType:c instanceof Uint8Array?we.Const.U8:we.Const.U16,bufferView:r.addBufferView(e+"#indices",{name:e+"#indices",byteOffset:0,byteLength:c.byteLength,target:we.Const.ELEMENT_ARRAY_BUFFER,buffer:r.addBuffer(e+"#indices",{name:e+"#indices",byteLength:c.byteLength,uri:zt("application/octet-stream",c)})})}),r.addAccessor(e+"#positions",{name:e+"#positions",byteOffset:0,count:p.length/3,type:"VEC3",componentType:we.Const.F32,min:m,max:g,bufferView:r.addBufferView(e+"#positions",{name:e+"#positions",byteOffset:0,byteLength:p.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+"#positions",{name:e+"#positions",byteLength:p.byteLength,uri:zt("application/octet-stream",p)})})}),f&&r.addAccessor(e+"#normals",{name:e+"#normals",byteOffset:0,count:h.length/3,type:"VEC3",componentType:we.Const.F32,bufferView:r.addBufferView(e+"#normals",{name:e+"#normals",byteOffset:0,byteLength:h.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+"#normals",{name:e+"#normals",byteLength:h.byteLength,uri:zt("application/octet-stream",h)})})});for(let[b,A]of y.entries())r.addAccessor(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteOffset:0,count:A.length/2,type:"VEC2",componentType:we.Const.F32,bufferView:r.addBufferView(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteOffset:0,byteLength:A.byteLength,target:we.Const.ARRAY_BUFFER,buffer:r.addBuffer(e+`#uvs/${b}`,{name:e+`#uvs/${b}`,byteLength:A.byteLength,uri:zt("application/octet-stream",A)})})})};var Do=Zo(Gh());var Zh={1:{name:"White",type:"solid",color:[.95686274766922,.95686274766922,.95686274766922,1]},2:{name:"Grey",type:"solid",color:[.5411764979362488,.572549045085907,.5529412031173706,1]},3:{name:"Light Yellow",type:"solid",color:[1,.8392156958580017,.5529412031173706,1]},4:{name:"Brick Red",type:"solid",color:[.9490196108818054,.43921568989753723,.3686274588108063,1]},5:{name:"Brick Yellow",type:"solid",color:[.800000011920929,.7254902124404907,.5529412031173706,1]},6:{name:"Light Green",type:"solid",color:[.6784313917160034,.8509804010391235,.658823549747467,1]},7:{name:"Orange",type:"solid",color:[1,.5215686559677124,0,1]},8:{name:"Cobalt Blue",type:"solid",color:[.5490196347236633,0,1,1]},9:{name:"Light Reddish Violet",type:"solid",color:[.9647058844566345,.6627451181411743,.7333333492279053,1]},10:{name:"Clear* / Transparent*",type:"transparent",color:[1,1,.7411764860153198,.20000000298023224]},11:{name:"Pastel Blue",type:"solid",color:[.6705882549285889,.8509804010391235,1,1]},12:{name:"Light Orange Brown",type:"solid",color:[.8470588326454163,.4274509847164154,.1725490242242813,1]},13:{name:"Red Orange",type:"solid",color:[1,.501960813999176,.0784313753247261,1]},14:{name:"Pastel Green",type:"solid",color:[.47058823704719543,.9882352948188782,.47058823704719543,1]},15:{name:"Lemon",type:"solid",color:[1,.9490196108818054,.1882352977991104,1]},16:{name:"Pink",type:"solid",color:[1,.529411792755127,.6117647290229797,1]},17:{name:"Rose",type:"solid",color:[1,.5803921818733215,.5803921818733215,1]},18:{name:"Nougat",type:"solid",color:[.7333333492279053,.501960813999176,.3529411852359772,1]},19:{name:"Light Brown",type:"solid",color:[.8117647171020508,.5411764979362488,.27843138575553894,1]},20:{name:"Nature",type:"milky",color:[.8745098114013672,.8745098114013672,.8745098114013672,1]},21:{name:"Bright Red",type:"solid",color:[.7058823704719543,0,0,1]},22:{name:"Medium Reddish Violet",type:"solid",color:[.8156862854957581,.3137255012989044,.5960784554481506,1]},23:{name:"Bright Blue",type:"solid",color:[.11764705926179886,.3529411852359772,.658823549747467,1]},24:{name:"Bright Yellow",type:"solid",color:[.9803921580314636,.7843137383460999,.03921568766236305,1]},25:{name:"Earth Orange",type:"solid",color:[.3294117748737335,.20000000298023224,.1411764770746231,1]},26:{name:"Black",type:"solid",color:[0,0,0,1]},27:{name:"Dark Grey",type:"solid",color:[.3294117748737335,.3490196168422699,.3333333432674408,1]},28:{name:"Dark Green",type:"solid",color:[0,.5215686559677124,.16862745583057404,1]},29:{name:"Medium Green",type:"solid",color:[.49803921580314636,.7686274647712708,.4588235318660736,1]},36:{name:"Light Yellowish Orange",type:"solid",color:[.9921568632125854,.7647058963775635,.5137255191802979,1]},37:{name:"Bright Green",type:"solid",color:[.3450980484485626,.6705882549285889,.2549019753932953,1]},38:{name:"Dark Orange",type:"solid",color:[.5686274766921997,.3137255012989044,.10980392247438431,1]},39:{name:"Light Bluish Violet",type:"solid",color:[.686274528503418,.7450980544090271,.8392156958580017,1]},40:{name:"Transparent",type:"transparent",color:[0,0,0,.20000000298023224]},41:{name:"Transparent Red",type:"transparent",color:[.7215686440467834,0,0,.699999988079071]},42:{name:"Transparent Light Blue",type:"transparent",color:[.6784313917160034,.8666666746139526,.929411768913269,.699999988079071]},43:{name:"Transparent Blue",type:"transparent",color:[0,.5215686559677124,.7215686440467834,.699999988079071]},44:{name:"Transparent Yellow",type:"transparent",color:[1,.9019607901573181,.13333334028720856,.699999988079071]},45:{name:"Light Blue",type:"solid",color:[.5921568870544434,.7960784435272217,.8509804010391235,1]},47:{name:"Transparent Fluorescent Reddish Orange",type:"transparent",color:[.7960784435272217,.30588236451148987,.16078431904315948,.699999988079071]},48:{name:"Transparent Green",type:"transparent",color:[.45098039507865906,.7058823704719543,.3921568691730499,.699999988079071]},49:{name:"Transparent Fluorescent Green",type:"transparent",color:[.9803921580314636,.9450980424880981,.35686275362968445,.699999988079071]},50:{name:"Phosphorescent White",type:"milky",color:[.8980392217636108,.8745098114013672,.8274509906768799,1]},100:{name:"Light Red",type:"solid",color:[.9764705896377563,.7176470756530762,.6470588445663452,1]},101:{name:"Medium Red",type:"solid",color:[.9411764740943909,.4274509847164154,.3803921639919281,1]},102:{name:"Medium Blue",type:"solid",color:[.45098039507865906,.5882353186607361,.7843137383460999,1]},103:{name:"Light Grey",type:"solid",color:[.7372549176216125,.7058823704719543,.6470588445663452,1]},104:{name:"Bright Violet",type:"solid",color:[.40392157435417175,.12156862765550613,.5058823823928833,1]},105:{name:"Bright Yellowish Orange",type:"solid",color:[.9607843160629272,.5254902243614197,.1411764770746231,1]},106:{name:"Bright Orange",type:"solid",color:[.8392156958580017,.4745098054409027,.13725490868091583,1]},107:{name:"Bright Bluish Green",type:"solid",color:[.0235294122248888,.615686297416687,.6235294342041016,1]},108:{name:"Earth Yellow",type:"solid",color:[.33725491166114807,.27843138575553894,.18431372940540314,1]},109:{name:"(PC) Black IR",type:"transparent",color:[0,.0784313753247261,.0784313753247261,.699999988079071]},110:{name:"Bright Bluish Violet",type:"solid",color:[.14901961386203766,.27450981736183167,.6039215922355652,1]},111:{name:"Transparent Brown",type:"transparent",color:[.7333333492279053,.6980392336845398,.6196078658103943,.699999988079071]},112:{name:"Medium Bluish Violet",type:"solid",color:[.2823529541492462,.3803921639919281,.6745098233222961,1]},113:{name:"Transparent Medium Reddish Violet",type:"transparent",color:[.9921568632125854,.5568627715110779,.8117647171020508,.699999988079071]},114:{name:"Transparent Pink Glitter / Transparent Medium Reddish Violet Glitter",type:"glitter",color:[.9960784316062927,0,.9960784316062927,1]},115:{name:"Medium Yellowish Green",type:"solid",color:[.7176470756530762,.8313725590705872,.14509804546833038,1]},116:{name:"Medium Bluish Green",type:"solid",color:[0,.6666666865348816,.6431372761726379,1]},117:{name:"Transparent with Glitter",type:"glitter",color:[.9686274528503418,.9686274528503418,.9686274528503418,1]},118:{name:"Light Bluish Green",type:"solid",color:[.6117647290229797,.8392156958580017,.800000011920929,1]},119:{name:"Bright Yellowish Green",type:"solid",color:[.6470588445663452,.7921568751335144,.0941176488995552,1]},120:{name:"Light Yellowish Green",type:"solid",color:[.8705882430076599,.9176470637321472,.572549045085907,1]},121:{name:"Medium Yellowish Orange",type:"solid",color:[.9725490212440491,.6039215922355652,.2235294133424759,1]},122:{name:"Nature with Glitter",type:"glitter",color:[.9960784316062927,.7960784435272217,.5960784554481506,1]},123:{name:"Bright Reddish Orange",type:"solid",color:[.9333333373069763,.3294117748737335,.20392157137393951,1]},124:{name:"Bright Reddish Violet",type:"solid",color:[.5647059082984924,.12156862765550613,.4627451002597809,1]},125:{name:"Light Orange",type:"solid",color:[.9764705896377563,.6549019813537598,.46666666865348816,1]},126:{name:"Transparent Bright Bluish Violet",type:"transparent",color:[.43529412150382996,.47843137383461,.7215686440467834,.699999988079071]},127:{name:"Gold",type:"pearl",color:[.8705882430076599,.6745098233222961,.4000000059604645,1]},128:{name:"Dark Nougat",type:"solid",color:[.6784313917160034,.3803921639919281,.250980406999588,1]},129:{name:"Transparent Bluish Violet (Glitter)",type:"glitter",color:[.26274511218070984,.3294117748737335,.5764706134796143,1]},131:{name:"Silver",type:"pearl",color:[.6274510025978088,.6274510025978088,.6274510025978088,1]},133:{name:"Neon Orange",type:"solid",color:[.9372549057006836,.3450980484485626,.1568627506494522,1]},134:{name:"Neon Green",type:"solid",color:[.8039215803146362,.8666666746139526,.20392157137393951,1]},135:{name:"Sand Blue",type:"solid",color:[.43921568989753723,.5058823823928833,.6039215922355652,1]},136:{name:"Sand Violet",type:"solid",color:[.4588235318660736,.3960784375667572,.4901960790157318,1]},137:{name:"Medium Orange",type:"solid",color:[.95686274766922,.5058823823928833,.27843138575553894,1]},138:{name:"Sand Yellow",type:"solid",color:[.5372549295425415,.4901960790157318,.3843137323856354,1]},139:{name:"Copper",type:"pearl",color:[.4627451002597809,.3019607961177826,.23137255012989044,1]},140:{name:"Earth Blue",type:"solid",color:[.09803921729326248,.19607843458652496,.3529411852359772,1]},141:{name:"Earth Green",type:"solid",color:[0,.2705882489681244,.10196078568696976,1]},143:{name:"Transparent Fluorescent Blue",type:"transparent",color:[.6470588445663452,.8039215803146362,.9411764740943909,.699999988079071]},145:{name:"Metallic Sand Blue",type:"pearl",color:[.35686275362968445,.4588235318660736,.5647059082984924,1]},146:{name:"Metallic Sand Violet",type:"pearl",color:[.5058823823928833,.4588235318660736,.5647059082984924,1]},147:{name:"Metallic Sand Yellow",type:"pearl",color:[.5137255191802979,.4470588266849518,.30980393290519714,1]},148:{name:"Metallic Dark Grey",type:"pearl",color:[.2823529541492462,.3019607961177826,.2823529541492462,1]},149:{name:"Metallic Black",type:"pearl",color:[.03921568766236305,.07450980693101883,.15294118225574493,1]},150:{name:"Metallic Light Grey",type:"pearl",color:[.5960784554481506,.6078431606292725,.6000000238418579,1]},151:{name:"Sand Green",type:"solid",color:[.43921568989753723,.5568627715110779,.48627451062202454,1]},153:{name:"Sand Red",type:"solid",color:[.5333333611488342,.3764705955982208,.3686274588108063,1]},154:{name:"(New) Dark Red",type:"solid",color:[.4470588266849518,0,.07058823853731155,1]},157:{name:"Transparent Fluorescent Yellow",type:"transparent",color:[1,.9647058844566345,.3607843220233917,.699999988079071]},158:{name:"Transparent Fluorescent Red",type:"transparent",color:[.9450980424880981,.5568627715110779,.7333333492279053,.699999988079071]},168:{name:"Gun Metallic",type:"pearl",color:[.3764705955982208,.33725491166114807,.2980392277240753,1]},176:{name:"Red Flip/Flop",type:"pearl",color:[.5803921818733215,.3176470696926117,.2823529541492462,1]},178:{name:"Yellow Flip/Flop",type:"pearl",color:[.6705882549285889,.40392157435417175,.22745098173618317,1]},179:{name:"Silver Flip/Flop",type:"pearl",color:[.45098039507865906,.4470588266849518,.4431372582912445,1]},180:{name:"Curry",type:"solid",color:[.8666666746139526,.5960784554481506,.18039216101169586,1]},182:{name:"Transparent Bright Orange",type:"transparent",color:[.8823529481887817,.5529412031173706,.03921568766236305,.699999988079071]},183:{name:"Metallic White",type:"pearl",color:[.9647058844566345,.9490196108818054,.8745098114013672,1]},184:{name:"Metallic Bright Red",type:"pearl",color:[.8392156958580017,0,.14901961386203766,1]},185:{name:"Metallic Bright Blue",type:"pearl",color:[0,.3490196168422699,.6392157077789307,1]},186:{name:"Metallic Dark Green",type:"pearl",color:[0,.5568627715110779,.23529411852359772,1]},187:{name:"Metallic Earth Orange",type:"pearl",color:[.34117648005485535,.2235294133424759,.1725490242242813,1]},188:{name:"Tiny Blue",type:"solid",color:[0,.6196078658103943,.8078431487083435,1]},189:{name:"Reddish Gold / Gold Metallic",type:"pearl",color:[.6745098233222961,.5098039507865906,.27843138575553894,1]},190:{name:"Fire Yellow",type:"solid",color:[1,.8117647171020508,.04313725605607033,1]},191:{name:"Flame Yellowish Orange",type:"solid",color:[.9882352948188782,.6745098233222961,0,1]},192:{name:"Reddish Brown",type:"solid",color:[.37254902720451355,.1921568661928177,.03529411926865578,1]},193:{name:"Flame Reddish Orange",type:"solid",color:[.9254902005195618,.2666666805744171,.11372549086809158,1]},194:{name:"Medium Stone Grey",type:"solid",color:[.5882353186607361,.5882353186607361,.5882353186607361,1]},195:{name:"Royal Blue",type:"solid",color:[.10980392247438431,.3450980484485626,.6549019813537598,1]},196:{name:"Dark Royal Blue",type:"solid",color:[.054901961237192154,.24313725531101227,.6039215922355652,1]},197:{name:"Bright Lilac",type:"solid",color:[.1921568661928177,.16862745583057404,.529411792755127,1]},198:{name:"Bright Reddish Lilac",type:"solid",color:[.5411764979362488,.07058823853731155,.658823549747467,1]},199:{name:"Dark Stone Grey",type:"solid",color:[.3921568691730499,.3921568691730499,.3921568691730499,1]},200:{name:"Lemon Metallic",type:"pearl",color:[.4156862795352936,.4745098054409027,.2666666805744171,1]},208:{name:"Light Stone Grey",type:"solid",color:[.7843137383460999,.7843137383460999,.7843137383460999,1]},209:{name:"Dark Curry",type:"solid",color:[.6431372761726379,.4627451002597809,.1411764770746231,1]},210:{name:"Faded Green",type:"solid",color:[.27450981736183167,.5411764979362488,.37254902720451355,1]},211:{name:"Turquoise",type:"solid",color:[.24705882370471954,.7137255072593689,.6627451181411743,1]},212:{name:"Light Royal Blue",type:"solid",color:[.615686297416687,.7647058963775635,.9686274528503418,1]},213:{name:"Medium Royal Blue",type:"solid",color:[.27843138575553894,.43529412150382996,.7137255072593689,1]},216:{name:"Rust",type:"solid",color:[.529411792755127,.16862745583057404,.09019608050584793,1]},217:{name:"Brown",type:"solid",color:[.48235294222831726,.364705890417099,.2549019753932953,1]},218:{name:"Reddish Lilac",type:"solid",color:[.5568627715110779,.3333333432674408,.5921568870544434,1]},219:{name:"Lilac",type:"solid",color:[.33725491166114807,.30588236451148987,.615686297416687,1]},220:{name:"Light Lilac",type:"solid",color:[.5686274766921997,.5843137502670288,.7921568751335144,1]},221:{name:"Bright Purple",type:"solid",color:[.7843137383460999,.3137255012989044,.6078431606292725,1]},222:{name:"Light Purple",type:"solid",color:[1,.6196078658103943,.8039215803146362,1]},223:{name:"Light Pink",type:"solid",color:[.9450980424880981,.47058823704719543,.501960813999176,1]},224:{name:"Light Brick Yellow",type:"solid",color:[.9529411792755127,.7882353067398071,.5333333611488342,1]},225:{name:"Warm Yellowish Orange",type:"solid",color:[.9803921580314636,.6627451181411743,.3921568691730499,1]},226:{name:"Cool Yellow",type:"solid",color:[1,.9254902005195618,.42352941632270813,1]},227:{name:"Transparent Bright Yellowish Green",type:"transparent",color:[.7882353067398071,.9058823585510254,.5333333611488342,.699999988079071]},228:{name:"Transparent Medium Bluish Green",type:"transparent",color:[.3333333432674408,.6470588445663452,.686274528503418,.699999988079071]},229:{name:"Transparent Light Bluish Green",type:"transparent",color:[.6745098233222961,.8313725590705872,.8705882430076599,.699999988079071]},230:{name:"Transparent Bright Purple",type:"transparent",color:[.9254902005195618,.6392157077789307,.7882353067398071,.699999988079071]},231:{name:"Transparent Flame Yellowish Orange",type:"transparent",color:[.9882352948188782,.7176470756530762,.4274509847164154,.699999988079071]},232:{name:"Dove Blue",type:"solid",color:[.46666666865348816,.7882353067398071,.8470588326454163,1]},233:{name:"Light Faded Green",type:"solid",color:[.3764705955982208,.729411780834198,.4627451002597809,1]},234:{name:"Transparent Fire Yellow",type:"transparent",color:[.9843137264251709,.9098039269447327,.5647059082984924,.699999988079071]},236:{name:"Transparent Bright Reddish Lilac",type:"transparent",color:[.5529412031173706,.45098039507865906,.7019608020782471,.699999988079071]},268:{name:"Medium Lilac",type:"solid",color:[.2666666805744171,.10196078568696976,.5686274766921997,1]},269:{name:"Tiny-Medium Blue",type:"solid",color:[.24313725531101227,.5843137502670288,.7137255072593689,1]},283:{name:"Light Nougat",type:"solid",color:[1,.7882353067398071,.5843137502670288,1]},284:{name:"Transparent Reddish Lilac",type:"transparent",color:[.8784313797950745,.8156862854957581,.8980392217636108,.699999988079071]},285:{name:"Transparent Light Green",type:"transparent",color:[.8941176533699036,.8392156958580017,.8549019694328308,.699999988079071]},294:{name:"Phosphorescent Green",type:"milky",color:[.8352941274642944,.8627451062202454,.5411764979362488,1]},295:{name:"Flamingo Pink",type:"solid",color:[.21568627655506134,.12941177189350128,0,1]},296:{name:"Cool Silver",type:"pearl",color:[.6784313917160034,.6784313917160034,.6784313917160034,1]},297:{name:"Warm Gold",type:"pearl",color:[.7254902124404907,.5843137502670288,.23137255012989044,1]},298:{name:"Cool Silver, Drum Lacquered",type:"metallic",color:[.4627451002597809,.4627451002597809,.4627451002597809,1]},308:{name:"Dark Brown",type:"solid",color:[.2078431397676468,.12941177189350128,0,1]},309:{name:"Metalized Silver",type:"chrome",color:[.8078431487083435,.8078431487083435,.8078431487083435,1]},310:{name:"Metalized Gold",type:"chrome",color:[.8745098114013672,.7568627595901489,.4627451002597809,1]},311:{name:"Transparent Bright Green",type:"transparent",color:[.686274528503418,.8235294222831726,.27450981736183167,.699999988079071]},312:{name:"Medium Nougat",type:"solid",color:[.6666666865348816,.4901960790157318,.3333333432674408,1]},315:{name:"Silver Metallic",type:"pearl",color:[.5490196347236633,.5490196347236633,.5490196347236633,1]},316:{name:"Titanium Metallic",type:"pearl",color:[.24313725531101227,.23529411852359772,.2235294133424759,1]},321:{name:"Dark Azur",type:"solid",color:[.27450981736183167,.6078431606292725,.7647058963775635,1]},322:{name:"Medium Azur",type:"solid",color:[.40784314274787903,.7647058963775635,.886274516582489,1]},323:{name:"Aqua",type:"solid",color:[.8274509906768799,.9490196108818054,.9176470637321472,1]},324:{name:"Medium Lavender",type:"solid",color:[.6274510025978088,.4313725531101227,.7254902124404907,1]},325:{name:"Lavender",type:"solid",color:[.8039215803146362,.6431372761726379,.8705882430076599,1]},326:{name:"Spring Yellowish Green",type:"solid",color:[.886274516582489,.9764705896377563,.6039215922355652,1]},329:{name:"White Glow",type:"milky",color:[.9607843160629272,.9529411792755127,.843137264251709,1]},330:{name:"Olive Green",type:"solid",color:[.545098066329956,.5176470875740051,.30980393290519714,1]},331:{name:"Lacquer",type:"ink",color:[.9333333373069763,.9333333373069763,.9333333373069763,1]},332:{name:"Fluorescent Red Ink",type:"ink",color:[.8156862854957581,.4274509847164154,.30980393290519714,1]},333:{name:"Fluorescent Green Ink",type:"ink",color:[.8588235378265381,.9176470637321472,.47843137383461,1]},334:{name:"Copper Ink",type:"ink",color:[.4627451002597809,.3019607961177826,.23137255012989044,1]},335:{name:"Gold Ink",type:"ink",color:[.7254902124404907,.5843137502670288,.23137255012989044,1]},336:{name:"Silver Ink",type:"ink",color:[.5490196347236633,.5490196347236633,.5490196347236633,1]},337:{name:"Titanium",type:"ink",color:[.24313725531101227,.23529411852359772,.2235294133424759,1]},353:{name:"Vibrant Coral",type:"solid",color:[1,.4274509847164154,.46666666865348816,1]},429:{name:"Yellow",type:"process",color:[.9490196108818054,.8705882430076599,.16470588743686676,1]},439:{name:"Magenta",type:"process",color:[.7607843279838562,0,.5176470875740051,1]},454:{name:"Cyan",type:"process",color:[.21568627655506134,.5921568870544434,.8039215803146362,1]},1026:{name:"(?) Black Rubber",type:"rubber",color:[901960811461322e-19,901960811461322e-19,901960811461322e-19,1]}};var qh=(e,t,r,n,i)=>{t??(t=[]),r??(r={});let a=(!i.normalMaps||t.length===0)&&(!i.decals||Object.keys(r).length===0),o=`/materials/${a?e:Math.random()}`;if(a&&n.hasMaterial(o))return n.getMaterialIndex(o);let s=Zh[e];if(!s){console.warn("material not found: "+e);return}let f;switch(s.type){case"solid":f={name:s.name,pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:.1}};break;case"transparent":f={name:s.name,alphaMode:"BLEND",pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:0}};break;case"rubber":f={name:s.name,pbrMetallicRoughness:{baseColorFactor:s.color,metallicFactor:0,roughnessFactor:.75}};break;default:console.warn("add this material"),console.warn(s)}if(f){if(i.decals&&r.uv&&r.color){let l=f.pbrMetallicRoughness.baseColorFactor,u=Buffer.from(n.getImage(`/textures/color/${r.color.name}`).uri.split(",")[1],"base64"),c=Do.PNG.sync.read(u);for(let h=0;h<c.data.length;h+=4){let y=c.data[h+3]/255;c.data[h+0]=Math.round(c.data[h+0]*y+255*l[0]*(1-y)),c.data[h+1]=Math.round(c.data[h+1]*y+255*l[1]*(1-y)),c.data[h+2]=Math.round(c.data[h+2]*y+255*l[2]*(1-y)),c.data[h+3]=Math.round(255*l[3])}let p="data:image/png;base64,"+Do.PNG.sync.write(c).toString("base64");f.pbrMetallicRoughness.baseColorTexture={texCoord:r.uv,index:n.addTexture(o+"#color",{name:o+"#color",source:n.addImage(o+"#color",{name:o+"#color",uri:p}),sampler:n.addSampler(o+"#color",{name:o+"#color",wrapS:we.Const.CLAMP_TO_EDGE,wrapT:we.Const.CLAMP_TO_EDGE})})}}return i.normalMaps&&t[0]&&(f.normalTexture={texCoord:t[0].uv,index:n.addTexture(o+"#normals",{name:o+"#normals",source:n.getImageIndex(`/textures/normal/${t[0].file}`),sampler:n.addSampler(o+"#normals",{name:o+"#normals",wrapS:t[0].repeat?we.Const.REPEAT:we.Const.CLAMP_TO_EDGE,wrapT:t[0].repeat?we.Const.REPEAT:we.Const.CLAMP_TO_EDGE})})}),n.addMaterial(o,f)}};var Vh=(e,t,r)=>{let n=[];for(let[i,a]of e.parts.entries())n.push(jy(`/parts/${i}.json`,a,e,t,r));t.setMainScene(t.addScene("/scene.json",{nodes:n}))},jy=(e,t,r,n,i)=>{let a=r.configurations[t.version][t.configuration],o=qh(t.material.base[0],a.normals,t.material.decoration,n,i),s=Gy(e,a,o,r,n,i);return n.addNode(s.name,{...s,matrix:qo(t.matrix)})},Gy=(e,t,r,n,i,a)=>{let o=[];for(let[c,p]of Object.entries(t.geometry.extras))if(!(c==="logos"&&!a.logos))for(let[h,y]of p.entries()){let{node:m,mesh:g}=Zy(e,c,h,y,r,n,i);o.push(i.addNode(m.name,{...m,mesh:i.addMesh(g.name,g)}))}let s=`/geometries/${t.geometry.file}`,l=n.geometries[t.version][t.geometry.file].uvs?.length??0,u={};for(let c=0;c<l;c++)u[`TEXCOORD_${c}`]=i.getAccessorIndex(`${s}#uvs/${c}`);return{name:e+"#main",children:o.length>0?o:void 0,mesh:i.addMesh(e+"#main",{name:e+"#main",primitives:[{material:r,indices:i.getAccessorIndex(s+"#indices"),attributes:{POSITION:i.getAccessorIndex(s+"#positions"),NORMAL:i.tryGetAccessorIndex(s+"#normals"),...u}}]})}},Zy=(e,t,r,n,i,a,o)=>{let f=a.details[t][n.type].uvs?.length??0,l={};for(let u=0;u<f;u++)l[`TEXCOORD_${u}`]=o.getAccessorIndex(`/details/${t}/${n.type}.json#uvs/${u}`);return{node:{name:e+`#extra/${t}/${r}`,translation:n.transform.position,rotation:n.transform.quaternion},mesh:{name:e+`#extra/${t}/${r}`,primitives:[{material:i,indices:o.getAccessorIndex(`/details/${t}/${n.type}.json#indices`),attributes:{POSITION:o.getAccessorIndex(`/details/${t}/${n.type}.json#positions`),NORMAL:o.tryGetAccessorIndex(`/details/${t}/${n.type}.json#normals`),...l}}]}}};var Hh=(e,t,r)=>{Vo(e,t,r),Wo(e,t,r),Vh(e,t,r)};var Kh=Zo(Yh());var $h=()=>({logos:!1,normalMaps:!1,bumpMaps:!1,decals:!0,optimize:!0});var ib=async(e,t)=>{let n=await(await Kh.loadAsync(e)).file("scene.mbx")?.async("string");if(!n)throw new Error("invalid file format");return qy(JSON.parse(n),t)},qy=(e,t)=>{let r={...$h(),...t},n=new Fn;Hh(e,n,r);let i=n.build();if(!r.optimize)return i;let a=new Ln(i);return a.collectUnused({textures:!0,samplers:!0,images:!0,texCoords:!0,accessors:!0,bufferViews:!0,buffers:!0}),a.deduplicate({buffers:!0,bufferViews:!0,accessors:!0,images:!0,samplers:!0,textures:!0}),a.file};export{we as Gltf,Fn as GltfBuilder,Ln as GltfOptimizer,Ne as Mbx,qy as convertMbxToGltf,ib as convertZmbxToGltf};
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

jszip/dist/jszip.min.js:
  (*!
  
  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
  <http://stuartk.com/jszip>
  
  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
  
  JSZip uses the library pako released under the MIT license :
  https://github.com/nodeca/pako/blob/main/LICENSE
  *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwgIm5vZGVfbW9kdWxlcy9oYXMtdG9zdHJpbmd0YWcvc2hhbXMuanMiLCAibm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9jYWxsLWJpbmQvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMiLCAibm9kZV9tb2R1bGVzL2lzLWFyZ3VtZW50cy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9pcy1jYWxsYWJsZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F2YWlsYWJsZS10eXBlZC1hcnJheXMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2lzLXR5cGVkLWFycmF5L2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy93aGljaC10eXBlZC1hcnJheS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L3R5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwgIm5vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCAibm9kZV9tb2R1bGVzL2VtaXR0ZXItY29tcG9uZW50L2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9zdHJlYW0vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvZXJyb3JzLmpzIiwgIm5vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvYXNzZXJ0L2Fzc2VydGlvbl9lcnJvci5qcyIsICJub2RlX21vZHVsZXMvZXM2LW9iamVjdC1hc3NpZ24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwgIm5vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbXBsZW1lbnRhdGlvbi5qcyIsICJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbXBsZW1lbnRhdGlvbi5qcyIsICJub2RlX21vZHVsZXMvb2JqZWN0LWlzL3BvbHlmaWxsLmpzIiwgIm5vZGVfbW9kdWxlcy9vYmplY3QtaXMvc2hpbS5qcyIsICJub2RlX21vZHVsZXMvb2JqZWN0LWlzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9pcy1uYW4vaW1wbGVtZW50YXRpb24uanMiLCAibm9kZV9tb2R1bGVzL2lzLW5hbi9wb2x5ZmlsbC5qcyIsICJub2RlX21vZHVsZXMvaXMtbmFuL3NoaW0uanMiLCAibm9kZV9tb2R1bGVzL2lzLW5hbi9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvYXNzZXJ0L2J1aWxkL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMuanMiLCAibm9kZV9tb2R1bGVzL2Fzc2VydC9idWlsZC9hc3NlcnQuanMiLCAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvenN0cmVhbS5qcyIsICJub2RlX21vZHVsZXMvcGFrby9saWIvdXRpbHMvY29tbW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL3RyZWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2FkbGVyMzIuanMiLCAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY3JjMzIuanMiLCAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMiLCAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvZGVmbGF0ZS5qcyIsICJub2RlX21vZHVsZXMvcGFrby9saWIvemxpYi9pbmZmYXN0LmpzIiwgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZnRyZWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9wYWtvL2xpYi96bGliL2luZmxhdGUuanMiLCAibm9kZV9tb2R1bGVzL3Bha28vbGliL3psaWIvY29uc3RhbnRzLmpzIiwgIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXpsaWIvbGliL2JpbmRpbmcuanMiLCAibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktemxpYi9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jaHVua3N0cmVhbS5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2ludGVybGFjZS5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL3BhZXRoLXByZWRpY3Rvci5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1hc3luYy5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2NvbnN0YW50cy5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2NyYy5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL3BhcnNlci5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2JpdG1hcHBlci5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2Zvcm1hdC1ub3JtYWxpc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFyc2VyLWFzeW5jLmpzIiwgIm5vZGVfbW9kdWxlcy9wbmdqcy9saWIvYml0cGFja2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhY2suanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXIuanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLWluZmxhdGUuanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1zeW5jLmpzIiwgIm5vZGVfbW9kdWxlcy9wbmdqcy9saWIvcGFyc2VyLXN5bmMuanMiLCAibm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItc3luYy5qcyIsICJub2RlX21vZHVsZXMvcG5nanMvbGliL3BuZy1zeW5jLmpzIiwgIm5vZGVfbW9kdWxlcy9wbmdqcy9saWIvcG5nLmpzIiwgIm5vZGVfbW9kdWxlcy9qc3ppcC9kaXN0L2pzemlwLm1pbi5qcyIsICJzcmMvbWJ4L3R5cGVzLnRzIiwgInNyYy9nbHRmL3R5cGVzLnRzIiwgInNyYy9nbHRmL2J1aWxkZXIudHMiLCAic3JjL2dsdGYvb3B0aW1pemVyLnRzIiwgInNyYy9jb252ZXJ0L3V0aWxzLnRzIiwgInNyYy9jb252ZXJ0L3RleHR1cmVzLnRzIiwgInNyYy9jb252ZXJ0L3ZlcnRpY2VzLnRzIiwgInNyYy9jb252ZXJ0L2dlb21ldHJpZXMudHMiLCAic3JjL2NvbnZlcnQvbWF0ZXJpYWxzLnRzIiwgInNyYy9jb252ZXJ0L2RhdGEvY29sb3JzLnRzIiwgInNyYy9jb252ZXJ0L3BhcnRzLnRzIiwgInNyYy9jb252ZXJ0L2ZpbGUudHMiLCAic3JjL2NvbnZlcnQvaW5kZXgudHMiLCAic3JjL2NvbnZlcnQvb3B0aW9ucy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzVG9TdHJpbmdUYWdTaGFtcygpIHtcblx0cmV0dXJuIGhhc1N5bWJvbHMoKSAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBTeW50YXhFcnJvcjtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6IEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXRcbn07XG5cbnRyeSB7XG5cdG51bGwuZXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG59IGNhdGNoIChlKSB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNoYWRvd3JlYWxtL3B1bGwvMzg0I2lzc3VlY29tbWVudC0xMzY0MjY0MjI5XG5cdHZhciBlcnJvclByb3RvID0gZ2V0UHJvdG8oZ2V0UHJvdG8oZSkpO1xuXHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcbn1cblxudmFyIGRvRXZhbCA9IGZ1bmN0aW9uIGRvRXZhbChuYW1lKSB7XG5cdHZhciB2YWx1ZTtcblx0aWYgKG5hbWUgPT09ICclQXN5bmNGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2Z1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3IlJykge1xuXHRcdHZhciBmbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJyk7XG5cdFx0aWYgKGZuKSB7XG5cdFx0XHR2YWx1ZSA9IGZuLnByb3RvdHlwZTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJScpIHtcblx0XHR2YXIgZ2VuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3IlJyk7XG5cdFx0aWYgKGdlbikge1xuXHRcdFx0dmFsdWUgPSBnZXRQcm90byhnZW4ucHJvdG90eXBlKTtcblx0XHR9XG5cdH1cblxuXHRJTlRSSU5TSUNTW25hbWVdID0gdmFsdWU7XG5cblx0cmV0dXJuIHZhbHVlO1xufTtcblxudmFyIExFR0FDWV9BTElBU0VTID0ge1xuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b3R5cGUlJzogWydBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZW50cmllcyddLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdmb3JFYWNoJ10sXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2tleXMnXSxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICd2YWx1ZXMnXSxcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IFsnQXN5bmNGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IFsnQm9vbGVhbicsICdwcm90b3R5cGUnXSxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiBbJ0RhdGFWaWV3JywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGVQcm90b3R5cGUlJzogWydEYXRlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IFsnRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IFsnRXZhbEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDY0QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogWydGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3IlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IFsnSW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogWydJbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogWydJbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUpTT05QYXJzZSUnOiBbJ0pTT04nLCAncGFyc2UnXSxcblx0JyVKU09OU3RyaW5naWZ5JSc6IFsnSlNPTicsICdzdHJpbmdpZnknXSxcblx0JyVNYXBQcm90b3R5cGUlJzogWydNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IFsnTnVtYmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnXSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndG9TdHJpbmcnXSxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd2YWx1ZU9mJ10sXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJ10sXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZScsICd0aGVuJ10sXG5cdCclUHJvbWlzZV9hbGwlJzogWydQcm9taXNlJywgJ2FsbCddLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IFsnUHJvbWlzZScsICdyZWplY3QnXSxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogWydQcm9taXNlJywgJ3Jlc29sdmUnXSxcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFsnUmFuZ2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBbJ1JlZmVyZW5jZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBbJ1JlZ0V4cCcsICdwcm90b3R5cGUnXSxcblx0JyVTZXRQcm90b3R5cGUlJzogWydTZXQnLCAncHJvdG90eXBlJ10sXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydTaGFyZWRBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogWydTdHJpbmcnLCAncHJvdG90eXBlJ10sXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IFsnU3ltYm9sJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFsnU3ludGF4RXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBbJ1R5cGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6IFsnVHlwZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogWydVaW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhDbGFtcGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogWydVaW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFsnVVJJRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiBbJ1dlYWtNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiBbJ1dlYWtTZXQnLCAncHJvdG90eXBlJ11cbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhcycpO1xudmFyICRjb25jYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLmNvbmNhdCk7XG52YXIgJHNwbGljZUFwcGx5ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmFwcGx5LCBBcnJheS5wcm90b3R5cGUuc3BsaWNlKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcbnZhciAkZXhlYyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBSZWdFeHAucHJvdG90eXBlLmV4ZWMpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciBmaXJzdCA9ICRzdHJTbGljZShzdHJpbmcsIDAsIDEpO1xuXHR2YXIgbGFzdCA9ICRzdHJTbGljZShzdHJpbmcsIC0xKTtcblx0aWYgKGZpcnN0ID09PSAnJScgJiYgbGFzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBjbG9zaW5nIGAlYCcpO1xuXHR9IGVsc2UgaWYgKGxhc3QgPT09ICclJyAmJiBmaXJzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYCcpO1xuXHR9XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWNOYW1lID0gbmFtZTtcblx0dmFyIGFsaWFzO1xuXHRpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdGFsaWFzID0gTEVHQUNZX0FMSUFTRVNbaW50cmluc2ljTmFtZV07XG5cdFx0aW50cmluc2ljTmFtZSA9ICclJyArIGFsaWFzWzBdICsgJyUnO1xuXHR9XG5cblx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG5cdFx0aWYgKHZhbHVlID09PSBuZWVkc0V2YWwpIHtcblx0XHRcdHZhbHVlID0gZG9FdmFsKGludHJpbnNpY05hbWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdGlmICgkZXhlYygvXiU/W14lXSolPyQvLCBuYW1lKSA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2AlYCBtYXkgbm90IGJlIHByZXNlbnQgYW55d2hlcmUgYnV0IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgaW50cmluc2ljIG5hbWUnKTtcblx0fVxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cdHZhciBpbnRyaW5zaWNCYXNlTmFtZSA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnO1xuXG5cdHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHR2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcblx0dmFyIHZhbHVlID0gaW50cmluc2ljLnZhbHVlO1xuXHR2YXIgc2tpcEZ1cnRoZXJDYWNoaW5nID0gZmFsc2U7XG5cblx0dmFyIGFsaWFzID0gaW50cmluc2ljLmFsaWFzO1xuXHRpZiAoYWxpYXMpIHtcblx0XHRpbnRyaW5zaWNCYXNlTmFtZSA9IGFsaWFzWzBdO1xuXHRcdCRzcGxpY2VBcHBseShwYXJ0cywgJGNvbmNhdChbMCwgMV0sIGFsaWFzKSk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHR2YXIgcGFydCA9IHBhcnRzW2ldO1xuXHRcdHZhciBmaXJzdCA9ICRzdHJTbGljZShwYXJ0LCAwLCAxKTtcblx0XHR2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG5cdFx0aWYgKFxuXHRcdFx0KFxuXHRcdFx0XHQoZmlyc3QgPT09ICdcIicgfHwgZmlyc3QgPT09IFwiJ1wiIHx8IGZpcnN0ID09PSAnYCcpXG5cdFx0XHRcdHx8IChsYXN0ID09PSAnXCInIHx8IGxhc3QgPT09IFwiJ1wiIHx8IGxhc3QgPT09ICdgJylcblx0XHRcdClcblx0XHRcdCYmIGZpcnN0ICE9PSBsYXN0XG5cdFx0KSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdwcm9wZXJ0eSBuYW1lcyB3aXRoIHF1b3RlcyBtdXN0IGhhdmUgbWF0Y2hpbmcgcXVvdGVzJyk7XG5cdFx0fVxuXHRcdGlmIChwYXJ0ID09PSAnY29uc3RydWN0b3InIHx8ICFpc093bikge1xuXHRcdFx0c2tpcEZ1cnRoZXJDYWNoaW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpbnRyaW5zaWNCYXNlTmFtZSArPSAnLicgKyBwYXJ0O1xuXHRcdGludHJpbnNpY1JlYWxOYW1lID0gJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJSc7XG5cblx0XHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY1JlYWxOYW1lKSkge1xuXHRcdFx0dmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICghKHBhcnQgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnQpO1xuXHRcdFx0XHRpc093biA9ICEhZGVzYztcblxuXHRcdFx0XHQvLyBCeSBjb252ZW50aW9uLCB3aGVuIGEgZGF0YSBwcm9wZXJ0eSBpcyBjb252ZXJ0ZWQgdG8gYW4gYWNjZXNzb3Jcblx0XHRcdFx0Ly8gcHJvcGVydHkgdG8gZW11bGF0ZSBhIGRhdGEgcHJvcGVydHkgdGhhdCBkb2VzIG5vdCBzdWZmZXIgZnJvbVxuXHRcdFx0XHQvLyB0aGUgb3ZlcnJpZGUgbWlzdGFrZSwgdGhhdCBhY2Nlc3NvcidzIGdldHRlciBpcyBtYXJrZWQgd2l0aFxuXHRcdFx0XHQvLyBhbiBgb3JpZ2luYWxWYWx1ZWAgcHJvcGVydHkuIEhlcmUsIHdoZW4gd2UgZGV0ZWN0IHRoaXMsIHdlXG5cdFx0XHRcdC8vIHVwaG9sZCB0aGUgaWxsdXNpb24gYnkgcHJldGVuZGluZyB0byBzZWUgdGhhdCBvcmlnaW5hbCBkYXRhXG5cdFx0XHRcdC8vIHByb3BlcnR5LCBpLmUuLCByZXR1cm5pbmcgdGhlIHZhbHVlIHJhdGhlciB0aGFuIHRoZSBnZXR0ZXJcblx0XHRcdFx0Ly8gaXRzZWxmLlxuXHRcdFx0XHRpZiAoaXNPd24gJiYgJ2dldCcgaW4gZGVzYyAmJiAhKCdvcmlnaW5hbFZhbHVlJyBpbiBkZXNjLmdldCkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGRlc2MuZ2V0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzT3duID0gaGFzT3duKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzT3duICYmICFza2lwRnVydGhlckNhY2hpbmcpIHtcblx0XHRcdFx0SU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcblx0aWYgKCRnT1BEICYmICRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHZhciBkZXNjID0gJGdPUEQoZnVuYywgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0Ly8gb3JpZ2luYWwgbGVuZ3RoLCBwbHVzIHRoZSByZWNlaXZlciwgbWludXMgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIChhZnRlciB0aGUgcmVjZWl2ZXIpXG5cdFx0XHQkZGVmaW5lUHJvcGVydHkoXG5cdFx0XHRcdGZ1bmMsXG5cdFx0XHRcdCdsZW5ndGgnLFxuXHRcdFx0XHR7IHZhbHVlOiAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmdW5jO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnLi8nKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJpbmQoR2V0SW50cmluc2ljKCdTdHJpbmcucHJvdG90eXBlLmluZGV4T2YnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJvdW5kSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcblx0aWYgKHR5cGVvZiBpbnRyaW5zaWMgPT09ICdmdW5jdGlvbicgJiYgJGluZGV4T2YobmFtZSwgJy5wcm90b3R5cGUuJykgPiAtMSkge1xuXHRcdHJldHVybiBjYWxsQmluZChpbnRyaW5zaWMpO1xuXHR9XG5cdHJldHVybiBpbnRyaW5zaWM7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaXNGblJlZ2V4ID0gL15cXHMqKD86ZnVuY3Rpb24pP1xcKi87XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIGdldEdlbmVyYXRvckZ1bmMgPSBmdW5jdGlvbiAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiBGdW5jdGlvbigncmV0dXJuIGZ1bmN0aW9uKigpIHt9JykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHR9XG59O1xudmFyIEdlbmVyYXRvckZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR2VuZXJhdG9yRnVuY3Rpb24oZm4pIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoaXNGblJlZ2V4LnRlc3QoZm5Ub1N0ci5jYWxsKGZuKSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0dmFyIHN0ciA9IHRvU3RyLmNhbGwoZm4pO1xuXHRcdHJldHVybiBzdHIgPT09ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cdH1cblx0aWYgKCFnZXRQcm90bykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAodHlwZW9mIEdlbmVyYXRvckZ1bmN0aW9uID09PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciBnZW5lcmF0b3JGdW5jID0gZ2V0R2VuZXJhdG9yRnVuYygpO1xuXHRcdEdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yRnVuYyA/IGdldFByb3RvKGdlbmVyYXRvckZ1bmMpIDogZmFsc2U7XG5cdH1cblx0cmV0dXJuIGdldFByb3RvKGZuKSA9PT0gR2VuZXJhdG9yRnVuY3Rpb247XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVmbGVjdEFwcGx5ID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QgIT09IG51bGwgJiYgUmVmbGVjdC5hcHBseTtcbnZhciBiYWRBcnJheUxpa2U7XG52YXIgaXNDYWxsYWJsZU1hcmtlcjtcbmlmICh0eXBlb2YgcmVmbGVjdEFwcGx5ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcblx0dHJ5IHtcblx0XHRiYWRBcnJheUxpa2UgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdsZW5ndGgnLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgaXNDYWxsYWJsZU1hcmtlcjtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpc0NhbGxhYmxlTWFya2VyID0ge307XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcblx0XHRyZWZsZWN0QXBwbHkoZnVuY3Rpb24gKCkgeyB0aHJvdyA0MjsgfSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0fSBjYXRjaCAoXykge1xuXHRcdGlmIChfICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7XG5cdFx0XHRyZWZsZWN0QXBwbHkgPSBudWxsO1xuXHRcdH1cblx0fVxufSBlbHNlIHtcblx0cmVmbGVjdEFwcGx5ID0gbnVsbDtcbn1cblxudmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzc1xcYi87XG52YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KGZuU3RyKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTsgLy8gbm90IGEgZnVuY3Rpb25cblx0fVxufTtcblxudmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XSc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGRkYUNsYXNzID0gJ1tvYmplY3QgSFRNTEFsbENvbGxlY3Rpb25dJzsgLy8gSUUgMTFcbnZhciBkZGFDbGFzczIgPSAnW29iamVjdCBIVE1MIGRvY3VtZW50LmFsbCBjbGFzc10nO1xudmFyIGRkYUNsYXNzMyA9ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXSc7IC8vIElFIDktMTBcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7IC8vIGJldHRlcjogdXNlIGBoYXMtdG9zdHJpbmd0YWdgXG5cbnZhciBpc0lFNjggPSAhKDAgaW4gWyxdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zcGFyc2UtYXJyYXlzLCBjb21tYS1zcGFjaW5nXG5cbnZhciBpc0REQSA9IGZ1bmN0aW9uIGlzRG9jdW1lbnREb3RBbGwoKSB7IHJldHVybiBmYWxzZTsgfTtcbmlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnKSB7XG5cdC8vIEZpcmVmb3ggMyBjYW5vbmljYWxpemVzIEREQSB0byB1bmRlZmluZWQgd2hlbiBpdCdzIG5vdCBhY2Nlc3NlZCBkaXJlY3RseVxuXHR2YXIgYWxsID0gZG9jdW1lbnQuYWxsO1xuXHRpZiAodG9TdHIuY2FsbChhbGwpID09PSB0b1N0ci5jYWxsKGRvY3VtZW50LmFsbCkpIHtcblx0XHRpc0REQSA9IGZ1bmN0aW9uIGlzRG9jdW1lbnREb3RBbGwodmFsdWUpIHtcblx0XHRcdC8qIGdsb2JhbHMgZG9jdW1lbnQ6IGZhbHNlICovXG5cdFx0XHQvLyBpbiBJRSA2LTgsIHR5cGVvZiBkb2N1bWVudC5hbGwgaXMgXCJvYmplY3RcIiBhbmQgaXQncyB0cnV0aHlcblx0XHRcdGlmICgoaXNJRTY4IHx8ICF2YWx1ZSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdHN0ciA9PT0gZGRhQ2xhc3Ncblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MyXG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IGRkYUNsYXNzMyAvLyBvcGVyYSAxMi4xNlxuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBvYmplY3RDbGFzcyAvLyBJRSA2LThcblx0XHRcdFx0XHQpICYmIHZhbHVlKCcnKSA9PSBudWxsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7IC8qKi8gfVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWZsZWN0QXBwbHlcblx0PyBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdFx0aWYgKGlzRERBKHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHRyeSB7XG5cdFx0XHRyZWZsZWN0QXBwbHkodmFsdWUsIG51bGwsIGJhZEFycmF5TGlrZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0aWYgKGUgIT09IGlzQ2FsbGFibGVNYXJrZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0fVxuXHRcdHJldHVybiAhaXNFUzZDbGFzc0ZuKHZhbHVlKSAmJiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH1cblx0OiBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdFx0aWYgKGlzRERBKHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dmFyIHN0ckNsYXNzID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0aWYgKHN0ckNsYXNzICE9PSBmbkNsYXNzICYmIHN0ckNsYXNzICE9PSBnZW5DbGFzcyAmJiAhKC9eXFxbb2JqZWN0IEhUTUwvKS50ZXN0KHN0ckNsYXNzKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRyZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpO1xuXHR9O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBpKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hTdHJpbmcgPSBmdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBubyBzdWNoIHRoaW5nIGFzIGEgc3BhcnNlIHN0cmluZy5cbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hPYmplY3QgPSBmdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBpdGVyYXRvciwgdGhpc0FyZykge1xuICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnO1xuICAgIH1cblxuICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHBvc3NpYmxlTmFtZXMgPSBbXG5cdCdCaWdJbnQ2NEFycmF5Jyxcblx0J0JpZ1VpbnQ2NEFycmF5Jyxcblx0J0Zsb2F0MzJBcnJheScsXG5cdCdGbG9hdDY0QXJyYXknLFxuXHQnSW50MTZBcnJheScsXG5cdCdJbnQzMkFycmF5Jyxcblx0J0ludDhBcnJheScsXG5cdCdVaW50MTZBcnJheScsXG5cdCdVaW50MzJBcnJheScsXG5cdCdVaW50OEFycmF5Jyxcblx0J1VpbnQ4Q2xhbXBlZEFycmF5J1xuXTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF2YWlsYWJsZVR5cGVkQXJyYXlzKCkge1xuXHR2YXIgb3V0ID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcG9zc2libGVOYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICh0eXBlb2YgZ1twb3NzaWJsZU5hbWVzW2ldXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0b3V0W291dC5sZW5ndGhdID0gcG9zc2libGVOYW1lc1tpXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKCdmb3ItZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG52YXIgdHlwZWRBcnJheXMgPSBhdmFpbGFibGVUeXBlZEFycmF5cygpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5pbmRleE9mJywgdHJ1ZSkgfHwgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59O1xudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIHRvU3RyVGFncyA9IHt9O1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOyAvLyByZXF1aXJlKCdnZXRwcm90b3R5cGVvZicpO1xuaWYgKGhhc1RvU3RyaW5nVGFnICYmIGdPUEQgJiYgZ2V0UHJvdG90eXBlT2YpIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRpZiAoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGFycikge1xuXHRcdFx0dmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYXJyKTtcblx0XHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdGlmICghZGVzY3JpcHRvcikge1xuXHRcdFx0XHR2YXIgc3VwZXJQcm90byA9IGdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRcdFx0ZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdH1cblx0XHRcdHRvU3RyVGFnc1t0eXBlZEFycmF5XSA9IGRlc2NyaXB0b3IuZ2V0O1xuXHRcdH1cblx0fSk7XG59XG5cbnZhciB0cnlUeXBlZEFycmF5cyA9IGZ1bmN0aW9uIHRyeUFsbFR5cGVkQXJyYXlzKHZhbHVlKSB7XG5cdHZhciBhbnlUcnVlID0gZmFsc2U7XG5cdGZvckVhY2godG9TdHJUYWdzLCBmdW5jdGlvbiAoZ2V0dGVyLCB0eXBlZEFycmF5KSB7XG5cdFx0aWYgKCFhbnlUcnVlKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRhbnlUcnVlID0gZ2V0dGVyLmNhbGwodmFsdWUpID09PSB0eXBlZEFycmF5O1xuXHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gYW55VHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG5cdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZyB8fCAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkpIHtcblx0XHR2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcblx0XHRyZXR1cm4gJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMTtcblx0fVxuXHRpZiAoIWdPUEQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKCdmb3ItZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG52YXIgdHlwZWRBcnJheXMgPSBhdmFpbGFibGVUeXBlZEFycmF5cygpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgdG9TdHJUYWdzID0ge307XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7IC8vIHJlcXVpcmUoJ2dldHByb3RvdHlwZW9mJyk7XG5pZiAoaGFzVG9TdHJpbmdUYWcgJiYgZ09QRCAmJiBnZXRQcm90b3R5cGVPZikge1xuXHRmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdGlmICh0eXBlb2YgZ1t0eXBlZEFycmF5XSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0XHRpZiAoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGFycikge1xuXHRcdFx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRcdGlmICghZGVzY3JpcHRvcikge1xuXHRcdFx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dG9TdHJUYWdzW3R5cGVkQXJyYXldID0gZGVzY3JpcHRvci5nZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxudmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcblx0dmFyIGZvdW5kTmFtZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghZm91bmROYW1lKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IGdldHRlci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0aWYgKG5hbWUgPT09IHR5cGVkQXJyYXkpIHtcblx0XHRcdFx0XHRmb3VuZE5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBmb3VuZE5hbWU7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWQtYXJyYXknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCFpc1R5cGVkQXJyYXkodmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnIHx8ICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSkgeyByZXR1cm4gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiIsICIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL3V0aWwvdHlwZXMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMTEyY2M3YzI3NTUxMjU0YWEyYjE3MDk4ZmI3NzQ4NjdmMDVlZDBkOVxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0FyZ3VtZW50c09iamVjdCA9IHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpO1xudmFyIGlzR2VuZXJhdG9yRnVuY3Rpb24gPSByZXF1aXJlKCdpcy1nZW5lcmF0b3ItZnVuY3Rpb24nKTtcbnZhciB3aGljaFR5cGVkQXJyYXkgPSByZXF1aXJlKCd3aGljaC10eXBlZC1hcnJheScpO1xudmFyIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJ2lzLXR5cGVkLWFycmF5Jyk7XG5cbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgcmV0dXJuIGYuY2FsbC5iaW5kKGYpO1xufVxuXG52YXIgQmlnSW50U3VwcG9ydGVkID0gdHlwZW9mIEJpZ0ludCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgU3ltYm9sU3VwcG9ydGVkID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBPYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgbnVtYmVyVmFsdWUgPSB1bmN1cnJ5VGhpcyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YpO1xudmFyIHN0cmluZ1ZhbHVlID0gdW5jdXJyeVRoaXMoU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBib29sZWFuVmFsdWUgPSB1bmN1cnJ5VGhpcyhCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mKTtcblxuaWYgKEJpZ0ludFN1cHBvcnRlZCkge1xuICB2YXIgYmlnSW50VmFsdWUgPSB1bmN1cnJ5VGhpcyhCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5pZiAoU3ltYm9sU3VwcG9ydGVkKSB7XG4gIHZhciBzeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZik7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHByb3RvdHlwZVZhbHVlT2YpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICBwcm90b3R5cGVWYWx1ZU9mKHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydHMuaXNBcmd1bWVudHNPYmplY3QgPSBpc0FyZ3VtZW50c09iamVjdDtcbmV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGlzR2VuZXJhdG9yRnVuY3Rpb247XG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcblxuLy8gVGFrZW4gZnJvbSBoZXJlIGFuZCBtb2RpZmllZCBmb3IgYmV0dGVyIGJyb3dzZXIgc3VwcG9ydFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9wLWlzLXByb21pc2UvYmxvYi9jZGEzNWE1MTNiZGEwM2Y5NzdhZDVjZGUzYTA3OWQyMzdlODJkN2VmL2luZGV4LmpzXG5mdW5jdGlvbiBpc1Byb21pc2UoaW5wdXQpIHtcblx0cmV0dXJuIChcblx0XHQoXG5cdFx0XHR0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRcdGlucHV0IGluc3RhbmNlb2YgUHJvbWlzZVxuXHRcdCkgfHxcblx0XHQoXG5cdFx0XHRpbnB1dCAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIGlucHV0LnRoZW4gPT09ICdmdW5jdGlvbicgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdClcblx0KTtcbn1cbmV4cG9ydHMuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgaXNUeXBlZEFycmF5KHZhbHVlKSB8fFxuICAgIGlzRGF0YVZpZXcodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQXJyYXlCdWZmZXJWaWV3ID0gaXNBcnJheUJ1ZmZlclZpZXc7XG5cblxuZnVuY3Rpb24gaXNVaW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDhBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhBcnJheSA9IGlzVWludDhBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50OENsYW1wZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4Q2xhbXBlZEFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50OENsYW1wZWRBcnJheSA9IGlzVWludDhDbGFtcGVkQXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDE2QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDE2QXJyYXkgPSBpc1VpbnQxNkFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQzMkFycmF5ID0gaXNVaW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQ4QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDhBcnJheSA9IGlzSW50OEFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDE2QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQxNkFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQxNkFycmF5ID0gaXNJbnQxNkFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQzMkFycmF5ID0gaXNJbnQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0MzJBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQzMkFycmF5ID0gaXNGbG9hdDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzRmxvYXQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnRmxvYXQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNGbG9hdDY0QXJyYXkgPSBpc0Zsb2F0NjRBcnJheTtcblxuZnVuY3Rpb24gaXNCaWdJbnQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnQmlnSW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnSW50NjRBcnJheSA9IGlzQmlnSW50NjRBcnJheTtcblxuZnVuY3Rpb24gaXNCaWdVaW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ1VpbnQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNCaWdVaW50NjRBcnJheSA9IGlzQmlnVWludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzTWFwVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgTWFwXSc7XG59XG5pc01hcFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzTWFwVG9TdHJpbmcobmV3IE1hcCgpKVxuKTtcblxuZnVuY3Rpb24gaXNNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzTWFwVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgTWFwO1xufVxuZXhwb3J0cy5pc01hcCA9IGlzTWFwO1xuXG5mdW5jdGlvbiBpc1NldFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNldF0nO1xufVxuaXNTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1NldFRvU3RyaW5nKG5ldyBTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNTZXRUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1NldFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBTZXQ7XG59XG5leHBvcnRzLmlzU2V0ID0gaXNTZXQ7XG5cbmZ1bmN0aW9uIGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYWtNYXBdJztcbn1cbmlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1dlYWtNYXBUb1N0cmluZyhuZXcgV2Vha01hcCgpKVxuKTtcbmZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBXZWFrTWFwO1xufVxuZXhwb3J0cy5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG5cbmZ1bmN0aW9uIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYWtTZXRdJztcbn1cbmlzV2Vha1NldFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBXZWFrU2V0ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1dlYWtTZXRUb1N0cmluZyhuZXcgV2Vha1NldCgpKVxuKTtcbmZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpO1xufVxuZXhwb3J0cy5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBBcnJheUJ1ZmZlcigpKVxuKTtcbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59XG5leHBvcnRzLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuXG5mdW5jdGlvbiBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0YVZpZXddJztcbn1cbmlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNEYXRhVmlld1RvU3RyaW5nKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSksIDAsIDEpKVxuKTtcbmZ1bmN0aW9uIGlzRGF0YVZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzRGF0YVZpZXdUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0YVZpZXc7XG59XG5leHBvcnRzLmlzRGF0YVZpZXcgPSBpc0RhdGFWaWV3O1xuXG4vLyBTdG9yZSBhIGNvcHkgb2YgU2hhcmVkQXJyYXlCdWZmZXIgaW4gY2FzZSBpdCdzIGRlbGV0ZWQgZWxzZXdoZXJlXG52YXIgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID0gdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IFNoYXJlZEFycmF5QnVmZmVyIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNoYXJlZEFycmF5QnVmZmVyXSc7XG59XG5mdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPSBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcobmV3IFNoYXJlZEFycmF5QnVmZmVyQ29weSgpKTtcbiAgfVxuXG4gIHJldHVybiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlckNvcHk7XG59XG5leHBvcnRzLmlzU2hhcmVkQXJyYXlCdWZmZXIgPSBpc1NoYXJlZEFycmF5QnVmZmVyO1xuXG5mdW5jdGlvbiBpc0FzeW5jRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nO1xufVxuZXhwb3J0cy5pc0FzeW5jRnVuY3Rpb24gPSBpc0FzeW5jRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzTWFwSXRlcmF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgTWFwIEl0ZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzTWFwSXRlcmF0b3IgPSBpc01hcEl0ZXJhdG9yO1xuXG5mdW5jdGlvbiBpc1NldEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNldCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc1NldEl0ZXJhdG9yID0gaXNTZXRJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNHZW5lcmF0b3JPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzR2VuZXJhdG9yT2JqZWN0ID0gaXNHZW5lcmF0b3JPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWJBc3NlbWJseS5Nb2R1bGVdJztcbn1cbmV4cG9ydHMuaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlID0gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlO1xuXG5mdW5jdGlvbiBpc051bWJlck9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgbnVtYmVyVmFsdWUpO1xufVxuZXhwb3J0cy5pc051bWJlck9iamVjdCA9IGlzTnVtYmVyT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N0cmluZ09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgc3RyaW5nVmFsdWUpO1xufVxuZXhwb3J0cy5pc1N0cmluZ09iamVjdCA9IGlzU3RyaW5nT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIGJvb2xlYW5WYWx1ZSk7XG59XG5leHBvcnRzLmlzQm9vbGVhbk9iamVjdCA9IGlzQm9vbGVhbk9iamVjdDtcblxuZnVuY3Rpb24gaXNCaWdJbnRPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIEJpZ0ludFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBiaWdJbnRWYWx1ZSk7XG59XG5leHBvcnRzLmlzQmlnSW50T2JqZWN0ID0gaXNCaWdJbnRPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBTeW1ib2xTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgc3ltYm9sVmFsdWUpO1xufVxuZXhwb3J0cy5pc1N5bWJvbE9iamVjdCA9IGlzU3ltYm9sT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0JveGVkUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgaXNOdW1iZXJPYmplY3QodmFsdWUpIHx8XG4gICAgaXNTdHJpbmdPYmplY3QodmFsdWUpIHx8XG4gICAgaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3ltYm9sT2JqZWN0KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0JveGVkUHJpbWl0aXZlID0gaXNCb3hlZFByaW1pdGl2ZTtcblxuZnVuY3Rpb24gaXNBbnlBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICBpc0FycmF5QnVmZmVyKHZhbHVlKSB8fFxuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQW55QXJyYXlCdWZmZXIgPSBpc0FueUFycmF5QnVmZmVyO1xuXG5bJ2lzUHJveHknLCAnaXNFeHRlcm5hbCcsICdpc01vZHVsZU5hbWVzcGFjZU9iamVjdCddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBtZXRob2QsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgJyBpcyBub3Qgc3VwcG9ydGVkIGluIHVzZXJsYW5kJyk7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwgIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCAiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZSZWdleCA9IC9eJC87XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSB7XG4gIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUc7XG4gIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgJ1xcXFwkJicpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnLionKVxuICAgIC5yZXBsYWNlKC8sL2csICckfF4nKVxuICAgIC50b1VwcGVyQ2FzZSgpO1xuICBkZWJ1Z0VudlJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBkZWJ1Z0VudiArICckJywgJ2knKTtcbn1cbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc2xpY2UoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0cy50eXBlcyA9IHJlcXVpcmUoJy4vc3VwcG9ydC90eXBlcycpO1xuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuZXhwb3J0cy50eXBlcy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbmV4cG9ydHMudHlwZXMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5leHBvcnRzLnR5cGVzLmlzTmF0aXZlRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCByZXQpKSB9LFxuICAgICAgICAgICAgZnVuY3Rpb24ocmVqKSB7IHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2tpZnlPblJlamVjdGVkLmJpbmQobnVsbCwgcmVqLCBjYikpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuIiwgIlxuLyoqXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufTtcblxuLyoqXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICh0aGlzLl9jYWxsYmFja3NbZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XSB8fCBbXSlcbiAgICAucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHNlbGYub2ZmKGV2ZW50LCBvbik7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uLmZuID0gZm47XG4gIHRoaXMub24oZXZlbnQsIG9uKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgLy8gYWxsXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNwZWNpZmljIGV2ZW50XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XG5cbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICB2YXIgY2I7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtNaXhlZH0gLi4uXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG5cbiAgaWYgKGNhbGxiYWNrcykge1xuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdlbWl0dGVyJyk7XG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRW1pdHRlci5jYWxsKHRoaXMpO1xufVxuU3RyZWFtLnByb3RvdHlwZSA9IG5ldyBFbWl0dGVyKCk7XG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygnZXJyb3InKSkge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS5cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gcmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZC5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBzb3VyY2Uub2ZmKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0Lm9mZignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5vZmYoJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub2ZmKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLm9mZignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0Lm9mZignZXJyb3InLCBvbmVycm9yKTtcblxuICAgIHNvdXJjZS5vZmYoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5vZmYoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0Lm9mZignZW5kJywgY2xlYW51cCk7XG4gICAgZGVzdC5vZmYoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignZW5kJywgY2xlYW51cCk7XG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn1cbiIsICIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsICIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwgIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG5jb25zdCBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5jb25zdCBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgPyBTeW1ib2xbJ2ZvciddKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuY29uc3QgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBjb25zdCBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgY29uc3QgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgbGV0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgY29uc3QgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlWaWV3IChhcnJheVZpZXcpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYXJyYXlWaWV3LCBVaW50OEFycmF5KSkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgbGV0IGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICBjb25zdCBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICBsZXQgeCA9IGEubGVuZ3RoXG4gIGxldCB5ID0gYi5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIGxldCBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgbGV0IHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGJ1ZixcbiAgICAgICAgICBwb3NcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICB9XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgaXNJbnN0YW5jZShzdHJpbmcsIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICApXG4gIH1cblxuICBjb25zdCBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGNvbnN0IG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2VyY2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIGNvbnN0IGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIGxldCBzdHIgPSAnJ1xuICBjb25zdCBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICBsZXQgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgbGV0IHkgPSBlbmQgLSBzdGFydFxuICBjb25zdCBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIGNvbnN0IHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIGNvbnN0IHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICBsZXQgaW5kZXhTaXplID0gMVxuICBsZXQgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICBsZXQgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICBsZXQgaVxuICBpZiAoZGlyKSB7XG4gICAgbGV0IGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICBjb25zdCByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIGNvbnN0IHJlcyA9IFtdXG5cbiAgbGV0IGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIGxldCBjb2RlUG9pbnQgPSBudWxsXG4gICAgbGV0IGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRilcbiAgICAgID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERilcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKVxuICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICBsZXQgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG5jb25zdCBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgY29uc3QgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgbGV0IG91dCA9ICcnXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgbGV0IHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgY29uc3QgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICBsZXQgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGxvID0gZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNFxuXG4gIGNvbnN0IGhpID0gdGhpc1srK29mZnNldF0gK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIGxhc3QgKiAyICoqIDI0XG5cbiAgcmV0dXJuIEJpZ0ludChsbykgKyAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgaGkgPSBmaXJzdCAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgY29uc3QgbG8gPSB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3RcblxuICByZXR1cm4gKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSkgKyBCaWdJbnQobG8pXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoXG4gIGxldCBtdWwgPSAxXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDRdICtcbiAgICB0aGlzW29mZnNldCArIDVdICogMiAqKiA4ICtcbiAgICB0aGlzW29mZnNldCArIDZdICogMiAqKiAxNiArXG4gICAgKGxhc3QgPDwgMjQpIC8vIE92ZXJmbG93XG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gKGZpcnN0IDw8IDI0KSArIC8vIE92ZXJmbG93XG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQodGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRMRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICByZXR1cm4gb2Zmc2V0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NEJFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyA3XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNl0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDVdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA0XSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgM10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDJdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAxXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0XSA9IGhpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gMFxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgY29uc3QgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICBsZXQgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBDVVNUT00gRVJST1JTXG4vLyA9PT09PT09PT09PT09XG5cbi8vIFNpbXBsaWZpZWQgdmVyc2lvbnMgZnJvbSBOb2RlLCBjaGFuZ2VkIGZvciBCdWZmZXItb25seSB1c2FnZVxuY29uc3QgZXJyb3JzID0ge31cbmZ1bmN0aW9uIEUgKHN5bSwgZ2V0TWVzc2FnZSwgQmFzZSkge1xuICBlcnJvcnNbc3ltXSA9IGNsYXNzIE5vZGVFcnJvciBleHRlbmRzIEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIHN1cGVyKClcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywge1xuICAgICAgICB2YWx1ZTogZ2V0TWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGQgdGhlIGVycm9yIGNvZGUgdG8gdGhlIG5hbWUgdG8gaW5jbHVkZSBpdCBpbiB0aGUgc3RhY2sgdHJhY2UuXG4gICAgICB0aGlzLm5hbWUgPSBgJHt0aGlzLm5hbWV9IFske3N5bX1dYFxuICAgICAgLy8gQWNjZXNzIHRoZSBzdGFjayB0byBnZW5lcmF0ZSB0aGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGVcbiAgICAgIC8vIGZyb20gdGhlIG5hbWUuXG4gICAgICB0aGlzLnN0YWNrIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAvLyBSZXNldCB0aGUgbmFtZSB0byB0aGUgYWN0dWFsIG5hbWUuXG4gICAgICBkZWxldGUgdGhpcy5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGNvZGUgKCkge1xuICAgICAgcmV0dXJuIHN5bVxuICAgIH1cblxuICAgIHNldCBjb2RlICh2YWx1ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2RlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5uYW1lfSBbJHtzeW19XTogJHt0aGlzLm1lc3NhZ2V9YFxuICAgIH1cbiAgfVxufVxuXG5FKCdFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMnLFxuICBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gYCR7bmFtZX0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYFxuICAgIH1cblxuICAgIHJldHVybiAnQXR0ZW1wdCB0byBhY2Nlc3MgbWVtb3J5IG91dHNpZGUgYnVmZmVyIGJvdW5kcydcbiAgfSwgUmFuZ2VFcnJvcilcbkUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJyxcbiAgZnVuY3Rpb24gKG5hbWUsIGFjdHVhbCkge1xuICAgIHJldHVybiBgVGhlIFwiJHtuYW1lfVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWBcbiAgfSwgVHlwZUVycm9yKVxuRSgnRVJSX09VVF9PRl9SQU5HRScsXG4gIGZ1bmN0aW9uIChzdHIsIHJhbmdlLCBpbnB1dCkge1xuICAgIGxldCBtc2cgPSBgVGhlIHZhbHVlIG9mIFwiJHtzdHJ9XCIgaXMgb3V0IG9mIHJhbmdlLmBcbiAgICBsZXQgcmVjZWl2ZWQgPSBpbnB1dFxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGlucHV0KSAmJiBNYXRoLmFicyhpbnB1dCkgPiAyICoqIDMyKSB7XG4gICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihTdHJpbmcoaW5wdXQpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnYmlnaW50Jykge1xuICAgICAgcmVjZWl2ZWQgPSBTdHJpbmcoaW5wdXQpXG4gICAgICBpZiAoaW5wdXQgPiBCaWdJbnQoMikgKiogQmlnSW50KDMyKSB8fCBpbnB1dCA8IC0oQmlnSW50KDIpICoqIEJpZ0ludCgzMikpKSB7XG4gICAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKHJlY2VpdmVkKVxuICAgICAgfVxuICAgICAgcmVjZWl2ZWQgKz0gJ24nXG4gICAgfVxuICAgIG1zZyArPSBgIEl0IG11c3QgYmUgJHtyYW5nZX0uIFJlY2VpdmVkICR7cmVjZWl2ZWR9YFxuICAgIHJldHVybiBtc2dcbiAgfSwgUmFuZ2VFcnJvcilcblxuZnVuY3Rpb24gYWRkTnVtZXJpY2FsU2VwYXJhdG9yICh2YWwpIHtcbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gdmFsLmxlbmd0aFxuICBjb25zdCBzdGFydCA9IHZhbFswXSA9PT0gJy0nID8gMSA6IDBcbiAgZm9yICg7IGkgPj0gc3RhcnQgKyA0OyBpIC09IDMpIHtcbiAgICByZXMgPSBgXyR7dmFsLnNsaWNlKGkgLSAzLCBpKX0ke3Jlc31gXG4gIH1cbiAgcmV0dXJuIGAke3ZhbC5zbGljZSgwLCBpKX0ke3Jlc31gXG59XG5cbi8vIENIRUNLIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGNoZWNrQm91bmRzIChidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBpZiAoYnVmW29mZnNldF0gPT09IHVuZGVmaW5lZCB8fCBidWZbb2Zmc2V0ICsgYnl0ZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgYnVmLmxlbmd0aCAtIChieXRlTGVuZ3RoICsgMSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbnRCSSAodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHtcbiAgICBjb25zdCBuID0gdHlwZW9mIG1pbiA9PT0gJ2JpZ2ludCcgPyAnbicgOiAnJ1xuICAgIGxldCByYW5nZVxuICAgIGlmIChieXRlTGVuZ3RoID4gMykge1xuICAgICAgaWYgKG1pbiA9PT0gMCB8fCBtaW4gPT09IEJpZ0ludCgwKSkge1xuICAgICAgICByYW5nZSA9IGA+PSAwJHtufSBhbmQgPCAyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4fSR7bn1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IGA+PSAtKDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn0pIGFuZCA8IDIgKiogYCArXG4gICAgICAgICAgICAgICAgYCR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn1gXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlID0gYD49ICR7bWlufSR7bn0gYW5kIDw9ICR7bWF4fSR7bn1gXG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSgndmFsdWUnLCByYW5nZSwgdmFsdWUpXG4gIH1cbiAgY2hlY2tCb3VuZHMoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyICh2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0Vycm9yICh2YWx1ZSwgbGVuZ3RoLCB0eXBlKSB7XG4gIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUpIHtcbiAgICB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgdHlwZSlcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JywgJ2FuIGludGVnZXInLCB2YWx1ZSlcbiAgfVxuXG4gIGlmIChsZW5ndGggPCAwKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfQlVGRkVSX09VVF9PRl9CT1VORFMoKVxuICB9XG5cbiAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPj0gJHt0eXBlID8gMSA6IDB9IGFuZCA8PSAke2xlbmd0aH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUpXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuY29uc3QgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIGxldCBjb2RlUG9pbnRcbiAgY29uc3QgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICBsZXQgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgY29uc3QgYnl0ZXMgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIGxldCBjLCBoaSwgbG9cbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxuY29uc3QgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFscGhhYmV0ID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gIGNvbnN0IHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgY29uc3QgaTE2ID0gaSAqIDE2XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG5cbi8vIFJldHVybiBub3QgZnVuY3Rpb24gd2l0aCBFcnJvciBpZiBCaWdJbnQgbm90IHN1cHBvcnRlZFxuZnVuY3Rpb24gZGVmaW5lQmlnSW50TWV0aG9kIChmbikge1xuICByZXR1cm4gdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXJCaWdJbnROb3REZWZpbmVkIDogZm5cbn1cblxuZnVuY3Rpb24gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignQmlnSW50IG5vdCBzdXBwb3J0ZWQnKVxufVxuIiwgIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvZXJyb3JzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzNiMDQ0OTYyYzQ4ZmUzMTM5MDU4NzdhOTZiNWQwODk0YTU0MDRmNmZcblxuLyogZXNsaW50IG5vZGUtY29yZS9kb2N1bWVudGVkLWVycm9yczogXCJlcnJvclwiICovXG5cbi8qIGVzbGludCBub2RlLWNvcmUvYWxwaGFiZXRpemUtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuLyogZXNsaW50IG5vZGUtY29yZS9wcmVmZXItdXRpbC1mb3JtYXQtZXJyb3JzOiBcImVycm9yXCIgKi9cbid1c2Ugc3RyaWN0JzsgLy8gVGhlIHdob2xlIHBvaW50IGJlaGluZCB0aGlzIGludGVybmFsIG1vZHVsZSBpcyB0byBhbGxvdyBOb2RlLmpzIHRvIG5vXG4vLyBsb25nZXIgYmUgZm9yY2VkIHRvIHRyZWF0IGV2ZXJ5IGVycm9yIG1lc3NhZ2UgY2hhbmdlIGFzIGEgc2VtdmVyLW1ham9yXG4vLyBjaGFuZ2UuIFRoZSBOb2RlRXJyb3IgY2xhc3NlcyBoZXJlIGFsbCBleHBvc2UgYSBgY29kZWAgcHJvcGVydHkgd2hvc2Vcbi8vIHZhbHVlIHN0YXRpY2FsbHkgYW5kIHBlcm1hbmVudGx5IGlkZW50aWZpZXMgdGhlIGVycm9yLiBXaGlsZSB0aGUgZXJyb3Jcbi8vIG1lc3NhZ2UgbWF5IGNoYW5nZSwgdGhlIGNvZGUgc2hvdWxkIG5vdC5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgY29kZXMgPSB7fTsgLy8gTGF6eSBsb2FkZWRcblxudmFyIGFzc2VydDtcbnZhciB1dGlsO1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5vZGVFcnJvciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9CYXNlKSB7XG4gICAgX2luaGVyaXRzKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVFcnJvcik7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE5vZGVFcnJvcikuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKSk7XG4gICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTm9kZUVycm9yO1xuICB9KEJhc2UpO1xuXG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfQU1CSUdVT1VTX0FSR1VNRU5UJywgJ1RoZSBcIiVzXCIgYXJndW1lbnQgaXMgYW1iaWd1b3VzLiAlcycsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGFzc2VydCA9PT0gdW5kZWZpbmVkKSBhc3NlcnQgPSByZXF1aXJlKCcuLi9hc3NlcnQnKTtcbiAgYXNzZXJ0KHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJywgXCInbmFtZScgbXVzdCBiZSBhIHN0cmluZ1wiKTsgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcblxuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSAvLyBUT0RPKEJyaWRnZUFSKTogSW1wcm92ZSB0aGUgb3V0cHV0IGJ5IHNob3dpbmcgYG51bGxgIGFuZCBzaW1pbGFyLlxuXG5cbiAgbXNnICs9IFwiLiBSZWNlaXZlZCB0eXBlIFwiLmNvbmNhdChfdHlwZW9mKGFjdHVhbCkpO1xuICByZXR1cm4gbXNnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1ZBTFVFJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHZhciByZWFzb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpcyBpbnZhbGlkJztcbiAgaWYgKHV0aWwgPT09IHVuZGVmaW5lZCkgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7XG4gIHZhciBpbnNwZWN0ZWQgPSB1dGlsLmluc3BlY3QodmFsdWUpO1xuXG4gIGlmIChpbnNwZWN0ZWQubGVuZ3RoID4gMTI4KSB7XG4gICAgaW5zcGVjdGVkID0gXCJcIi5jb25jYXQoaW5zcGVjdGVkLnNsaWNlKDAsIDEyOCksIFwiLi4uXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiVGhlIGFyZ3VtZW50ICdcIi5jb25jYXQobmFtZSwgXCInIFwiKS5jb25jYXQocmVhc29uLCBcIi4gUmVjZWl2ZWQgXCIpLmNvbmNhdChpbnNwZWN0ZWQpO1xufSwgVHlwZUVycm9yLCBSYW5nZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFJywgZnVuY3Rpb24gKGlucHV0LCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHlwZTtcblxuICBpZiAodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIHR5cGUgPSBcImluc3RhbmNlIG9mIFwiLmNvbmNhdCh2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gXCJ0eXBlIFwiLmNvbmNhdChfdHlwZW9mKHZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5wdXQsIFwiIHRvIGJlIHJldHVybmVkIGZyb20gdGhlIFxcXCJcIikuY29uY2F0KG5hbWUsIFwiXFxcIlwiKSArIFwiIGZ1bmN0aW9uIGJ1dCBnb3QgXCIuY29uY2F0KHR5cGUsIFwiLlwiKTtcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NSVNTSU5HX0FSR1MnLCBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IHJlcXVpcmUoJy4uL2Fzc2VydCcpO1xuICBhc3NlcnQoYXJncy5sZW5ndGggPiAwLCAnQXQgbGVhc3Qgb25lIGFyZyBuZWVkcyB0byBiZSBzcGVjaWZpZWQnKTtcbiAgdmFyIG1zZyA9ICdUaGUgJztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KGEsIFwiXFxcIlwiKTtcbiAgfSk7XG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDE6XG4gICAgICBtc2cgKz0gXCJcIi5jb25jYXQoYXJnc1swXSwgXCIgYXJndW1lbnRcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMjpcbiAgICAgIG1zZyArPSBcIlwiLmNvbmNhdChhcmdzWzBdLCBcIiBhbmQgXCIpLmNvbmNhdChhcmdzWzFdLCBcIiBhcmd1bWVudHNcIik7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBtc2cgKz0gYXJncy5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpO1xuICAgICAgbXNnICs9IFwiLCBhbmQgXCIuY29uY2F0KGFyZ3NbbGVuIC0gMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZywgXCIgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG59LCBUeXBlRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuY29kZXMgPSBjb2RlczsiLCAiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzA4MTc4NDBmNzc1MDMyMTY5ZGRkNzBjODVhYzA1OWYxOGZmY2M4MWNcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyB2YXIgYSA9IFtudWxsXTsgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpOyB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7IHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOyBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTsgcmV0dXJuIGluc3RhbmNlOyB9OyB9IHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHsgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ3V0aWwvJyksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlLmluc3BlY3Q7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuLi9lcnJvcnMnKSxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlMi5jb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRTsgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBjb3VudCkge1xuICBjb3VudCA9IE1hdGguZmxvb3IoY291bnQpO1xuICBpZiAoc3RyLmxlbmd0aCA9PSAwIHx8IGNvdW50ID09IDApIHJldHVybiAnJztcbiAgdmFyIG1heENvdW50ID0gc3RyLmxlbmd0aCAqIGNvdW50O1xuICBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2coY291bnQpIC8gTWF0aC5sb2coMikpO1xuXG4gIHdoaWxlIChjb3VudCkge1xuICAgIHN0ciArPSBzdHI7XG4gICAgY291bnQtLTtcbiAgfVxuXG4gIHN0ciArPSBzdHIuc3Vic3RyaW5nKDAsIG1heENvdW50IC0gc3RyLmxlbmd0aCk7XG4gIHJldHVybiBzdHI7XG59XG5cbnZhciBibHVlID0gJyc7XG52YXIgZ3JlZW4gPSAnJztcbnZhciByZWQgPSAnJztcbnZhciB3aGl0ZSA9ICcnO1xudmFyIGtSZWFkYWJsZU9wZXJhdG9yID0ge1xuICBkZWVwU3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbDonLFxuICBzdHJpY3RFcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBlcXVhbDonLFxuICBzdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgcmVmZXJlbmNlLWVxdWFsIHRvIFwiZXhwZWN0ZWRcIjonLFxuICBkZWVwRXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsOicsXG4gIGVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZXF1YWw6JyxcbiAgbm90RGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgc3RyaWN0bHkgdW5lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgbm90RGVlcEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsIHRvOicsXG4gIG5vdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSBsb29zZWx5IHVuZXF1YWwgdG86JyxcbiAgbm90SWRlbnRpY2FsOiAnVmFsdWVzIGlkZW50aWNhbCBidXQgbm90IHJlZmVyZW5jZS1lcXVhbDonXG59OyAvLyBDb21wYXJpbmcgc2hvcnQgcHJpbWl0aXZlcyBzaG91bGQganVzdCBzaG93ID09PSAvICE9PSBpbnN0ZWFkIG9mIHVzaW5nIHRoZVxuLy8gZGlmZi5cblxudmFyIGtNYXhTaG9ydExlbmd0aCA9IDEwO1xuXG5mdW5jdGlvbiBjb3B5RXJyb3Ioc291cmNlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCAnbWVzc2FnZScsIHtcbiAgICB2YWx1ZTogc291cmNlLm1lc3NhZ2VcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RWYWx1ZSh2YWwpIHtcbiAgLy8gVGhlIHV0aWwuaW5zcGVjdCBkZWZhdWx0IHZhbHVlcyBjb3VsZCBiZSBjaGFuZ2VkLiBUaGlzIG1ha2VzIHN1cmUgdGhlXG4gIC8vIGVycm9yIG1lc3NhZ2VzIGNvbnRhaW4gdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiBuZXZlcnRoZWxlc3MuXG4gIHJldHVybiBpbnNwZWN0KHZhbCwge1xuICAgIGNvbXBhY3Q6IGZhbHNlLFxuICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlLFxuICAgIGRlcHRoOiAxMDAwLFxuICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgY29tcGFyZXMgb25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgKHdpdGggYSBmZXcgZXhjZXB0aW9ucykuXG4gICAgc2hvd0hpZGRlbjogZmFsc2UsXG4gICAgLy8gSGF2aW5nIGEgbG9uZyBsaW5lIGFzIGVycm9yIGlzIGJldHRlciB0aGFuIHdyYXBwaW5nIHRoZSBsaW5lIGZvclxuICAgIC8vIGNvbXBhcmlzb24gZm9yIG5vdy5cbiAgICAvLyBUT0RPKEJyaWRnZUFSKTogYGJyZWFrTGVuZ3RoYCBzaG91bGQgYmUgbGltaXRlZCBhcyBzb29uIGFzIHNvb24gYXMgd2VcbiAgICAvLyBoYXZlIG1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluc3BlY3RlZCBwcm9wZXJ0aWVzIChpLmUuLCBrbm93IHdoZXJlXG4gICAgLy8gaW4gd2hhdCBsaW5lIHRoZSBwcm9wZXJ0eSBzdGFydHMgYW5kIGVuZHMpLlxuICAgIGJyZWFrTGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgZG9lcyBub3QgZGV0ZWN0IHByb3hpZXMgY3VycmVudGx5LlxuICAgIHNob3dQcm94eTogZmFsc2UsXG4gICAgc29ydGVkOiB0cnVlLFxuICAgIC8vIEluc3BlY3QgZ2V0dGVycyBhcyB3ZSBhbHNvIGNoZWNrIHRoZW0gd2hlbiBjb21wYXJpbmcgZW50cmllcy5cbiAgICBnZXR0ZXJzOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJEaWZmKGFjdHVhbCwgZXhwZWN0ZWQsIG9wZXJhdG9yKSB7XG4gIHZhciBvdGhlciA9ICcnO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBsYXN0UG9zID0gMDtcbiAgdmFyIGVuZCA9ICcnO1xuICB2YXIgc2tpcHBlZCA9IGZhbHNlO1xuICB2YXIgYWN0dWFsSW5zcGVjdGVkID0gaW5zcGVjdFZhbHVlKGFjdHVhbCk7XG4gIHZhciBhY3R1YWxMaW5lcyA9IGFjdHVhbEluc3BlY3RlZC5zcGxpdCgnXFxuJyk7XG4gIHZhciBleHBlY3RlZExpbmVzID0gaW5zcGVjdFZhbHVlKGV4cGVjdGVkKS5zcGxpdCgnXFxuJyk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGluZGljYXRvciA9ICcnOyAvLyBJbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzIGV4cGxpY2l0bHkgbWFyayB0aGVtIGFzIG5vdCByZWZlcmVuY2UgZXF1YWxcbiAgLy8gZm9yIHRoZSBgc3RyaWN0RXF1YWxgIG9wZXJhdG9yLlxuXG4gIGlmIChvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIF90eXBlb2YoZXhwZWN0ZWQpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgZXhwZWN0ZWQgIT09IG51bGwpIHtcbiAgICBvcGVyYXRvciA9ICdzdHJpY3RFcXVhbE9iamVjdCc7XG4gIH0gLy8gSWYgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIGZpdCBvbiBhIHNpbmdsZSBsaW5lIGFuZCB0aGV5IGFyZSBub3Qgc3RyaWN0bHlcbiAgLy8gZXF1YWwsIGNoZWNrIGZ1cnRoZXIgc3BlY2lhbCBoYW5kbGluZy5cblxuXG4gIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDEgJiYgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDEgJiYgYWN0dWFsTGluZXNbMF0gIT09IGV4cGVjdGVkTGluZXNbMF0pIHtcbiAgICB2YXIgaW5wdXRMZW5ndGggPSBhY3R1YWxMaW5lc1swXS5sZW5ndGggKyBleHBlY3RlZExpbmVzWzBdLmxlbmd0aDsgLy8gSWYgdGhlIGNoYXJhY3RlciBsZW5ndGggb2YgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIHRvZ2V0aGVyIGlzIGxlc3MgdGhhblxuICAgIC8vIGtNYXhTaG9ydExlbmd0aCBhbmQgaWYgbmVpdGhlciBpcyBhbiBvYmplY3QgYW5kIGF0IGxlYXN0IG9uZSBvZiB0aGVtIGlzXG4gICAgLy8gbm90IGB6ZXJvYCwgdXNlIHRoZSBzdHJpY3QgZXF1YWwgY29tcGFyaXNvbiB0byB2aXN1YWxpemUgdGhlIG91dHB1dC5cblxuICAgIGlmIChpbnB1dExlbmd0aCA8PSBrTWF4U2hvcnRMZW5ndGgpIHtcbiAgICAgIGlmICgoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpICYmIChfdHlwZW9mKGV4cGVjdGVkKSAhPT0gJ29iamVjdCcgfHwgZXhwZWN0ZWQgPT09IG51bGwpICYmIChhY3R1YWwgIT09IDAgfHwgZXhwZWN0ZWQgIT09IDApKSB7XG4gICAgICAgIC8vIC0wID09PSArMFxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKSArIFwiXCIuY29uY2F0KGFjdHVhbExpbmVzWzBdLCBcIiAhPT0gXCIpLmNvbmNhdChleHBlY3RlZExpbmVzWzBdLCBcIlxcblwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yICE9PSAnc3RyaWN0RXF1YWxPYmplY3QnKSB7XG4gICAgICAvLyBJZiB0aGUgc3RkZXJyIGlzIGEgdHR5IGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnRcbiAgICAgIC8vIGNvbHVtbnMgcGVyIGxpbmUsIGFkZCBhIG1pc21hdGNoIGluZGljYXRvciBiZWxvdyB0aGUgb3V0cHV0LiBJZiBpdCBpc1xuICAgICAgLy8gbm90IGEgdHR5LCB1c2UgYSBkZWZhdWx0IHZhbHVlIG9mIDgwIGNoYXJhY3RlcnMuXG4gICAgICB2YXIgbWF4TGVuZ3RoID0gcHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkgPyBwcm9jZXNzLnN0ZGVyci5jb2x1bW5zIDogODA7XG5cbiAgICAgIGlmIChpbnB1dExlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB3aGlsZSAoYWN0dWFsTGluZXNbMF1baV0gPT09IGV4cGVjdGVkTGluZXNbMF1baV0pIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH0gLy8gSWdub3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXJzLlxuXG5cbiAgICAgICAgaWYgKGkgPiAyKSB7XG4gICAgICAgICAgLy8gQWRkIHBvc2l0aW9uIGluZGljYXRvciBmb3IgdGhlIGZpcnN0IG1pc21hdGNoIGluIGNhc2UgaXQgaXMgYVxuICAgICAgICAgIC8vIHNpbmdsZSBsaW5lIGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgY29sdW1uIGxlbmd0aC5cbiAgICAgICAgICBpbmRpY2F0b3IgPSBcIlxcbiAgXCIuY29uY2F0KHJlcGVhdCgnICcsIGkpLCBcIl5cIik7XG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGFsbCBlbmRpbmcgbGluZXMgdGhhdCBtYXRjaCAodGhpcyBvcHRpbWl6ZXMgdGhlIG91dHB1dCBmb3JcbiAgLy8gcmVhZGFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIG51bWJlciBvZiB0b3RhbCBjaGFuZ2VkIGxpbmVzKS5cblxuXG4gIHZhciBhID0gYWN0dWFsTGluZXNbYWN0dWFsTGluZXMubGVuZ3RoIC0gMV07XG4gIHZhciBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuXG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgaWYgKGkrKyA8IDIpIHtcbiAgICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQoYSkuY29uY2F0KGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyID0gYTtcbiAgICB9XG5cbiAgICBhY3R1YWxMaW5lcy5wb3AoKTtcbiAgICBleHBlY3RlZExpbmVzLnBvcCgpO1xuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDAgfHwgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgIGEgPSBhY3R1YWxMaW5lc1thY3R1YWxMaW5lcy5sZW5ndGggLSAxXTtcbiAgICBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgdmFyIG1heExpbmVzID0gTWF0aC5tYXgoYWN0dWFsTGluZXMubGVuZ3RoLCBleHBlY3RlZExpbmVzLmxlbmd0aCk7IC8vIFN0cmljdCBlcXVhbCB3aXRoIGlkZW50aWNhbCBvYmplY3RzIHRoYXQgYXJlIG5vdCBpZGVudGljYWwgYnkgcmVmZXJlbmNlLlxuICAvLyBFLmcuLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHsgYTogU3ltYm9sKCkgfSwgeyBhOiBTeW1ib2woKSB9KVxuXG4gIGlmIChtYXhMaW5lcyA9PT0gMCkge1xuICAgIC8vIFdlIGhhdmUgdG8gZ2V0IHRoZSByZXN1bHQgYWdhaW4uIFRoZSBsaW5lcyB3ZXJlIGFsbCByZW1vdmVkIGJlZm9yZS5cbiAgICB2YXIgX2FjdHVhbExpbmVzID0gYWN0dWFsSW5zcGVjdGVkLnNwbGl0KCdcXG4nKTsgLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICBpZiAoX2FjdHVhbExpbmVzLmxlbmd0aCA+IDMwKSB7XG4gICAgICBfYWN0dWFsTGluZXNbMjZdID0gXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcblxuICAgICAgd2hpbGUgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAyNykge1xuICAgICAgICBfYWN0dWFsTGluZXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yLm5vdElkZW50aWNhbCwgXCJcXG5cXG5cIikuY29uY2F0KF9hY3R1YWxMaW5lcy5qb2luKCdcXG4nKSwgXCJcXG5cIik7XG4gIH1cblxuICBpZiAoaSA+IDMpIHtcbiAgICBlbmQgPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChlbmQpO1xuICAgIHNraXBwZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG90aGVyICE9PSAnJykge1xuICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpO1xuICAgIG90aGVyID0gJyc7XG4gIH1cblxuICB2YXIgcHJpbnRlZExpbmVzID0gMDtcbiAgdmFyIG1zZyA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSArIFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIisgYWN0dWFsXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChyZWQsIFwiLSBleHBlY3RlZFwiKS5jb25jYXQod2hpdGUpO1xuICB2YXIgc2tpcHBlZE1zZyA9IFwiIFwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUsIFwiIExpbmVzIHNraXBwZWRcIik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG1heExpbmVzOyBpKyspIHtcbiAgICAvLyBPbmx5IGV4dHJhIGV4cGVjdGVkIGxpbmVzIGV4aXN0XG4gICAgdmFyIGN1ciA9IGkgLSBsYXN0UG9zO1xuXG4gICAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDFdKTtcbiAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgIGxhc3RQb3MgPSBpOyAvLyBBZGQgdGhlIGV4cGVjdGVkIGxpbmUgdG8gdGhlIGNhY2hlLlxuXG4gICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpXSk7XG4gICAgICBwcmludGVkTGluZXMrKzsgLy8gT25seSBleHRyYSBhY3R1YWwgbGluZXMgZXhpc3RcbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkTGluZXMubGVuZ3RoIDwgaSArIDEpIHtcbiAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAvLyBjdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgbGluZSB0aHJlZSwgYWRkIHNvbWUgb2YgdGhlIGZvcm1lciBsaW5lcyBhbmRcbiAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgaWYgKGN1ciA+IDQpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXIgPiAzKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0LlxuXG4gICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiK1wiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoYWN0dWFsTGluZXNbaV0pO1xuICAgICAgcHJpbnRlZExpbmVzKys7IC8vIExpbmVzIGRpdmVyZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV4cGVjdGVkTGluZSA9IGV4cGVjdGVkTGluZXNbaV07XG4gICAgICB2YXIgYWN0dWFsTGluZSA9IGFjdHVhbExpbmVzW2ldOyAvLyBJZiB0aGUgbGluZXMgZGl2ZXJnZSwgc3BlY2lmaWNhbGx5IGNoZWNrIGZvciBsaW5lcyB0aGF0IG9ubHkgZGl2ZXJnZSBieVxuICAgICAgLy8gYSB0cmFpbGluZyBjb21tYS4gSW4gdGhhdCBjYXNlIGl0IGlzIGFjdHVhbGx5IGlkZW50aWNhbCBhbmQgd2Ugc2hvdWxkXG4gICAgICAvLyBtYXJrIGl0IGFzIHN1Y2guXG5cbiAgICAgIHZhciBkaXZlcmdpbmdMaW5lcyA9IGFjdHVhbExpbmUgIT09IGV4cGVjdGVkTGluZSAmJiAoIWVuZHNXaXRoKGFjdHVhbExpbmUsICcsJykgfHwgYWN0dWFsTGluZS5zbGljZSgwLCAtMSkgIT09IGV4cGVjdGVkTGluZSk7IC8vIElmIHRoZSBleHBlY3RlZCBsaW5lIGhhcyBhIHRyYWlsaW5nIGNvbW1hIGJ1dCBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLFxuICAgICAgLy8gYWRkIGEgY29tbWEgYXQgdGhlIGVuZCBvZiB0aGUgYWN0dWFsIGxpbmUuIE90aGVyd2lzZSB0aGUgb3V0cHV0IGNvdWxkXG4gICAgICAvLyBsb29rIHdlaXJkIGFzIGluOlxuICAgICAgLy9cbiAgICAgIC8vICAgW1xuICAgICAgLy8gICAgIDEgICAgICAgICAvLyBObyBjb21tYSBhdCB0aGUgZW5kIVxuICAgICAgLy8gKyAgIDJcbiAgICAgIC8vICAgXVxuICAgICAgLy9cblxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzICYmIGVuZHNXaXRoKGV4cGVjdGVkTGluZSwgJywnKSAmJiBleHBlY3RlZExpbmUuc2xpY2UoMCwgLTEpID09PSBhY3R1YWxMaW5lKSB7XG4gICAgICAgIGRpdmVyZ2luZ0xpbmVzID0gZmFsc2U7XG4gICAgICAgIGFjdHVhbExpbmUgKz0gJywnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2ZXJnaW5nTGluZXMpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0IGFuZCBjYWNoZSB0aGUgZXhwZWN0ZWQgZGl2ZXJnaW5nXG4gICAgICAgIC8vIGxpbmUgc28gY29uc2VjdXRpdmUgZGl2ZXJnaW5nIGxpbmVzIHNob3cgdXAgYXMgKysrLS0tIGFuZCBub3QgKy0rLSstLlxuXG4gICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgb3RoZXIgKz0gXCJcXG5cIi5jb25jYXQocmVkLCBcIi1cIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkTGluZSk7XG4gICAgICAgIHByaW50ZWRMaW5lcyArPSAyOyAvLyBMaW5lcyBhcmUgaWRlbnRpY2FsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZGQgYWxsIGNhY2hlZCBpbmZvcm1hdGlvbiB0byB0aGUgcmVzdWx0IGJlZm9yZSBhZGRpbmcgb3RoZXIgdGhpbmdzXG4gICAgICAgIC8vIGFuZCByZXNldCB0aGUgY2FjaGUuXG4gICAgICAgIHJlcyArPSBvdGhlcjtcbiAgICAgICAgb3RoZXIgPSAnJzsgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgZXhhY3RseSBvbmUgbGluZSBhYm92ZSBvciBpZiBpdCBpcyB0aGVcbiAgICAgICAgLy8gdmVyeSBmaXJzdCBsaW5lLCBhZGQgdGhlIGxpbmUgdG8gdGhlIHJlc3VsdC5cblxuICAgICAgICBpZiAoY3VyID09PSAxIHx8IGkgPT09IDApIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gSW5zcGVjdGVkIG9iamVjdCB0byBiaWcgKFNob3cgfjIwIHJvd3MgbWF4KVxuXG5cbiAgICBpZiAocHJpbnRlZExpbmVzID4gMjAgJiYgaSA8IG1heExpbmVzIC0gMikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZykuY29uY2F0KHNraXBwZWRNc2csIFwiXFxuXCIpLmNvbmNhdChyZXMsIFwiXFxuXCIpLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChvdGhlciwgXCJcXG5cIikgKyBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkID8gc2tpcHBlZE1zZyA6ICcnLCBcIlxcblwiKS5jb25jYXQocmVzKS5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpLmNvbmNhdChpbmRpY2F0b3IpO1xufVxuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoQXNzZXJ0aW9uRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NlcnRpb25FcnJvcik7XG5cbiAgICBpZiAoX3R5cGVvZihvcHRpb25zKSAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdvcHRpb25zJywgJ09iamVjdCcsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgICBvcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3IsXG4gICAgICAgIHN0YWNrU3RhcnRGbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZuO1xuICAgIHZhciBhY3R1YWwgPSBvcHRpb25zLmFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICAgIHZhciBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAwO1xuXG4gICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgU3RyaW5nKG1lc3NhZ2UpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgICAgICAvLyBSZXNldCBvbiBlYWNoIGNhbGwgdG8gbWFrZSBzdXJlIHdlIGhhbmRsZSBkeW5hbWljYWxseSBzZXQgZW52aXJvbm1lbnRcbiAgICAgICAgLy8gdmFyaWFibGVzIGNvcnJlY3QuXG4gICAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoICYmIHByb2Nlc3Muc3RkZXJyLmdldENvbG9yRGVwdGgoKSAhPT0gMSkge1xuICAgICAgICAgIGJsdWUgPSBcIlxceDFCWzM0bVwiO1xuICAgICAgICAgIGdyZWVuID0gXCJcXHgxQlszMm1cIjtcbiAgICAgICAgICB3aGl0ZSA9IFwiXFx4MUJbMzltXCI7XG4gICAgICAgICAgcmVkID0gXCJcXHgxQlszMW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibHVlID0gJyc7XG4gICAgICAgICAgZ3JlZW4gPSAnJztcbiAgICAgICAgICB3aGl0ZSA9ICcnO1xuICAgICAgICAgIHJlZCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IC8vIFByZXZlbnQgdGhlIGVycm9yIHN0YWNrIGZyb20gYmVpbmcgdmlzaWJsZSBieSBkdXBsaWNhdGluZyB0aGUgZXJyb3JcbiAgICAgIC8vIGluIGEgdmVyeSBjbG9zZSB3YXkgdG8gdGhlIG9yaWdpbmFsIGluIGNhc2UgYm90aCBzaWRlcyBhcmUgYWN0dWFsbHlcbiAgICAgIC8vIGluc3RhbmNlcyBvZiBFcnJvci5cblxuXG4gICAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGV4cGVjdGVkICE9PSBudWxsICYmICdzdGFjaycgaW4gYWN0dWFsICYmIGFjdHVhbCBpbnN0YW5jZW9mIEVycm9yICYmICdzdGFjaycgaW4gZXhwZWN0ZWQgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBhY3R1YWwgPSBjb3B5RXJyb3IoYWN0dWFsKTtcbiAgICAgICAgZXhwZWN0ZWQgPSBjb3B5RXJyb3IoZXhwZWN0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwU3RyaWN0RXF1YWwnIHx8IG9wZXJhdG9yID09PSAnc3RyaWN0RXF1YWwnKSB7XG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpKSk7XG4gICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJykge1xuICAgICAgICAvLyBJbiBjYXNlIHRoZSBvYmplY3RzIGFyZSBlcXVhbCBidXQgdGhlIG9wZXJhdG9yIHJlcXVpcmVzIHVuZXF1YWwsIHNob3dcbiAgICAgICAgLy8gdGhlIGZpcnN0IG9iamVjdCBhbmQgc2F5IEEgZXF1YWxzIEJcbiAgICAgICAgdmFyIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG4gICAgICAgIHZhciByZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKS5zcGxpdCgnXFxuJyk7IC8vIEluIGNhc2UgXCJhY3R1YWxcIiBpcyBhbiBvYmplY3QsIGl0IHNob3VsZCBub3QgYmUgcmVmZXJlbmNlIGVxdWFsLlxuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvci5ub3RTdHJpY3RFcXVhbE9iamVjdDtcbiAgICAgICAgfSAvLyBPbmx5IHJlbW92ZSBsaW5lcyBpbiBjYXNlIGl0IG1ha2VzIHNlbnNlIHRvIGNvbGxhcHNlIHRob3NlLlxuICAgICAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAzMCkge1xuICAgICAgICAgIHJlc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuXG4gICAgICAgICAgd2hpbGUgKHJlcy5sZW5ndGggPiAyNykge1xuICAgICAgICAgICAgcmVzLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBPbmx5IHByaW50IGEgc2luZ2xlIGlucHV0LlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIiBcIikuY29uY2F0KHJlc1swXSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIlxcblxcblwiKS5jb25jYXQocmVzLmpvaW4oJ1xcbicpLCBcIlxcblwiKSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3JlcyA9IGluc3BlY3RWYWx1ZShhY3R1YWwpO1xuXG4gICAgICAgIHZhciBvdGhlciA9ICcnO1xuICAgICAgICB2YXIga25vd25PcGVyYXRvcnMgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG5cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdEVxdWFsJykge1xuICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0sIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChfcmVzLnNsaWNlKDAsIDEwMjEpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChpbnNwZWN0VmFsdWUoZXhwZWN0ZWQpKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KF9yZXMuc2xpY2UoMCwgNTA5KSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG90aGVyLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChvdGhlci5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwRXF1YWwnIHx8IG9wZXJhdG9yID09PSAnZXF1YWwnKSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoa25vd25PcGVyYXRvcnMsIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzLCBcIlxcblxcbnNob3VsZCBlcXVhbFxcblxcblwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3RoZXIgPSBcIiBcIi5jb25jYXQob3BlcmF0b3IsIFwiIFwiKS5jb25jYXQob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KF9yZXMpLmNvbmNhdChvdGhlcikpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdDtcbiAgICBfdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gIW1lc3NhZ2U7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnbmFtZScsIHtcbiAgICAgIHZhbHVlOiAnQXNzZXJ0aW9uRXJyb3IgW0VSUl9BU1NFUlRJT05dJyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBfdGhpcy5jb2RlID0gJ0VSUl9BU1NFUlRJT04nO1xuICAgIF90aGlzLmFjdHVhbCA9IGFjdHVhbDtcbiAgICBfdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgIF90aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHN0YWNrU3RhcnRGbik7XG4gICAgfSAvLyBDcmVhdGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGUgaW4gdGhlIG5hbWUuXG5cblxuICAgIF90aGlzLnN0YWNrOyAvLyBSZXNldCB0aGUgbmFtZS5cblxuICAgIF90aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXNzZXJ0aW9uRXJyb3IsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgW1wiKS5jb25jYXQodGhpcy5jb2RlLCBcIl06IFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IGluc3BlY3QuY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZWN1cnNlVGltZXMsIGN0eCkge1xuICAgICAgLy8gVGhpcyBsaW1pdHMgdGhlIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgIHByb3BlcnR5IGRlZmF1bHQgaW5zcGVjdGlvbiB0b1xuICAgICAgLy8gdGhlIG1pbmltdW0gZGVwdGguIE90aGVyd2lzZSB0aG9zZSB2YWx1ZXMgd291bGQgYmUgdG9vIHZlcmJvc2UgY29tcGFyZWRcbiAgICAgIC8vIHRvIHRoZSBhY3R1YWwgZXJyb3IgbWVzc2FnZSB3aGljaCBjb250YWlucyBhIGNvbWJpbmVkIHZpZXcgb2YgdGhlc2UgdHdvXG4gICAgICAvLyBpbnB1dCB2YWx1ZXMuXG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBjdHgsIHtcbiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiAwXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFzc2VydGlvbkVycm9yO1xufShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0aW9uRXJyb3I7IiwgIi8qKlxuICogQ29kZSByZWZhY3RvcmVkIGZyb20gTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yazpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGZpcnN0U291cmNlKSB7XG4gIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlID09PSB1bmRlZmluZWQgfHwgbmV4dFNvdXJjZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXgrKykge1xuICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2Fzc2lnbicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogYXNzaWduXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2lnbjogYXNzaWduLFxuICBwb2x5ZmlsbDogcG9seWZpbGxcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHRpZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dHJ5IHtcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuXHQvLyBub2RlIHYwLjYgaGFzIGEgYnVnIHdoZXJlIGFycmF5IGxlbmd0aHMgY2FuIGJlIFNldCBidXQgbm90IERlZmluZWRcblx0aWYgKCFoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHZhbHVlOiAxIH0pLmxlbmd0aCAhPT0gMTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIEluIEZpcmVmb3ggNC0yMiwgZGVmaW5pbmcgbGVuZ3RoIG9uIGFuIGFycmF5IHRocm93cyBhbiBleGNlcHRpb24uXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpKCk7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnM7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0aWYgKHByZWRpY2F0ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0aWYgKG9iamVjdFtuYW1lXSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBudW1iZXJJc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpcyhhLCBiKSB7XG5cdGlmIChhID09PSAwICYmIGIgPT09IDApIHtcblx0XHRyZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuXHR9XG5cdGlmIChhID09PSBiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1PYmplY3RJcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBpczogcG9seWZpbGwgfSwge1xuXHRcdGlzOiBmdW5jdGlvbiB0ZXN0T2JqZWN0SXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmlzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNuYW4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKE51bWJlci5pc05hTiAmJiBOdW1iZXIuaXNOYU4oTmFOKSAmJiAhTnVtYmVyLmlzTmFOKCdhJykpIHtcblx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOO1xuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1OdW1iZXJJc05hTigpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE51bWJlciwgeyBpc05hTjogcG9seWZpbGwgfSwge1xuXHRcdGlzTmFOOiBmdW5jdGlvbiB0ZXN0SXNOYU4oKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgTnVtYmVyKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwgIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8xMTJjYzdjMjc1NTEyNTRhYTJiMTcwOThmYjc3NDg2N2YwNWVkMGQ5XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgcmVnZXhGbGFnc1N1cHBvcnRlZCA9IC9hL2cuZmxhZ3MgIT09IHVuZGVmaW5lZDtcblxudmFyIGFycmF5RnJvbVNldCA9IGZ1bmN0aW9uIGFycmF5RnJvbVNldChzZXQpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBhcnJheTtcbn07XG5cbnZhciBhcnJheUZyb21NYXAgPSBmdW5jdGlvbiBhcnJheUZyb21NYXAobWFwKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBtYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgb2JqZWN0SXMgPSBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiByZXF1aXJlKCdvYmplY3QtaXMnKTtcbnZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufTtcbnZhciBudW1iZXJJc05hTiA9IE51bWJlci5pc05hTiA/IE51bWJlci5pc05hTiA6IHJlcXVpcmUoJ2lzLW5hbicpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgX3JlcXVpcmUkdHlwZXMgPSByZXF1aXJlKCd1dGlsLycpLnR5cGVzLFxuICAgIGlzQW55QXJyYXlCdWZmZXIgPSBfcmVxdWlyZSR0eXBlcy5pc0FueUFycmF5QnVmZmVyLFxuICAgIGlzQXJyYXlCdWZmZXJWaWV3ID0gX3JlcXVpcmUkdHlwZXMuaXNBcnJheUJ1ZmZlclZpZXcsXG4gICAgaXNEYXRlID0gX3JlcXVpcmUkdHlwZXMuaXNEYXRlLFxuICAgIGlzTWFwID0gX3JlcXVpcmUkdHlwZXMuaXNNYXAsXG4gICAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cCxcbiAgICBpc1NldCA9IF9yZXF1aXJlJHR5cGVzLmlzU2V0LFxuICAgIGlzTmF0aXZlRXJyb3IgPSBfcmVxdWlyZSR0eXBlcy5pc05hdGl2ZUVycm9yLFxuICAgIGlzQm94ZWRQcmltaXRpdmUgPSBfcmVxdWlyZSR0eXBlcy5pc0JveGVkUHJpbWl0aXZlLFxuICAgIGlzTnVtYmVyT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNOdW1iZXJPYmplY3QsXG4gICAgaXNTdHJpbmdPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc1N0cmluZ09iamVjdCxcbiAgICBpc0Jvb2xlYW5PYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0Jvb2xlYW5PYmplY3QsXG4gICAgaXNCaWdJbnRPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0JpZ0ludE9iamVjdCxcbiAgICBpc1N5bWJvbE9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzU3ltYm9sT2JqZWN0LFxuICAgIGlzRmxvYXQzMkFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDMyQXJyYXksXG4gICAgaXNGbG9hdDY0QXJyYXkgPSBfcmVxdWlyZSR0eXBlcy5pc0Zsb2F0NjRBcnJheTtcblxuZnVuY3Rpb24gaXNOb25JbmRleChrZXkpIHtcbiAgaWYgKGtleS5sZW5ndGggPT09IDAgfHwga2V5Lmxlbmd0aCA+IDEwKSByZXR1cm4gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2RlID0ga2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHJldHVybiB0cnVlO1xuICB9IC8vIFRoZSBtYXhpbXVtIHNpemUgZm9yIGFuIGFycmF5IGlzIDIgKiogMzIgLTEuXG5cblxuICByZXR1cm4ga2V5Lmxlbmd0aCA9PT0gMTAgJiYga2V5ID49IE1hdGgucG93KDIsIDMyKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKGlzTm9uSW5kZXgpLmNvbmNhdChvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpLmZpbHRlcihPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmJpbmQodmFsdWUpKSk7XG59IC8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi82ODBlOWU1ZTQ4OGYyMmFhYzI3NTk5YTU3ZGM4NDRhNjMxNTkyOGRkL2luZGV4LmpzXG4vLyBvcmlnaW5hbCBub3RpY2U6XG5cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmICh5IDwgeCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbnZhciBPTkxZX0VOVU1FUkFCTEUgPSB1bmRlZmluZWQ7XG52YXIga1N0cmljdCA9IHRydWU7XG52YXIga0xvb3NlID0gZmFsc2U7XG52YXIga05vSXRlcmF0b3IgPSAwO1xudmFyIGtJc0FycmF5ID0gMTtcbnZhciBrSXNTZXQgPSAyO1xudmFyIGtJc01hcCA9IDM7IC8vIENoZWNrIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBzb3VyY2UgYW5kIGZsYWdzXG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJSZWdFeHBzKGEsIGIpIHtcbiAgcmV0dXJuIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPyBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncyA6IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO1xufVxuXG5mdW5jdGlvbiBhcmVTaW1pbGFyRmxvYXRBcnJheXMoYSwgYikge1xuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBhLmJ5dGVMZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgaWYgKGFbb2Zmc2V0XSAhPT0gYltvZmZzZXRdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJUeXBlZEFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGEuYnVmZmVyLCBhLmJ5dGVPZmZzZXQsIGEuYnl0ZUxlbmd0aCksIG5ldyBVaW50OEFycmF5KGIuYnVmZmVyLCBiLmJ5dGVPZmZzZXQsIGIuYnl0ZUxlbmd0aCkpID09PSAwO1xufVxuXG5mdW5jdGlvbiBhcmVFcXVhbEFycmF5QnVmZmVycyhidWYxLCBidWYyKSB7XG4gIHJldHVybiBidWYxLmJ5dGVMZW5ndGggPT09IGJ1ZjIuYnl0ZUxlbmd0aCAmJiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGJ1ZjEpLCBuZXcgVWludDhBcnJheShidWYyKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSB7XG4gIGlmIChpc051bWJlck9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc051bWJlck9iamVjdCh2YWwyKSAmJiBvYmplY3RJcyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSwgTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMikpO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nT2JqZWN0KHZhbDIpICYmIFN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIGlmIChpc0Jvb2xlYW5PYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNCb29sZWFuT2JqZWN0KHZhbDIpICYmIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG5cbiAgaWYgKGlzQmlnSW50T2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQmlnSW50T2JqZWN0KHZhbDIpICYmIEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWwyKSAmJiBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG59IC8vIE5vdGVzOiBUeXBlIHRhZ3MgYXJlIGhpc3RvcmljYWwgW1tDbGFzc11dIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgc2V0IGJ5XG4vLyBGdW5jdGlvblRlbXBsYXRlOjpTZXRDbGFzc05hbWUoKSBpbiBDKysgb3IgU3ltYm9sLnRvU3RyaW5nVGFnIGluIEpTXG4vLyBhbmQgcmV0cmlldmVkIHVzaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopIGluIEpTXG4vLyBTZWUgaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuLy8gZm9yIGEgbGlzdCBvZiB0YWdzIHByZS1kZWZpbmVkIGluIHRoZSBzcGVjLlxuLy8gVGhlcmUgYXJlIHNvbWUgdW5zcGVjaWZpZWQgdGFncyBpbiB0aGUgd2lsZCB0b28gKGUuZy4gdHlwZWQgYXJyYXkgdGFncykuXG4vLyBTaW5jZSB0YWdzIGNhbiBiZSBhbHRlcmVkLCB0aGV5IG9ubHkgc2VydmUgZmFzdCBmYWlsdXJlc1xuLy9cbi8vIFR5cGVkIGFycmF5cyBhbmQgYnVmZmVycyBhcmUgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlaXJcbi8vIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIuIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoYXQgaXQnc1xuLy8gcmVhc29uYWJsZSB0byBpbnRlcnByZXQgdGhlaXIgdW5kZXJseWluZyBtZW1vcnkgaW4gdGhlIHNhbWUgd2F5LFxuLy8gd2hpY2ggaXMgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlaXIgdHlwZSB0YWdzLlxuLy8gKGUuZy4gYSBVaW50OEFycmF5IGFuZCBhIFVpbnQxNkFycmF5IHdpdGggdGhlIHNhbWUgbWVtb3J5IGNvbnRlbnRcbi8vIGNvdWxkIHN0aWxsIGJlIGRpZmZlcmVudCBiZWNhdXNlIHRoZXkgd2lsbCBiZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSkuXG4vL1xuLy8gRm9yIHN0cmljdCBjb21wYXJpc29uLCBvYmplY3RzIHNob3VsZCBoYXZlXG4vLyBhKSBUaGUgc2FtZSBidWlsdC1pbiB0eXBlIHRhZ3Ncbi8vIGIpIFRoZSBzYW1lIHByb3RvdHlwZXMuXG5cblxuZnVuY3Rpb24gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcykge1xuICAvLyBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmICh2YWwxID09PSB2YWwyKSB7XG4gICAgaWYgKHZhbDEgIT09IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBzdHJpY3QgPyBvYmplY3RJcyh2YWwxLCB2YWwyKSA6IHRydWU7XG4gIH0gLy8gQ2hlY2sgbW9yZSBjbG9zZWx5IGlmIHZhbDEgYW5kIHZhbDIgYXJlIGVxdWFsLlxuXG5cbiAgaWYgKHN0cmljdCkge1xuICAgIGlmIChfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwxID09PSAnbnVtYmVyJyAmJiBudW1iZXJJc05hTih2YWwxKSAmJiBudW1iZXJJc05hTih2YWwyKTtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcgfHwgdmFsMSA9PT0gbnVsbCB8fCB2YWwyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwxKSAhPT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWwxID09PSBudWxsIHx8IF90eXBlb2YodmFsMSkgIT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgIHJldHVybiB2YWwxID09IHZhbDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciB2YWwxVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMSk7XG4gIHZhciB2YWwyVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMik7XG5cbiAgaWYgKHZhbDFUYWcgIT09IHZhbDJUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwxKSkge1xuICAgIC8vIENoZWNrIGZvciBzcGFyc2UgYXJyYXlzIGFuZCBnZW5lcmFsIGZhc3QgcGF0aFxuICAgIGlmICh2YWwxLmxlbmd0aCAhPT0gdmFsMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIga2V5czEgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcbiAgICB2YXIga2V5czIgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMiwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNBcnJheSwga2V5czEpO1xuICB9IC8vIFticm93c2VyaWZ5XSBUaGlzIHRyaWdnZXJzIG9uIGNlcnRhaW4gdHlwZXMgaW4gSUUgKE1hcC9TZXQpIHNvIHdlIGRvbid0XG4gIC8vIHdhbid0IHRvIGVhcmx5IHJldHVybiBvdXQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNoZWNrcy4gSG93ZXZlciB3ZSBjYW4gY2hlY2tcbiAgLy8gaWYgdGhlIHNlY29uZCB2YWx1ZSBpcyBvbmUgb2YgdGhlc2UgdmFsdWVzIGFuZCB0aGUgZmlyc3QgaXNuJ3QuXG5cblxuICBpZiAodmFsMVRhZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAvLyByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xuICAgIGlmICghaXNNYXAodmFsMSkgJiYgaXNNYXAodmFsMikgfHwgIWlzU2V0KHZhbDEpICYmIGlzU2V0KHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzRGF0ZSh2YWwxKSkge1xuICAgIGlmICghaXNEYXRlKHZhbDIpIHx8IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwxKSAhPT0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZS5jYWxsKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHZhbDEpKSB7XG4gICAgaWYgKCFpc1JlZ0V4cCh2YWwyKSB8fCAhYXJlU2ltaWxhclJlZ0V4cHModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYXRpdmVFcnJvcih2YWwxKSB8fCB2YWwxIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAvLyBEbyBub3QgY29tcGFyZSB0aGUgc3RhY2sgYXMgaXQgbWlnaHQgZGlmZmVyIGV2ZW4gdGhvdWdoIHRoZSBlcnJvciBpdHNlbGZcbiAgICAvLyBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLlxuICAgIGlmICh2YWwxLm1lc3NhZ2UgIT09IHZhbDIubWVzc2FnZSB8fCB2YWwxLm5hbWUgIT09IHZhbDIubmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyVmlldyh2YWwxKSkge1xuICAgIGlmICghc3RyaWN0ICYmIChpc0Zsb2F0MzJBcnJheSh2YWwxKSB8fCBpc0Zsb2F0NjRBcnJheSh2YWwxKSkpIHtcbiAgICAgIGlmICghYXJlU2ltaWxhckZsb2F0QXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhcmVTaW1pbGFyVHlwZWRBcnJheXModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIEJ1ZmZlci5jb21wYXJlIHJldHVybnMgdHJ1ZSwgc28gdmFsMS5sZW5ndGggPT09IHZhbDIubGVuZ3RoLiBJZiB0aGV5IGJvdGhcbiAgICAvLyBvbmx5IGNvbnRhaW4gbnVtZXJpYyBrZXlzLCB3ZSBkb24ndCBuZWVkIHRvIGV4YW0gZnVydGhlciB0aGFuIGNoZWNraW5nXG4gICAgLy8gdGhlIHN5bWJvbHMuXG5cblxuICAgIHZhciBfa2V5cyA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwxLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgdmFyIF9rZXlzMiA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwyLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgaWYgKF9rZXlzLmxlbmd0aCAhPT0gX2tleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvciwgX2tleXMpO1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbDEpKSB7XG4gICAgaWYgKCFpc1NldCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNTZXQpO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbDEpKSB7XG4gICAgaWYgKCFpc01hcCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNNYXApO1xuICB9IGVsc2UgaWYgKGlzQW55QXJyYXlCdWZmZXIodmFsMSkpIHtcbiAgICBpZiAoIWFyZUVxdWFsQXJyYXlCdWZmZXJzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQm94ZWRQcmltaXRpdmUodmFsMSkgJiYgIWlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvcik7XG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVzKHZhbCwga2V5cykge1xuICByZXR1cm4ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUodmFsLCBrKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGl0ZXJhdGlvblR5cGUsIGFLZXlzKSB7XG4gIC8vIEZvciBhbGwgcmVtYWluaW5nIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5LCBvYmplY3RzIGFuZCBNYXBzLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5IGhhdmluZzpcbiAgLy8gYSkgVGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAvLyBiKSBUaGUgc2FtZSBzZXQgb2Yga2V5cy9pbmRleGVzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpXG4gIC8vIGMpIEVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS9pbmRleFxuICAvLyBkKSBGb3IgU2V0cyBhbmQgTWFwcywgZXF1YWwgY29udGVudHNcbiAgLy8gTm90ZTogdGhpcyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICBhS2V5cyA9IE9iamVjdC5rZXlzKHZhbDEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKHZhbDIpOyAvLyBUaGUgcGFpciBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMuXG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2hlYXAga2V5IHRlc3RcblxuXG4gIHZhciBpID0gMDtcblxuICBmb3IgKDsgaSA8IGFLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2YWwyLCBhS2V5c1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RyaWN0ICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICB2YXIgc3ltYm9sS2V5c0EgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMSk7XG5cbiAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc3ltYm9sS2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHN5bWJvbEtleXNBW2ldO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwxLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwyLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChzeW1ib2xLZXlzQS5sZW5ndGggIT09IHN5bWJvbEtleXNCLmxlbmd0aCAmJiBnZXRFbnVtZXJhYmxlcyh2YWwyLCBzeW1ib2xLZXlzQikubGVuZ3RoICE9PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChfc3ltYm9sS2V5c0IubGVuZ3RoICE9PSAwICYmIGdldEVudW1lcmFibGVzKHZhbDIsIF9zeW1ib2xLZXlzQikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYUtleXMubGVuZ3RoID09PSAwICYmIChpdGVyYXRpb25UeXBlID09PSBrTm9JdGVyYXRvciB8fCBpdGVyYXRpb25UeXBlID09PSBrSXNBcnJheSAmJiB2YWwxLmxlbmd0aCA9PT0gMCB8fCB2YWwxLnNpemUgPT09IDApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gVXNlIG1lbW9zIHRvIGhhbmRsZSBjeWNsZXMuXG5cblxuICBpZiAobWVtb3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG1lbW9zID0ge1xuICAgICAgdmFsMTogbmV3IE1hcCgpLFxuICAgICAgdmFsMjogbmV3IE1hcCgpLFxuICAgICAgcG9zaXRpb246IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIHByZXZlbnQgdXAgdG8gdHdvIG1hcC5oYXMoeCkgY2FsbHMgYnkgZGlyZWN0bHkgcmV0cmlldmluZyB0aGUgdmFsdWVcbiAgICAvLyBhbmQgY2hlY2tpbmcgZm9yIHVuZGVmaW5lZC4gVGhlIG1hcCBjYW4gb25seSBjb250YWluIG51bWJlcnMsIHNvIGl0IGlzXG4gICAgLy8gc2FmZSB0byBjaGVjayBmb3IgdW5kZWZpbmVkIG9ubHkuXG4gICAgdmFyIHZhbDJNZW1vQSA9IG1lbW9zLnZhbDEuZ2V0KHZhbDEpO1xuXG4gICAgaWYgKHZhbDJNZW1vQSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdmFsMk1lbW9CID0gbWVtb3MudmFsMi5nZXQodmFsMik7XG5cbiAgICAgIGlmICh2YWwyTWVtb0IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsMk1lbW9BID09PSB2YWwyTWVtb0I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb3MucG9zaXRpb24rKztcbiAgfVxuXG4gIG1lbW9zLnZhbDEuc2V0KHZhbDEsIG1lbW9zLnBvc2l0aW9uKTtcbiAgbWVtb3MudmFsMi5zZXQodmFsMiwgbWVtb3MucG9zaXRpb24pO1xuICB2YXIgYXJlRXEgPSBvYmpFcXVpdih2YWwxLCB2YWwyLCBzdHJpY3QsIGFLZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSk7XG4gIG1lbW9zLnZhbDEuZGVsZXRlKHZhbDEpO1xuICBtZW1vcy52YWwyLmRlbGV0ZSh2YWwyKTtcbiAgcmV0dXJuIGFyZUVxO1xufVxuXG5mdW5jdGlvbiBzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCB2YWwxLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gR28gbG9va2luZy5cbiAgdmFyIHNldFZhbHVlcyA9IGFycmF5RnJvbVNldChzZXQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbDIgPSBzZXRWYWx1ZXNbaV07XG5cbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXRjaGluZyBlbGVtZW50IHRvIG1ha2Ugc3VyZSB3ZSBkbyBub3QgY2hlY2sgdGhhdCBhZ2Fpbi5cbiAgICAgIHNldC5kZWxldGUodmFsMik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L0VxdWFsaXR5X2NvbXBhcmlzb25zX2FuZF9zYW1lbmVzcyNMb29zZV9lcXVhbGl0eV91c2luZ1xuLy8gU2FkbHkgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGRldGVjdCBjb3JyZXNwb25kaW5nIHZhbHVlcyBwcm9wZXJseSBpbiBjYXNlIHRoZVxuLy8gdHlwZSBpcyBhIHN0cmluZywgbnVtYmVyLCBiaWdpbnQgb3IgYm9vbGVhbi4gVGhlIHJlYXNvbiBpcyB0aGF0IHRob3NlIHZhbHVlc1xuLy8gY2FuIG1hdGNoIGxvdHMgb2YgZGlmZmVyZW50IHN0cmluZyB2YWx1ZXMgKGUuZy4sIDFuID09ICcrMDAwMDEnKS5cblxuXG5mdW5jdGlvbiBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSkge1xuICBzd2l0Y2ggKF90eXBlb2YocHJpbSkpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgLy8gT25seSBwYXNzIGluIG51bGwgYXMgb2JqZWN0IVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcHJpbSA9ICtwcmltO1xuICAgIC8vIExvb3NlIGVxdWFsIGVudHJpZXMgZXhpc3Qgb25seSBpZiB0aGUgc3RyaW5nIGlzIHBvc3NpYmxlIHRvIGNvbnZlcnQgdG9cbiAgICAvLyBhIHJlZ3VsYXIgbnVtYmVyIGFuZCBub3QgTmFOLlxuICAgIC8vIEZhbGwgdGhyb3VnaFxuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmIChudW1iZXJJc05hTihwcmltKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgcHJpbSkge1xuICB2YXIgYWx0VmFsdWUgPSBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSk7XG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSByZXR1cm4gYWx0VmFsdWU7XG4gIHJldHVybiBiLmhhcyhhbHRWYWx1ZSkgJiYgIWEuaGFzKGFsdFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0sIGl0ZW0sIG1lbW8pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuXG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFsdFZhbHVlO1xuICB9XG5cbiAgdmFyIGN1ckIgPSBiLmdldChhbHRWYWx1ZSk7XG5cbiAgaWYgKGN1ckIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoYWx0VmFsdWUpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gIWEuaGFzKGFsdFZhbHVlKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbyk7XG59XG5cbmZ1bmN0aW9uIHNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICAvLyBUaGlzIGlzIGEgbGF6aWx5IGluaXRpYXRlZCBTZXQgb2YgZW50cmllcyB3aGljaCBoYXZlIHRvIGJlIGNvbXBhcmVkXG4gIC8vIHBhaXJ3aXNlLlxuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFWYWx1ZXMgPSBhcnJheUZyb21TZXQoYSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbCA9IGFWYWx1ZXNbaV07IC8vIE5vdGU6IENoZWNraW5nIGZvciB0aGUgb2JqZWN0cyBmaXJzdCBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2UgZm9yIG9iamVjdFxuICAgIC8vIGhlYXZ5IHNldHMgYnV0IGl0IGlzIGEgbWlub3Igc2xvdyBkb3duIGZvciBwcmltaXRpdmVzLiBBcyB0aGV5IGFyZSBmYXN0XG4gICAgLy8gdG8gY2hlY2sgdGhpcyBpbXByb3ZlcyB0aGUgd29yc3QgY2FzZSBzY2VuYXJpbyBpbnN0ZWFkLlxuXG4gICAgaWYgKF90eXBlb2YodmFsKSA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH0gLy8gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBkb2Vzbid0IGV4aXN0IGluIHRoZSBzZWNvbmQgc2V0IGl0cyBhbiBub3QgbnVsbFxuICAgICAgLy8gb2JqZWN0IChvciBub24gc3RyaWN0IG9ubHk6IGEgbm90IG1hdGNoaW5nIHByaW1pdGl2ZSkgd2UnbGwgbmVlZCB0byBnb1xuICAgICAgLy8gaHVudGluZyBmb3Igc29tZXRoaW5nIHRoYXRzIGRlZXAtKHN0cmljdC0pZXF1YWwgdG8gaXQuIFRvIG1ha2UgdGhpc1xuICAgICAgLy8gTyhuIGxvZyBuKSBjb21wbGV4aXR5IHdlIGhhdmUgdG8gY29weSB0aGVzZSB2YWx1ZXMgaW4gYSBuZXcgc2V0IGZpcnN0LlxuXG5cbiAgICAgIHNldC5hZGQodmFsKTtcbiAgICB9IGVsc2UgaWYgKCFiLmhhcyh2YWwpKSB7XG4gICAgICBpZiAoc3RyaWN0KSByZXR1cm4gZmFsc2U7IC8vIEZhc3QgcGF0aCB0byBkZXRlY3QgbWlzc2luZyBzdHJpbmcsIHN5bWJvbCwgdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlcy5cblxuICAgICAgaWYgKCFzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgdmFsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuXG4gICAgICBzZXQuYWRkKHZhbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiVmFsdWVzID0gYXJyYXlGcm9tU2V0KGIpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGJWYWx1ZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX3ZhbCA9IGJWYWx1ZXNbX2ldOyAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGEgcHJpbWl0aXZlIHZhbHVlIGlzIGFscmVhZHlcbiAgICAgIC8vIG1hdGNoaW5nIGFuZCBvbmx5IGlmIGl0J3Mgbm90LCBnbyBodW50aW5nIGZvciBpdC5cblxuICAgICAgaWYgKF90eXBlb2YoX3ZhbCkgPT09ICdvYmplY3QnICYmIF92YWwgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgIWEuaGFzKF92YWwpICYmICFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0LnNpemUgPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFwSGFzRXF1YWxFbnRyeShzZXQsIG1hcCwga2V5MSwgaXRlbTEsIHN0cmljdCwgbWVtbykge1xuICAvLyBUbyBiZSBhYmxlIHRvIGhhbmRsZSBjYXNlcyBsaWtlOlxuICAvLyAgIE1hcChbW3t9LCAnYSddLCBbe30sICdiJ11dKSB2cyBNYXAoW1t7fSwgJ2InXSwgW3t9LCAnYSddXSlcbiAgLy8gLi4uIHdlIG5lZWQgdG8gY29uc2lkZXIgKmFsbCogbWF0Y2hpbmcga2V5cywgbm90IGp1c3QgdGhlIGZpcnN0IHdlIGZpbmQuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkyID0gc2V0VmFsdWVzW2ldO1xuXG4gICAgaWYgKGlubmVyRGVlcEVxdWFsKGtleTEsIGtleTIsIHN0cmljdCwgbWVtbykgJiYgaW5uZXJEZWVwRXF1YWwoaXRlbTEsIG1hcC5nZXQoa2V5MiksIHN0cmljdCwgbWVtbykpIHtcbiAgICAgIHNldC5kZWxldGUoa2V5Mik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG1hcEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2FFbnRyaWVzJGkgPSBfc2xpY2VkVG9BcnJheShhRW50cmllc1tpXSwgMiksXG4gICAgICAgIGtleSA9IF9hRW50cmllcyRpWzBdLFxuICAgICAgICBpdGVtMSA9IF9hRW50cmllcyRpWzFdO1xuXG4gICAgaWYgKF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCeSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZSB3ZSBwcmV2ZW50IGFub3RoZXIgYi5oYXMoa2V5KSBjaGVjayBpblxuICAgICAgLy8gYWxtb3N0IGFsbCBwb3NzaWJsZSBjYXNlcy5cbiAgICAgIHZhciBpdGVtMiA9IGIuZ2V0KGtleSk7XG5cbiAgICAgIGlmIChpdGVtMiA9PT0gdW5kZWZpbmVkICYmICFiLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtMSwgaXRlbTIsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgICAgaWYgKHN0cmljdCkgcmV0dXJuIGZhbHNlOyAvLyBGYXN0IHBhdGggdG8gZGV0ZWN0IG1pc3Npbmcgc3RyaW5nLCBzeW1ib2wsIHVuZGVmaW5lZCBhbmQgbnVsbFxuICAgICAgICAvLyBrZXlzLlxuXG4gICAgICAgIGlmICghbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIGtleSwgaXRlbTEsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2V0ICE9PSBudWxsKSB7XG4gICAgdmFyIGJFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGIpO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgYkVudHJpZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIF9iRW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KGJFbnRyaWVzW19pMl0sIDIpLFxuICAgICAgICAgIGtleSA9IF9iRW50cmllcyRfaVswXSxcbiAgICAgICAgICBpdGVtID0gX2JFbnRyaWVzJF9pWzFdO1xuXG4gICAgICBpZiAoX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgKCFhLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhLmdldChrZXkpLCBpdGVtLCBmYWxzZSwgbWVtbykpICYmICFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBmYWxzZSwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZXQuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBzdHJpY3QsIGtleXMsIG1lbW9zLCBpdGVyYXRpb25UeXBlKSB7XG4gIC8vIFNldHMgYW5kIG1hcHMgZG9uJ3QgaGF2ZSB0aGVpciBlbnRyaWVzIGFjY2Vzc2libGUgdmlhIG5vcm1hbCBvYmplY3RcbiAgLy8gcHJvcGVydGllcy5cbiAgdmFyIGkgPSAwO1xuXG4gIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNTZXQpIHtcbiAgICBpZiAoIXNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc01hcCkge1xuICAgIGlmICghbWFwRXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkpIHtcbiAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShhLCBpKSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2ldLCBiW2ldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShiLCBpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBcnJheSBpcyBzcGFyc2UuXG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuXG4gICAgICAgIGZvciAoOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c0FbaV07XG5cbiAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGtleSkgfHwgIWlubmVyRGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlzQS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBUaGUgcGFpciBtdXN0IGhhdmUgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LlxuICAvLyBQb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0OlxuXG5cbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2tleSA9IGtleXNbaV07XG5cbiAgICBpZiAoIWlubmVyRGVlcEVxdWFsKGFbX2tleV0sIGJbX2tleV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtMb29zZSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcFN0cmljdEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtTdHJpY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWVwRXF1YWw6IGlzRGVlcEVxdWFsLFxuICBpc0RlZXBTdHJpY3RFcXVhbDogaXNEZWVwU3RyaWN0RXF1YWxcbn07IiwgIi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvYXNzZXJ0LmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzJhNTFhZTQyNGE1MTNlYzlhNmFhMzQ2NmJhYTBjYzFkNTVkZDRmM2Jcbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcbi8vIENvcHlyaWdodCAoYykgMjAwOSBUaG9tYXMgUm9iaW5zb24gPDI4MG5vcnRoLmNvbT5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG9cbi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcbi8vIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9lcnJvcnMnKSxcbiAgICBfcmVxdWlyZSRjb2RlcyA9IF9yZXF1aXJlLmNvZGVzLFxuICAgIEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfQU1CSUdVT1VTX0FSR1VNRU5ULFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX0lOVkFMSURfQVJHX1ZBTFVFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1ZBTFVFLFxuICAgIEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSxcbiAgICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUztcblxudmFyIEFzc2VydGlvbkVycm9yID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yJyk7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCd1dGlsLycpLFxuICAgIGluc3BlY3QgPSBfcmVxdWlyZTIuaW5zcGVjdDtcblxudmFyIF9yZXF1aXJlJHR5cGVzID0gcmVxdWlyZSgndXRpbC8nKS50eXBlcyxcbiAgICBpc1Byb21pc2UgPSBfcmVxdWlyZSR0eXBlcy5pc1Byb21pc2UsXG4gICAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cDtcblxudmFyIG9iamVjdEFzc2lnbiA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduIDogcmVxdWlyZSgnZXM2LW9iamVjdC1hc3NpZ24nKS5hc3NpZ247XG52YXIgb2JqZWN0SXMgPSBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiByZXF1aXJlKCdvYmplY3QtaXMnKTtcbnZhciBlcnJvckNhY2hlID0gbmV3IE1hcCgpO1xudmFyIGlzRGVlcEVxdWFsO1xudmFyIGlzRGVlcFN0cmljdEVxdWFsO1xudmFyIHBhcnNlRXhwcmVzc2lvbkF0O1xudmFyIGZpbmROb2RlQXJvdW5kO1xudmFyIGRlY29kZXI7XG5cbmZ1bmN0aW9uIGxhenlMb2FkQ29tcGFyaXNvbigpIHtcbiAgdmFyIGNvbXBhcmlzb24gPSByZXF1aXJlKCcuL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMnKTtcblxuICBpc0RlZXBFcXVhbCA9IGNvbXBhcmlzb24uaXNEZWVwRXF1YWw7XG4gIGlzRGVlcFN0cmljdEVxdWFsID0gY29tcGFyaXNvbi5pc0RlZXBTdHJpY3RFcXVhbDtcbn0gLy8gRXNjYXBlIGNvbnRyb2wgY2hhcmFjdGVycyBidXQgbm90IFxcbiBhbmQgXFx0IHRvIGtlZXAgdGhlIGxpbmUgYnJlYWtzIGFuZFxuLy8gaW5kZW50YXRpb24gaW50YWN0LlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxuXG52YXIgZXNjYXBlU2VxdWVuY2VzUmVnRXhwID0gL1tcXHgwMC1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZl0vZztcbnZhciBtZXRhID0gW1wiXFxcXHUwMDAwXCIsIFwiXFxcXHUwMDAxXCIsIFwiXFxcXHUwMDAyXCIsIFwiXFxcXHUwMDAzXCIsIFwiXFxcXHUwMDA0XCIsIFwiXFxcXHUwMDA1XCIsIFwiXFxcXHUwMDA2XCIsIFwiXFxcXHUwMDA3XCIsICdcXFxcYicsICcnLCAnJywgXCJcXFxcdTAwMGJcIiwgJ1xcXFxmJywgJycsIFwiXFxcXHUwMDBlXCIsIFwiXFxcXHUwMDBmXCIsIFwiXFxcXHUwMDEwXCIsIFwiXFxcXHUwMDExXCIsIFwiXFxcXHUwMDEyXCIsIFwiXFxcXHUwMDEzXCIsIFwiXFxcXHUwMDE0XCIsIFwiXFxcXHUwMDE1XCIsIFwiXFxcXHUwMDE2XCIsIFwiXFxcXHUwMDE3XCIsIFwiXFxcXHUwMDE4XCIsIFwiXFxcXHUwMDE5XCIsIFwiXFxcXHUwMDFhXCIsIFwiXFxcXHUwMDFiXCIsIFwiXFxcXHUwMDFjXCIsIFwiXFxcXHUwMDFkXCIsIFwiXFxcXHUwMDFlXCIsIFwiXFxcXHUwMDFmXCJdO1xuXG52YXIgZXNjYXBlRm4gPSBmdW5jdGlvbiBlc2NhcGVGbihzdHIpIHtcbiAgcmV0dXJuIG1ldGFbc3RyLmNoYXJDb2RlQXQoMCldO1xufTtcblxudmFyIHdhcm5lZCA9IGZhbHNlOyAvLyBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG52YXIgTk9fRVhDRVBUSU9OX1NFTlRJTkVMID0ge307IC8vIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gaW5uZXJGYWlsKG9iaikge1xuICBpZiAob2JqLm1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgb2JqLm1lc3NhZ2U7XG4gIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihvYmopO1xufVxuXG5mdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0Rm4pIHtcbiAgdmFyIGFyZ3NMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW50ZXJuYWxNZXNzYWdlO1xuXG4gIGlmIChhcmdzTGVuID09PSAwKSB7XG4gICAgaW50ZXJuYWxNZXNzYWdlID0gJ0ZhaWxlZCc7XG4gIH0gZWxzZSBpZiAoYXJnc0xlbiA9PT0gMSkge1xuICAgIG1lc3NhZ2UgPSBhY3R1YWw7XG4gICAgYWN0dWFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGlmICh3YXJuZWQgPT09IGZhbHNlKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgdmFyIHdhcm4gPSBwcm9jZXNzLmVtaXRXYXJuaW5nID8gcHJvY2Vzcy5lbWl0V2FybmluZyA6IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO1xuICAgICAgd2FybignYXNzZXJ0LmZhaWwoKSB3aXRoIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgaXMgZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIGFzc2VydC5zdHJpY3RFcXVhbCgpIGluc3RlYWQgb3Igb25seSBwYXNzIGEgbWVzc2FnZS4nLCAnRGVwcmVjYXRpb25XYXJuaW5nJywgJ0RFUDAwOTQnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc0xlbiA9PT0gMikgb3BlcmF0b3IgPSAnIT0nO1xuICB9XG5cbiAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgbWVzc2FnZTtcbiAgdmFyIGVyckFyZ3MgPSB7XG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvciA9PT0gdW5kZWZpbmVkID8gJ2ZhaWwnIDogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm4gfHwgZmFpbFxuICB9O1xuXG4gIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlcnJBcmdzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG5cbiAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcihlcnJBcmdzKTtcblxuICBpZiAoaW50ZXJuYWxNZXNzYWdlKSB7XG4gICAgZXJyLm1lc3NhZ2UgPSBpbnRlcm5hbE1lc3NhZ2U7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG5cbiAgdGhyb3cgZXJyO1xufVxuXG5hc3NlcnQuZmFpbCA9IGZhaWw7IC8vIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGludGVybmFsL2Vycm9yLlxuXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBBc3NlcnRpb25FcnJvcjtcblxuZnVuY3Rpb24gaW5uZXJPayhmbiwgYXJnTGVuLCB2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgdmFyIGdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcblxuICAgIGlmIChhcmdMZW4gPT09IDApIHtcbiAgICAgIGdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgbWVzc2FnZSA9ICdObyB2YWx1ZSBhcmd1bWVudCBwYXNzZWQgdG8gYGFzc2VydC5vaygpYCc7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IHZhbHVlLFxuICAgICAgZXhwZWN0ZWQ6IHRydWUsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgfSk7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSBnZW5lcmF0ZWRNZXNzYWdlO1xuICAgIHRocm93IGVycjtcbiAgfVxufSAvLyBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIXZhbHVlLlxuXG5cbmZ1bmN0aW9uIG9rKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaW5uZXJPay5hcHBseSh2b2lkIDAsIFtvaywgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5cbmFzc2VydC5vayA9IG9rOyAvLyBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGggPT0uXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAqL1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cblxuICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnPT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBlcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90XG4vLyBlcXVhbCB3aXRoICE9LlxuXG5cbmFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuXG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICchPScsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuXG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKCFpc0RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ2RlZXBFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IGRlZXBFcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgbm9uLWVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBmb3IgYW55IGRlZXAgaW5lcXVhbGl0eS5cblxuXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmIChpc0RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdERlZXBFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdERlZXBFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKCFpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IGRlZXBTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuXG5mdW5jdGlvbiBub3REZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKGlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn1cblxuYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoIW9iamVjdElzKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnc3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChvYmplY3RJcyhhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90U3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIENvbXBhcmlzb24gPSBmdW5jdGlvbiBDb21wYXJpc29uKG9iaiwga2V5cywgYWN0dWFsKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBhcmlzb24pO1xuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChhY3R1YWwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKG9ialtrZXldKSAmJiBvYmpba2V5XS50ZXN0KGFjdHVhbFtrZXldKSkge1xuICAgICAgICBfdGhpc1trZXldID0gYWN0dWFsW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpc1trZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtZXNzYWdlLCBrZXlzLCBmbikge1xuICBpZiAoIShrZXkgaW4gYWN0dWFsKSB8fCAhaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsW2tleV0sIGV4cGVjdGVkW2tleV0pKSB7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAvLyBDcmVhdGUgcGxhY2Vob2xkZXIgb2JqZWN0cyB0byBjcmVhdGUgYSBuaWNlIG91dHB1dC5cbiAgICAgIHZhciBhID0gbmV3IENvbXBhcmlzb24oYWN0dWFsLCBrZXlzKTtcbiAgICAgIHZhciBiID0gbmV3IENvbXBhcmlzb24oZXhwZWN0ZWQsIGtleXMsIGFjdHVhbCk7XG4gICAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgYWN0dWFsOiBhLFxuICAgICAgICBleHBlY3RlZDogYixcbiAgICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgICB9KTtcbiAgICAgIGVyci5hY3R1YWwgPSBhY3R1YWw7XG4gICAgICBlcnIuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgIGVyci5vcGVyYXRvciA9IGZuLm5hbWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiBmbi5uYW1lLFxuICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZywgZm4pIHtcbiAgaWYgKHR5cGVvZiBleHBlY3RlZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChpc1JlZ0V4cChleHBlY3RlZCkpIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7IC8vIGFzc2VydC5kb2VzTm90VGhyb3cgZG9lcyBub3QgYWNjZXB0IG9iamVjdHMuXG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdleHBlY3RlZCcsIFsnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGV4cGVjdGVkKTtcbiAgICB9IC8vIEhhbmRsZSBwcmltaXRpdmVzIHByb3Blcmx5LlxuXG5cbiAgICBpZiAoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgICBtZXNzYWdlOiBtc2csXG4gICAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgICAgfSk7XG4gICAgICBlcnIub3BlcmF0b3IgPSBmbi5uYW1lO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0ZWQpOyAvLyBTcGVjaWFsIGhhbmRsZSBlcnJvcnMgdG8gbWFrZSBzdXJlIHRoZSBuYW1lIGFuZCB0aGUgbWVzc2FnZSBhcmUgY29tcGFyZWRcbiAgICAvLyBhcyB3ZWxsLlxuXG4gICAgaWYgKGV4cGVjdGVkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGtleXMucHVzaCgnbmFtZScsICdtZXNzYWdlJyk7XG4gICAgfSBlbHNlIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRSgnZXJyb3InLCBleHBlY3RlZCwgJ21heSBub3QgYmUgYW4gZW1wdHkgb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGFjdHVhbFtrZXldID09PSAnc3RyaW5nJyAmJiBpc1JlZ0V4cChleHBlY3RlZFtrZXldKSAmJiBleHBlY3RlZFtrZXldLnRlc3QoYWN0dWFsW2tleV0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29tcGFyZUV4Y2VwdGlvbktleShhY3R1YWwsIGV4cGVjdGVkLCBrZXksIG1zZywga2V5cywgZm4pO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIEd1YXJkIGluc3RhbmNlb2YgYWdhaW5zdCBhcnJvdyBmdW5jdGlvbnMgYXMgdGhleSBkb24ndCBoYXZlIGEgcHJvdG90eXBlLlxuXG5cbiAgaWYgKGV4cGVjdGVkLnByb3RvdHlwZSAhPT0gdW5kZWZpbmVkICYmIGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoRXJyb3IuaXNQcm90b3R5cGVPZihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0dWFsKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2ZuJywgJ0Z1bmN0aW9uJywgZm4pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBmbigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxuICByZXR1cm4gTk9fRVhDRVBUSU9OX1NFTlRJTkVMO1xufVxuXG5mdW5jdGlvbiBjaGVja0lzUHJvbWlzZShvYmopIHtcbiAgLy8gQWNjZXB0IG5hdGl2ZSBFUzYgcHJvbWlzZXMgYW5kIHByb21pc2VzIHRoYXQgYXJlIGltcGxlbWVudGVkIGluIGEgc2ltaWxhclxuICAvLyB3YXkuIERvIG5vdCBhY2NlcHQgdGhlbmFibGVzIHRoYXQgdXNlIGEgZnVuY3Rpb24gYXMgYG9iamAgYW5kIHRoYXQgaGF2ZSBub1xuICAvLyBgY2F0Y2hgIGhhbmRsZXIuXG4gIC8vIFRPRE86IHRoZW5hYmxlcyBhcmUgY2hlY2tlZCB1cCB1bnRpbCB0aGV5IGhhdmUgdGhlIGNvcnJlY3QgbWV0aG9kcyxcbiAgLy8gYnV0IGFjY29yZGluZyB0byBkb2N1bWVudGF0aW9uLCB0aGUgYHRoZW5gIG1ldGhvZCBzaG91bGQgcmVjZWl2ZVxuICAvLyB0aGUgYGZ1bGZpbGxgIGFuZCBgcmVqZWN0YCBhcmd1bWVudHMgYXMgd2VsbCBvciBpdCBtYXkgYmUgbmV2ZXIgcmVzb2x2ZWQuXG4gIHJldHVybiBpc1Byb21pc2Uob2JqKSB8fCBvYmogIT09IG51bGwgJiYgX3R5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5jYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gd2FpdEZvckFjdHVhbChwcm9taXNlRm4pIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHRQcm9taXNlO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9taXNlRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFJldHVybiBhIHJlamVjdGVkIHByb21pc2UgaWYgYHByb21pc2VGbmAgdGhyb3dzIHN5bmNocm9ub3VzbHkuXG4gICAgICByZXN1bHRQcm9taXNlID0gcHJvbWlzZUZuKCk7IC8vIEZhaWwgaW4gY2FzZSBubyBwcm9taXNlIGlzIHJldHVybmVkLlxuXG4gICAgICBpZiAoIWNoZWNrSXNQcm9taXNlKHJlc3VsdFByb21pc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUoJ2luc3RhbmNlIG9mIFByb21pc2UnLCAncHJvbWlzZUZuJywgcmVzdWx0UHJvbWlzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGVja0lzUHJvbWlzZShwcm9taXNlRm4pKSB7XG4gICAgICByZXN1bHRQcm9taXNlID0gcHJvbWlzZUZuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3Byb21pc2VGbicsIFsnRnVuY3Rpb24nLCAnUHJvbWlzZSddLCBwcm9taXNlRm4pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXN1bHRQcm9taXNlO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE5PX0VYQ0VQVElPTl9TRU5USU5FTDtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBleHBlY3RzRXJyb3Ioc3RhY2tTdGFydEZuLCBhY3R1YWwsIGVycm9yLCBtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXJyb3InLCBbJ09iamVjdCcsICdFcnJvcicsICdGdW5jdGlvbicsICdSZWdFeHAnXSwgZXJyb3IpO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGFjdHVhbC5tZXNzYWdlID09PSBlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRVJSX0FNQklHVU9VU19BUkdVTUVOVCgnZXJyb3IvbWVzc2FnZScsIFwiVGhlIGVycm9yIG1lc3NhZ2UgXFxcIlwiLmNvbmNhdChhY3R1YWwubWVzc2FnZSwgXCJcXFwiIGlzIGlkZW50aWNhbCB0byB0aGUgbWVzc2FnZS5cIikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0dWFsID09PSBlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQoJ2Vycm9yL21lc3NhZ2UnLCBcIlRoZSBlcnJvciBcXFwiXCIuY29uY2F0KGFjdHVhbCwgXCJcXFwiIGlzIGlkZW50aWNhbCB0byB0aGUgbWVzc2FnZS5cIikpO1xuICAgIH1cblxuICAgIG1lc3NhZ2UgPSBlcnJvcjtcbiAgICBlcnJvciA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChlcnJvciAhPSBudWxsICYmIF90eXBlb2YoZXJyb3IpICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgfVxuXG4gIGlmIChhY3R1YWwgPT09IE5PX0VYQ0VQVElPTl9TRU5USU5FTCkge1xuICAgIHZhciBkZXRhaWxzID0gJyc7XG5cbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IubmFtZSkge1xuICAgICAgZGV0YWlscyArPSBcIiAoXCIuY29uY2F0KGVycm9yLm5hbWUsIFwiKVwiKTtcbiAgICB9XG5cbiAgICBkZXRhaWxzICs9IG1lc3NhZ2UgPyBcIjogXCIuY29uY2F0KG1lc3NhZ2UpIDogJy4nO1xuICAgIHZhciBmblR5cGUgPSBzdGFja1N0YXJ0Rm4ubmFtZSA9PT0gJ3JlamVjdHMnID8gJ3JlamVjdGlvbicgOiAnZXhjZXB0aW9uJztcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiB1bmRlZmluZWQsXG4gICAgICBleHBlY3RlZDogZXJyb3IsXG4gICAgICBvcGVyYXRvcjogc3RhY2tTdGFydEZuLm5hbWUsXG4gICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgZXhwZWN0ZWQgXCIuY29uY2F0KGZuVHlwZSkuY29uY2F0KGRldGFpbHMpLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChlcnJvciAmJiAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBlcnJvciwgbWVzc2FnZSwgc3RhY2tTdGFydEZuKSkge1xuICAgIHRocm93IGFjdHVhbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHBlY3RzTm9FcnJvcihzdGFja1N0YXJ0Rm4sIGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gTk9fRVhDRVBUSU9OX1NFTlRJTkVMKSByZXR1cm47XG5cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXJyb3I7XG4gICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWVycm9yIHx8IGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXJyb3IpKSB7XG4gICAgdmFyIGRldGFpbHMgPSBtZXNzYWdlID8gXCI6IFwiLmNvbmNhdChtZXNzYWdlKSA6ICcuJztcbiAgICB2YXIgZm5UeXBlID0gc3RhY2tTdGFydEZuLm5hbWUgPT09ICdkb2VzTm90UmVqZWN0JyA/ICdyZWplY3Rpb24nIDogJ2V4Y2VwdGlvbic7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGVycm9yLFxuICAgICAgb3BlcmF0b3I6IHN0YWNrU3RhcnRGbi5uYW1lLFxuICAgICAgbWVzc2FnZTogXCJHb3QgdW53YW50ZWQgXCIuY29uY2F0KGZuVHlwZSkuY29uY2F0KGRldGFpbHMsIFwiXFxuXCIpICsgXCJBY3R1YWwgbWVzc2FnZTogXFxcIlwiLmNvbmNhdChhY3R1YWwgJiYgYWN0dWFsLm1lc3NhZ2UsIFwiXFxcIlwiKSxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuXG4gICAgfSk7XG4gIH1cblxuICB0aHJvdyBhY3R1YWw7XG59XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiB0aHJvd3MocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGV4cGVjdHNFcnJvci5hcHBseSh2b2lkIDAsIFt0aHJvd3MsIGdldEFjdHVhbChwcm9taXNlRm4pXS5jb25jYXQoYXJncykpO1xufTtcblxuYXNzZXJ0LnJlamVjdHMgPSBmdW5jdGlvbiByZWplY3RzKHByb21pc2VGbikge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICByZXR1cm4gd2FpdEZvckFjdHVhbChwcm9taXNlRm4pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbcmVqZWN0cywgcmVzdWx0XS5jb25jYXQoYXJncykpO1xuICB9KTtcbn07XG5cbmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbiBkb2VzTm90VGhyb3coZm4pIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgZXhwZWN0c05vRXJyb3IuYXBwbHkodm9pZCAwLCBbZG9lc05vdFRocm93LCBnZXRBY3R1YWwoZm4pXS5jb25jYXQoYXJncykpO1xufTtcblxuYXNzZXJ0LmRvZXNOb3RSZWplY3QgPSBmdW5jdGlvbiBkb2VzTm90UmVqZWN0KGZuKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSA+IDEgPyBfbGVuNSAtIDEgOiAwKSwgX2tleTUgPSAxOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHJldHVybiB3YWl0Rm9yQWN0dWFsKGZuKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gZXhwZWN0c05vRXJyb3IuYXBwbHkodm9pZCAwLCBbZG9lc05vdFJlamVjdCwgcmVzdWx0XS5jb25jYXQoYXJncykpO1xuICB9KTtcbn07XG5cbmFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24gaWZFcnJvcihlcnIpIHtcbiAgaWYgKGVyciAhPT0gbnVsbCAmJiBlcnIgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBtZXNzYWdlID0gJ2lmRXJyb3IgZ290IHVud2FudGVkIGV4Y2VwdGlvbjogJztcblxuICAgIGlmIChfdHlwZW9mKGVycikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5sZW5ndGggPT09IDAgJiYgZXJyLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IGVyci5tZXNzYWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlICs9IGluc3BlY3QoZXJyKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3RXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgIGFjdHVhbDogZXJyLFxuICAgICAgZXhwZWN0ZWQ6IG51bGwsXG4gICAgICBvcGVyYXRvcjogJ2lmRXJyb3InLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogaWZFcnJvclxuICAgIH0pOyAvLyBNYWtlIHN1cmUgd2UgYWN0dWFsbHkgaGF2ZSBhIHN0YWNrIHRyYWNlIVxuXG4gICAgdmFyIG9yaWdTdGFjayA9IGVyci5zdGFjaztcblxuICAgIGlmICh0eXBlb2Ygb3JpZ1N0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHJlbW92ZSBhbnkgZHVwbGljYXRlZCBmcmFtZXMgZnJvbSB0aGUgZXJyb3IgZnJhbWVzIHRha2VuXG4gICAgICAvLyBmcm9tIHdpdGhpbiBgaWZFcnJvcmAgYW5kIGFkZCB0aGUgb3JpZ2luYWwgZXJyb3IgZnJhbWVzIHRvIHRoZSBuZXdseVxuICAgICAgLy8gY3JlYXRlZCBvbmVzLlxuICAgICAgdmFyIHRtcDIgPSBvcmlnU3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdG1wMi5zaGlmdCgpOyAvLyBGaWx0ZXIgYWxsIGZyYW1lcyBleGlzdGluZyBpbiBlcnIuc3RhY2suXG5cbiAgICAgIHZhciB0bXAxID0gbmV3RXJyLnN0YWNrLnNwbGl0KCdcXG4nKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bXAyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgdGhlIGZyYW1lLlxuICAgICAgICB2YXIgcG9zID0gdG1wMS5pbmRleE9mKHRtcDJbaV0pO1xuXG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgLy8gT25seSBrZWVwIG5ldyBmcmFtZXMuXG4gICAgICAgICAgdG1wMSA9IHRtcDEuc2xpY2UoMCwgcG9zKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdFcnIuc3RhY2sgPSBcIlwiLmNvbmNhdCh0bXAxLmpvaW4oJ1xcbicpLCBcIlxcblwiKS5jb25jYXQodG1wMi5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3RXJyO1xuICB9XG59OyAvLyBFeHBvc2UgYSBzdHJpY3Qgb25seSB2YXJpYW50IG9mIGFzc2VydFxuXG5cbmZ1bmN0aW9uIHN0cmljdCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaW5uZXJPay5hcHBseSh2b2lkIDAsIFtzdHJpY3QsIGFyZ3MubGVuZ3RoXS5jb25jYXQoYXJncykpO1xufVxuXG5hc3NlcnQuc3RyaWN0ID0gb2JqZWN0QXNzaWduKHN0cmljdCwgYXNzZXJ0LCB7XG4gIGVxdWFsOiBhc3NlcnQuc3RyaWN0RXF1YWwsXG4gIGRlZXBFcXVhbDogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCxcbiAgbm90RXF1YWw6IGFzc2VydC5ub3RTdHJpY3RFcXVhbCxcbiAgbm90RGVlcEVxdWFsOiBhc3NlcnQubm90RGVlcFN0cmljdEVxdWFsXG59KTtcbmFzc2VydC5zdHJpY3Quc3RyaWN0ID0gYXNzZXJ0LnN0cmljdDsiLCAiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG4gIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xuICB0aGlzLmlucHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfaW4gPSAwO1xuICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXG4gIHRoaXMuYXZhaWxfaW4gPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9pbiA9IDA7XG4gIC8qIG5leHQgb3V0cHV0IGJ5dGUgc2hvdWxkIGJlIHB1dCB0aGVyZSAqL1xuICB0aGlzLm91dHB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X291dCA9IDA7XG4gIC8qIHJlbWFpbmluZyBmcmVlIHNwYWNlIGF0IG91dHB1dCAqL1xuICB0aGlzLmF2YWlsX291dCA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXG4gIHRoaXMudG90YWxfb3V0ID0gMDtcbiAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBOVUxMIGlmIG5vIGVycm9yICovXG4gIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xuICAvKiBub3QgdmlzaWJsZSBieSBhcHBsaWNhdGlvbnMgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cbiAgdGhpcy5kYXRhX3R5cGUgPSAyLypaX1VOS05PV04qLztcbiAgLyogYWRsZXIzMiB2YWx1ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGRhdGEgKi9cbiAgdGhpcy5hZGxlciA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWlN0cmVhbTtcbiIsICIndXNlIHN0cmljdCc7XG5cblxudmFyIFRZUEVEX09LID0gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyk7XG5cbmZ1bmN0aW9uIF9oYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydHMuYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIHZhciBzb3VyY2VzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZXMuc2hpZnQoKTtcbiAgICBpZiAoIXNvdXJjZSkgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gcmVkdWNlIGJ1ZmZlciBzaXplLCBhdm9pZGluZyBtZW0gY29weVxuZXhwb3J0cy5zaHJpbmtCdWYgPSBmdW5jdGlvbiAoYnVmLCBzaXplKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cbiAgaWYgKGJ1Zi5zdWJhcnJheSkgeyByZXR1cm4gYnVmLnN1YmFycmF5KDAsIHNpemUpOyB9XG4gIGJ1Zi5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYnVmO1xufTtcblxuXG52YXIgZm5UeXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGlmIChzcmMuc3ViYXJyYXkgJiYgZGVzdC5zdWJhcnJheSkge1xuICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY19vZmZzLCBzcmNfb2ZmcyArIGxlbiksIGRlc3Rfb2Zmcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEZhbGxiYWNrIHRvIG9yZGluYXJ5IGFycmF5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdFtkZXN0X29mZnMgKyBpXSA9IHNyY1tzcmNfb2ZmcyArIGldO1xuICAgIH1cbiAgfSxcbiAgLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxuICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbiAoY2h1bmtzKSB7XG4gICAgdmFyIGksIGwsIGxlbiwgcG9zLCBjaHVuaywgcmVzdWx0O1xuXG4gICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG4gICAgbGVuID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsID0gY2h1bmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gam9pbiBjaHVua3NcbiAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIHBvcyA9IDA7XG4gICAgZm9yIChpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuICAgICAgcmVzdWx0LnNldChjaHVuaywgcG9zKTtcbiAgICAgIHBvcyArPSBjaHVuay5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZuVW50eXBlZCA9IHtcbiAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcbiAgICB9XG4gIH0sXG4gIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cbiAgZmxhdHRlbkNodW5rczogZnVuY3Rpb24gKGNodW5rcykge1xuICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG4gIH1cbn07XG5cblxuLy8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcbi8vXG5leHBvcnRzLnNldFR5cGVkID0gZnVuY3Rpb24gKG9uKSB7XG4gIGlmIChvbikge1xuICAgIGV4cG9ydHMuQnVmOCAgPSBVaW50OEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMTYgPSBVaW50MTZBcnJheTtcbiAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblR5cGVkKTtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG4gICAgZXhwb3J0cy5CdWYxNiA9IEFycmF5O1xuICAgIGV4cG9ydHMuQnVmMzIgPSBBcnJheTtcbiAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuICB9XG59O1xuXG5leHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtdW5hcnktb3BzICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbW1vbicpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vL3ZhciBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vdmFyIFpfSFVGRk1BTl9PTkxZICAgICAgPSAyO1xuLy92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbi8vdmFyIFpfREVGQVVMVF9TVFJBVEVHWSAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG52YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbnZhciBaX1RFWFQgICAgICAgICAgICAgICAgPSAxO1xuLy92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5mdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuLy8gRnJvbSB6dXRpbC5oXG5cbnZhciBTVE9SRURfQkxPQ0sgPSAwO1xudmFyIFNUQVRJQ19UUkVFUyA9IDE7XG52YXIgRFlOX1RSRUVTICAgID0gMjtcbi8qIFRoZSB0aHJlZSBraW5kcyBvZiBibG9jayB0eXBlICovXG5cbnZhciBNSU5fTUFUQ0ggICAgPSAzO1xudmFyIE1BWF9NQVRDSCAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxudmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcbi8qIG51bWJlciBvZiBsZW5ndGggY29kZXMsIG5vdCBjb3VudGluZyB0aGUgc3BlY2lhbCBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xuXG52YXIgTF9DT0RFUyAgICAgICA9IExJVEVSQUxTICsgMSArIExFTkdUSF9DT0RFUztcbi8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG52YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGVzICovXG5cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxudmFyIEhFQVBfU0laRSAgICAgPSAyICogTF9DT0RFUyArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG52YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuLyogQWxsIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQklUUyBiaXRzICovXG5cbnZhciBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG52YXIgTUFYX0JMX0JJVFMgPSA3O1xuLyogQml0IGxlbmd0aCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JMX0JJVFMgYml0cyAqL1xuXG52YXIgRU5EX0JMT0NLICAgPSAyNTY7XG4vKiBlbmQgb2YgYmxvY2sgbGl0ZXJhbCBjb2RlICovXG5cbnZhciBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8zXzEwICAgPSAxNztcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDMtMTAgdGltZXMgICgzIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG52YXIgUkVQWl8xMV8xMzggPSAxODtcbi8qIHJlcGVhdCBhIHplcm8gbGVuZ3RoIDExLTEzOCB0aW1lcyAgKDcgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG52YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF07XG5cbnZhciBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxudmFyIGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN107XG5cbnZhciBibF9vcmRlciA9XG4gIFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtcbi8qIGVzbGludC1lbmFibGUgY29tbWEtc3BhY2luZyxhcnJheS1icmFja2V0LXNwYWNpbmcgKi9cblxuLyogVGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMgYXJlIHNlbnQgaW4gb3JkZXIgb2YgZGVjcmVhc2luZ1xuICogcHJvYmFiaWxpdHksIHRvIGF2b2lkIHRyYW5zbWl0dGluZyB0aGUgbGVuZ3RocyBmb3IgdW51c2VkIGJpdCBsZW5ndGggY29kZXMuXG4gKi9cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBMb2NhbCBkYXRhLiBUaGVzZSBhcmUgaW5pdGlhbGl6ZWQgb25seSBvbmNlLlxuICovXG5cbi8vIFdlIHByZS1maWxsIGFycmF5cyB3aXRoIDAgdG8gYXZvaWQgdW5pbml0aWFsaXplZCBnYXBzXG5cbnZhciBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbnZhciBzdGF0aWNfbHRyZWUgID0gbmV3IEFycmF5KChMX0NPREVTICsgMikgKiAyKTtcbnplcm8oc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxudmFyIHN0YXRpY19kdHJlZSAgPSBuZXcgQXJyYXkoRF9DT0RFUyAqIDIpO1xuemVybyhzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG52YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcbnplcm8oX2Rpc3RfY29kZSk7XG4vKiBEaXN0YW5jZSBjb2Rlcy4gVGhlIGZpcnN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgZGlzdGFuY2VzXG4gKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG4gKiB0aGUgMTUgYml0IGRpc3RhbmNlcy5cbiAqL1xuXG52YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0ggLSBNSU5fTUFUQ0ggKyAxKTtcbnplcm8oX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfbGVuZ3RoICAgPSBuZXcgQXJyYXkoTEVOR1RIX0NPREVTKTtcbnplcm8oYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxudmFyIGJhc2VfZGlzdCAgICAgPSBuZXcgQXJyYXkoRF9DT0RFUyk7XG56ZXJvKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG52YXIgc3RhdGljX2xfZGVzYztcbnZhciBzdGF0aWNfZF9kZXNjO1xudmFyIHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG4gIHJldHVybiBkaXN0IDwgMjU2ID8gX2Rpc3RfY29kZVtkaXN0XSA6IF9kaXN0X2NvZGVbMjU2ICsgKGRpc3QgPj4+IDcpXTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5mdW5jdGlvbiBwdXRfc2hvcnQocywgdykge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSB2YWx1ZSBvbiBhIGdpdmVuIG51bWJlciBvZiBiaXRzLlxuICogSU4gYXNzZXJ0aW9uOiBsZW5ndGggPD0gMTYgYW5kIHZhbHVlIGZpdHMgaW4gbGVuZ3RoIGJpdHMuXG4gKi9cbmZ1bmN0aW9uIHNlbmRfYml0cyhzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJldmVyc2UgdGhlIGZpcnN0IGxlbiBiaXRzIG9mIGEgY29kZSwgdXNpbmcgc3RyYWlnaHRmb3J3YXJkIGNvZGUgKGEgZmFzdGVyXG4gKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG4gKiBJTiBhc3NlcnRpb246IDEgPD0gbGVuIDw9IDE1XG4gKi9cbmZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG4gIHZhciByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyLCBrZWVwaW5nIGF0IG1vc3QgNyBiaXRzIGluIGl0LlxuICovXG5mdW5jdGlvbiBiaV9mbHVzaChzKSB7XG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuICogZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LCBoZWFwW2hlYXBfbWF4XSBhbmRcbiAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkIGxlbiBpcyBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aCwgdGhlXG4gKiAgICAgYXJyYXkgYmxfY291bnQgY29udGFpbnMgdGhlIGZyZXF1ZW5jaWVzIGZvciBlYWNoIGJpdCBsZW5ndGguXG4gKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG4gKiAgICAgbm90IG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7ICAgIC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIHZhciBtYXhfY29kZSAgICAgICAgPSBkZXNjLm1heF9jb2RlO1xuICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBleHRyYSAgICAgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5leHRyYV9iaXRzO1xuICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcbiAgdmFyIG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIHZhciBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgdmFyIHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIHZhciBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIC8qIEluIGEgZmlyc3QgcGFzcywgY29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyAod2hpY2ggbWF5XG4gICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuICAgKi9cbiAgdHJlZVtzLmhlYXBbcy5oZWFwX21heF0gKiAyICsgMV0vKi5MZW4qLyA9IDA7IC8qIHJvb3Qgb2YgdGhlIGhlYXAgKi9cblxuICBmb3IgKGggPSBzLmhlYXBfbWF4ICsgMTsgaCA8IEhFQVBfU0laRTsgaCsrKSB7XG4gICAgbiA9IHMuaGVhcFtoXTtcbiAgICBiaXRzID0gdHJlZVt0cmVlW24gKiAyICsgMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcbiAgICBpZiAoYml0cyA+IG1heF9sZW5ndGgpIHtcbiAgICAgIGJpdHMgPSBtYXhfbGVuZ3RoO1xuICAgICAgb3ZlcmZsb3crKztcbiAgICB9XG4gICAgdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuICAgIC8qIFdlIG92ZXJ3cml0ZSB0cmVlW25dLkRhZCB3aGljaCBpcyBubyBsb25nZXIgbmVlZGVkICovXG5cbiAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG4gICAgcy5ibF9jb3VudFtiaXRzXSsrO1xuICAgIHhiaXRzID0gMDtcbiAgICBpZiAobiA+PSBiYXNlKSB7XG4gICAgICB4Yml0cyA9IGV4dHJhW24gLSBiYXNlXTtcbiAgICB9XG4gICAgZiA9IHRyZWVbbiAqIDJdLyouRnJlcSovO1xuICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuICs9IGYgKiAoc3RyZWVbbiAqIDIgKyAxXS8qLkxlbiovICsgeGJpdHMpO1xuICAgIH1cbiAgfVxuICBpZiAob3ZlcmZsb3cgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgLy8gVHJhY2UoKHN0ZGVycixcIlxcbmJpdCBsZW5ndGggb3ZlcmZsb3dcXG5cIikpO1xuICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG4gIC8qIEZpbmQgdGhlIGZpcnN0IGJpdCBsZW5ndGggd2hpY2ggY291bGQgaW5jcmVhc2U6ICovXG4gIGRvIHtcbiAgICBiaXRzID0gbWF4X2xlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG4gICAgcy5ibF9jb3VudFtiaXRzXS0tOyAgICAgIC8qIG1vdmUgb25lIGxlYWYgZG93biB0aGUgdHJlZSAqL1xuICAgIHMuYmxfY291bnRbYml0cyArIDFdICs9IDI7IC8qIG1vdmUgb25lIG92ZXJmbG93IGl0ZW0gYXMgaXRzIGJyb3RoZXIgKi9cbiAgICBzLmJsX2NvdW50W21heF9sZW5ndGhdLS07XG4gICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcbiAgICAgKiBidXQgdGhpcyBkb2VzIG5vdCBhZmZlY3QgYmxfY291bnRbbWF4X2xlbmd0aF1cbiAgICAgKi9cbiAgICBvdmVyZmxvdyAtPSAyO1xuICB9IHdoaWxlIChvdmVyZmxvdyA+IDApO1xuXG4gIC8qIE5vdyByZWNvbXB1dGUgYWxsIGJpdCBsZW5ndGhzLCBzY2FubmluZyBpbiBpbmNyZWFzaW5nIGZyZXF1ZW5jeS5cbiAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuICAgKiBsZW5ndGhzIGluc3RlYWQgb2YgZml4aW5nIG9ubHkgdGhlIHdyb25nIG9uZXMuIFRoaXMgaWRlYSBpcyB0YWtlblxuICAgKiBmcm9tICdhcicgd3JpdHRlbiBieSBIYXJ1aGlrbyBPa3VtdXJhLilcbiAgICovXG4gIGZvciAoYml0cyA9IG1heF9sZW5ndGg7IGJpdHMgIT09IDA7IGJpdHMtLSkge1xuICAgIG4gPSBzLmJsX2NvdW50W2JpdHNdO1xuICAgIHdoaWxlIChuICE9PSAwKSB7XG4gICAgICBtID0gcy5oZWFwWy0taF07XG4gICAgICBpZiAobSA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHJlZVttICogMiArIDFdLyouTGVuKi8gIT09IGJpdHMpIHtcbiAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcbiAgICAgICAgcy5vcHRfbGVuICs9IChiaXRzIC0gdHJlZVttICogMiArIDFdLyouTGVuKi8pICogdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgICAgIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAgIH1cbiAgICAgIG4tLTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEdlbmVyYXRlIHRoZSBjb2RlcyBmb3IgYSBnaXZlbiB0cmVlIGFuZCBiaXQgY291bnRzICh3aGljaCBuZWVkIG5vdCBiZVxuICogb3B0aW1hbCkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBhcnJheSBibF9jb3VudCBjb250YWlucyB0aGUgYml0IGxlbmd0aCBzdGF0aXN0aWNzIGZvclxuICogdGhlIGdpdmVuIHRyZWUgYW5kIHRoZSBmaWVsZCBsZW4gaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cy5cbiAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG4gKiAgICAgemVybyBjb2RlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgICAgICAgICAgIC8qIHRoZSB0cmVlIHRvIGRlY29yYXRlICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbi8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cbntcbiAgdmFyIG5leHRfY29kZSA9IG5ldyBBcnJheShNQVhfQklUUyArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICB2YXIgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTOyBiaXRzKyspIHtcbiAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzIC0gMV0pIDw8IDE7XG4gIH1cbiAgLyogQ2hlY2sgdGhhdCB0aGUgYml0IGNvdW50cyBpbiBibF9jb3VudCBhcmUgY29uc2lzdGVudC4gVGhlIGxhc3QgY29kZVxuICAgKiBtdXN0IGJlIGFsbCBvbmVzLlxuICAgKi9cbiAgLy9Bc3NlcnQgKGNvZGUgKyBibF9jb3VudFtNQVhfQklUU10tMSA9PSAoMTw8TUFYX0JJVFMpLTEsXG4gIC8vICAgICAgICBcImluY29uc2lzdGVudCBiaXQgY291bnRzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuICBmb3IgKG4gPSAwOyAgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgdmFyIGxlbiA9IHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovO1xuICAgIGlmIChsZW4gPT09IDApIHsgY29udGludWU7IH1cbiAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuICAgIHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG4gICAgLy9UcmFjZWN2KHRyZWUgIT0gc3RhdGljX2x0cmVlLCAoc3RkZXJyLFwiXFxubiAlM2QgJWMgbCAlMmQgYyAlNHggKCV4KSBcIixcbiAgICAvLyAgICAgbiwgKGlzZ3JhcGgobikgPyBuIDogJyAnKSwgbGVuLCB0cmVlW25dLkNvZGUsIG5leHRfY29kZVtsZW5dLTEpKTtcbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuZnVuY3Rpb24gdHJfc3RhdGljX2luaXQoKSB7XG4gIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG4gIHZhciBiaXRzOyAgICAgLyogYml0IGNvdW50ZXIgKi9cbiAgdmFyIGxlbmd0aDsgICAvKiBsZW5ndGggdmFsdWUgKi9cbiAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG4gIHZhciBkaXN0OyAgICAgLyogZGlzdGFuY2UgaW5kZXggKi9cbiAgdmFyIGJsX2NvdW50ID0gbmV3IEFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTIC0gMTsgY29kZSsrKSB7XG4gICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfbGVuZ3RoX2NvZGVbbGVuZ3RoKytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGxlbmd0aCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGxlbmd0aCAhPSAyNTZcIik7XG4gIC8qIE5vdGUgdGhhdCB0aGUgbGVuZ3RoIDI1NSAobWF0Y2ggbGVuZ3RoIDI1OCkgY2FuIGJlIHJlcHJlc2VudGVkXG4gICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG4gICAqIG92ZXJ3cml0ZSBsZW5ndGhfY29kZVsyNTVdIHRvIHVzZSB0aGUgYmVzdCBlbmNvZGluZzpcbiAgICovXG4gIF9sZW5ndGhfY29kZVtsZW5ndGggLSAxXSA9IGNvZGU7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG4gIGRpc3QgPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgMTY7IGNvZGUrKykge1xuICAgIGJhc2VfZGlzdFtjb2RlXSA9IGRpc3Q7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IGV4dHJhX2RiaXRzW2NvZGVdKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuICBkaXN0ID4+PSA3OyAvKiBmcm9tIG5vdyBvbiwgYWxsIGRpc3RhbmNlcyBhcmUgZGl2aWRlZCBieSAxMjggKi9cbiAgZm9yICg7IGNvZGUgPCBEX0NPREVTOyBjb2RlKyspIHtcbiAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0IDw8IDc7XG4gICAgZm9yIChuID0gMDsgbiA8ICgxIDw8IChleHRyYV9kYml0c1tjb2RlXSAtIDcpKTsgbisrKSB7XG4gICAgICBfZGlzdF9jb2RlWzI1NiArIGRpc3QrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IDI1NitkaXN0ICE9IDUxMlwiKTtcblxuICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG4gIGZvciAoYml0cyA9IDA7IGJpdHMgPD0gTUFYX0JJVFM7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyArIDEsIGJsX2NvdW50KTtcblxuICAvKiBUaGUgc3RhdGljIGRpc3RhbmNlIHRyZWUgaXMgdHJpdmlhbDogKi9cbiAgZm9yIChuID0gMDsgbiA8IERfQ09ERVM7IG4rKykge1xuICAgIHN0YXRpY19kdHJlZVtuICogMiArIDFdLyouTGVuKi8gPSA1O1xuICAgIHN0YXRpY19kdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG4sIDUpO1xuICB9XG5cbiAgLy8gTm93IGRhdGEgcmVhZHkgYW5kIHdlIGNhbiBpbml0IHN0YXRpYyB0cmVlc1xuICBzdGF0aWNfbF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19sdHJlZSwgZXh0cmFfbGJpdHMsIExJVEVSQUxTICsgMSwgTF9DT0RFUywgTUFYX0JJVFMpO1xuICBzdGF0aWNfZF9kZXNjID0gbmV3IFN0YXRpY1RyZWVEZXNjKHN0YXRpY19kdHJlZSwgZXh0cmFfZGJpdHMsIDAsICAgICAgICAgIERfQ09ERVMsIE1BWF9CSVRTKTtcbiAgc3RhdGljX2JsX2Rlc2MgPSBuZXcgU3RhdGljVHJlZURlc2MobmV3IEFycmF5KDApLCBleHRyYV9ibGJpdHMsIDAsICAgICAgICAgQkxfQ09ERVMsIE1BWF9CTF9CSVRTKTtcblxuICAvL3N0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSBhIG5ldyBibG9jay5cbiAqL1xuZnVuY3Rpb24gaW5pdF9ibG9jayhzKSB7XG4gIHZhciBuOyAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cblxuICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cbiAgZm9yIChuID0gMDsgbiA8IExfQ09ERVM7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUzsgIG4rKykgeyBzLmR5bl9kdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG4gIGZvciAobiA9IDA7IG4gPCBCTF9DT0RFUzsgbisrKSB7IHMuYmxfdHJlZVtuICogMl0vKi5GcmVxKi8gPSAwOyB9XG5cbiAgcy5keW5fbHRyZWVbRU5EX0JMT0NLICogMl0vKi5GcmVxKi8gPSAxO1xuICBzLm9wdF9sZW4gPSBzLnN0YXRpY19sZW4gPSAwO1xuICBzLmxhc3RfbGl0ID0gcy5tYXRjaGVzID0gMDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZsdXNoIHRoZSBiaXQgYnVmZmVyIGFuZCBhbGlnbiB0aGUgb3V0cHV0IG9uIGEgYnl0ZSBib3VuZGFyeVxuICovXG5mdW5jdGlvbiBiaV93aW5kdXAocylcbntcbiAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG4gICAgcHV0X3Nob3J0KHMsIHMuYmlfYnVmKTtcbiAgfSBlbHNlIGlmIChzLmJpX3ZhbGlkID4gMCkge1xuICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcbiAgICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IHMuYmlfYnVmO1xuICB9XG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiBjb3B5X2Jsb2NrKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcGFyZXMgdG8gc3VidHJlZXMsIHVzaW5nIHRoZSB0cmVlIGRlcHRoIGFzIHRpZSBicmVha2VyIHdoZW5cbiAqIHRoZSBzdWJ0cmVlcyBoYXZlIGVxdWFsIGZyZXF1ZW5jeS4gVGhpcyBtaW5pbWl6ZXMgdGhlIHdvcnN0IGNhc2UgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbWFsbGVyKHRyZWUsIG4sIG0sIGRlcHRoKSB7XG4gIHZhciBfbjIgPSBuICogMjtcbiAgdmFyIF9tMiA9IG0gKiAyO1xuICByZXR1cm4gKHRyZWVbX24yXS8qLkZyZXEqLyA8IHRyZWVbX20yXS8qLkZyZXEqLyB8fFxuICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG4gKiBleGNoYW5naW5nIGEgbm9kZSB3aXRoIHRoZSBzbWFsbGVzdCBvZiBpdHMgdHdvIHNvbnMgaWYgbmVjZXNzYXJ5LCBzdG9wcGluZ1xuICogd2hlbiB0aGUgaGVhcCBwcm9wZXJ0eSBpcyByZS1lc3RhYmxpc2hlZCAoZWFjaCBmYXRoZXIgc21hbGxlciB0aGFuIGl0c1xuICogdHdvIHNvbnMpLlxuICovXG5mdW5jdGlvbiBwcWRvd25oZWFwKHMsIHRyZWUsIGspXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgY3RfZGF0YSAqdHJlZTsgIC8qIHRoZSB0cmVlIHRvIHJlc3RvcmUgKi9cbi8vICAgIGludCBrOyAgICAgICAgICAgICAgIC8qIG5vZGUgdG8gbW92ZSBkb3duICovXG57XG4gIHZhciB2ID0gcy5oZWFwW2tdO1xuICB2YXIgaiA9IGsgPDwgMTsgIC8qIGxlZnQgc29uIG9mIGsgKi9cbiAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuICAgIC8qIFNldCBqIHRvIHRoZSBzbWFsbGVzdCBvZiB0aGUgdHdvIHNvbnM6ICovXG4gICAgaWYgKGogPCBzLmhlYXBfbGVuICYmXG4gICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqICsgMV0sIHMuaGVhcFtqXSwgcy5kZXB0aCkpIHtcbiAgICAgIGorKztcbiAgICB9XG4gICAgLyogRXhpdCBpZiB2IGlzIHNtYWxsZXIgdGhhbiBib3RoIHNvbnMgKi9cbiAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cbiAgICAvKiBFeGNoYW5nZSB2IHdpdGggdGhlIHNtYWxsZXN0IHNvbiAqL1xuICAgIHMuaGVhcFtrXSA9IHMuaGVhcFtqXTtcbiAgICBrID0gajtcblxuICAgIC8qIEFuZCBjb250aW51ZSBkb3duIHRoZSB0cmVlLCBzZXR0aW5nIGogdG8gdGhlIGxlZnQgc29uIG9mIGsgKi9cbiAgICBqIDw8PSAxO1xuICB9XG4gIHMuaGVhcFtrXSA9IHY7XG59XG5cblxuLy8gaW5saW5lZCBtYW51YWxseVxuLy8gdmFyIFNNQUxMRVNUID0gMTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3NfYmxvY2socywgbHRyZWUsIGR0cmVlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGNvbnN0IGN0X2RhdGEgKmx0cmVlOyAvKiBsaXRlcmFsIHRyZWUgKi9cbi8vICAgIGNvbnN0IGN0X2RhdGEgKmR0cmVlOyAvKiBkaXN0YW5jZSB0cmVlICovXG57XG4gIHZhciBkaXN0OyAgICAgICAgICAgLyogZGlzdGFuY2Ugb2YgbWF0Y2hlZCBzdHJpbmcgKi9cbiAgdmFyIGxjOyAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3QgPT0gMCkgKi9cbiAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG4gIHZhciBjb2RlOyAgICAgICAgICAgLyogdGhlIGNvZGUgdG8gc2VuZCAqL1xuICB2YXIgZXh0cmE7ICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzIHRvIHNlbmQgKi9cblxuICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuICAgIGRvIHtcbiAgICAgIGRpc3QgPSAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyXSA8PCA4KSB8IChzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBseCAqIDIgKyAxXSk7XG4gICAgICBsYyA9IHMucGVuZGluZ19idWZbcy5sX2J1ZiArIGx4XTtcbiAgICAgIGx4Kys7XG5cbiAgICAgIGlmIChkaXN0ID09PSAwKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBsYywgbHRyZWUpOyAvKiBzZW5kIGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAgIC8vVHJhY2Vjdihpc2dyYXBoKGxjKSwgKHN0ZGVycixcIiAnJWMnIFwiLCBsYykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgICAgICBjb2RlID0gX2xlbmd0aF9jb2RlW2xjXTtcbiAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUgKyBMSVRFUkFMUyArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdHJ1Y3Qgb25lIEh1ZmZtYW4gdHJlZSBhbmQgYXNzaWducyB0aGUgY29kZSBiaXQgc3RyaW5ncyBhbmQgbGVuZ3Rocy5cbiAqIFVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aCBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG4gKiBPVVQgYXNzZXJ0aW9uczogdGhlIGZpZWxkcyBsZW4gYW5kIGNvZGUgYXJlIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoXG4gKiAgICAgYW5kIGNvcnJlc3BvbmRpbmcgY29kZS4gVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXNcbiAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkX3RyZWUocywgZGVzYylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICB0cmVlX2Rlc2MgKmRlc2M7IC8qIHRoZSB0cmVlIGRlc2NyaXB0b3IgKi9cbntcbiAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgdmFyIHN0cmVlICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG4gIHZhciBoYXNfc3RyZWUgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICB2YXIgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgdmFyIG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuICBmb3IgKG4gPSAwOyBuIDwgZWxlbXM7IG4rKykge1xuICAgIGlmICh0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG4gICAgICBzLmRlcHRoW25dID0gMDtcblxuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlW24gKiAyICsgMV0vKi5MZW4qLyA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlIHBremlwIGZvcm1hdCByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IG9uZSBkaXN0YW5jZSBjb2RlIGV4aXN0cyxcbiAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG4gICAqIHBvc3NpYmxlIGNvZGUuIFNvIHRvIGF2b2lkIHNwZWNpYWwgY2hlY2tzIGxhdGVyIG9uIHdlIGZvcmNlIGF0IGxlYXN0XG4gICAqIHR3byBjb2RlcyBvZiBub24gemVybyBmcmVxdWVuY3kuXG4gICAqL1xuICB3aGlsZSAocy5oZWFwX2xlbiA8IDIpIHtcbiAgICBub2RlID0gcy5oZWFwWysrcy5oZWFwX2xlbl0gPSAobWF4X2NvZGUgPCAyID8gKyttYXhfY29kZSA6IDApO1xuICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcbiAgICBzLmRlcHRoW25vZGVdID0gMDtcbiAgICBzLm9wdF9sZW4tLTtcblxuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiAtPSBzdHJlZVtub2RlICogMiArIDFdLyouTGVuKi87XG4gICAgfVxuICAgIC8qIG5vZGUgaXMgMCBvciAxIHNvIGl0IGRvZXMgbm90IGhhdmUgZXh0cmEgYml0cyAqL1xuICB9XG4gIGRlc2MubWF4X2NvZGUgPSBtYXhfY29kZTtcblxuICAvKiBUaGUgZWxlbWVudHMgaGVhcFtoZWFwX2xlbi8yKzEgLi4gaGVhcF9sZW5dIGFyZSBsZWF2ZXMgb2YgdGhlIHRyZWUsXG4gICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuICAgKi9cbiAgZm9yIChuID0gKHMuaGVhcF9sZW4gPj4gMS8qaW50IC8yKi8pOyBuID49IDE7IG4tLSkgeyBwcWRvd25oZWFwKHMsIHRyZWUsIG4pOyB9XG5cbiAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuICAgKiBmcmVxdWVudCBub2Rlcy5cbiAgICovXG4gIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuICBkbyB7XG4gICAgLy9wcXJlbW92ZShzLCB0cmVlLCBuKTsgIC8qIG4gPSBub2RlIG9mIGxlYXN0IGZyZXF1ZW5jeSAqL1xuICAgIC8qKiogcHFyZW1vdmUgKioqL1xuICAgIG4gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gcy5oZWFwW3MuaGVhcF9sZW4tLV07XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcbiAgICAvKioqL1xuXG4gICAgbSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTsgLyogbSA9IG5vZGUgb2YgbmV4dCBsZWFzdCBmcmVxdWVuY3kgKi9cblxuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbTtcblxuICAgIC8qIENyZWF0ZSBhIG5ldyBub2RlIGZhdGhlciBvZiBuIGFuZCBtICovXG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAocy5kZXB0aFtuXSA+PSBzLmRlcHRoW21dID8gcy5kZXB0aFtuXSA6IHMuZGVwdGhbbV0pICsgMTtcbiAgICB0cmVlW24gKiAyICsgMV0vKi5EYWQqLyA9IHRyZWVbbSAqIDIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuICAgIC8qIGFuZCBpbnNlcnQgdGhlIG5ldyBub2RlIGluIHRoZSBoZWFwICovXG4gICAgcy5oZWFwWzEvKlNNQUxMRVNUKi9dID0gbm9kZSsrO1xuICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cbiAgfSB3aGlsZSAocy5oZWFwX2xlbiA+PSAyKTtcblxuICBzLmhlYXBbLS1zLmhlYXBfbWF4XSA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblxuICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG4gICAqIGdlbmVyYXRlIHRoZSBiaXQgbGVuZ3Rocy5cbiAgICovXG4gIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cbiAgLyogVGhlIGZpZWxkIGxlbiBpcyBub3cgc2V0LCB3ZSBjYW4gZ2VuZXJhdGUgdGhlIGJpdCBjb2RlcyAqL1xuICBnZW5fY29kZXModHJlZSwgbWF4X2NvZGUsIHMuYmxfY291bnQpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2Nhbl90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICB2YXIgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICB2YXIgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgdmFyIG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSBpbiBjb21wcmVzc2VkIGZvcm0sIHVzaW5nIHRoZSBjb2RlcyBpblxuICogYmxfdHJlZS5cbiAqL1xuZnVuY3Rpb24gc2VuZF90cmVlKHMsIHRyZWUsIG1heF9jb2RlKVxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7IC8qIHRoZSB0cmVlIHRvIGJlIHNjYW5uZWQgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG57XG4gIHZhciBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGl0ZXJhdGVzIG92ZXIgYWxsIHRyZWUgZWxlbWVudHMgKi9cbiAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cbiAgdmFyIG5leHRsZW4gPSB0cmVlWzAgKiAyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG4gIHZhciBjb3VudCA9IDA7ICAgICAgICAgICAgIC8qIHJlcGVhdCBjb3VudCBvZiB0aGUgY3VycmVudCBjb2RlICovXG4gIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cbiAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG4gIC8qIHRyZWVbbWF4X2NvZGUrMV0uTGVuID0gLTE7ICovICAvKiBndWFyZCBhbHJlYWR5IHNldCAqL1xuICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgIG1heF9jb3VudCA9IDEzODtcbiAgICBtaW5fY291bnQgPSAzO1xuICB9XG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgZG8geyBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpOyB9IHdoaWxlICgtLWNvdW50ICE9PSAwKTtcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuICE9PSAwKSB7XG4gICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG4gICAgICAgIHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7XG4gICAgICAgIGNvdW50LS07XG4gICAgICB9XG4gICAgICAvL0Fzc2VydChjb3VudCA+PSAzICYmIGNvdW50IDw9IDYsIFwiIDNfNj9cIik7XG4gICAgICBzZW5kX2NvZGUocywgUkVQXzNfNiwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDIpO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUFpfM18xMCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDMsIDMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcbiAgICAgIHNlbmRfYml0cyhzLCBjb3VudCAtIDExLCA3KTtcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcbiAgICBpZiAobmV4dGxlbiA9PT0gMCkge1xuICAgICAgbWF4X2NvdW50ID0gMTM4O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSBpZiAoY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBtYXhfY291bnQgPSA2O1xuICAgICAgbWluX2NvdW50ID0gMztcblxuICAgIH0gZWxzZSB7XG4gICAgICBtYXhfY291bnQgPSA3O1xuICAgICAgbWluX2NvdW50ID0gNDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbnN0cnVjdCB0aGUgSHVmZm1hbiB0cmVlIGZvciB0aGUgYml0IGxlbmd0aHMgYW5kIHJldHVybiB0aGUgaW5kZXggaW5cbiAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuICovXG5mdW5jdGlvbiBidWlsZF9ibF90cmVlKHMpIHtcbiAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIERldGVybWluZSB0aGUgYml0IGxlbmd0aCBmcmVxdWVuY2llcyBmb3IgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgc2Nhbl90cmVlKHMsIHMuZHluX2x0cmVlLCBzLmxfZGVzYy5tYXhfY29kZSk7XG4gIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG4gIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWU6ICovXG4gIGJ1aWxkX3RyZWUocywgcy5ibF9kZXNjKTtcbiAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuICAgKiB0aGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aHMgY29kZXMgYW5kIHRoZSA1KzUrNCBiaXRzIGZvciB0aGUgY291bnRzLlxuICAgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcbiAgICogcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCA0IGJpdCBsZW5ndGggY29kZXMgYmUgc2VudC4gKGFwcG5vdGUudHh0IHNheXNcbiAgICogMyBidXQgdGhlIGFjdHVhbCB2YWx1ZSB1c2VkIGlzIDQuKVxuICAgKi9cbiAgZm9yIChtYXhfYmxpbmRleCA9IEJMX0NPREVTIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIHRoZSBoZWFkZXIgZm9yIGEgYmxvY2sgdXNpbmcgZHluYW1pYyBIdWZmbWFuIHRyZWVzOiB0aGUgY291bnRzLCB0aGVcbiAqIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGggY29kZXMsIHRoZSBsaXRlcmFsIHRyZWUgYW5kIHRoZSBkaXN0YW5jZSB0cmVlLlxuICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuICovXG5mdW5jdGlvbiBzZW5kX2FsbF90cmVlcyhzLCBsY29kZXMsIGRjb2RlcywgYmxjb2Rlcylcbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBpbnQgbGNvZGVzLCBkY29kZXMsIGJsY29kZXM7IC8qIG51bWJlciBvZiBjb2RlcyBmb3IgZWFjaCB0cmVlICovXG57XG4gIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuICAvL0Fzc2VydCAobGNvZGVzID49IDI1NyAmJiBkY29kZXMgPj0gMSAmJiBibGNvZGVzID49IDQsIFwibm90IGVub3VnaCBjb2Rlc1wiKTtcbiAgLy9Bc3NlcnQgKGxjb2RlcyA8PSBMX0NPREVTICYmIGRjb2RlcyA8PSBEX0NPREVTICYmIGJsY29kZXMgPD0gQkxfQ09ERVMsXG4gIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvdW50czogXCIpKTtcbiAgc2VuZF9iaXRzKHMsIGxjb2RlcyAtIDI1NywgNSk7IC8qIG5vdCArMjU1IGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuICBzZW5kX2JpdHMocywgZGNvZGVzIC0gMSwgICA1KTtcbiAgc2VuZF9iaXRzKHMsIGJsY29kZXMgLSA0LCAgNCk7IC8qIG5vdCAtMyBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgZm9yIChyYW5rID0gMDsgcmFuayA8IGJsY29kZXM7IHJhbmsrKykge1xuICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG4gICAgc2VuZF9iaXRzKHMsIHMuYmxfdHJlZVtibF9vcmRlcltyYW5rXSAqIDIgKyAxXS8qLkxlbiovLCAzKTtcbiAgfVxuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXG4gIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzIC0gMSk7IC8qIGxpdGVyYWwgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fZHRyZWUsIGRjb2RlcyAtIDEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENoZWNrIGlmIHRoZSBkYXRhIHR5cGUgaXMgVEVYVCBvciBCSU5BUlksIHVzaW5nIHRoZSBmb2xsb3dpbmcgYWxnb3JpdGhtOlxuICogLSBURVhUIGlmIHRoZSB0d28gY29uZGl0aW9ucyBiZWxvdyBhcmUgc2F0aXNmaWVkOlxuICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJibGFjayBsaXN0XCIgKDAuLjYsIDE0Li4yNSwgMjguLjMxKS5cbiAqICAgIGIpIFRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmludGFibGUgY2hhcmFjdGVyIGJlbG9uZ2luZyB0byB0aGVcbiAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cbiAqIC0gQklOQVJZIG90aGVyd2lzZS5cbiAqIC0gVGhlIGZvbGxvd2luZyBwYXJ0aWFsbHktcG9ydGFibGUgY29udHJvbCBjaGFyYWN0ZXJzIGZvcm0gYVxuICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG4gKiAgICg3IHtCRUx9LCA4IHtCU30sIDExIHtWVH0sIDEyIHtGRn0sIDI2IHtTVUJ9LCAyNyB7RVNDfSkuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZHMgRnJlcSBvZiBkeW5fbHRyZWUgYXJlIHNldC5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0X2RhdGFfdHlwZShzKSB7XG4gIC8qIGJsYWNrX21hc2sgaXMgdGhlIGJpdCBtYXNrIG9mIGJsYWNrLWxpc3RlZCBieXRlc1xuICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcbiAgICogMHhmM2ZmYzA3ZiA9IGJpbmFyeSAxMTExMDAxMTExMTExMTExMTEwMDAwMDAwMTExMTExMVxuICAgKi9cbiAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuICB2YXIgbjtcblxuICAvKiBDaGVjayBmb3Igbm9uLXRleHR1YWwgKFwiYmxhY2stbGlzdGVkXCIpIGJ5dGVzLiAqL1xuICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG4gICAgaWYgKChibGFja19tYXNrICYgMSkgJiYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkpIHtcbiAgICAgIHJldHVybiBaX0JJTkFSWTtcbiAgICB9XG4gIH1cblxuICAvKiBDaGVjayBmb3IgdGV4dHVhbCAoXCJ3aGl0ZS1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGlmIChzLmR5bl9sdHJlZVs5ICogMl0vKi5GcmVxKi8gIT09IDAgfHwgcy5keW5fbHRyZWVbMTAgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fFxuICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgIHJldHVybiBaX1RFWFQ7XG4gIH1cbiAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG4gICAgaWYgKHMuZHluX2x0cmVlW24gKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuICAgICAgcmV0dXJuIFpfVEVYVDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGVyZSBhcmUgbm8gXCJibGFjay1saXN0ZWRcIiBvciBcIndoaXRlLWxpc3RlZFwiIGJ5dGVzOlxuICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuICAgKi9cbiAgcmV0dXJuIFpfQklOQVJZO1xufVxuXG5cbnZhciBzdGF0aWNfaW5pdF9kb25lID0gZmFsc2U7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuICovXG5mdW5jdGlvbiBfdHJfaW5pdChzKVxue1xuXG4gIGlmICghc3RhdGljX2luaXRfZG9uZSkge1xuICAgIHRyX3N0YXRpY19pbml0KCk7XG4gICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG4gIH1cblxuICBzLmxfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fbHRyZWUsIHN0YXRpY19sX2Rlc2MpO1xuICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuICBzLmJsX2Rlc2MgPSBuZXcgVHJlZURlc2Mocy5ibF90cmVlLCBzdGF0aWNfYmxfZGVzYyk7XG5cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcblxuICAvKiBJbml0aWFsaXplIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgZmlyc3QgZmlsZTogKi9cbiAgaW5pdF9ibG9jayhzKTtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBzdG9yZWQgYmxvY2tcbiAqL1xuZnVuY3Rpb24gX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgc2VuZF9iaXRzKHMsIChTVE9SRURfQkxPQ0sgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7ICAgIC8qIHNlbmQgYmxvY2sgdHlwZSAqL1xuICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuICogVGhpcyB0YWtlcyAxMCBiaXRzLCBvZiB3aGljaCA3IG1heSByZW1haW4gaW4gdGhlIGJpdCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG4gIHNlbmRfYml0cyhzLCBTVEFUSUNfVFJFRVMgPDwgMSwgMyk7XG4gIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIHN0YXRpY19sdHJlZSk7XG4gIGJpX2ZsdXNoKHMpO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nIGZvciB0aGUgY3VycmVudCBibG9jazogZHluYW1pYyB0cmVlcywgc3RhdGljXG4gKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG4gKi9cbmZ1bmN0aW9uIF90cl9mbHVzaF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpXG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2ssIG9yIE5VTEwgaWYgdG9vIG9sZCAqL1xuLy91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cbi8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xue1xuICB2YXIgb3B0X2xlbmIsIHN0YXRpY19sZW5iOyAgLyogb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBpbiBieXRlcyAqL1xuICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG4gIC8qIEJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzIHVubGVzcyBhIHN0b3JlZCBibG9jayBpcyBmb3JjZWQgKi9cbiAgaWYgKHMubGV2ZWwgPiAwKSB7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuICAgIGlmIChzLnN0cm0uZGF0YV90eXBlID09PSBaX1VOS05PV04pIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdCk7XG5cbiAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG4gICAgc2VuZF9iaXRzKHMsIChTVEFUSUNfVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgY29tcHJlc3NfYmxvY2socywgc3RhdGljX2x0cmVlLCBzdGF0aWNfZHRyZWUpO1xuXG4gIH0gZWxzZSB7XG4gICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVMgPDwgMSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG4gICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUgKyAxLCBzLmRfZGVzYy5tYXhfY29kZSArIDEsIG1heF9ibGluZGV4ICsgMSk7XG4gICAgY29tcHJlc3NfYmxvY2socywgcy5keW5fbHRyZWUsIHMuZHluX2R0cmVlKTtcbiAgfVxuICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuICAvKiBUaGUgYWJvdmUgY2hlY2sgaXMgbWFkZSBtb2QgMl4zMiwgZm9yIGZpbGVzIGxhcmdlciB0aGFuIDUxMiBNQlxuICAgKiBhbmQgdUxvbmcgaW1wbGVtZW50ZWQgb24gMzIgYml0cy5cbiAgICovXG4gIGluaXRfYmxvY2socyk7XG5cbiAgaWYgKGxhc3QpIHtcbiAgICBiaV93aW5kdXAocyk7XG4gIH1cbiAgLy8gVHJhY2V2KChzdGRlcnIsXCJcXG5jb21wcmxlbiAlbHUoJWx1KSBcIiwgcy0+Y29tcHJlc3NlZF9sZW4+PjMsXG4gIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xufVxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuICogdGhlIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdW5zaWduZWQgZGlzdDsgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4vLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cbntcbiAgLy92YXIgb3V0X2xlbmd0aCwgaW5fbGVuZ3RoLCBkY29kZTtcblxuICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDIgKyAxXSA9IGRpc3QgJiAweGZmO1xuXG4gIHMucGVuZGluZ19idWZbcy5sX2J1ZiArIHMubGFzdF9saXRdID0gbGMgJiAweGZmO1xuICBzLmxhc3RfbGl0Kys7XG5cbiAgaWYgKGRpc3QgPT09IDApIHtcbiAgICAvKiBsYyBpcyB0aGUgdW5tYXRjaGVkIGNoYXIgKi9cbiAgICBzLmR5bl9sdHJlZVtsYyAqIDJdLyouRnJlcSovKys7XG4gIH0gZWxzZSB7XG4gICAgcy5tYXRjaGVzKys7XG4gICAgLyogSGVyZSwgbGMgaXMgdGhlIG1hdGNoIGxlbmd0aCAtIE1JTl9NQVRDSCAqL1xuICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuICAgIC8vQXNzZXJ0KCh1c2gpZGlzdCA8ICh1c2gpTUFYX0RJU1QocykgJiZcbiAgICAvLyAgICAgICAodXNoKWxjIDw9ICh1c2gpKE1BWF9NQVRDSC1NSU5fTUFUQ0gpICYmXG4gICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG4gICAgcy5keW5fbHRyZWVbKF9sZW5ndGhfY29kZVtsY10gKyBMSVRFUkFMUyArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59XG5cbmV4cG9ydHMuX3RyX2luaXQgID0gX3RyX2luaXQ7XG5leHBvcnRzLl90cl9zdG9yZWRfYmxvY2sgPSBfdHJfc3RvcmVkX2Jsb2NrO1xuZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuZXhwb3J0cy5fdHJfdGFsbHkgPSBfdHJfdGFsbHk7XG5leHBvcnRzLl90cl9hbGlnbiA9IF90cl9hbGlnbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8vIE5vdGU6IGFkbGVyMzIgdGFrZXMgMTIlIGZvciBsZXZlbCAwIGFuZCAyJSBmb3IgbGV2ZWwgNi5cbi8vIEl0IGlzbid0IHdvcnRoIGl0IHRvIG1ha2UgYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIGFzIGluIG9yaWdpbmFsLlxuLy8gU21hbGwgc2l6ZSBpcyBwcmVmZXJhYmxlLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MCxcbiAgICAgIHMyID0gKChhZGxlciA+Pj4gMTYpICYgMHhmZmZmKSB8MCxcbiAgICAgIG4gPSAwO1xuXG4gIHdoaWxlIChsZW4gIT09IDApIHtcbiAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuICAgIC8vIHMyIGluIDMxLWJpdHMsIGJlY2F1c2Ugd2UgZm9yY2Ugc2lnbmVkIGludHMuXG4gICAgLy8gaW4gb3RoZXIgY2FzZSAlPSB3aWxsIGZhaWwuXG4gICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuICAgIGxlbiAtPSBuO1xuXG4gICAgZG8ge1xuICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcbiAgICAgIHMyID0gKHMyICsgczEpIHwwO1xuICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICBzMSAlPSA2NTUyMTtcbiAgICBzMiAlPSA2NTUyMTtcbiAgfVxuXG4gIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vLyBOb3RlOiB3ZSBjYW4ndCBnZXQgc2lnbmlmaWNhbnQgc3BlZWQgYm9vc3QgaGVyZS5cbi8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcbi8vIGFuZCBhcnJheSB0b29scyBkZXBlbmRlbmNpZXMuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuLy8gVXNlIG9yZGluYXJ5IGFycmF5LCBzaW5jZSB1bnR5cGVkIG1ha2VzIG5vIGJvb3N0IGhlcmVcbmZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcbiAgdmFyIGMsIHRhYmxlID0gW107XG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhFREI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG5cbi8vIENyZWF0ZSB0YWJsZSBvbiBsb2FkLiBKdXN0IDI1NSBzaWduZWQgbG9uZ3MuIE5vdCBhIHByb2JsZW0uXG52YXIgY3JjVGFibGUgPSBtYWtlVGFibGUoKTtcblxuXG5mdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcbiAgdmFyIHQgPSBjcmNUYWJsZSxcbiAgICAgIGVuZCA9IHBvcyArIGxlbjtcblxuICBjcmMgXj0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IHBvczsgaSA8IGVuZDsgaSsrKSB7XG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0WyhjcmMgXiBidWZbaV0pICYgMHhGRl07XG4gIH1cblxuICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyYzMyO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMjogICAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG4gIDE6ICAgICAgJ3N0cmVhbSBlbmQnLCAgICAgICAgICAvKiBaX1NUUkVBTV9FTkQgICAgICAxICAqL1xuICAwOiAgICAgICcnLCAgICAgICAgICAgICAgICAgICAgLyogWl9PSyAgICAgICAgICAgICAgMCAgKi9cbiAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG4gICctMic6ICAgJ3N0cmVhbSBlcnJvcicsICAgICAgICAvKiBaX1NUUkVBTV9FUlJPUiAgKC0yKSAqL1xuICAnLTMnOiAgICdkYXRhIGVycm9yJywgICAgICAgICAgLyogWl9EQVRBX0VSUk9SICAgICgtMykgKi9cbiAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG4gICctNSc6ICAgJ2J1ZmZlciBlcnJvcicsICAgICAgICAvKiBaX0JVRl9FUlJPUiAgICAgKC01KSAqL1xuICAnLTYnOiAgICdpbmNvbXBhdGlibGUgdmVyc2lvbicgLyogWl9WRVJTSU9OX0VSUk9SICgtNikgKi9cbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG52YXIgdHJlZXMgICA9IHJlcXVpcmUoJy4vdHJlZXMnKTtcbnZhciBhZGxlcjMyID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7XG52YXIgY3JjMzIgICA9IHJlcXVpcmUoJy4vY3JjMzInKTtcbnZhciBtc2cgICAgID0gcmVxdWlyZSgnLi9tZXNzYWdlcycpO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG52YXIgWl9OT19GTFVTSCAgICAgID0gMDtcbnZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuLy92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcbnZhciBaX0ZVTExfRkxVU0ggICAgPSAzO1xudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG52YXIgWl9CTE9DSyAgICAgICAgID0gNTtcbi8vdmFyIFpfVFJFRVMgICAgICAgICA9IDY7XG5cblxuLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuICovXG52YXIgWl9PSyAgICAgICAgICAgID0gMDtcbnZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xuLy92YXIgWl9ORUVEX0RJQ1QgICAgID0gMjtcbi8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xudmFyIFpfU1RSRUFNX0VSUk9SICA9IC0yO1xudmFyIFpfREFUQV9FUlJPUiAgICA9IC0zO1xuLy92YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XG4vL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjtcblxuXG4vKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbi8vdmFyIFpfTk9fQ09NUFJFU1NJT04gICAgICA9IDA7XG4vL3ZhciBaX0JFU1RfU1BFRUQgICAgICAgICAgPSAxO1xuLy92YXIgWl9CRVNUX0NPTVBSRVNTSU9OICAgID0gOTtcbnZhciBaX0RFRkFVTFRfQ09NUFJFU1NJT04gPSAtMTtcblxuXG52YXIgWl9GSUxURVJFRCAgICAgICAgICAgID0gMTtcbnZhciBaX0hVRkZNQU5fT05MWSAgICAgICAgPSAyO1xudmFyIFpfUkxFICAgICAgICAgICAgICAgICA9IDM7XG52YXIgWl9GSVhFRCAgICAgICAgICAgICAgID0gNDtcbnZhciBaX0RFRkFVTFRfU1RSQVRFR1kgICAgPSAwO1xuXG4vKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG4vL3ZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xuLy92YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcbi8vdmFyIFpfQVNDSUkgICAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG52YXIgWl9VTktOT1dOICAgICAgICAgICAgID0gMjtcblxuXG4vKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbnZhciBaX0RFRkxBVEVEICA9IDg7XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxudmFyIE1BWF9NRU1fTEVWRUwgPSA5O1xuLyogTWF4aW11bSB2YWx1ZSBmb3IgbWVtTGV2ZWwgaW4gZGVmbGF0ZUluaXQyICovXG52YXIgTUFYX1dCSVRTID0gMTU7XG4vKiAzMksgTFo3NyB3aW5kb3cgKi9cbnZhciBERUZfTUVNX0xFVkVMID0gODtcblxuXG52YXIgTEVOR1RIX0NPREVTICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG52YXIgTElURVJBTFMgICAgICA9IDI1Njtcbi8qIG51bWJlciBvZiBsaXRlcmFsIGJ5dGVzIDAuLjI1NSAqL1xudmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cbnZhciBEX0NPREVTICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cbnZhciBCTF9DT0RFUyAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cbnZhciBIRUFQX1NJWkUgICAgID0gMiAqIExfQ09ERVMgKyAxO1xuLyogbWF4aW11bSBoZWFwIHNpemUgKi9cbnZhciBNQVhfQklUUyAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG52YXIgTUlOX01BVENIID0gMztcbnZhciBNQVhfTUFUQ0ggPSAyNTg7XG52YXIgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcblxudmFyIFBSRVNFVF9ESUNUID0gMHgyMDtcblxudmFyIElOSVRfU1RBVEUgPSA0MjtcbnZhciBFWFRSQV9TVEFURSA9IDY5O1xudmFyIE5BTUVfU1RBVEUgPSA3MztcbnZhciBDT01NRU5UX1NUQVRFID0gOTE7XG52YXIgSENSQ19TVEFURSA9IDEwMztcbnZhciBCVVNZX1NUQVRFID0gMTEzO1xudmFyIEZJTklTSF9TVEFURSA9IDY2NjtcblxudmFyIEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXG52YXIgQlNfQkxPQ0tfRE9ORSAgICAgPSAyOyAvKiBibG9jayBmbHVzaCBwZXJmb3JtZWQgKi9cbnZhciBCU19GSU5JU0hfU1RBUlRFRCA9IDM7IC8qIGZpbmlzaCBzdGFydGVkLCBuZWVkIG9ubHkgbW9yZSBvdXRwdXQgYXQgbmV4dCBkZWZsYXRlICovXG52YXIgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbnZhciBPU19DT0RFID0gMHgwMzsgLy8gVW5peCA6KSAuIERvbid0IGRldGVjdCwgdXNlIHRoaXMgZGVmYXVsdC5cblxuZnVuY3Rpb24gZXJyKHN0cm0sIGVycm9yQ29kZSkge1xuICBzdHJtLm1zZyA9IG1zZ1tlcnJvckNvZGVdO1xuICByZXR1cm4gZXJyb3JDb2RlO1xufVxuXG5mdW5jdGlvbiByYW5rKGYpIHtcbiAgcmV0dXJuICgoZikgPDwgMSkgLSAoKGYpID4gNCA/IDkgOiAwKTtcbn1cblxuZnVuY3Rpb24gemVybyhidWYpIHsgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdFxuICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cbiAqIChTZWUgYWxzbyByZWFkX2J1ZigpKS5cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcGVuZGluZyhzdHJtKSB7XG4gIHZhciBzID0gc3RybS5zdGF0ZTtcblxuICAvL190cl9mbHVzaF9iaXRzKHMpO1xuICB2YXIgbGVuID0gcy5wZW5kaW5nO1xuICBpZiAobGVuID4gc3RybS5hdmFpbF9vdXQpIHtcbiAgICBsZW4gPSBzdHJtLmF2YWlsX291dDtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7IHJldHVybjsgfVxuXG4gIHV0aWxzLmFycmF5U2V0KHN0cm0ub3V0cHV0LCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmdfb3V0LCBsZW4sIHN0cm0ubmV4dF9vdXQpO1xuICBzdHJtLm5leHRfb3V0ICs9IGxlbjtcbiAgcy5wZW5kaW5nX291dCArPSBsZW47XG4gIHN0cm0udG90YWxfb3V0ICs9IGxlbjtcbiAgc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xuICBzLnBlbmRpbmcgLT0gbGVuO1xuICBpZiAocy5wZW5kaW5nID09PSAwKSB7XG4gICAgcy5wZW5kaW5nX291dCA9IDA7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBmbHVzaF9ibG9ja19vbmx5KHMsIGxhc3QpIHtcbiAgdHJlZXMuX3RyX2ZsdXNoX2Jsb2NrKHMsIChzLmJsb2NrX3N0YXJ0ID49IDAgPyBzLmJsb2NrX3N0YXJ0IDogLTEpLCBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCwgbGFzdCk7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBmbHVzaF9wZW5kaW5nKHMuc3RybSk7XG59XG5cblxuZnVuY3Rpb24gcHV0X2J5dGUocywgYikge1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGI7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cbiAqIHBlbmRpbmdfYnVmLlxuICovXG5mdW5jdGlvbiBwdXRTaG9ydE1TQihzLCBiKSB7XG4vLyAgcHV0X2J5dGUocywgKEJ5dGUpKGIgPj4gOCkpO1xuLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiICYgMHhmZikpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IChiID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYiAmIDB4ZmY7XG59XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyXG4gKiBhbmQgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIHJlYWQuICBBbGwgZGVmbGF0ZSgpIGlucHV0IGdvZXMgdGhyb3VnaFxuICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcbiAqIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5pbnB1dCBidWZmZXIgYW5kIGNvcHlpbmcgZnJvbSBpdC5cbiAqIChTZWUgYWxzbyBmbHVzaF9wZW5kaW5nKCkpLlxuICovXG5mdW5jdGlvbiByZWFkX2J1ZihzdHJtLCBidWYsIHN0YXJ0LCBzaXplKSB7XG4gIHZhciBsZW4gPSBzdHJtLmF2YWlsX2luO1xuXG4gIGlmIChsZW4gPiBzaXplKSB7IGxlbiA9IHNpemU7IH1cbiAgaWYgKGxlbiA9PT0gMCkgeyByZXR1cm4gMDsgfVxuXG4gIHN0cm0uYXZhaWxfaW4gLT0gbGVuO1xuXG4gIC8vIHptZW1jcHkoYnVmLCBzdHJtLT5uZXh0X2luLCBsZW4pO1xuICB1dGlscy5hcnJheVNldChidWYsIHN0cm0uaW5wdXQsIHN0cm0ubmV4dF9pbiwgbGVuLCBzdGFydCk7XG4gIGlmIChzdHJtLnN0YXRlLndyYXAgPT09IDEpIHtcbiAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7XG4gICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gKz0gbGVuO1xuICBzdHJtLnRvdGFsX2luICs9IGxlbjtcblxuICByZXR1cm4gbGVuO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2V0IG1hdGNoX3N0YXJ0IHRvIHRoZSBsb25nZXN0IG1hdGNoIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBzdHJpbmcgYW5kXG4gKiByZXR1cm4gaXRzIGxlbmd0aC4gTWF0Y2hlcyBzaG9ydGVyIG9yIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFyZSBkaXNjYXJkZWQsXG4gKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzXG4gKiBnYXJiYWdlLlxuICogSU4gYXNzZXJ0aW9uczogY3VyX21hdGNoIGlzIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluIGZvciB0aGUgY3VycmVudFxuICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMVxuICogT1VUIGFzc2VydGlvbjogdGhlIG1hdGNoIGxlbmd0aCBpcyBub3QgZ3JlYXRlciB0aGFuIHMtPmxvb2thaGVhZC5cbiAqL1xuZnVuY3Rpb24gbG9uZ2VzdF9tYXRjaChzLCBjdXJfbWF0Y2gpIHtcbiAgdmFyIGNoYWluX2xlbmd0aCA9IHMubWF4X2NoYWluX2xlbmd0aDsgICAgICAvKiBtYXggaGFzaCBjaGFpbiBsZW5ndGggKi9cbiAgdmFyIHNjYW4gPSBzLnN0cnN0YXJ0OyAvKiBjdXJyZW50IHN0cmluZyAqL1xuICB2YXIgbWF0Y2g7ICAgICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaGVkIHN0cmluZyAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IG1hdGNoICovXG4gIHZhciBiZXN0X2xlbiA9IHMucHJldl9sZW5ndGg7ICAgICAgICAgICAgICAvKiBiZXN0IG1hdGNoIGxlbmd0aCBzbyBmYXIgKi9cbiAgdmFyIG5pY2VfbWF0Y2ggPSBzLm5pY2VfbWF0Y2g7ICAgICAgICAgICAgIC8qIHN0b3AgaWYgbWF0Y2ggbG9uZyBlbm91Z2ggKi9cbiAgdmFyIGxpbWl0ID0gKHMuc3Ryc3RhcnQgPiAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkgP1xuICAgICAgcy5zdHJzdGFydCAtIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIDogMC8qTklMKi87XG5cbiAgdmFyIF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcblxuICB2YXIgd21hc2sgPSBzLndfbWFzaztcbiAgdmFyIHByZXYgID0gcy5wcmV2O1xuXG4gIC8qIFN0b3Agd2hlbiBjdXJfbWF0Y2ggYmVjb21lcyA8PSBsaW1pdC4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsXG4gICAqIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmcgb2Ygd2luZG93IGluZGV4IDAuXG4gICAqL1xuXG4gIHZhciBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICB2YXIgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIHZhciBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuXG4gIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXG4gIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkge1xuICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcbiAgfVxuICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXMgbmVjZXNzYXJ5XG4gICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgaWYgKG5pY2VfbWF0Y2ggPiBzLmxvb2thaGVhZCkgeyBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7IH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcbiAgICAgICAgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fFxuICAgICAgICBfd2luW21hdGNoXSAgICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG4gICAgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXG4gICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0g7XG5cbiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHtcbiAgICAgIHMubWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7XG4gICAgICBiZXN0X2xlbiA9IGxlbjtcbiAgICAgIGlmIChsZW4gPj0gbmljZV9tYXRjaCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuICAgICAgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcbiAgICB9XG4gIH0gd2hpbGUgKChjdXJfbWF0Y2ggPSBwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XG5cbiAgaWYgKGJlc3RfbGVuIDw9IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIGJlc3RfbGVuO1xuICB9XG4gIHJldHVybiBzLmxvb2thaGVhZDtcbn1cblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZpbGwgdGhlIHdpbmRvdyB3aGVuIHRoZSBsb29rYWhlYWQgYmVjb21lcyBpbnN1ZmZpY2llbnQuXG4gKiBVcGRhdGVzIHN0cnN0YXJ0IGFuZCBsb29rYWhlYWQuXG4gKlxuICogSU4gYXNzZXJ0aW9uOiBsb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEXG4gKiBPVVQgYXNzZXJ0aW9uczogc3Ryc3RhcnQgPD0gd2luZG93X3NpemUtTUlOX0xPT0tBSEVBRFxuICogICAgQXQgbGVhc3Qgb25lIGJ5dGUgaGFzIGJlZW4gcmVhZCwgb3IgYXZhaWxfaW4gPT0gMDsgcmVhZHMgYXJlXG4gKiAgICBwZXJmb3JtZWQgZm9yIGF0IGxlYXN0IHR3byBieXRlcyAocmVxdWlyZWQgZm9yIHRoZSB6aXAgdHJhbnNsYXRlX2VvbFxuICogICAgb3B0aW9uIC0tIG5vdCBzdXBwb3J0ZWQgaGVyZSkuXG4gKi9cbmZ1bmN0aW9uIGZpbGxfd2luZG93KHMpIHtcbiAgdmFyIF93X3NpemUgPSBzLndfc2l6ZTtcbiAgdmFyIHAsIG4sIG0sIG1vcmUsIHN0cjtcblxuICAvL0Fzc2VydChzLT5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFELCBcImFscmVhZHkgZW5vdWdoIGxvb2thaGVhZFwiKTtcblxuICBkbyB7XG4gICAgbW9yZSA9IHMud2luZG93X3NpemUgLSBzLmxvb2thaGVhZCAtIHMuc3Ryc3RhcnQ7XG5cbiAgICAvLyBKUyBpbnRzIGhhdmUgMzIgYml0LCBibG9jayBiZWxvdyBub3QgbmVlZGVkXG4gICAgLyogRGVhbCB3aXRoICFAIyQlIDY0SyBsaW1pdDogKi9cbiAgICAvL2lmIChzaXplb2YoaW50KSA8PSAyKSB7XG4gICAgLy8gICAgaWYgKG1vcmUgPT0gMCAmJiBzLT5zdHJzdGFydCA9PSAwICYmIHMtPmxvb2thaGVhZCA9PSAwKSB7XG4gICAgLy8gICAgICAgIG1vcmUgPSB3c2l6ZTtcbiAgICAvL1xuICAgIC8vICB9IGVsc2UgaWYgKG1vcmUgPT0gKHVuc2lnbmVkKSgtMSkpIHtcbiAgICAvLyAgICAgICAgLyogVmVyeSB1bmxpa2VseSwgYnV0IHBvc3NpYmxlIG9uIDE2IGJpdCBtYWNoaW5lIGlmXG4gICAgLy8gICAgICAgICAqIHN0cnN0YXJ0ID09IDAgJiYgbG9va2FoZWFkID09IDEgKGlucHV0IGRvbmUgYSBieXRlIGF0IHRpbWUpXG4gICAgLy8gICAgICAgICAqL1xuICAgIC8vICAgICAgICBtb3JlLS07XG4gICAgLy8gICAgfVxuICAgIC8vfVxuXG5cbiAgICAvKiBJZiB0aGUgd2luZG93IGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnQgbG9va2FoZWFkLFxuICAgICAqIG1vdmUgdGhlIHVwcGVyIGhhbGYgdG8gdGhlIGxvd2VyIG9uZSB0byBtYWtlIHJvb20gaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICovXG4gICAgaWYgKHMuc3Ryc3RhcnQgPj0gX3dfc2l6ZSArIChfd19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcblxuICAgICAgdXRpbHMuYXJyYXlTZXQocy53aW5kb3csIHMud2luZG93LCBfd19zaXplLCBfd19zaXplLCAwKTtcbiAgICAgIHMubWF0Y2hfc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovXG4gICAgICBzLmJsb2NrX3N0YXJ0IC09IF93X3NpemU7XG5cbiAgICAgIC8qIFNsaWRlIHRoZSBoYXNoIHRhYmxlIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzIgYml0IHZhbHVlc1xuICAgICAgIGF0IHRoZSBleHBlbnNlIG9mIG1lbW9yeSB1c2FnZSkuIFdlIHNsaWRlIGV2ZW4gd2hlbiBsZXZlbCA9PSAwXG4gICAgICAgdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsID4gMFxuICAgICAgIGxhdGVyLiAoVXNpbmcgbGV2ZWwgMCBwZXJtYW5lbnRseSBpcyBub3QgYW4gb3B0aW1hbCB1c2FnZSBvZlxuICAgICAgIHpsaWIsIHNvIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhpcyBwYXRob2xvZ2ljYWwgY2FzZS4pXG4gICAgICAgKi9cblxuICAgICAgbiA9IHMuaGFzaF9zaXplO1xuICAgICAgcCA9IG47XG4gICAgICBkbyB7XG4gICAgICAgIG0gPSBzLmhlYWRbLS1wXTtcbiAgICAgICAgcy5oZWFkW3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG4gICAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgICBuID0gX3dfc2l6ZTtcbiAgICAgIHAgPSBuO1xuICAgICAgZG8ge1xuICAgICAgICBtID0gcy5wcmV2Wy0tcF07XG4gICAgICAgIHMucHJldltwXSA9IChtID49IF93X3NpemUgPyBtIC0gX3dfc2l6ZSA6IDApO1xuICAgICAgICAvKiBJZiBuIGlzIG5vdCBvbiBhbnkgaGFzaCBjaGFpbiwgcHJldltuXSBpcyBnYXJiYWdlIGJ1dFxuICAgICAgICAgKiBpdHMgdmFsdWUgd2lsbCBuZXZlciBiZSB1c2VkLlxuICAgICAgICAgKi9cbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG1vcmUgKz0gX3dfc2l6ZTtcbiAgICB9XG4gICAgaWYgKHMuc3RybS5hdmFpbF9pbiA9PT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogSWYgdGhlcmUgd2FzIG5vIHNsaWRpbmc6XG4gICAgICogICAgc3Ryc3RhcnQgPD0gV1NJWkUrTUFYX0RJU1QtMSAmJiBsb29rYWhlYWQgPD0gTUlOX0xPT0tBSEVBRCAtIDEgJiZcbiAgICAgKiAgICBtb3JlID09IHdpbmRvd19zaXplIC0gbG9va2FoZWFkIC0gc3Ryc3RhcnRcbiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gKE1JTl9MT09LQUhFQUQtMSArIFdTSVpFICsgTUFYX0RJU1QtMSlcbiAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gMipXU0laRSArIDJcbiAgICAgKiBJbiB0aGUgQklHX01FTSBvciBNTUFQIGNhc2UgKG5vdCB5ZXQgc3VwcG9ydGVkKSxcbiAgICAgKiAgIHdpbmRvd19zaXplID09IGlucHV0X3NpemUgKyBNSU5fTE9PS0FIRUFEICAmJlxuICAgICAqICAgc3Ryc3RhcnQgKyBzLT5sb29rYWhlYWQgPD0gaW5wdXRfc2l6ZSA9PiBtb3JlID49IE1JTl9MT09LQUhFQUQuXG4gICAgICogT3RoZXJ3aXNlLCB3aW5kb3dfc2l6ZSA9PSAyKldTSVpFIHNvIG1vcmUgPj0gMi5cbiAgICAgKiBJZiB0aGVyZSB3YXMgc2xpZGluZywgbW9yZSA+PSBXU0laRS4gU28gaW4gYWxsIGNhc2VzLCBtb3JlID49IDIuXG4gICAgICovXG4gICAgLy9Bc3NlcnQobW9yZSA+PSAyLCBcIm1vcmUgPCAyXCIpO1xuICAgIG4gPSByZWFkX2J1ZihzLnN0cm0sIHMud2luZG93LCBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQsIG1vcmUpO1xuICAgIHMubG9va2FoZWFkICs9IG47XG5cbiAgICAvKiBJbml0aWFsaXplIHRoZSBoYXNoIHZhbHVlIG5vdyB0aGF0IHdlIGhhdmUgc29tZSBpbnB1dDogKi9cbiAgICBpZiAocy5sb29rYWhlYWQgKyBzLmluc2VydCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIHN0ciA9IHMuc3Ryc3RhcnQgLSBzLmluc2VydDtcbiAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzdHJdO1xuXG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIDFdKTsgKi9cbiAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIDFdKSAmIHMuaGFzaF9tYXNrO1xuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICBDYWxsIHVwZGF0ZV9oYXNoKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgIHdoaWxlIChzLmluc2VydCkge1xuICAgICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG4gICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgICAgc3RyKys7XG4gICAgICAgIHMuaW5zZXJ0LS07XG4gICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpcyBnYXJiYWdlLFxuICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC5cbiAgICAgKi9cblxuICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcblxuICAvKiBJZiB0aGUgV0lOX0lOSVQgYnl0ZXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBkYXRhIGhhdmUgbmV2ZXIgYmVlblxuICAgKiB3cml0dGVuLCB0aGVuIHplcm8gdGhvc2UgYnl0ZXMgaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHJlcG9ydHMgb2ZcbiAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5XG4gICAqIHRoZSBsb25nZXN0IG1hdGNoIHJvdXRpbmVzLiAgVXBkYXRlIHRoZSBoaWdoIHdhdGVyIG1hcmsgZm9yIHRoZSBuZXh0XG4gICAqIHRpbWUgdGhyb3VnaCBoZXJlLiAgV0lOX0lOSVQgaXMgc2V0IHRvIE1BWF9NQVRDSCBzaW5jZSB0aGUgbG9uZ2VzdCBtYXRjaFxuICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLlxuICAgKi9cbi8vICBpZiAocy5oaWdoX3dhdGVyIDwgcy53aW5kb3dfc2l6ZSkge1xuLy8gICAgdmFyIGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG4vLyAgICB2YXIgaW5pdCA9IDA7XG4vL1xuLy8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcbi8vICAgICAgLyogUHJldmlvdXMgaGlnaCB3YXRlciBtYXJrIGJlbG93IGN1cnJlbnQgZGF0YSAtLSB6ZXJvIFdJTl9JTklUXG4vLyAgICAgICAqIGJ5dGVzIG9yIHVwIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9IHMud2luZG93X3NpemUgLSBjdXJyO1xuLy8gICAgICBpZiAoaW5pdCA+IFdJTl9JTklUKVxuLy8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgY3VyciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyID0gY3VyciArIGluaXQ7XG4vLyAgICB9XG4vLyAgICBlbHNlIGlmIChzLT5oaWdoX3dhdGVyIDwgKHVsZyljdXJyICsgV0lOX0lOSVQpIHtcbi8vICAgICAgLyogSGlnaCB3YXRlciBtYXJrIGF0IG9yIGFib3ZlIGN1cnJlbnQgZGF0YSwgYnV0IGJlbG93IGN1cnJlbnQgZGF0YVxuLy8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuLy8gICAgICAgKiB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cbi8vICAgICAgICovXG4vLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIGlmIChpbml0ID4gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyKVxuLy8gICAgICAgIGluaXQgPSBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXI7XG4vLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcbi8vICAgICAgcy0+aGlnaF93YXRlciArPSBpbml0O1xuLy8gICAgfVxuLy8gIH1cbi8vXG4vLyAgQXNzZXJ0KCh1bGcpcy0+c3Ryc3RhcnQgPD0gcy0+d2luZG93X3NpemUgLSBNSU5fTE9PS0FIRUFELFxuLy8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZVxuICogdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcbiAqIG9ubHkgZm9yIHRoZSBsZXZlbD0wIGNvbXByZXNzaW9uIG9wdGlvbi5cbiAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb21cbiAqIHdpbmRvdyB0byBwZW5kaW5nX2J1Zi5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9zdG9yZWQocywgZmx1c2gpIHtcbiAgLyogU3RvcmVkIGJsb2NrcyBhcmUgbGltaXRlZCB0byAweGZmZmYgYnl0ZXMsIHBlbmRpbmdfYnVmIGlzIGxpbWl0ZWRcbiAgICogdG8gcGVuZGluZ19idWZfc2l6ZSwgYW5kIGVhY2ggc3RvcmVkIGJsb2NrIGhhcyBhIDUgYnl0ZSBoZWFkZXI6XG4gICAqL1xuICB2YXIgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cbiAgaWYgKG1heF9ibG9ja19zaXplID4gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNSkge1xuICAgIG1heF9ibG9ja19zaXplID0gcy5wZW5kaW5nX2J1Zl9zaXplIC0gNTtcbiAgfVxuXG4gIC8qIENvcHkgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIGlucHV0IHRvIG91dHB1dDogKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSAxKSB7XG5cbiAgICAgIC8vQXNzZXJ0KHMtPnN0cnN0YXJ0IDwgcy0+d19zaXplK01BWF9ESVNUKHMpIHx8XG4gICAgICAvLyAgcy0+YmxvY2tfc3RhcnQgPj0gKGxvbmcpcy0+d19zaXplLCBcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICBpZiAoIShzLnN0cnN0YXJ0IDwgcy53X3NpemUgKyAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSB8fFxuLy8gICAgICAgIHMuYmxvY2tfc3RhcnQgPj0gcy53X3NpemUpKSB7XG4vLyAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcInNsaWRlIHRvbyBsYXRlXCIpO1xuLy8gICAgICB9XG5cbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuICAgIC8vQXNzZXJ0KHMtPmJsb2NrX3N0YXJ0ID49IDBMLCBcImJsb2NrIGdvbmVcIik7XG4vLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcihcImJsb2NrIGdvbmVcIik7XG5cbiAgICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xuICAgIHMubG9va2FoZWFkID0gMDtcblxuICAgIC8qIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOiAqL1xuICAgIHZhciBtYXhfc3RhcnQgPSBzLmJsb2NrX3N0YXJ0ICsgbWF4X2Jsb2NrX3NpemU7XG5cbiAgICBpZiAocy5zdHJzdGFydCA9PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkge1xuICAgICAgLyogc3Ryc3RhcnQgPT0gMCBpcyBwb3NzaWJsZSB3aGVuIHdyYXBhcm91bmQgb24gMTYtYml0IG1hY2hpbmUgKi9cbiAgICAgIHMubG9va2FoZWFkID0gcy5zdHJzdGFydCAtIG1heF9zdGFydDtcbiAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuXG5cbiAgICB9XG4gICAgLyogRmx1c2ggaWYgd2UgbWF5IGhhdmUgdG8gc2xpZGUsIG90aGVyd2lzZSBibG9ja19zdGFydCBtYXkgYmVjb21lXG4gICAgICogbmVnYXRpdmUgYW5kIHRoZSBkYXRhIHdpbGwgYmUgZ29uZTpcbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQgPj0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG5cbiAgcy5pbnNlcnQgPSAwO1xuXG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuXG4gIGlmIChzLnN0cnN0YXJ0ID4gcy5ibG9ja19zdGFydCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19ORUVEX01PUkU7XG59XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuICogYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVzc2lvbiBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX2Zhc3QocywgZmx1c2gpIHtcbiAgdmFyIGhhc2hfaGVhZDsgICAgICAgIC8qIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW4gKi9cbiAgdmFyIGJmbHVzaDsgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbmV4dCBtYXRjaCwgcGx1cyBNSU5fTUFUQ0ggYnl0ZXMgdG8gaW5zZXJ0IHRoZVxuICAgICAqIHN0cmluZyBmb2xsb3dpbmcgdGhlIG5leHQgbWF0Y2guXG4gICAgICovXG4gICAgaWYgKHMubG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG4gICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAvKioqL1xuICAgIH1cblxuICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG4gICAgICogQXQgdGhpcyBwb2ludCB3ZSBoYXZlIGFsd2F5cyBtYXRjaF9sZW5ndGggPCBNSU5fTUFUQ0hcbiAgICAgKi9cbiAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiAoKHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQpIDw9IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSkge1xuICAgICAgLyogVG8gc2ltcGxpZnkgdGhlIGNvZGUsIHdlIHByZXZlbnQgbWF0Y2hlcyB3aXRoIHRoZSBzdHJpbmdcbiAgICAgICAqIG9mIHdpbmRvdyBpbmRleCAwIChpbiBwYXJ0aWN1bGFyIHdlIGhhdmUgdG8gYXZvaWQgYSBtYXRjaFxuICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IGxvbmdlc3RfbWF0Y2gocywgaGFzaF9oZWFkKTtcbiAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG4gICAgfVxuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vIGNoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoKTsgLy8gZm9yIGRlYnVnIG9ubHlcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG5cbiAgICAgIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGhcbiAgICAgICAqIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA8PSBzLm1heF9sYXp5X21hdGNoLyptYXhfaW5zZXJ0X2xlbmd0aCovICYmIHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqL1xuICAgICAgICBkbyB7XG4gICAgICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZVxuICAgICAge1xuICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzLnN0cnN0YXJ0XTtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSkgJiBzLmhhc2hfbWFzaztcblxuLy8jaWYgTUlOX01BVENIICE9IDNcbi8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgICAvKiBJZiBsb29rYWhlYWQgPCBNSU5fTUFUQ0gsIGluc19oIGlzIGdhcmJhZ2UsIGJ1dCBpdCBkb2VzIG5vdFxuICAgICAgICAgKiBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxuICAgICAgICAgKi9cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogTm8gbWF0Y2gsIG91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9ICgocy5zdHJzdGFydCA8IChNSU5fTUFUQ0ggLSAxKSkgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENIIC0gMSk7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTYW1lIGFzIGFib3ZlLCBidXQgYWNoaWV2ZXMgYmV0dGVyIGNvbXByZXNzaW9uLiBXZSB1c2UgYSBsYXp5XG4gKiBldmFsdWF0aW9uIGZvciBtYXRjaGVzOiBhIG1hdGNoIGlzIGZpbmFsbHkgYWRvcHRlZCBvbmx5IGlmIHRoZXJlIGlzXG4gKiBubyBiZXR0ZXIgbWF0Y2ggYXQgdGhlIG5leHQgd2luZG93IHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBkZWZsYXRlX3Nsb3cocywgZmx1c2gpIHtcbiAgdmFyIGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXG4gIHZhciBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICB2YXIgbWF4X2luc2VydDtcblxuICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqL1xuICAgIHMucHJldl9sZW5ndGggPSBzLm1hdGNoX2xlbmd0aDtcbiAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblxuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmIHMucHJldl9sZW5ndGggPCBzLm1heF9sYXp5X21hdGNoICYmXG4gICAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkvKk1BWF9ESVNUKHMpKi8pIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gNSAmJlxuICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xuXG4gICAgICAgIC8qIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2VcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cbiAgICAgICAgICovXG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcbiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxlIGJleW9uZCB0aGlzLiAqL1xuXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuICAgICAgLyoqKl90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG4gICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG4gICAgICAgKiB0aGUgaGFzaCB0YWJsZS5cbiAgICAgICAqL1xuICAgICAgcy5sb29rYWhlYWQgLT0gcy5wcmV2X2xlbmd0aCAtIDE7XG4gICAgICBzLnByZXZfbGVuZ3RoIC09IDI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKSAmIHMuaGFzaF9tYXNrO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoLS1zLnByZXZfbGVuZ3RoICE9PSAwKTtcbiAgICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqKi9cbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAgIC8qIElmIHRoZXJlIHdhcyBubyBtYXRjaCBhdCB0aGUgcHJldmlvdXMgcG9zaXRpb24sIG91dHB1dCBhXG4gICAgICAgKiBzaW5nbGUgbGl0ZXJhbC4gSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYnV0IHRoZSBjdXJyZW50IG1hdGNoXG4gICAgICAgKiBpcyBsb25nZXIsIHRydW5jYXRlIHRoZSBwcmV2aW91cyBtYXRjaCB0byBhIHNpbmdsZSBsaXRlcmFsLlxuICAgICAgICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0IC0gMV0pO1xuXG4gICAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAgIC8qKiogRkxVU0hfQkxPQ0tfT05MWShzLCAwKSAqKiovXG4gICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgICAvKioqL1xuICAgICAgfVxuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3JcbiAgICAgICAqIHRoZSBuZXh0IHN0ZXAgdG8gZGVjaWRlLlxuICAgICAgICovXG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAoZmx1c2ggIT0gWl9OT19GTFVTSCwgXCJubyBmbHVzaD9cIik7XG4gIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0LTFdKSk7XG4gICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgfVxuICBzLmluc2VydCA9IHMuc3Ryc3RhcnQgPCBNSU5fTUFUQ0ggLSAxID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDE7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfUkxFLCBzaW1wbHkgbG9vayBmb3IgcnVucyBvZiBieXRlcywgZ2VuZXJhdGUgbWF0Y2hlcyBvbmx5IG9mIGRpc3RhbmNlXG4gKiBvbmUuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLiAgKEl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQgaWYgdGhpcyBydW4gb2ZcbiAqIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIFpfUkxFLilcbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZV9ybGUocywgZmx1c2gpIHtcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cbiAgdmFyIHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICB2YXIgc2Nhbiwgc3RyZW5kOyAgICAgIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi9cblxuICB2YXIgX3dpbiA9IHMud2luZG93O1xuXG4gIGZvciAoOzspIHtcbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgaGF2ZSBlbm91Z2ggbG9va2FoZWFkLCBleGNlcHRcbiAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuICAgICAqIGZvciB0aGUgbG9uZ2VzdCBydW4sIHBsdXMgb25lIGZvciB0aGUgdW5yb2xsZWQgbG9vcC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPD0gTUFYX01BVENIKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0ggJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gpIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkgeyBicmVhazsgfSAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cblxuICAgIC8qIFNlZSBob3cgbWFueSB0aW1lcyB0aGUgcHJldmlvdXMgYnl0ZSByZXBlYXRzICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCA+IDApIHtcbiAgICAgIHNjYW4gPSBzLnN0cnN0YXJ0IC0gMTtcbiAgICAgIHByZXYgPSBfd2luW3NjYW5dO1xuICAgICAgaWYgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dKSB7XG4gICAgICAgIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cbiAgICAgICAgfSB3aGlsZSAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBzY2FuIDwgc3RyZW5kKTtcbiAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNQVhfTUFUQ0ggLSAoc3RyZW5kIC0gc2Nhbik7XG4gICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+IHMubG9va2FoZWFkKSB7XG4gICAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBzLmxvb2thaGVhZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVJbnQpKHMtPndpbmRvd19zaXplLTEpLCBcIndpbGQgc2NhblwiKTtcbiAgICB9XG5cbiAgICAvKiBFbWl0IG1hdGNoIGlmIGhhdmUgcnVuIG9mIE1JTl9NQVRDSCBvciBsb25nZXIsIGVsc2UgZW1pdCBsaXRlcmFsICovXG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy9jaGVja19tYXRjaChzLCBzLnN0cnN0YXJ0LCBzLnN0cnN0YXJ0IC0gMSwgcy5tYXRjaF9sZW5ndGgpO1xuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMSwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcbiAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG4gICAgICBzLmxvb2thaGVhZC0tO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgIH1cbiAgICBpZiAoYmZsdXNoKSB7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuICAgIH1cbiAgfVxuICBzLmluc2VydCA9IDA7XG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGb3IgWl9IVUZGTUFOX09OTFksIGRvIG5vdCBsb29rIGZvciBtYXRjaGVzLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS5cbiAqIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mIGRlZmxhdGUgc3dpdGNoZXMgYXdheSBmcm9tIEh1ZmZtYW4uKVxuICovXG5mdW5jdGlvbiBkZWZsYXRlX2h1ZmYocywgZmx1c2gpIHtcbiAgdmFyIGJmbHVzaDsgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYSBsaXRlcmFsIHRvIHdyaXRlLiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG4gICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgICAgfVxuICAgICAgICBicmVhazsgICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE91dHB1dCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAvKioqIF90cl90YWxseV9saXQocywgcy53aW5kb3dbcy5zdHJzdGFydF0sIGJmbHVzaCk7ICoqKi9cbiAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuICAgIHMubG9va2FoZWFkLS07XG4gICAgcy5zdHJzdGFydCsrO1xuICAgIGlmIChiZmx1c2gpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG4gIHMuaW5zZXJ0ID0gMDtcbiAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG4gIGlmIChzLmxhc3RfbGl0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufVxuXG4vKiBWYWx1ZXMgZm9yIG1heF9sYXp5X21hdGNoLCBnb29kX21hdGNoIGFuZCBtYXhfY2hhaW5fbGVuZ3RoLCBkZXBlbmRpbmcgb25cbiAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0b1xuICogZXhjbHVkZSB3b3JzdCBjYXNlIHBlcmZvcm1hbmNlIGZvciBwYXRob2xvZ2ljYWwgZmlsZXMuIEJldHRlciB2YWx1ZXMgbWF5IGJlXG4gKiBmb3VuZCBmb3Igc3BlY2lmaWMgZmlsZXMuXG4gKi9cbmZ1bmN0aW9uIENvbmZpZyhnb29kX2xlbmd0aCwgbWF4X2xhenksIG5pY2VfbGVuZ3RoLCBtYXhfY2hhaW4sIGZ1bmMpIHtcbiAgdGhpcy5nb29kX2xlbmd0aCA9IGdvb2RfbGVuZ3RoO1xuICB0aGlzLm1heF9sYXp5ID0gbWF4X2xhenk7XG4gIHRoaXMubmljZV9sZW5ndGggPSBuaWNlX2xlbmd0aDtcbiAgdGhpcy5tYXhfY2hhaW4gPSBtYXhfY2hhaW47XG4gIHRoaXMuZnVuYyA9IGZ1bmM7XG59XG5cbnZhciBjb25maWd1cmF0aW9uX3RhYmxlO1xuXG5jb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmZ1bmN0aW9uIGxtX2luaXQocykge1xuICBzLndpbmRvd19zaXplID0gMiAqIHMud19zaXplO1xuXG4gIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cbiAgLyogU2V0IHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyczpcbiAgICovXG4gIHMubWF4X2xhenlfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9sYXp5O1xuICBzLmdvb2RfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmdvb2RfbGVuZ3RoO1xuICBzLm5pY2VfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm5pY2VfbGVuZ3RoO1xuICBzLm1heF9jaGFpbl9sZW5ndGggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLm1heF9jaGFpbjtcblxuICBzLnN0cnN0YXJ0ID0gMDtcbiAgcy5ibG9ja19zdGFydCA9IDA7XG4gIHMubG9va2FoZWFkID0gMDtcbiAgcy5pbnNlcnQgPSAwO1xuICBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHMuaW5zX2ggPSAwO1xufVxuXG5cbmZ1bmN0aW9uIERlZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7ICAgICAgICAgICAgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbDsgICAgICAvKiBvdXRwdXQgc3RpbGwgcGVuZGluZyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgICAgICAgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi9cbiAgdGhpcy5wZW5kaW5nID0gMDsgICAgICAgICAgIC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmd6aGVhZCA9IG51bGw7ICAgICAgICAgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgICAgICAgICAgIC8qIHdoZXJlIGluIGV4dHJhLCBuYW1lLCBvciBjb21tZW50ICovXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi9cbiAgdGhpcy5sYXN0X2ZsdXNoID0gLTE7ICAgLyogdmFsdWUgb2YgZmx1c2ggcGFyYW0gZm9yIHByZXZpb3VzIGRlZmxhdGUgY2FsbCAqL1xuXG4gIHRoaXMud19zaXplID0gMDsgIC8qIExaNzcgd2luZG93IHNpemUgKDMySyBieSBkZWZhdWx0KSAqL1xuICB0aGlzLndfYml0cyA9IDA7ICAvKiBsb2cyKHdfc2l6ZSkgICg4Li4xNikgKi9cbiAgdGhpcy53X21hc2sgPSAwOyAgLyogd19zaXplIC0gMSAqL1xuXG4gIHRoaXMud2luZG93ID0gbnVsbDtcbiAgLyogU2xpZGluZyB3aW5kb3cuIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW5kb3csXG4gICAqIGFuZCBtb3ZlIHRvIHRoZSBmaXJzdCBoYWxmIGxhdGVyIHRvIGtlZXAgYSBkaWN0aW9uYXJ5IG9mIGF0IGxlYXN0IHdTaXplXG4gICAqIGJ5dGVzLiBXaXRoIHRoaXMgb3JnYW5pemF0aW9uLCBtYXRjaGVzIGFyZSBsaW1pdGVkIHRvIGEgZGlzdGFuY2Ugb2ZcbiAgICogd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG4gICAqIHBlcmZvcm1lZCB3aXRoIGEgbGVuZ3RoIG11bHRpcGxlIG9mIHRoZSBibG9jayBzaXplLlxuICAgKi9cblxuICB0aGlzLndpbmRvd19zaXplID0gMDtcbiAgLyogQWN0dWFsIHNpemUgb2Ygd2luZG93OiAyKndTaXplLCBleGNlcHQgd2hlbiB0aGUgdXNlciBpbnB1dCBidWZmZXJcbiAgICogaXMgZGlyZWN0bHkgdXNlZCBhcyBzbGlkaW5nIHdpbmRvdy5cbiAgICovXG5cbiAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgLyogTGluayB0byBvbGRlciBzdHJpbmcgd2l0aCBzYW1lIGhhc2ggaW5kZXguIFRvIGxpbWl0IHRoZSBzaXplIG9mIHRoaXNcbiAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy5cbiAgICogQW4gaW5kZXggaW4gdGhpcyBhcnJheSBpcyB0aHVzIGEgd2luZG93IGluZGV4IG1vZHVsbyAzMksuXG4gICAqL1xuXG4gIHRoaXMuaGVhZCA9IG51bGw7ICAgLyogSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC4gKi9cblxuICB0aGlzLmluc19oID0gMDsgICAgICAgLyogaGFzaCBpbmRleCBvZiBzdHJpbmcgdG8gYmUgaW5zZXJ0ZWQgKi9cbiAgdGhpcy5oYXNoX3NpemUgPSAwOyAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiBoYXNoIHRhYmxlICovXG4gIHRoaXMuaGFzaF9iaXRzID0gMDsgICAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cbiAgdGhpcy5oYXNoX21hc2sgPSAwOyAgIC8qIGhhc2hfc2l6ZS0xICovXG5cbiAgdGhpcy5oYXNoX3NoaWZ0ID0gMDtcbiAgLyogTnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggaW5zX2ggbXVzdCBiZSBzaGlmdGVkIGF0IGVhY2ggaW5wdXRcbiAgICogc3RlcC4gSXQgbXVzdCBiZSBzdWNoIHRoYXQgYWZ0ZXIgTUlOX01BVENIIHN0ZXBzLCB0aGUgb2xkZXN0XG4gICAqIGJ5dGUgbm8gbG9uZ2VyIHRha2VzIHBhcnQgaW4gdGhlIGhhc2gga2V5LCB0aGF0IGlzOlxuICAgKiAgIGhhc2hfc2hpZnQgKiBNSU5fTUFUQ0ggPj0gaGFzaF9iaXRzXG4gICAqL1xuXG4gIHRoaXMuYmxvY2tfc3RhcnQgPSAwO1xuICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHNcbiAgICogbmVnYXRpdmUgd2hlbiB0aGUgd2luZG93IGlzIG1vdmVkIGJhY2t3YXJkcy5cbiAgICovXG5cbiAgdGhpcy5tYXRjaF9sZW5ndGggPSAwOyAgICAgIC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovXG4gIHRoaXMucHJldl9tYXRjaCA9IDA7ICAgICAgICAvKiBwcmV2aW91cyBtYXRjaCAqL1xuICB0aGlzLm1hdGNoX2F2YWlsYWJsZSA9IDA7ICAgLyogc2V0IGlmIHByZXZpb3VzIG1hdGNoIGV4aXN0cyAqL1xuICB0aGlzLnN0cnN0YXJ0ID0gMDsgICAgICAgICAgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqL1xuICB0aGlzLm1hdGNoX3N0YXJ0ID0gMDsgICAgICAgLyogc3RhcnQgb2YgbWF0Y2hpbmcgc3RyaW5nICovXG4gIHRoaXMubG9va2FoZWFkID0gMDsgICAgICAgICAvKiBudW1iZXIgb2YgdmFsaWQgYnl0ZXMgYWhlYWQgaW4gd2luZG93ICovXG5cbiAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7XG4gIC8qIExlbmd0aCBvZiB0aGUgYmVzdCBtYXRjaCBhdCBwcmV2aW91cyBzdGVwLiBNYXRjaGVzIG5vdCBncmVhdGVyIHRoYW4gdGhpc1xuICAgKiBhcmUgZGlzY2FyZGVkLiBUaGlzIGlzIHVzZWQgaW4gdGhlIGxhenkgbWF0Y2ggZXZhbHVhdGlvbi5cbiAgICovXG5cbiAgdGhpcy5tYXhfY2hhaW5fbGVuZ3RoID0gMDtcbiAgLyogVG8gc3BlZWQgdXAgZGVmbGF0aW9uLCBoYXNoIGNoYWlucyBhcmUgbmV2ZXIgc2VhcmNoZWQgYmV5b25kIHRoaXNcbiAgICogbGVuZ3RoLiAgQSBoaWdoZXIgbGltaXQgaW1wcm92ZXMgY29tcHJlc3Npb24gcmF0aW8gYnV0IGRlZ3JhZGVzIHRoZVxuICAgKiBzcGVlZC5cbiAgICovXG5cbiAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XG4gIC8qIEF0dGVtcHQgdG8gZmluZCBhIGJldHRlciBtYXRjaCBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgbWF0Y2ggaXMgc3RyaWN0bHlcbiAgICogc21hbGxlciB0aGFuIHRoaXMgdmFsdWUuIFRoaXMgbWVjaGFuaXNtIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb25cbiAgICogbGV2ZWxzID49IDQuXG4gICAqL1xuICAvLyBUaGF0J3MgYWxpYXMgdG8gbWF4X2xhenlfbWF0Y2gsIGRvbid0IHVzZSBkaXJlY3RseVxuICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xuICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdFxuICAgKiBncmVhdGVyIHRoYW4gdGhpcyBsZW5ndGguIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG4gICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG4gICAqL1xuXG4gIHRoaXMubGV2ZWwgPSAwOyAgICAgLyogY29tcHJlc3Npb24gbGV2ZWwgKDEuLjkpICovXG4gIHRoaXMuc3RyYXRlZ3kgPSAwOyAgLyogZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmcqL1xuXG4gIHRoaXMuZ29vZF9tYXRjaCA9IDA7XG4gIC8qIFVzZSBhIGZhc3RlciBzZWFyY2ggd2hlbiB0aGUgcHJldmlvdXMgbWF0Y2ggaXMgbG9uZ2VyIHRoYW4gdGhpcyAqL1xuXG4gIHRoaXMubmljZV9tYXRjaCA9IDA7IC8qIFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi9cblxuICAgICAgICAgICAgICAvKiB1c2VkIGJ5IHRyZWVzLmM6ICovXG5cbiAgLyogRGlkbid0IHVzZSBjdF9kYXRhIHR5cGVkZWYgYmVsb3cgdG8gc3VwcHJlc3MgY29tcGlsZXIgd2FybmluZyAqL1xuXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2x0cmVlW0hFQVBfU0laRV07ICAgLyogbGl0ZXJhbCBhbmQgbGVuZ3RoIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fZHRyZWVbMipEX0NPREVTKzFdOyAvKiBkaXN0YW5jZSB0cmVlICovXG4gIC8vIHN0cnVjdCBjdF9kYXRhX3MgYmxfdHJlZVsyKkJMX0NPREVTKzFdOyAgLyogSHVmZm1hbiB0cmVlIGZvciBiaXQgbGVuZ3RocyAqL1xuXG4gIC8vIFVzZSBmbGF0IGFycmF5IG9mIERPVUJMRSBzaXplLCB3aXRoIGludGVybGVhdmVkIGZhdGEsXG4gIC8vIGJlY2F1c2UgSlMgZG9lcyBub3Qgc3VwcG9ydCBlZmZlY3RpdmVcbiAgdGhpcy5keW5fbHRyZWUgID0gbmV3IHV0aWxzLkJ1ZjE2KEhFQVBfU0laRSAqIDIpO1xuICB0aGlzLmR5bl9kdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoKDIgKiBEX0NPREVTICsgMSkgKiAyKTtcbiAgdGhpcy5ibF90cmVlICAgID0gbmV3IHV0aWxzLkJ1ZjE2KCgyICogQkxfQ09ERVMgKyAxKSAqIDIpO1xuICB6ZXJvKHRoaXMuZHluX2x0cmVlKTtcbiAgemVybyh0aGlzLmR5bl9kdHJlZSk7XG4gIHplcm8odGhpcy5ibF90cmVlKTtcblxuICB0aGlzLmxfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgbGl0ZXJhbCB0cmVlICovXG4gIHRoaXMuZF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBkaXN0YW5jZSB0cmVlICovXG4gIHRoaXMuYmxfZGVzYyAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cblxuICAvL3VzaCBibF9jb3VudFtNQVhfQklUUysxXTtcbiAgdGhpcy5ibF9jb3VudCA9IG5ldyB1dGlscy5CdWYxNihNQVhfQklUUyArIDEpO1xuICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgdGhpcy5oZWFwID0gbmV3IHV0aWxzLkJ1ZjE2KDIgKiBMX0NPREVTICsgMSk7ICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cbiAgemVybyh0aGlzLmhlYXApO1xuXG4gIHRoaXMuaGVhcF9sZW4gPSAwOyAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgaGVhcCAqL1xuICB0aGlzLmhlYXBfbWF4ID0gMDsgICAgICAgICAgICAgICAvKiBlbGVtZW50IG9mIGxhcmdlc3QgZnJlcXVlbmN5ICovXG4gIC8qIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqIFRoZSBzYW1lIGhlYXAgYXJyYXkgaXMgdXNlZCB0byBidWlsZCBhbGwgdHJlZXMuXG4gICAqL1xuXG4gIHRoaXMuZGVwdGggPSBuZXcgdXRpbHMuQnVmMTYoMiAqIExfQ09ERVMgKyAxKTsgLy91Y2ggZGVwdGhbMipMX0NPREVTKzFdO1xuICB6ZXJvKHRoaXMuZGVwdGgpO1xuICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG4gICAqL1xuXG4gIHRoaXMubF9idWYgPSAwOyAgICAgICAgICAvKiBidWZmZXIgaW5kZXggZm9yIGxpdGVyYWxzIG9yIGxlbmd0aHMgKi9cblxuICB0aGlzLmxpdF9idWZzaXplID0gMDtcbiAgLyogU2l6ZSBvZiBtYXRjaCBidWZmZXIgZm9yIGxpdGVyYWxzL2xlbmd0aHMuICBUaGVyZSBhcmUgNCByZWFzb25zIGZvclxuICAgKiBsaW1pdGluZyBsaXRfYnVmc2l6ZSB0byA2NEs6XG4gICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnNcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZmlyc3QgYmxvY2ssIGFsbCBpbnB1dFxuICAgKiAgICAgZGF0YSBpcyBzdGlsbCBpbiB0aGUgd2luZG93IHNvIHdlIGNhbiBzdGlsbCBlbWl0IGEgc3RvcmVkIGJsb2NrIGV2ZW5cbiAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yXG4gICAqICAgICBhbGwgYmxvY2tzIGlmIGxpdF9idWZzaXplIGlzIG5vdCBncmVhdGVyIHRoYW4gMzJLLilcbiAgICogICAtIGlmIGNvbXByZXNzaW9uIGlzIG5vdCBzdWNjZXNzZnVsIGZvciBhIGZpbGUgc21hbGxlciB0aGFuIDY0Sywgd2UgY2FuXG4gICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuXG4gICAqICAgICBUaGlzIGlzIGFwcGxpY2FibGUgb25seSBmb3IgemlwIChub3QgZ3ppcCBvciB6bGliKS5cbiAgICogICAtIGNyZWF0aW5nIG5ldyBIdWZmbWFuIHRyZWVzIGxlc3MgZnJlcXVlbnRseSBtYXkgbm90IHByb3ZpZGUgZmFzdFxuICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvclxuICAgKiAgICAgZXhhbXBsZSBhIGJpbmFyeSBmaWxlIHdpdGggcG9vcmx5IGNvbXByZXNzaWJsZSBjb2RlIGZvbGxvd2VkIGJ5XG4gICAqICAgICBhIGhpZ2hseSBjb21wcmVzc2libGUgc3RyaW5nIHRhYmxlLikgU21hbGxlciBidWZmZXIgc2l6ZXMgZ2l2ZVxuICAgKiAgICAgZmFzdCBhZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nXG4gICAqICAgICB0cmVlcyBtb3JlIGZyZXF1ZW50bHkuXG4gICAqICAgLSBJIGNhbid0IGNvdW50IGFib3ZlIDRcbiAgICovXG5cbiAgdGhpcy5sYXN0X2xpdCA9IDA7ICAgICAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqL1xuXG4gIHRoaXMuZF9idWYgPSAwO1xuICAvKiBCdWZmZXIgaW5kZXggZm9yIGRpc3RhbmNlcy4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIGRfYnVmIGFuZCBsX2J1ZiBoYXZlXG4gICAqIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy4gVG8gdXNlIGRpZmZlcmVudCBsZW5ndGhzLCBhbiBleHRyYSBmbGFnXG4gICAqIGFycmF5IHdvdWxkIGJlIG5lY2Vzc2FyeS5cbiAgICovXG5cbiAgdGhpcy5vcHRfbGVuID0gMDsgICAgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggb3B0aW1hbCB0cmVlcyAqL1xuICB0aGlzLnN0YXRpY19sZW4gPSAwOyAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBzdGF0aWMgdHJlZXMgKi9cbiAgdGhpcy5tYXRjaGVzID0gMDsgICAgICAgLyogbnVtYmVyIG9mIHN0cmluZyBtYXRjaGVzIGluIGN1cnJlbnQgYmxvY2sgKi9cbiAgdGhpcy5pbnNlcnQgPSAwOyAgICAgICAgLyogYnl0ZXMgYXQgZW5kIG9mIHdpbmRvdyBsZWZ0IHRvIGluc2VydCAqL1xuXG5cbiAgdGhpcy5iaV9idWYgPSAwO1xuICAvKiBPdXRwdXQgYnVmZmVyLiBiaXRzIGFyZSBpbnNlcnRlZCBzdGFydGluZyBhdCB0aGUgYm90dG9tIChsZWFzdFxuICAgKiBzaWduaWZpY2FudCBiaXRzKS5cbiAgICovXG4gIHRoaXMuYmlfdmFsaWQgPSAwO1xuICAvKiBOdW1iZXIgb2YgdmFsaWQgYml0cyBpbiBiaV9idWYuICBBbGwgYml0cyBhYm92ZSB0aGUgbGFzdCB2YWxpZCBiaXRcbiAgICogYXJlIGFsd2F5cyB6ZXJvLlxuICAgKi9cblxuICAvLyBVc2VkIGZvciB3aW5kb3cgbWVtb3J5IGluaXQuIFdlIHNhZmVseSBpZ25vcmUgaXQgZm9yIEpTLiBUaGF0IG1ha2VzXG4gIC8vIHNlbnNlIG9ubHkgZm9yIHBvaW50ZXJzIGFuZCBtZW1vcnkgY2hlY2sgdG9vbHMuXG4gIC8vdGhpcy5oaWdoX3dhdGVyID0gMDtcbiAgLyogSGlnaCB3YXRlciBtYXJrIG9mZnNldCBpbiB3aW5kb3cgZm9yIGluaXRpYWxpemVkIGJ5dGVzIC0tIGJ5dGVzIGFib3ZlXG4gICAqIHRoaXMgYXJlIHNldCB0byB6ZXJvIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayB3YXJuaW5ncyB3aGVuXG4gICAqIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMgYWNjZXNzIGJ5dGVzIHBhc3QgdGhlIGlucHV0LiAgVGhpcyBpcyB0aGVuXG4gICAqIHVwZGF0ZWQgdG8gdGhlIG5ldyBoaWdoIHdhdGVyIG1hcmsuXG4gICAqL1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVSZXNldEtlZXAoc3RybSkge1xuICB2YXIgcztcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG4gIHN0cm0uZGF0YV90eXBlID0gWl9VTktOT1dOO1xuXG4gIHMgPSBzdHJtLnN0YXRlO1xuICBzLnBlbmRpbmcgPSAwO1xuICBzLnBlbmRpbmdfb3V0ID0gMDtcblxuICBpZiAocy53cmFwIDwgMCkge1xuICAgIHMud3JhcCA9IC1zLndyYXA7XG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cbiAgfVxuICBzLnN0YXR1cyA9IChzLndyYXAgPyBJTklUX1NUQVRFIDogQlVTWV9TVEFURSk7XG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XG4gICAgMCAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICA6XG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXG4gIHMubGFzdF9mbHVzaCA9IFpfTk9fRkxVU0g7XG4gIHRyZWVzLl90cl9pbml0KHMpO1xuICByZXR1cm4gWl9PSztcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlUmVzZXQoc3RybSkge1xuICB2YXIgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSykge1xuICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlU2V0SGVhZGVyKHN0cm0sIGhlYWQpIHtcbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBpZiAoc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdHJtLnN0YXRlLmd6aGVhZCA9IGhlYWQ7XG4gIHJldHVybiBaX09LO1xufVxuXG5cbmZ1bmN0aW9uIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgbWV0aG9kLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3kpIHtcbiAgaWYgKCFzdHJtKSB7IC8vID09PSBaX05VTExcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgdmFyIHdyYXAgPSAxO1xuXG4gIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XG4gICAgbGV2ZWwgPSA2O1xuICB9XG5cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKHdpbmRvd0JpdHMgPiAxNSkge1xuICAgIHdyYXAgPSAyOyAgICAgICAgICAgLyogd3JpdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgKi9cbiAgICB3aW5kb3dCaXRzIC09IDE2O1xuICB9XG5cblxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQgfHxcbiAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuICAgIHN0cmF0ZWd5IDwgMCB8fCBzdHJhdGVneSA+IFpfRklYRUQpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG5cbiAgaWYgKHdpbmRvd0JpdHMgPT09IDgpIHtcbiAgICB3aW5kb3dCaXRzID0gOTtcbiAgfVxuICAvKiB1bnRpbCAyNTYtYnl0ZSB3aW5kb3cgYnVnIGZpeGVkICovXG5cbiAgdmFyIHMgPSBuZXcgRGVmbGF0ZVN0YXRlKCk7XG5cbiAgc3RybS5zdGF0ZSA9IHM7XG4gIHMuc3RybSA9IHN0cm07XG5cbiAgcy53cmFwID0gd3JhcDtcbiAgcy5nemhlYWQgPSBudWxsO1xuICBzLndfYml0cyA9IHdpbmRvd0JpdHM7XG4gIHMud19zaXplID0gMSA8PCBzLndfYml0cztcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cbiAgcy5oYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcbiAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG4gIHMuaGFzaF9zaGlmdCA9IH5+KChzLmhhc2hfYml0cyArIE1JTl9NQVRDSCAtIDEpIC8gTUlOX01BVENIKTtcblxuICBzLndpbmRvdyA9IG5ldyB1dGlscy5CdWY4KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyB1dGlscy5CdWYxNihzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyB1dGlscy5CdWYxNihzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG5cbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcbiAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgdXRpbHMuQnVmOChzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPmRfYnVmID0gb3ZlcmxheSArIHMtPmxpdF9idWZzaXplL3NpemVvZih1c2gpO1xuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplO1xuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59XG5cbmZ1bmN0aW9uIGRlZmxhdGVJbml0KHN0cm0sIGxldmVsKSB7XG4gIHJldHVybiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIFpfREVGTEFURUQsIE1BWF9XQklUUywgREVGX01FTV9MRVZFTCwgWl9ERUZBVUxUX1NUUkFURUdZKTtcbn1cblxuXG5mdW5jdGlvbiBkZWZsYXRlKHN0cm0sIGZsdXNoKSB7XG4gIHZhciBvbGRfZmx1c2gsIHM7XG4gIHZhciBiZWcsIHZhbDsgLy8gZm9yIGd6aXAgaGVhZGVyIHdyaXRlIG9ubHlcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHxcbiAgICBmbHVzaCA+IFpfQkxPQ0sgfHwgZmx1c2ggPCAwKSB7XG4gICAgcmV0dXJuIHN0cm0gPyBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpIDogWl9TVFJFQU1fRVJST1I7XG4gIH1cblxuICBzID0gc3RybS5zdGF0ZTtcblxuICBpZiAoIXN0cm0ub3V0cHV0IHx8XG4gICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgfHxcbiAgICAgIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIGZsdXNoICE9PSBaX0ZJTklTSCkpIHtcbiAgICByZXR1cm4gZXJyKHN0cm0sIChzdHJtLmF2YWlsX291dCA9PT0gMCkgPyBaX0JVRl9FUlJPUiA6IFpfU1RSRUFNX0VSUk9SKTtcbiAgfVxuXG4gIHMuc3RybSA9IHN0cm07IC8qIGp1c3QgaW4gY2FzZSAqL1xuICBvbGRfZmx1c2ggPSBzLmxhc3RfZmx1c2g7XG4gIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xuXG4gIC8qIFdyaXRlIHRoZSBoZWFkZXIgKi9cbiAgaWYgKHMuc3RhdHVzID09PSBJTklUX1NUQVRFKSB7XG5cbiAgICBpZiAocy53cmFwID09PSAyKSB7IC8vIEdaSVAgaGVhZGVyXG4gICAgICBzdHJtLmFkbGVyID0gMDsgIC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICBwdXRfYnl0ZShzLCAzMSk7XG4gICAgICBwdXRfYnl0ZShzLCAxMzkpO1xuICAgICAgcHV0X2J5dGUocywgOCk7XG4gICAgICBpZiAoIXMuZ3poZWFkKSB7IC8vIHMtPmd6aGVhZCA9PSBaX05VTExcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIE9TX0NPREUpO1xuICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAocy5nemhlYWQuaGNyYyA/IDIgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuZXh0cmEgPyAwIDogNCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmNvbW1lbnQgPyAwIDogMTYpXG4gICAgICAgICk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLnRpbWUgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMTYpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCBzLmxldmVsID09PSA5ID8gMiA6XG4gICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cbiAgICAgICAgICAgICAgICAgICAgIDQgOiAwKSk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLm9zICYgMHhmZik7XG4gICAgICAgIGlmIChzLmd6aGVhZC5leHRyYSAmJiBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmKTtcbiAgICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDgpICYgMHhmZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMpIHtcbiAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IEVYVFJBX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIC8vIERFRkxBVEUgaGVhZGVyXG4gICAge1xuICAgICAgdmFyIGhlYWRlciA9IChaX0RFRkxBVEVEICsgKChzLndfYml0cyAtIDgpIDw8IDQpKSA8PCA4O1xuICAgICAgdmFyIGxldmVsX2ZsYWdzID0gLTE7XG5cbiAgICAgIGlmIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyKSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA8IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMztcbiAgICAgIH1cbiAgICAgIGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgeyBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7IH1cbiAgICAgIGhlYWRlciArPSAzMSAtIChoZWFkZXIgJSAzMSk7XG5cbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIHB1dFNob3J0TVNCKHMsIGhlYWRlcik7XG5cbiAgICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgICAgIH1cbiAgICAgIHN0cm0uYWRsZXIgPSAxOyAvLyBhZGxlcjMyKDBMLCBaX05VTEwsIDApO1xuICAgIH1cbiAgfVxuXG4vLyNpZmRlZiBHWklQXG4gIGlmIChzLnN0YXR1cyA9PT0gRVhUUkFfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuZXh0cmEvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuXG4gICAgICB3aGlsZSAocy5nemluZGV4IDwgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikpIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5leHRyYVtzLmd6aW5kZXhdICYgMHhmZik7XG4gICAgICAgIHMuZ3ppbmRleCsrO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAocy5nemluZGV4ID09PSBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICB9XG4gIH1cbiAgaWYgKHMuc3RhdHVzID09PSBOQU1FX1NUQVRFKSB7XG4gICAgaWYgKHMuZ3poZWFkLm5hbWUvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuICAgICAgLy9pbnQgdmFsO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5uYW1lLmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA9PT0gMCkge1xuICAgICAgICBzLmd6aW5kZXggPSAwO1xuICAgICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcy5zdGF0dXMgPSBDT01NRU5UX1NUQVRFO1xuICAgIH1cbiAgfVxuICBpZiAocy5zdGF0dXMgPT09IENPTU1FTlRfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuY29tbWVudC8qICE9IFpfTlVMTCovKSB7XG4gICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG4gICAgICAvL2ludCB2YWw7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcbiAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICAgIHZhbCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcbiAgICAgICAgaWYgKHMuZ3ppbmRleCA8IHMuZ3poZWFkLmNvbW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgdmFsID0gcy5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuICAgICAgfSB3aGlsZSAodmFsICE9PSAwKTtcblxuICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gSENSQ19TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgfVxuICAgICAgaWYgKHMucGVuZGluZyArIDIgPD0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgfVxuICB9XG4vLyNlbmRpZlxuXG4gIC8qIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUgKi9cbiAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoXG4gICAgICAgKiBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxuICAgICAgICogYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG4gICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICogcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxuICAgICAgICovXG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LO1xuICAgIH1cblxuICAgIC8qIE1ha2Ugc3VyZSB0aGVyZSBpcyBzb21ldGhpbmcgdG8gZG8gYW5kIGF2b2lkIGR1cGxpY2F0ZSBjb25zZWN1dGl2ZVxuICAgICAqIGZsdXNoZXMuIEZvciByZXBlYXRlZCBhbmQgdXNlbGVzcyBjYWxscyB3aXRoIFpfRklOSVNILCB3ZSBrZWVwXG4gICAgICogcmV0dXJuaW5nIFpfU1RSRUFNX0VORCBpbnN0ZWFkIG9mIFpfQlVGX0VSUk9SLlxuICAgICAqL1xuICB9IGVsc2UgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgcmFuayhmbHVzaCkgPD0gcmFuayhvbGRfZmx1c2gpICYmXG4gICAgZmx1c2ggIT09IFpfRklOSVNIKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7XG4gIH1cblxuICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xuICBpZiAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUik7XG4gIH1cblxuICAvKiBTdGFydCBhIG5ldyBibG9jayBvciBjb250aW51ZSB0aGUgY3VycmVudCBvbmUuXG4gICAqL1xuICBpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBzLmxvb2thaGVhZCAhPT0gMCB8fFxuICAgIChmbHVzaCAhPT0gWl9OT19GTFVTSCAmJiBzLnN0YXR1cyAhPT0gRklOSVNIX1NUQVRFKSkge1xuICAgIHZhciBic3RhdGUgPSAocy5zdHJhdGVneSA9PT0gWl9IVUZGTUFOX09OTFkpID8gZGVmbGF0ZV9odWZmKHMsIGZsdXNoKSA6XG4gICAgICAocy5zdHJhdGVneSA9PT0gWl9STEUgPyBkZWZsYXRlX3JsZShzLCBmbHVzaCkgOlxuICAgICAgICBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmZ1bmMocywgZmx1c2gpKTtcblxuICAgIGlmIChic3RhdGUgPT09IEJTX0ZJTklTSF9TVEFSVEVEIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX0RPTkUpIHtcbiAgICAgIHMuc3RhdHVzID0gRklOSVNIX1NUQVRFO1xuICAgIH1cbiAgICBpZiAoYnN0YXRlID09PSBCU19ORUVEX01PUkUgfHwgYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCkge1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuICAgICAgICAvKiBhdm9pZCBCVUZfRVJST1IgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi9cbiAgICAgIH1cbiAgICAgIHJldHVybiBaX09LO1xuICAgICAgLyogSWYgZmx1c2ggIT0gWl9OT19GTFVTSCAmJiBhdmFpbF9vdXQgPT0gMCwgdGhlIG5leHQgY2FsbFxuICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmVcbiAgICAgICAqIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxuICAgICAgICogZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc29cbiAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdFxuICAgICAgICogb25lIGVtcHR5IGJsb2NrLlxuICAgICAgICovXG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHtcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9QQVJUSUFMX0ZMVVNIKSB7XG4gICAgICAgIHRyZWVzLl90cl9hbGlnbihzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZsdXNoICE9PSBaX0JMT0NLKSB7IC8qIEZVTExfRkxVU0ggb3IgU1lOQ19GTFVTSCAqL1xuXG4gICAgICAgIHRyZWVzLl90cl9zdG9yZWRfYmxvY2socywgMCwgMCwgZmFsc2UpO1xuICAgICAgICAvKiBGb3IgYSBmdWxsIGZsdXNoLCB0aGlzIGVtcHR5IGJsb2NrIHdpbGwgYmUgcmVjb2duaXplZFxuICAgICAgICAgKiBhcyBhIHNwZWNpYWwgbWFya2VyIGJ5IGluZmxhdGVfc3luYygpLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGZsdXNoID09PSBaX0ZVTExfRkxVU0gpIHtcbiAgICAgICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi8gICAgICAgICAgICAgLyogZm9yZ2V0IGhpc3RvcnkgKi9cbiAgICAgICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cbiAgICAgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgICAgIHMuc3Ryc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG4gICAgICAgICAgICBzLmluc2VydCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHMubGFzdF9mbHVzaCA9IC0xOyAvKiBhdm9pZCBCVUZfRVJST1IgYXQgbmV4dCBjYWxsLCBzZWUgYWJvdmUgKi9cbiAgICAgICAgcmV0dXJuIFpfT0s7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0KHN0cm0tPmF2YWlsX291dCA+IDAsIFwiYnVnMlwiKTtcbiAgLy9pZiAoc3RybS5hdmFpbF9vdXQgPD0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJidWcyXCIpO31cblxuICBpZiAoZmx1c2ggIT09IFpfRklOSVNIKSB7IHJldHVybiBaX09LOyB9XG4gIGlmIChzLndyYXAgPD0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRU5EOyB9XG5cbiAgLyogV3JpdGUgdGhlIHRyYWlsZXIgKi9cbiAgaWYgKHMud3JhcCA9PT0gMikge1xuICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDI0KSAmIDB4ZmYpO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgfVxuXG4gIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gIC8qIElmIGF2YWlsX291dCBpcyB6ZXJvLCB0aGUgYXBwbGljYXRpb24gd2lsbCBjYWxsIGRlZmxhdGUgYWdhaW5cbiAgICogdG8gZmx1c2ggdGhlIHJlc3QuXG4gICAqL1xuICBpZiAocy53cmFwID4gMCkgeyBzLndyYXAgPSAtcy53cmFwOyB9XG4gIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi9cbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0sgOiBaX1NUUkVBTV9FTkQ7XG59XG5cbmZ1bmN0aW9uIGRlZmxhdGVFbmQoc3RybSkge1xuICB2YXIgc3RhdHVzO1xuXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgc3RhdHVzID0gc3RybS5zdGF0ZS5zdGF0dXM7XG4gIGlmIChzdGF0dXMgIT09IElOSVRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBOQU1FX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBDT01NRU5UX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBCVVNZX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBGSU5JU0hfU1RBVEVcbiAgKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG4gIH1cblxuICBzdHJtLnN0YXRlID0gbnVsbDtcblxuICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LO1xufVxuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEluaXRpYWxpemVzIHRoZSBjb21wcmVzc2lvbiBkaWN0aW9uYXJ5IGZyb20gdGhlIGdpdmVuIGJ5dGVcbiAqIHNlcXVlbmNlIHdpdGhvdXQgcHJvZHVjaW5nIGFueSBjb21wcmVzc2VkIG91dHB1dC5cbiAqL1xuZnVuY3Rpb24gZGVmbGF0ZVNldERpY3Rpb25hcnkoc3RybSwgZGljdGlvbmFyeSkge1xuICB2YXIgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIHZhciBzO1xuICB2YXIgc3RyLCBuO1xuICB2YXIgd3JhcDtcbiAgdmFyIGF2YWlsO1xuICB2YXIgbmV4dDtcbiAgdmFyIGlucHV0O1xuICB2YXIgdG1wRGljdDtcblxuICBpZiAoIXN0cm0vKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlLyo9PSBaX05VTEwqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHMgPSBzdHJtLnN0YXRlO1xuICB3cmFwID0gcy53cmFwO1xuXG4gIGlmICh3cmFwID09PSAyIHx8ICh3cmFwID09PSAxICYmIHMuc3RhdHVzICE9PSBJTklUX1NUQVRFKSB8fCBzLmxvb2thaGVhZCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIC8qIHdoZW4gdXNpbmcgemxpYiB3cmFwcGVycywgY29tcHV0ZSBBZGxlci0zMiBmb3IgcHJvdmlkZWQgZGljdGlvbmFyeSAqL1xuICBpZiAod3JhcCA9PT0gMSkge1xuICAgIC8qIGFkbGVyMzIoc3RybS0+YWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyKHN0cm0uYWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICB9XG5cbiAgcy53cmFwID0gMDsgICAvKiBhdm9pZCBjb21wdXRpbmcgQWRsZXItMzIgaW4gcmVhZF9idWYgKi9cblxuICAvKiBpZiBkaWN0aW9uYXJ5IHdvdWxkIGZpbGwgd2luZG93LCBqdXN0IHJlcGxhY2UgdGhlIGhpc3RvcnkgKi9cbiAgaWYgKGRpY3RMZW5ndGggPj0gcy53X3NpemUpIHtcbiAgICBpZiAod3JhcCA9PT0gMCkgeyAgICAgICAgICAgIC8qIGFscmVhZHkgZW1wdHkgb3RoZXJ3aXNlICovXG4gICAgICAvKioqIENMRUFSX0hBU0gocyk7ICoqKi9cbiAgICAgIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcbiAgICAgIHMuc3Ryc3RhcnQgPSAwO1xuICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG4gICAgICBzLmluc2VydCA9IDA7XG4gICAgfVxuICAgIC8qIHVzZSB0aGUgdGFpbCAqL1xuICAgIC8vIGRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5LnNsaWNlKGRpY3RMZW5ndGggLSBzLndfc2l6ZSk7XG4gICAgdG1wRGljdCA9IG5ldyB1dGlscy5CdWY4KHMud19zaXplKTtcbiAgICB1dGlscy5hcnJheVNldCh0bXBEaWN0LCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoIC0gcy53X3NpemUsIHMud19zaXplLCAwKTtcbiAgICBkaWN0aW9uYXJ5ID0gdG1wRGljdDtcbiAgICBkaWN0TGVuZ3RoID0gcy53X3NpemU7XG4gIH1cbiAgLyogaW5zZXJ0IGRpY3Rpb25hcnkgaW50byB3aW5kb3cgYW5kIGhhc2ggKi9cbiAgYXZhaWwgPSBzdHJtLmF2YWlsX2luO1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSBkaWN0TGVuZ3RoO1xuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmlucHV0ID0gZGljdGlvbmFyeTtcbiAgZmlsbF93aW5kb3cocyk7XG4gIHdoaWxlIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICBzdHIgPSBzLnN0cnN0YXJ0O1xuICAgIG4gPSBzLmxvb2thaGVhZCAtIChNSU5fTUFUQ0ggLSAxKTtcbiAgICBkbyB7XG4gICAgICAvKiBVUERBVEVfSEFTSChzLCBzLT5pbnNfaCwgcy0+d2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSk7ICovXG4gICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzdHIgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcblxuICAgICAgcy5wcmV2W3N0ciAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcblxuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuICAgICAgc3RyKys7XG4gICAgfSB3aGlsZSAoLS1uKTtcbiAgICBzLnN0cnN0YXJ0ID0gc3RyO1xuICAgIHMubG9va2FoZWFkID0gTUlOX01BVENIIC0gMTtcbiAgICBmaWxsX3dpbmRvdyhzKTtcbiAgfVxuICBzLnN0cnN0YXJ0ICs9IHMubG9va2FoZWFkO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgcy5pbnNlcnQgPSBzLmxvb2thaGVhZDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLm1hdGNoX2xlbmd0aCA9IHMucHJldl9sZW5ndGggPSBNSU5fTUFUQ0ggLSAxO1xuICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gIHN0cm0uaW5wdXQgPSBpbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGF2YWlsO1xuICBzLndyYXAgPSB3cmFwO1xuICByZXR1cm4gWl9PSztcbn1cblxuXG5leHBvcnRzLmRlZmxhdGVJbml0ID0gZGVmbGF0ZUluaXQ7XG5leHBvcnRzLmRlZmxhdGVJbml0MiA9IGRlZmxhdGVJbml0MjtcbmV4cG9ydHMuZGVmbGF0ZVJlc2V0ID0gZGVmbGF0ZVJlc2V0O1xuZXhwb3J0cy5kZWZsYXRlUmVzZXRLZWVwID0gZGVmbGF0ZVJlc2V0S2VlcDtcbmV4cG9ydHMuZGVmbGF0ZVNldEhlYWRlciA9IGRlZmxhdGVTZXRIZWFkZXI7XG5leHBvcnRzLmRlZmxhdGUgPSBkZWZsYXRlO1xuZXhwb3J0cy5kZWZsYXRlRW5kID0gZGVmbGF0ZUVuZDtcbmV4cG9ydHMuZGVmbGF0ZVNldERpY3Rpb25hcnkgPSBkZWZsYXRlU2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuZGVmbGF0ZUluZm8gPSAncGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxuZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7XG5leHBvcnRzLmRlZmxhdGVDb3B5ID0gZGVmbGF0ZUNvcHk7XG5leHBvcnRzLmRlZmxhdGVQYXJhbXMgPSBkZWZsYXRlUGFyYW1zO1xuZXhwb3J0cy5kZWZsYXRlUGVuZGluZyA9IGRlZmxhdGVQZW5kaW5nO1xuZXhwb3J0cy5kZWZsYXRlUHJpbWUgPSBkZWZsYXRlUHJpbWU7XG5leHBvcnRzLmRlZmxhdGVUdW5lID0gZGVmbGF0ZVR1bmU7XG4qL1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vLyBTZWUgc3RhdGUgZGVmcyBmcm9tIGluZmxhdGUuanNcbnZhciBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cbi8qXG4gICBEZWNvZGUgbGl0ZXJhbCwgbGVuZ3RoLCBhbmQgZGlzdGFuY2UgY29kZXMgYW5kIHdyaXRlIG91dCB0aGUgcmVzdWx0aW5nXG4gICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcbiAgIGF2YWlsYWJsZSwgYW4gZW5kLW9mLWJsb2NrIGlzIGVuY291bnRlcmVkLCBvciBhIGRhdGEgZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICBXaGVuIGxhcmdlIGVub3VnaCBpbnB1dCBhbmQgb3V0cHV0IGJ1ZmZlcnMgYXJlIHN1cHBsaWVkIHRvIGluZmxhdGUoKSwgZm9yXG4gICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG4gICBpbmZsYXRlIGV4ZWN1dGlvbiB0aW1lIGlzIHNwZW50IGluIHRoaXMgcm91dGluZS5cblxuICAgRW50cnkgYXNzdW1wdGlvbnM6XG5cbiAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG4gICAgICAgIHN0cm0uYXZhaWxfaW4gPj0gNlxuICAgICAgICBzdHJtLmF2YWlsX291dCA+PSAyNThcbiAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcbiAgICAgICAgc3RhdGUuYml0cyA8IDhcblxuICAgT24gcmV0dXJuLCBzdGF0ZS5tb2RlIGlzIG9uZSBvZjpcblxuICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcbiAgICAgICAgVFlQRSAtLSByZWFjaGVkIGVuZCBvZiBibG9jayBjb2RlLCBpbmZsYXRlKCkgdG8gaW50ZXJwcmV0IG5leHQgYmxvY2tcbiAgICAgICAgQkFEIC0tIGVycm9yIGluIGJsb2NrIGRhdGFcblxuICAgTm90ZXM6XG5cbiAgICAtIFRoZSBtYXhpbXVtIGlucHV0IGJpdHMgdXNlZCBieSBhIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGlzIDE1IGJpdHMgZm9yIHRoZVxuICAgICAgbGVuZ3RoIGNvZGUsIDUgYml0cyBmb3IgdGhlIGxlbmd0aCBleHRyYSwgMTUgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGNvZGUsXG4gICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuICAgICAgVGhlcmVmb3JlIGlmIHN0cm0uYXZhaWxfaW4gPj0gNiwgdGhlbiB0aGVyZSBpcyBlbm91Z2ggaW5wdXQgdG8gYXZvaWRcbiAgICAgIGNoZWNraW5nIGZvciBhdmFpbGFibGUgaW5wdXQgd2hpbGUgZGVjb2RpbmcuXG5cbiAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcbiAgICAgIGJ5dGVzLCB3aGljaCBpcyB0aGUgbWF4aW11bSBsZW5ndGggdGhhdCBjYW4gYmUgY29kZWQuICBpbmZsYXRlX2Zhc3QoKVxuICAgICAgcmVxdWlyZXMgc3RybS5hdmFpbF9vdXQgPj0gMjU4IGZvciBlYWNoIGxvb3AgdG8gYXZvaWQgY2hlY2tpbmcgZm9yXG4gICAgICBvdXRwdXQgc3BhY2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV9mYXN0KHN0cm0sIHN0YXJ0KSB7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIF9pbjsgICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaW5wdXQgKi9cbiAgdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIGhhdmUgZW5vdWdoIGlucHV0IHdoaWxlIGluIDwgbGFzdCAqL1xuICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGJlZzsgICAgICAgICAgICAgICAgICAgIC8qIGluZmxhdGUoKSdzIGluaXRpYWwgc3RybS5vdXRwdXQgKi9cbiAgdmFyIGVuZDsgICAgICAgICAgICAgICAgICAgIC8qIHdoaWxlIG91dCA8IGVuZCwgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSAqL1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgdmFyIGRtYXg7ICAgICAgICAgICAgICAgICAgIC8qIG1heGltdW0gZGlzdGFuY2UgZnJvbSB6bGliIGhlYWRlciAqL1xuLy8jZW5kaWZcbiAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB2YXIgd2hhdmU7ICAgICAgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB2YXIgd25leHQ7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIC8vIFVzZSBgc193aW5kb3dgIGluc3RlYWQgYHdpbmRvd2AsIGF2b2lkIGNvbmZsaWN0IHdpdGggaW5zdHJ1bWVudGF0aW9uIHRvb2xzXG4gIHZhciBzX3dpbmRvdzsgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cbiAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uaG9sZCAqL1xuICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5iaXRzICovXG4gIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cbiAgdmFyIGRjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uZGlzdGNvZGUgKi9cbiAgdmFyIGxtYXNrOyAgICAgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGZpcnN0IGxldmVsIG9mIGxlbmd0aCBjb2RlcyAqL1xuICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cbiAgdmFyIGhlcmU7ICAgICAgICAgICAgICAgICAgIC8qIHJldHJpZXZlZCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgb3A7ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBiaXRzLCBvcGVyYXRpb24sIGV4dHJhIGJpdHMsIG9yICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgbGVuOyAgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoLCB1bnVzZWQgYnl0ZXMgKi9cbiAgdmFyIGRpc3Q7ICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoIGRpc3RhbmNlICovXG4gIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cbiAgdmFyIGZyb21fc291cmNlO1xuXG5cbiAgdmFyIGlucHV0LCBvdXRwdXQ7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblxuICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIC8vaGVyZSA9IHN0YXRlLmhlcmU7XG4gIF9pbiA9IHN0cm0ubmV4dF9pbjtcbiAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICBsYXN0ID0gX2luICsgKHN0cm0uYXZhaWxfaW4gLSA1KTtcbiAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBiZWcgPSBfb3V0IC0gKHN0YXJ0IC0gc3RybS5hdmFpbF9vdXQpO1xuICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gIGRtYXggPSBzdGF0ZS5kbWF4O1xuLy8jZW5kaWZcbiAgd3NpemUgPSBzdGF0ZS53c2l6ZTtcbiAgd2hhdmUgPSBzdGF0ZS53aGF2ZTtcbiAgd25leHQgPSBzdGF0ZS53bmV4dDtcbiAgc193aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuICBkY29kZSA9IHN0YXRlLmRpc3Rjb2RlO1xuICBsbWFzayA9ICgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMTtcbiAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cbiAgLyogZGVjb2RlIGxpdGVyYWxzIGFuZCBsZW5ndGgvZGlzdGFuY2VzIHVudGlsIGVuZC1vZi1ibG9jayBvciBub3QgZW5vdWdoXG4gICAgIGlucHV0IGRhdGEgb3Igb3V0cHV0IHNwYWNlICovXG5cbiAgdG9wOlxuICBkbyB7XG4gICAgaWYgKGJpdHMgPCAxNSkge1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICBiaXRzICs9IDg7XG4gICAgfVxuXG4gICAgaGVyZSA9IGxjb2RlW2hvbGQgJiBsbWFza107XG5cbiAgICBkb2xlbjpcbiAgICBmb3IgKDs7KSB7IC8vIEdvdG8gZW11bGF0aW9uXG4gICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgIGJpdHMgLT0gb3A7XG4gICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG4gICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcbiAgICAgICAgb3V0cHV0W19vdXQrK10gPSBoZXJlICYgMHhmZmZmLypoZXJlLnZhbCovO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG4gICAgICAgIGxlbiA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgIGlmIChvcCkge1xuICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbiArPSBob2xkICYgKCgxIDw8IG9wKSAtIDEpO1xuICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuICAgICAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaGVyZSA9IGRjb2RlW2hvbGQgJiBkbWFza107XG5cbiAgICAgICAgZG9kaXN0OlxuICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG4gICAgICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXG4gICAgICAgICAgaWYgKG9wICYgMTYpIHsgICAgICAgICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFzZSAqL1xuICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBleHRyYSBiaXRzICovXG4gICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXN0ICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcbiAgICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIGRpc3QpKTtcbiAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuICAgICAgICAgICAgaWYgKGRpc3QgPiBvcCkgeyAgICAgICAgICAgICAgICAvKiBzZWUgaWYgY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBvcCA9IGRpc3QgLSBvcDsgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuICAgICAgICBoZXJlID0gbGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgY29udGludWUgZG9sZW47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDMyKSB7ICAgICAgICAgICAgICAgICAgICAgLyogZW5kLW9mLWJsb2NrICovXG4gICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrIHRvcDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUnO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG5cbnZhciBNQVhCSVRTID0gMTU7XG52YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG52YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuLy92YXIgRU5PVUdIID0gKEVOT1VHSF9MRU5TK0VOT1VHSF9ESVNUUyk7XG5cbnZhciBDT0RFUyA9IDA7XG52YXIgTEVOUyA9IDE7XG52YXIgRElTVFMgPSAyO1xuXG52YXIgbGJhc2UgPSBbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBiYXNlICovXG4gIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG4gIDM1LCA0MywgNTEsIDU5LCA2NywgODMsIDk5LCAxMTUsIDEzMSwgMTYzLCAxOTUsIDIyNywgMjU4LCAwLCAwXG5dO1xuXG52YXIgbGV4dCA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxNywgMTcsIDE4LCAxOCwgMTgsIDE4LFxuICAxOSwgMTksIDE5LCAxOSwgMjAsIDIwLCAyMCwgMjAsIDIxLCAyMSwgMjEsIDIxLCAxNiwgNzIsIDc4XG5dO1xuXG52YXIgZGJhc2UgPSBbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGJhc2UgKi9cbiAgMSwgMiwgMywgNCwgNSwgNywgOSwgMTMsIDE3LCAyNSwgMzMsIDQ5LCA2NSwgOTcsIDEyOSwgMTkzLFxuICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG4gIDgxOTMsIDEyMjg5LCAxNjM4NSwgMjQ1NzcsIDAsIDBcbl07XG5cbnZhciBkZXh0ID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMixcbiAgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsXG4gIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5mbGF0ZV90YWJsZSh0eXBlLCBsZW5zLCBsZW5zX2luZGV4LCBjb2RlcywgdGFibGUsIHRhYmxlX2luZGV4LCB3b3JrLCBvcHRzKVxue1xuICB2YXIgYml0cyA9IG9wdHMuYml0cztcbiAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgdmFyIGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cbiAgdmFyIHN5bSA9IDA7ICAgICAgICAgICAgICAgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIHZhciBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICB2YXIgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuICB2YXIgY3VyciA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICB2YXIgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gIHZhciBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cbiAgdmFyIHVzZWQgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi9cbiAgdmFyIGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuICB2YXIgZmlsbDsgICAgICAgICAgICAgIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovXG4gIHZhciBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cbiAgdmFyIG5leHQ7ICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXG4gIHZhciBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gIHZhciBiYXNlX2luZGV4ID0gMDtcbi8vICB2YXIgc2hvZXh0cmE7ICAgIC8qIGV4dHJhIGJpdHMgdGFibGUgdG8gdXNlICovXG4gIHZhciBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB1c2UgYmFzZSBhbmQgZXh0cmEgZm9yIHN5bWJvbCA+IGVuZCAqL1xuICB2YXIgY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAvKiBudW1iZXIgb2YgY29kZXMgb2YgZWFjaCBsZW5ndGggKi9cbiAgdmFyIG9mZnMgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUyArIDEpOyAvL1tNQVhCSVRTKzFdOyAgICAgLyogb2Zmc2V0cyBpbiB0YWJsZSBmb3IgZWFjaCBsZW5ndGggKi9cbiAgdmFyIGV4dHJhID0gbnVsbDtcbiAgdmFyIGV4dHJhX2luZGV4ID0gMDtcblxuICB2YXIgaGVyZV9iaXRzLCBoZXJlX29wLCBoZXJlX3ZhbDtcblxuICAvKlxuICAgUHJvY2VzcyBhIHNldCBvZiBjb2RlIGxlbmd0aHMgdG8gY3JlYXRlIGEgY2Fub25pY2FsIEh1ZmZtYW4gY29kZS4gIFRoZVxuICAgY29kZSBsZW5ndGhzIGFyZSBsZW5zWzAuLmNvZGVzLTFdLiAgRWFjaCBsZW5ndGggY29ycmVzcG9uZHMgdG8gdGhlXG4gICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuICAgc3ltYm9scyBieSBsZW5ndGggZnJvbSBzaG9ydCB0byBsb25nLCBhbmQgcmV0YWluaW5nIHRoZSBzeW1ib2wgb3JkZXJcbiAgIGZvciBjb2RlcyB3aXRoIGVxdWFsIGxlbmd0aHMuICBUaGVuIHRoZSBjb2RlIHN0YXJ0cyB3aXRoIGFsbCB6ZXJvIGJpdHNcbiAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG4gICBpbmNyZW1lbnRzIGZvciB0aGUgc2FtZSBsZW5ndGgsIGFuZCB6ZXJvcyBhcmUgYXBwZW5kZWQgYXMgdGhlIGxlbmd0aFxuICAgaW5jcmVhc2VzLiAgRm9yIHRoZSBkZWZsYXRlIGZvcm1hdCwgdGhlc2UgYml0cyBhcmUgc3RvcmVkIGJhY2t3YXJkc1xuICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzIGFyZSBidWlsdCBpbiB0aGUgbGFyZ2UgbG9vcCBiZWxvdywgdGhlIGludGVnZXIgY29kZXNcbiAgIGFyZSBpbmNyZW1lbnRlZCBiYWNrd2FyZHMuXG5cbiAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG4gICBsZW5zW10gYXJlIGluIHRoZSByYW5nZSAwLi5NQVhCSVRTLiAgVGhlIGNhbGxlciBtdXN0IGFzc3VyZSB0aGlzLlxuICAgMS4uTUFYQklUUyBpcyBpbnRlcnByZXRlZCBhcyB0aGF0IGNvZGUgbGVuZ3RoLiAgemVybyBtZWFucyB0aGF0IHRoYXRcbiAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cbiAgIFRoZSBjb2RlcyBhcmUgc29ydGVkIGJ5IGNvbXB1dGluZyBhIGNvdW50IG9mIGNvZGVzIGZvciBlYWNoIGxlbmd0aCxcbiAgIGNyZWF0aW5nIGZyb20gdGhhdCBhIHRhYmxlIG9mIHN0YXJ0aW5nIGluZGljZXMgZm9yIGVhY2ggbGVuZ3RoIGluIHRoZVxuICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG4gICB0YWJsZS4gIFRoZSBzb3J0ZWQgdGFibGUgaXMgd29ya1tdLCB3aXRoIHRoYXQgc3BhY2UgYmVpbmcgcHJvdmlkZWQgYnlcbiAgIHRoZSBjYWxsZXIuXG5cbiAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcbiAgIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCBjb2RlcywgZGV0ZXJtaW5pbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgY29kZXMgYXQgYWxsLCBjaGVja2luZyBmb3IgYSB2YWxpZCBzZXQgb2YgbGVuZ3RocywgYW5kIGxvb2tpbmcgYWhlYWRcbiAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuICAgZGVjb2RpbmcgdGFibGVzLlxuICAgKi9cblxuICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cbiAgZm9yIChsZW4gPSAwOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBjb3VudFtsZW5dID0gMDtcbiAgfVxuICBmb3IgKHN5bSA9IDA7IHN5bSA8IGNvZGVzOyBzeW0rKykge1xuICAgIGNvdW50W2xlbnNbbGVuc19pbmRleCArIHN5bV1dKys7XG4gIH1cblxuICAvKiBib3VuZCBjb2RlIGxlbmd0aHMsIGZvcmNlIHJvb3QgdG8gYmUgd2l0aGluIGNvZGUgbGVuZ3RocyAqL1xuICByb290ID0gYml0cztcbiAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcbiAgICBpZiAoY291bnRbbWF4XSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290ID4gbWF4KSB7XG4gICAgcm9vdCA9IG1heDtcbiAgfVxuICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDsgIC8vaGVyZS5vcCA9ICh2YXIgY2hhcik2NDsgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tvcHRzLnRhYmxlX2luZGV4XSA9IDE7ICAgLy9oZXJlLmJpdHMgPSAodmFyIGNoYXIpMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cblxuICAgIC8vdGFibGUub3Bbb3B0cy50YWJsZV9pbmRleF0gPSA2NDtcbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuICAgIC8vdGFibGUudmFsW29wdHMudGFibGVfaW5kZXgrK10gPSAwO1xuICAgIHRhYmxlW3RhYmxlX2luZGV4KytdID0gKDEgPDwgMjQpIHwgKDY0IDw8IDE2KSB8IDA7XG5cbiAgICBvcHRzLmJpdHMgPSAxO1xuICAgIHJldHVybiAwOyAgICAgLyogbm8gc3ltYm9scywgYnV0IHdhaXQgZm9yIGRlY29kaW5nIHRvIHJlcG9ydCBlcnJvciAqL1xuICB9XG4gIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuICAgIGlmIChjb3VudFttaW5dICE9PSAwKSB7IGJyZWFrOyB9XG4gIH1cbiAgaWYgKHJvb3QgPCBtaW4pIHtcbiAgICByb290ID0gbWluO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG4gIGxlZnQgPSAxO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuICAgIGxlZnQgPDw9IDE7XG4gICAgbGVmdCAtPSBjb3VudFtsZW5dO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gICAgICAgIC8qIG92ZXItc3Vic2NyaWJlZCAqL1xuICB9XG4gIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTKSB7XG4gICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG4gICAgZW5kID0gMTk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSBMRU5TKSB7XG4gICAgYmFzZSA9IGxiYXNlO1xuICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuICAgIGV4dHJhID0gbGV4dDtcbiAgICBleHRyYV9pbmRleCAtPSAyNTc7XG4gICAgZW5kID0gMjU2O1xuXG4gIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuICAgIGJhc2UgPSBkYmFzZTtcbiAgICBleHRyYSA9IGRleHQ7XG4gICAgZW5kID0gLTE7XG4gIH1cblxuICAvKiBpbml0aWFsaXplIG9wdHMgZm9yIGxvb3AgKi9cbiAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cbiAgc3ltID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgc3ltYm9sICovXG4gIGxlbiA9IG1pbjsgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIGxlbmd0aCAqL1xuICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cbiAgY3VyciA9IHJvb3Q7ICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgdGFibGUgaW5kZXggYml0cyAqL1xuICBkcm9wID0gMDsgICAgICAgICAgICAgICAgICAgLyogY3VycmVudCBiaXRzIHRvIGRyb3AgZnJvbSBjb2RlIGZvciBpbmRleCAqL1xuICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuICB1c2VkID0gMSA8PCByb290OyAgICAgICAgICAvKiB1c2Ugcm9vdCB0YWJsZSBlbnRyaWVzICovXG4gIG1hc2sgPSB1c2VkIC0gMTsgICAgICAgICAgICAvKiBtYXNrIGZvciBjb21wYXJpbmcgbG93ICovXG5cbiAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG4gIGlmICgodHlwZSA9PT0gTEVOUyAmJiB1c2VkID4gRU5PVUdIX0xFTlMpIHx8XG4gICAgKHR5cGUgPT09IERJU1RTICYmIHVzZWQgPiBFTk9VR0hfRElTVFMpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBjcmVhdGUgdGFibGUgZW50cnkgKi9cbiAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSAwO1xuICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuICAgICAgICAodHlwZSA9PT0gRElTVFMgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUykpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIC8qIHBvaW50IGVudHJ5IGluIHJvb3QgdGFibGUgdG8gc3ViLXRhYmxlICovXG4gICAgICBsb3cgPSBodWZmICYgbWFzaztcbiAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG4gICAgICB0YWJsZS5iaXRzW2xvd10gPSByb290O1xuICAgICAgdGFibGUudmFsW2xvd10gPSBuZXh0IC0gb3B0cy50YWJsZV9pbmRleDsqL1xuICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwwO1xuICAgIH1cbiAgfVxuXG4gIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXG4gICBhdCBtb3N0IG9uZSByZW1haW5pbmcgZW50cnksIHNpbmNlIGlmIHRoZSBjb2RlIGlzIGluY29tcGxldGUsIHRoZVxuICAgbWF4aW11bSBjb2RlIGxlbmd0aCB0aGF0IHdhcyBhbGxvd2VkIHRvIGdldCB0aGlzIGZhciBpcyBvbmUgYml0KSAqL1xuICBpZiAoaHVmZiAhPT0gMCkge1xuICAgIC8vdGFibGUub3BbbmV4dCArIGh1ZmZdID0gNjQ7ICAgICAgICAgICAgLyogaW52YWxpZCBjb2RlIG1hcmtlciAqL1xuICAgIC8vdGFibGUuYml0c1tuZXh0ICsgaHVmZl0gPSBsZW4gLSBkcm9wO1xuICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7XG4gICAgdGFibGVbbmV4dCArIGh1ZmZdID0gKChsZW4gLSBkcm9wKSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwwO1xuICB9XG5cbiAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXG4gIC8vb3B0cy50YWJsZV9pbmRleCArPSB1c2VkO1xuICBvcHRzLmJpdHMgPSByb290O1xuICByZXR1cm4gMDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbnZhciB1dGlscyAgICAgICAgID0gcmVxdWlyZSgnLi4vdXRpbHMvY29tbW9uJyk7XG52YXIgYWRsZXIzMiAgICAgICA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xudmFyIGNyYzMyICAgICAgICAgPSByZXF1aXJlKCcuL2NyYzMyJyk7XG52YXIgaW5mbGF0ZV9mYXN0ICA9IHJlcXVpcmUoJy4vaW5mZmFzdCcpO1xudmFyIGluZmxhdGVfdGFibGUgPSByZXF1aXJlKCcuL2luZnRyZWVzJyk7XG5cbnZhciBDT0RFUyA9IDA7XG52YXIgTEVOUyA9IDE7XG52YXIgRElTVFMgPSAyO1xuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKiBBbGxvd2VkIGZsdXNoIHZhbHVlczsgc2VlIGRlZmxhdGUoKSBhbmQgaW5mbGF0ZSgpIGJlbG93IGZvciBkZXRhaWxzICovXG4vL3ZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xuLy92YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTtcbi8vdmFyIFpfU1lOQ19GTFVTSCAgICA9IDI7XG4vL3ZhciBaX0ZVTExfRkxVU0ggICAgPSAzO1xudmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG52YXIgWl9CTE9DSyAgICAgICAgID0gNTtcbnZhciBaX1RSRUVTICAgICAgICAgPSA2O1xuXG5cbi8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAqL1xudmFyIFpfT0sgICAgICAgICAgICA9IDA7XG52YXIgWl9TVFJFQU1fRU5EICAgID0gMTtcbnZhciBaX05FRURfRElDVCAgICAgPSAyO1xuLy92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG52YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG52YXIgWl9EQVRBX0VSUk9SICAgID0gLTM7XG52YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG52YXIgWl9CVUZfRVJST1IgICAgID0gLTU7XG4vL3ZhciBaX1ZFUlNJT05fRVJST1IgPSAtNjtcblxuLyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG52YXIgWl9ERUZMQVRFRCAgPSA4O1xuXG5cbi8qIFNUQVRFUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbnZhciAgICBIRUFEID0gMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbWFnaWMgaGVhZGVyICovXG52YXIgICAgRkxBR1MgPSAyOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1ldGhvZCBhbmQgZmxhZ3MgKGd6aXApICovXG52YXIgICAgVElNRSA9IDM7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqL1xudmFyICAgIE9TID0gNDsgICAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBmbGFncyBhbmQgb3BlcmF0aW5nIHN5c3RlbSAoZ3ppcCkgKi9cbnZhciAgICBFWExFTiA9IDU7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgbGVuZ3RoIChnemlwKSAqL1xudmFyICAgIEVYVFJBID0gNjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi9cbnZhciAgICBOQU1FID0gNzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi9cbnZhciAgICBDT01NRU5UID0gODsgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGNvbW1lbnQgKGd6aXApICovXG52YXIgICAgSENSQyA9IDk7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovXG52YXIgICAgRElDVElEID0gMTA7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbnZhciAgICBESUNUID0gMTE7ICAgICAgLyogd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnkoKSBjYWxsICovXG52YXIgICAgICAgIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG52YXIgICAgICAgIFRZUEVETyA9IDEzOyAgICAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG52YXIgICAgICAgIFNUT1JFRCA9IDE0OyAgICAvKiBpOiB3YWl0aW5nIGZvciBzdG9yZWQgc2l6ZSAobGVuZ3RoIGFuZCBjb21wbGVtZW50KSAqL1xudmFyICAgICAgICBDT1BZXyA9IDE1OyAgICAgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbnZhciAgICAgICAgQ09QWSA9IDE2OyAgICAgIC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG52YXIgICAgICAgIFRBQkxFID0gMTc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciBkeW5hbWljIGJsb2NrIHRhYmxlIGxlbmd0aHMgKi9cbnZhciAgICAgICAgTEVOTEVOUyA9IDE4OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xudmFyICAgICAgICBDT0RFTEVOUyA9IDE5OyAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG52YXIgICAgICAgICAgICBMRU5fID0gMjA7ICAgICAgLyogaTogc2FtZSBhcyBMRU4gYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cbnZhciAgICAgICAgICAgIExFTiA9IDIxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovXG52YXIgICAgICAgICAgICBMRU5FWFQgPSAyMjsgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbnZhciAgICAgICAgICAgIERJU1QgPSAyMzsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBkaXN0YW5jZSBjb2RlICovXG52YXIgICAgICAgICAgICBESVNURVhUID0gMjQ7ICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgZXh0cmEgYml0cyAqL1xudmFyICAgICAgICAgICAgTUFUQ0ggPSAyNTsgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xudmFyICAgICAgICAgICAgTElUID0gMjY7ICAgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byB3cml0ZSBsaXRlcmFsICovXG52YXIgICAgQ0hFQ0sgPSAyNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xudmFyICAgIExFTkdUSCA9IDI4OyAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqL1xudmFyICAgIERPTkUgPSAyOTsgICAgICAvKiBmaW5pc2hlZCBjaGVjaywgZG9uZSAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xudmFyICAgIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgTUVNID0gMzE7ICAgICAgIC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG52YXIgICAgU1lOQyA9IDMyOyAgICAgIC8qIGxvb2tpbmcgZm9yIHN5bmNocm9uaXphdGlvbiBieXRlcyB0byByZXN0YXJ0IGluZmxhdGUoKSAqL1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblxudmFyIEVOT1VHSF9MRU5TID0gODUyO1xudmFyIEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vdmFyIEVOT1VHSCA9ICAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxudmFyIE1BWF9XQklUUyA9IDE1O1xuLyogMzJLIExaNzcgd2luZG93ICovXG52YXIgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmZ1bmN0aW9uIHpzd2FwMzIocSkge1xuICByZXR1cm4gICgoKHEgPj4+IDI0KSAmIDB4ZmYpICtcbiAgICAgICAgICAoKHEgPj4+IDgpICYgMHhmZjAwKSArXG4gICAgICAgICAgKChxICYgMHhmZjAwKSA8PCA4KSArXG4gICAgICAgICAgKChxICYgMHhmZikgPDwgMjQpKTtcbn1cblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXG4gIHRoaXMubGFzdCA9IGZhbHNlOyAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXG4gIHRoaXMuZG1heCA9IDA7ICAgICAgICAgICAgICAvKiB6bGliIGhlYWRlciBtYXggZGlzdGFuY2UgKElORkxBVEVfU1RSSUNUKSAqL1xuICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cbiAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xuICAvLyBUT0RPOiBtYXkgYmUge31cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cbiAgdGhpcy53c2l6ZSA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB0aGlzLndoYXZlID0gMDsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xuXG4gIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmhvbGQgPSAwOyAgICAgICAgICAgICAgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuYml0cyA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgYml0cyBpbiBcImluXCIgKi9cblxuICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xuICB0aGlzLmxlbmd0aCA9IDA7ICAgICAgICAgICAgLyogbGl0ZXJhbCBvciBsZW5ndGggb2YgZGF0YSB0byBjb3B5ICovXG4gIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cblxuICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi9cbiAgdGhpcy5leHRyYSA9IDA7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgbmVlZGVkICovXG5cbiAgLyogZml4ZWQgYW5kIGR5bmFtaWMgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXG4gIHRoaXMuZGlzdGNvZGUgPSBudWxsOyAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xuICB0aGlzLmxlbmJpdHMgPSAwOyAgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgbGVuY29kZSAqL1xuICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cblxuICAvKiBkeW5hbWljIHRhYmxlIGJ1aWxkaW5nICovXG4gIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5kaXN0ID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cbiAgdGhpcy5uZXh0ID0gbnVsbDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cblxuICB0aGlzLmxlbnMgPSBuZXcgdXRpbHMuQnVmMTYoMzIwKTsgLyogdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLndvcmsgPSBuZXcgdXRpbHMuQnVmMTYoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXG5cbiAgLypcbiAgIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBwb2ludGVycyBpbiBqcywgd2UgdXNlIGxlbmNvZGUgYW5kIGRpc3Rjb2RlIGRpcmVjdGx5XG4gICBhcyBidWZmZXJzIHNvIHdlIGRvbid0IG5lZWQgY29kZXNcbiAgKi9cbiAgLy90aGlzLmNvZGVzID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSCk7ICAgICAgIC8qIHNwYWNlIGZvciBjb2RlIHRhYmxlcyAqL1xuICB0aGlzLmxlbmR5biA9IG51bGw7ICAgICAgICAgICAgICAvKiBkeW5hbWljIHRhYmxlIGZvciBsZW5ndGgvbGl0ZXJhbCBjb2RlcyAoSlMgc3BlY2lmaWMpICovXG4gIHRoaXMuZGlzdGR5biA9IG51bGw7ICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5zYW5lID0gMDsgICAgICAgICAgICAgICAgICAgLyogaWYgZmFsc2UsIGFsbG93IGludmFsaWQgZGlzdGFuY2UgdG9vIGZhciAqL1xuICB0aGlzLmJhY2sgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBiaXRzIGJhY2sgb2YgbGFzdCB1bnByb2Nlc3NlZCBsZW5ndGgvbGl0ICovXG4gIHRoaXMud2FzID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIGluaXRpYWwgbGVuZ3RoIG9mIG1hdGNoICovXG59XG5cbmZ1bmN0aW9uIGluZmxhdGVSZXNldEtlZXAoc3RybSkge1xuICB2YXIgc3RhdGU7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IHN0YXRlLnRvdGFsID0gMDtcbiAgc3RybS5tc2cgPSAnJzsgLypaX05VTEwqL1xuICBpZiAoc3RhdGUud3JhcCkgeyAgICAgICAvKiB0byBzdXBwb3J0IGlsbC1jb25jZWl2ZWQgSmF2YSB0ZXN0IHN1aXRlICovXG4gICAgc3RybS5hZGxlciA9IHN0YXRlLndyYXAgJiAxO1xuICB9XG4gIHN0YXRlLm1vZGUgPSBIRUFEO1xuICBzdGF0ZS5sYXN0ID0gMDtcbiAgc3RhdGUuaGF2ZWRpY3QgPSAwO1xuICBzdGF0ZS5kbWF4ID0gMzI3Njg7XG4gIHN0YXRlLmhlYWQgPSBudWxsLypaX05VTEwqLztcbiAgc3RhdGUuaG9sZCA9IDA7XG4gIHN0YXRlLmJpdHMgPSAwO1xuICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfTEVOUyk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5biA9IG5ldyB1dGlscy5CdWYzMihFTk9VR0hfRElTVFMpO1xuXG4gIHN0YXRlLnNhbmUgPSAxO1xuICBzdGF0ZS5iYWNrID0gLTE7XG4gIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogcmVzZXRcXG5cIikpO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZVJlc2V0KHN0cm0pIHtcbiAgdmFyIHN0YXRlO1xuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdGF0ZS53c2l6ZSA9IDA7XG4gIHN0YXRlLndoYXZlID0gMDtcbiAgc3RhdGUud25leHQgPSAwO1xuICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTtcblxufVxuXG5mdW5jdGlvbiBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcbiAgdmFyIHdyYXA7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBnZXQgdGhlIHN0YXRlICovXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cbiAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGV4dHJhY3Qgd3JhcCByZXF1ZXN0IGZyb20gd2luZG93Qml0cyBwYXJhbWV0ZXIgKi9cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XG4gICAgd3JhcCA9IDA7XG4gICAgd2luZG93Qml0cyA9IC13aW5kb3dCaXRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHdyYXAgPSAod2luZG93Qml0cyA+PiA0KSArIDE7XG4gICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xuICAgICAgd2luZG93Qml0cyAmPSAxNTtcbiAgICB9XG4gIH1cblxuICAvKiBzZXQgbnVtYmVyIG9mIHdpbmRvdyBiaXRzLCBmcmVlIHdpbmRvdyBpZiBkaWZmZXJlbnQgKi9cbiAgaWYgKHdpbmRvd0JpdHMgJiYgKHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSkpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gIH1cbiAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cblxuICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovXG4gIHN0YXRlLndyYXAgPSB3cmFwO1xuICBzdGF0ZS53Yml0cyA9IHdpbmRvd0JpdHM7XG4gIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVJbml0MihzdHJtLCB3aW5kb3dCaXRzKSB7XG4gIHZhciByZXQ7XG4gIHZhciBzdGF0ZTtcblxuICBpZiAoIXN0cm0pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIC8vc3RybS5tc2cgPSBaX05VTEw7ICAgICAgICAgICAgICAgICAvKiBpbiBjYXNlIHdlIHJldHVybiBhbiBlcnJvciAqL1xuXG4gIHN0YXRlID0gbmV3IEluZmxhdGVTdGF0ZSgpO1xuXG4gIC8vaWYgKHN0YXRlID09PSBaX05VTEwpIHJldHVybiBaX01FTV9FUlJPUjtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiBhbGxvY2F0ZWRcXG5cIikpO1xuICBzdHJtLnN0YXRlID0gc3RhdGU7XG4gIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICByZXQgPSBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpO1xuICBpZiAocmV0ICE9PSBaX09LKSB7XG4gICAgc3RybS5zdGF0ZSA9IG51bGwvKlpfTlVMTCovO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVJbml0KHN0cm0pIHtcbiAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpO1xufVxuXG5cbi8qXG4gUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuIGZpeGVkIGNvZGUgZGVjb2RpbmcuICBOb3JtYWxseSB0aGlzIHJldHVybnMgZml4ZWQgdGFibGVzIGZyb20gaW5mZml4ZWQuaC5cbiBJZiBCVUlMREZJWEVEIGlzIGRlZmluZWQsIHRoZW4gaW5zdGVhZCB0aGlzIHJvdXRpbmUgYnVpbGRzIHRoZSB0YWJsZXMgdGhlXG4gZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuIHRoZXJlYWZ0ZXIuICBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgdGhlIGNvZGUgYnkgYWJvdXQgMksgYnl0ZXMsIGluXG4gZXhjaGFuZ2UgZm9yIGEgbGl0dGxlIGV4ZWN1dGlvbiB0aW1lLiAgSG93ZXZlciwgQlVJTERGSVhFRCBzaG91bGQgbm90IGJlXG4gdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuIG1heSBub3QgYmUgdGhyZWFkLXNhZmUuXG4gKi9cbnZhciB2aXJnaW4gPSB0cnVlO1xuXG52YXIgbGVuZml4LCBkaXN0Zml4OyAvLyBXZSBoYXZlIG5vIHBvaW50ZXJzIGluIEpTLCBzbyBrZWVwIHRhYmxlcyBzZXBhcmF0ZVxuXG5mdW5jdGlvbiBmaXhlZHRhYmxlcyhzdGF0ZSkge1xuICAvKiBidWlsZCBmaXhlZCBodWZmbWFuIHRhYmxlcyBpZiBmaXJzdCBjYWxsIChtYXkgbm90IGJlIHRocmVhZCBzYWZlKSAqL1xuICBpZiAodmlyZ2luKSB7XG4gICAgdmFyIHN5bTtcblxuICAgIGxlbmZpeCA9IG5ldyB1dGlscy5CdWYzMig1MTIpO1xuICAgIGRpc3RmaXggPSBuZXcgdXRpbHMuQnVmMzIoMzIpO1xuXG4gICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cbiAgICBzeW0gPSAwO1xuICAgIHdoaWxlIChzeW0gPCAxNDQpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI1NikgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDk7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjgwKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNzsgfVxuICAgIHdoaWxlIChzeW0gPCAyODgpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA4OyB9XG5cbiAgICBpbmZsYXRlX3RhYmxlKExFTlMsICBzdGF0ZS5sZW5zLCAwLCAyODgsIGxlbmZpeCwgICAwLCBzdGF0ZS53b3JrLCB7IGJpdHM6IDkgfSk7XG5cbiAgICAvKiBkaXN0YW5jZSB0YWJsZSAqL1xuICAgIHN5bSA9IDA7XG4gICAgd2hpbGUgKHN5bSA8IDMyKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNTsgfVxuXG4gICAgaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgMCwgMzIsICAgZGlzdGZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA1IH0pO1xuXG4gICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi9cbiAgICB2aXJnaW4gPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmxlbmNvZGUgPSBsZW5maXg7XG4gIHN0YXRlLmxlbmJpdHMgPSA5O1xuICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7XG4gIHN0YXRlLmRpc3RiaXRzID0gNTtcbn1cblxuXG4vKlxuIFVwZGF0ZSB0aGUgd2luZG93IHdpdGggdGhlIGxhc3Qgd3NpemUgKG5vcm1hbGx5IDMySykgYnl0ZXMgd3JpdHRlbiBiZWZvcmVcbiByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkXG4gd2hlbiBhIHdpbmRvdyBpcyBhbHJlYWR5IGluIHVzZSwgb3Igd2hlbiBvdXRwdXQgaGFzIGJlZW4gd3JpdHRlbiBkdXJpbmcgdGhpc1xuIGluZmxhdGUgY2FsbCwgYnV0IHRoZSBlbmQgb2YgdGhlIGRlZmxhdGUgc3RyZWFtIGhhcyBub3QgYmVlbiByZWFjaGVkIHlldC5cbiBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeVxuIGlzIGxvYWRlZC5cblxuIFByb3ZpZGluZyBvdXRwdXQgYnVmZmVycyBsYXJnZXIgdGhhbiAzMksgdG8gaW5mbGF0ZSgpIHNob3VsZCBwcm92aWRlIGEgc3BlZWRcbiBhZHZhbnRhZ2UsIHNpbmNlIG9ubHkgdGhlIGxhc3QgMzJLIG9mIG91dHB1dCBpcyBjb3BpZWQgdG8gdGhlIHNsaWRpbmcgd2luZG93XG4gdXBvbiByZXR1cm4gZnJvbSBpbmZsYXRlKCksIGFuZCBzaW5jZSBhbGwgZGlzdGFuY2VzIGFmdGVyIHRoZSBmaXJzdCAzMksgb2ZcbiBvdXRwdXQgd2lsbCBmYWxsIGluIHRoZSBvdXRwdXQgZGF0YSwgbWFraW5nIG1hdGNoIGNvcGllcyBzaW1wbGVyIGFuZCBmYXN0ZXIuXG4gVGhlIGFkdmFudGFnZSBtYXkgYmUgZGVwZW5kZW50IG9uIHRoZSBzaXplIG9mIHRoZSBwcm9jZXNzb3IncyBkYXRhIGNhY2hlcy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRld2luZG93KHN0cm0sIHNyYywgZW5kLCBjb3B5KSB7XG4gIHZhciBkaXN0O1xuICB2YXIgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXG4gIC8qIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYWxyZWFkeSwgYWxsb2NhdGUgc3BhY2UgZm9yIHRoZSB3aW5kb3cgKi9cbiAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xuICAgIHN0YXRlLndzaXplID0gMSA8PCBzdGF0ZS53Yml0cztcbiAgICBzdGF0ZS53bmV4dCA9IDA7XG4gICAgc3RhdGUud2hhdmUgPSAwO1xuXG4gICAgc3RhdGUud2luZG93ID0gbmV3IHV0aWxzLkJ1Zjgoc3RhdGUud3NpemUpO1xuICB9XG5cbiAgLyogY29weSBzdGF0ZS0+d3NpemUgb3IgbGVzcyBvdXRwdXQgYnl0ZXMgaW50byB0aGUgY2lyY3VsYXIgd2luZG93ICovXG4gIGlmIChjb3B5ID49IHN0YXRlLndzaXplKSB7XG4gICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LCBzcmMsIGVuZCAtIHN0YXRlLndzaXplLCBzdGF0ZS53c2l6ZSwgMCk7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7XG4gICAgaWYgKGRpc3QgPiBjb3B5KSB7XG4gICAgICBkaXN0ID0gY29weTtcbiAgICB9XG4gICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpO1xuICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdywgc3JjLCBlbmQgLSBjb3B5LCBkaXN0LCBzdGF0ZS53bmV4dCk7XG4gICAgY29weSAtPSBkaXN0O1xuICAgIGlmIChjb3B5KSB7XG4gICAgICAvL3ptZW1jcHkoc3RhdGUtPndpbmRvdywgZW5kIC0gY29weSwgY29weSk7XG4gICAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csIHNyYywgZW5kIC0gY29weSwgY29weSwgMCk7XG4gICAgICBzdGF0ZS53bmV4dCA9IGNvcHk7XG4gICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG4gICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7IHN0YXRlLnduZXh0ID0gMDsgfVxuICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsgc3RhdGUud2hhdmUgKz0gZGlzdDsgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZShzdHJtLCBmbHVzaCkge1xuICB2YXIgc3RhdGU7XG4gIHZhciBpbnB1dCwgb3V0cHV0OyAgICAgICAgICAvLyBpbnB1dC9vdXRwdXQgYnVmZmVyc1xuICB2YXIgbmV4dDsgICAgICAgICAgICAgICAgICAgLyogbmV4dCBpbnB1dCBJTkRFWCAqL1xuICB2YXIgcHV0OyAgICAgICAgICAgICAgICAgICAgLyogbmV4dCBvdXRwdXQgSU5ERVggKi9cbiAgdmFyIGhhdmUsIGxlZnQ7ICAgICAgICAgICAgIC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIHZhciBob2xkOyAgICAgICAgICAgICAgICAgICAvKiBiaXQgYnVmZmVyICovXG4gIHZhciBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBiaXRzIGluIGJpdCBidWZmZXIgKi9cbiAgdmFyIF9pbiwgX291dDsgICAgICAgICAgICAgIC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cbiAgdmFyIGNvcHk7ICAgICAgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBzdG9yZWQgb3IgbWF0Y2ggYnl0ZXMgdG8gY29weSAqL1xuICB2YXIgZnJvbTsgICAgICAgICAgICAgICAgICAgLyogd2hlcmUgdG8gY29weSBtYXRjaCBieXRlcyBmcm9tICovXG4gIHZhciBmcm9tX3NvdXJjZTtcbiAgdmFyIGhlcmUgPSAwOyAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgZGVjb2RpbmcgdGFibGUgZW50cnkgKi9cbiAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7IC8vIHBha2VkIFwiaGVyZVwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIC8vdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIHBhcmVudCB0YWJsZSBlbnRyeSAqL1xuICB2YXIgbGFzdF9iaXRzLCBsYXN0X29wLCBsYXN0X3ZhbDsgLy8gcGFrZWQgXCJsYXN0XCIgZGVub3JtYWxpemVkIChKUyBzcGVjaWZpYylcbiAgdmFyIGxlbjsgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCB0byBjb3B5IGZvciByZXBlYXRzLCBiaXRzIHRvIGRyb3AgKi9cbiAgdmFyIHJldDsgICAgICAgICAgICAgICAgICAgIC8qIHJldHVybiBjb2RlICovXG4gIHZhciBoYnVmID0gbmV3IHV0aWxzLkJ1ZjgoNCk7ICAgIC8qIGJ1ZmZlciBmb3IgZ3ppcCBoZWFkZXIgY3JjIGNhbGN1bGF0aW9uICovXG4gIHZhciBvcHRzO1xuXG4gIHZhciBuOyAvLyB0ZW1wb3JhcnkgdmFyIGZvciBORUVEX0JJVFNcblxuICB2YXIgb3JkZXIgPSAvKiBwZXJtdXRhdGlvbiBvZiBjb2RlIGxlbmd0aHMgKi9cbiAgICBbIDE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTUgXTtcblxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fCAhc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKHN0YXRlLm1vZGUgPT09IFRZUEUpIHsgc3RhdGUubW9kZSA9IFRZUEVETzsgfSAgICAvKiBza2lwIGNoZWNrICovXG5cblxuICAvLy0tLSBMT0FEKCkgLS0tXG4gIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gIG91dHB1dCA9IHN0cm0ub3V0cHV0O1xuICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gIG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGlucHV0ID0gc3RybS5pbnB1dDtcbiAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICBiaXRzID0gc3RhdGUuYml0cztcbiAgLy8tLS1cblxuICBfaW4gPSBoYXZlO1xuICBfb3V0ID0gbGVmdDtcbiAgcmV0ID0gWl9PSztcblxuICBpbmZfbGVhdmU6IC8vIGdvdG8gZW11bGF0aW9uXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcbiAgICAgIGNhc2UgSEVBRDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiAyKSAmJiBob2xkID09PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG5cbiAgICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICAgIGhvbGQgPSAwO1xuICAgICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gRkxBR1M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSAwOyAgICAgICAgICAgLyogZXhwZWN0IHpsaWIgaGVhZGVyICovXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoc3RhdGUud3JhcCAmIDEpIHx8ICAgLyogY2hlY2sgaWYgemxpYiBoZWFkZXIgYWxsb3dlZCAqL1xuICAgICAgICAgICgoKGhvbGQgJiAweGZmKS8qQklUUyg4KSovIDw8IDgpICsgKGhvbGQgPj4gOCkpICUgMzEpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgaGVhZGVyIGNoZWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIGxlbiA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDg7XG4gICAgICAgIGlmIChzdGF0ZS53Yml0cyA9PT0gMCkge1xuICAgICAgICAgIHN0YXRlLndiaXRzID0gbGVuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbiA+IHN0YXRlLndiaXRzKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCB3aW5kb3cgc2l6ZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5kbWF4ID0gMSA8PCBsZW47XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICB6bGliIGhlYWRlciBva1xcblwiKSk7XG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcbiAgICAgICAgc3RhdGUubW9kZSA9IGhvbGQgJiAweDIwMCA/IERJQ1RJRCA6IFRZUEU7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRkxBR1M6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5mbGFncyA9IGhvbGQ7XG4gICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgJiAweGZmKSAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4ZTAwMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gaGVhZGVyIGZsYWdzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGV4dCA9ICgoaG9sZCA+PiA4KSAmIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRJTUU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhidWZbM10gPSAoaG9sZCA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCA0LCAwKTtcbiAgICAgICAgICAvLz09PVxuICAgICAgICB9XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gT1M7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgT1M6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQueGZsYWdzID0gKGhvbGQgJiAweGZmKTtcbiAgICAgICAgICBzdGF0ZS5oZWFkLm9zID0gKGhvbGQgPj4gOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgfVxuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYTEVOOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbGVuID0gaG9sZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbC8qWl9OVUxMKi87XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYVFJBOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBBcnJheShzdGF0ZS5oZWFkLmV4dHJhX2xlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXRpbHMuYXJyYXlTZXQoXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgICAgIC8vIGV4dHJhIGZpZWxkIGlzIGxpbWl0ZWQgdG8gNjU1MzYgYnl0ZXNcbiAgICAgICAgICAgICAgICAvLyAtIG5vIG5lZWQgZm9yIGFkZGl0aW9uYWwgc2l6ZSBjaGVja1xuICAgICAgICAgICAgICAgIGNvcHksXG4gICAgICAgICAgICAgICAgLypsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gPyBzdGF0ZS5oZWFkLmV4dHJhX21heCA6IGNvcHksKi9cbiAgICAgICAgICAgICAgICBsZW5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgLy96bWVtY3B5KHN0YXRlLmhlYWQuZXh0cmEgKyBsZW4sIG5leHQsXG4gICAgICAgICAgICAgIC8vICAgICAgICBsZW4gKyBjb3B5ID4gc3RhdGUuaGVhZC5leHRyYV9tYXggP1xuICAgICAgICAgICAgICAvLyAgICAgICAgc3RhdGUuaGVhZC5leHRyYV9tYXggLSBsZW4gOiBjb3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBOQU1FOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubGVuZ3RoID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IENPTU1FTlQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09NTUVOVDpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgxMDAwKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgY29weSA9IDA7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG4gICAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG4gICAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5jb21tX21heCovKSkge1xuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmNvbW1lbnQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG4gICAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5tb2RlID0gSENSQztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBIQ1JDOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIGlmIChob2xkICE9PSAoc3RhdGUuY2hlY2sgJiAweGZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdoZWFkZXIgY3JjIG1pc21hdGNoJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmhjcmMgPSAoKHN0YXRlLmZsYWdzID4+IDkpICYgMSk7XG4gICAgICAgICAgc3RhdGUuaGVhZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERJQ1RJRDpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IHpzd2FwMzIoaG9sZCk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElDVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESUNUOlxuICAgICAgICBpZiAoc3RhdGUuaGF2ZWRpY3QgPT09IDApIHtcbiAgICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gICAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG4gICAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcbiAgICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcbiAgICAgICAgICAvLy0tLVxuICAgICAgICAgIHJldHVybiBaX05FRURfRElDVDtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEU6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFRE86XG4gICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7XG4gICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5sYXN0ID0gKGhvbGQgJiAweDAxKS8qQklUUygxKSovO1xuICAgICAgICAvLy0tLSBEUk9QQklUUygxKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMTtcbiAgICAgICAgYml0cyAtPSAxO1xuICAgICAgICAvLy0tLS8vXG5cbiAgICAgICAgc3dpdGNoICgoaG9sZCAmIDB4MDMpLypCSVRTKDIpKi8pIHtcbiAgICAgICAgICBjYXNlIDA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovXG4gICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87ICAgICAgICAgICAgIC8qIGRlY29kZSBjb2RlcyAqL1xuICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RPUkVEOlxuICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi9cbiAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKGhvbGQgJiAweGZmZmYpICE9PSAoKGhvbGQgPj4+IDE2KSBeIDB4ZmZmZikpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxcblwiLFxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWTpcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICBpZiAoY29weSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvLy0tLSB6bWVtY3B5KHB1dCwgbmV4dCwgY29weSk7IC0tLVxuICAgICAgICAgIHV0aWxzLmFycmF5U2V0KG91dHB1dCwgaW5wdXQsIG5leHQsIGNvcHksIHB1dCk7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuICAgICAgICAgIHB1dCArPSBjb3B5O1xuICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGVuZFxcblwiKSk7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVEFCTEU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE0KTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNCkge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5ubGVuID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMjU3O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg1KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNTtcbiAgICAgICAgYml0cyAtPSA1O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLm5kaXN0ID0gKGhvbGQgJiAweDFmKS8qQklUUyg1KSovICsgMTtcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uY29kZSA9IChob2xkICYgMHgwZikvKkJJVFMoNCkqLyArIDQ7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbi8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxuICAgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgdGFibGUgc2l6ZXMgb2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5oYXZlID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOTEVOUzpcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5uY29kZSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSAzO1xuICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCAxOSkge1xuICAgICAgICAgIHN0YXRlLmxlbnNbb3JkZXJbc3RhdGUuaGF2ZSsrXV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vc3RhdGUubmV4dCA9IHN0YXRlLmNvZGVzO1xuICAgICAgICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuICAgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcbiAgICAgICAgc3RhdGUubGVuY29kZSA9IHN0YXRlLmxlbmR5bjtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDc7XG5cbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUubGVuYml0cyB9O1xuICAgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG4gICAgICAgIHN0YXRlLmhhdmUgPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09ERUxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xuICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuICAgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAyKTtcbiAgICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7XG4gICAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy89PT0vL1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG4gICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOy8vQklUUygyKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG4gICAgICAgICAgICAgIGJpdHMgLT0gMztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgbGVuID0gMDtcbiAgICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsvL0JJVFMoNyk7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xuICAgICAgICAgICAgICBiaXRzIC09IDc7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY29weS0tKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG4gICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBCQUQpIHsgYnJlYWs7IH1cblxuICAgICAgICAvKiBjaGVjayBmb3IgZW5kLW9mLWJsb2NrIGNvZGUgKGJldHRlciBoYXZlIG9uZSkgKi9cbiAgICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGJ1aWxkIGNvZGUgdGFibGVzIC0tIG5vdGU6IGRvIG5vdCBjaGFuZ2UgdGhlIGxlbmJpdHMgb3IgZGlzdGJpdHNcbiAgICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShMRU5TLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IDY7XG4gICAgICAgIC8vc3RhdGUuZGlzdGNvZGUuY29weShzdGF0ZS5jb2Rlcyk7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW47XG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmRpc3RiaXRzIH07XG4gICAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIHN0YXRlLm5sZW4sIHN0YXRlLm5kaXN0LCBzdGF0ZS5kaXN0Y29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG4gICAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG4gICAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IG9wdHMuYml0cztcbiAgICAgICAgLy8gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlcyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgJ2luZmxhdGU6ICAgICAgIGNvZGVzIG9rXFxuJykpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOXztcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTl86XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOOlxuICAgICAgICBpZiAoaGF2ZSA+PSA2ICYmIGxlZnQgPj0gMjU4KSB7XG4gICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgLy8tLS1cbiAgICAgICAgICBpbmZsYXRlX2Zhc3Qoc3RybSwgX291dCk7XG4gICAgICAgICAgLy8tLS0gTE9BRCgpIC0tLVxuICAgICAgICAgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG4gICAgICAgICAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gICAgICAgICAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICAgICAgICAgIG5leHQgPSBzdHJtLm5leHRfaW47XG4gICAgICAgICAgaW5wdXQgPSBzdHJtLmlucHV0O1xuICAgICAgICAgIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICAgICAgICAgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuICAgICAgICAgIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICAgICAgICAgIC8vLS0tXG5cbiAgICAgICAgICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkge1xuICAgICAgICAgICAgc3RhdGUuYmFjayA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5iYWNrID0gMDtcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUubGVuYml0cykgLSAxKV07ICAvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoaGVyZV9iaXRzIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiYgKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5sZW5jb2RlW2xhc3RfdmFsICtcbiAgICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLSAxKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcbiAgICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG4gICAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuICAgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3ZiA/XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG4gICAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiAzMikge1xuICAgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcbiAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5leHRyYSA9IGhlcmVfb3AgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5FWFQ6XG4gICAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcbiAgICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0gMSkvKkJJVFMoc3RhdGUuZXh0cmEpKi87XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoc3RhdGUuZXh0cmEpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIGJpdHMgLT0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIHN0YXRlLmJhY2sgKz0gc3RhdGUuZXh0cmE7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIHN0YXRlLndhcyA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVDpcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUuZGlzdGJpdHMpKi9cbiAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG4gICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcbiAgICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG4gICAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG4gICAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUuZGlzdGNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5vZmZzZXQgPSBoZXJlX3ZhbDtcbiAgICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcbiAgICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElTVEVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5vZmZzZXQgKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgICAgICAgaWYgKHN0YXRlLm9mZnNldCA+IHN0YXRlLmRtYXgpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuLy8jZW5kaWZcbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIE1BVENIOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcbiAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG4gICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgVHJhY2UoKHN0ZGVyciwgXCJpbmZsYXRlLmMgdG9vIGZhclxcblwiKSk7XG4vLyAgICAgICAgICBjb3B5IC09IHN0YXRlLndoYXZlO1xuLy8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuLy8gICAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4vLyAgICAgICAgICBsZWZ0IC09IGNvcHk7XG4vLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbi8vICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IDA7XG4vLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuLy8gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4vLyAgICAgICAgICBicmVhaztcbi8vI2VuZGlmXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHtcbiAgICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XG4gICAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjb3B5IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuICAgICAgICBsZWZ0IC09IGNvcHk7XG4gICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4gICAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTElUOlxuICAgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgbGVmdC0tO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ0hFQ0s6XG4gICAgICAgIGlmIChzdGF0ZS53cmFwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgLy8gVXNlICd8JyBpbnN0ZWFkIG9mICcrJyB0byBtYWtlIHN1cmUgdGhhdCByZXN1bHQgaXMgc2lnbmVkXG4gICAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIF9vdXQgLT0gbGVmdDtcbiAgICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICAgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gICAgICAgICAgaWYgKF9vdXQpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XG4gICAgICAgICAgICAgICAgLypVUERBVEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOR1RIOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGxlbmd0aCBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBET05FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERPTkU6XG4gICAgICAgIHJldCA9IFpfU1RSRUFNX0VORDtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBCQUQ6XG4gICAgICAgIHJldCA9IFpfREFUQV9FUlJPUjtcbiAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgY2FzZSBNRU06XG4gICAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICAgIGNhc2UgU1lOQzpcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIH1cbiAgfVxuXG4gIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuICAvKlxuICAgICBSZXR1cm4gZnJvbSBpbmZsYXRlKCksIHVwZGF0aW5nIHRoZSB0b3RhbCBjb3VudHMgYW5kIHRoZSBjaGVjayB2YWx1ZS5cbiAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuICAgICBlcnJvci4gIENhbGwgdXBkYXRld2luZG93KCkgdG8gY3JlYXRlIGFuZC9vciB1cGRhdGUgdGhlIHdpbmRvdyBzdGF0ZS5cbiAgICAgTm90ZTogYSBtZW1vcnkgZXJyb3IgZnJvbSBpbmZsYXRlKCkgaXMgbm9uLXJlY292ZXJhYmxlLlxuICAgKi9cblxuICAvLy0tLSBSRVNUT1JFKCkgLS0tXG4gIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgLy8tLS1cblxuICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA8IENIRUNLIHx8IGZsdXNoICE9PSBaX0ZJTklTSCkpKSB7XG4gICAgaWYgKHVwZGF0ZXdpbmRvdyhzdHJtLCBzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCwgX291dCAtIHN0cm0uYXZhaWxfb3V0KSkge1xuICAgICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgX2luIC09IHN0cm0uYXZhaWxfaW47XG4gIF9vdXQgLT0gc3RybS5hdmFpbF9vdXQ7XG4gIHN0cm0udG90YWxfaW4gKz0gX2luO1xuICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuICBzdGF0ZS50b3RhbCArPSBfb3V0O1xuICBpZiAoc3RhdGUud3JhcCAmJiBfb3V0KSB7XG4gICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gLypVUERBVEUoc3RhdGUuY2hlY2ssIHN0cm0ubmV4dF9vdXQgLSBfb3V0LCBfb3V0KTsqL1xuICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpIDogYWRsZXIzMihzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICB9XG4gIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIKSAmJiByZXQgPT09IFpfT0spIHtcbiAgICByZXQgPSBaX0JVRl9FUlJPUjtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBpbmZsYXRlRW5kKHN0cm0pIHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgLyp8fCBzdHJtLT56ZnJlZSA9PSAoZnJlZV9mdW5jKTAqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgfVxuXG4gIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS53aW5kb3cpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuICByZXR1cm4gWl9PSztcbn1cblxuZnVuY3Rpb24gaW5mbGF0ZUdldEhlYWRlcihzdHJtLCBoZWFkKSB7XG4gIHZhciBzdGF0ZTtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgaWYgKChzdGF0ZS53cmFwICYgMikgPT09IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG5cbiAgLyogc2F2ZSBoZWFkZXIgc3RydWN0dXJlICovXG4gIHN0YXRlLmhlYWQgPSBoZWFkO1xuICBoZWFkLmRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpIHtcbiAgdmFyIGRpY3RMZW5ndGggPSBkaWN0aW9uYXJ5Lmxlbmd0aDtcblxuICB2YXIgc3RhdGU7XG4gIHZhciBkaWN0aWQ7XG4gIHZhciByZXQ7XG5cbiAgLyogY2hlY2sgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIC8qID09IFpfTlVMTCAqLyB8fCAhc3RybS5zdGF0ZSAvKiA9PSBaX05VTEwgKi8pIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG4gIHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICBpZiAoc3RhdGUud3JhcCAhPT0gMCAmJiBzdGF0ZS5tb2RlICE9PSBESUNUKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzIoZGljdGlkLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCAwKTtcbiAgICBpZiAoZGljdGlkICE9PSBzdGF0ZS5jaGVjaykge1xuICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcbiAgICB9XG4gIH1cbiAgLyogY29weSBkaWN0aW9uYXJ5IHRvIHdpbmRvdyB1c2luZyB1cGRhdGV3aW5kb3coKSwgd2hpY2ggd2lsbCBhbWVuZCB0aGVcbiAgIGV4aXN0aW5nIGRpY3Rpb25hcnkgaWYgYXBwcm9wcmlhdGUgKi9cbiAgcmV0ID0gdXBkYXRld2luZG93KHN0cm0sIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIGRpY3RMZW5ndGgpO1xuICBpZiAocmV0KSB7XG4gICAgc3RhdGUubW9kZSA9IE1FTTtcbiAgICByZXR1cm4gWl9NRU1fRVJST1I7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0s7XG59XG5cbmV4cG9ydHMuaW5mbGF0ZVJlc2V0ID0gaW5mbGF0ZVJlc2V0O1xuZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0MjtcbmV4cG9ydHMuaW5mbGF0ZVJlc2V0S2VlcCA9IGluZmxhdGVSZXNldEtlZXA7XG5leHBvcnRzLmluZmxhdGVJbml0ID0gaW5mbGF0ZUluaXQ7XG5leHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0MjtcbmV4cG9ydHMuaW5mbGF0ZSA9IGluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVFbmQgPSBpbmZsYXRlRW5kO1xuZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjtcbmV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbmV4cG9ydHMuaW5mbGF0ZUluZm8gPSAncGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KSc7XG5cbi8qIE5vdCBpbXBsZW1lbnRlZFxuZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5O1xuZXhwb3J0cy5pbmZsYXRlR2V0RGljdGlvbmFyeSA9IGluZmxhdGVHZXREaWN0aW9uYXJ5O1xuZXhwb3J0cy5pbmZsYXRlTWFyayA9IGluZmxhdGVNYXJrO1xuZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7XG5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XG5leHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xuZXhwb3J0cy5pbmZsYXRlVW5kZXJtaW5lID0gaW5mbGF0ZVVuZGVybWluZTtcbiovXG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cbiAgWl9OT19GTFVTSDogICAgICAgICAwLFxuICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG4gIFpfU1lOQ19GTFVTSDogICAgICAgMixcbiAgWl9GVUxMX0ZMVVNIOiAgICAgICAzLFxuICBaX0ZJTklTSDogICAgICAgICAgIDQsXG4gIFpfQkxPQ0s6ICAgICAgICAgICAgNSxcbiAgWl9UUkVFUzogICAgICAgICAgICA2LFxuXG4gIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcbiAgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG4gICovXG4gIFpfT0s6ICAgICAgICAgICAgICAgMCxcbiAgWl9TVFJFQU1fRU5EOiAgICAgICAxLFxuICBaX05FRURfRElDVDogICAgICAgIDIsXG4gIFpfRVJSTk86ICAgICAgICAgICAtMSxcbiAgWl9TVFJFQU1fRVJST1I6ICAgIC0yLFxuICBaX0RBVEFfRVJST1I6ICAgICAgLTMsXG4gIC8vWl9NRU1fRVJST1I6ICAgICAtNCxcbiAgWl9CVUZfRVJST1I6ICAgICAgIC01LFxuICAvL1pfVkVSU0lPTl9FUlJPUjogLTYsXG5cbiAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG4gIFpfTk9fQ09NUFJFU1NJT046ICAgICAgICAgMCxcbiAgWl9CRVNUX1NQRUVEOiAgICAgICAgICAgICAxLFxuICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogICAtMSxcblxuXG4gIFpfRklMVEVSRUQ6ICAgICAgICAgICAgICAgMSxcbiAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuICBaX1JMRTogICAgICAgICAgICAgICAgICAgIDMsXG4gIFpfRklYRUQ6ICAgICAgICAgICAgICAgICAgNCxcbiAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG4gIC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cbiAgWl9CSU5BUlk6ICAgICAgICAgICAgICAgICAwLFxuICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG4gIC8vWl9BU0NJSTogICAgICAgICAgICAgICAgMSwgLy8gPSBaX1RFWFQgKGRlcHJlY2F0ZWQpXG4gIFpfVU5LTk9XTjogICAgICAgICAgICAgICAgMixcblxuICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cbiAgWl9ERUZMQVRFRDogICAgICAgICAgICAgICA4XG4gIC8vWl9OVUxMOiAgICAgICAgICAgICAgICAgbnVsbCAvLyBVc2UgLTEgb3IgbnVsbCBpbmxpbmUsIGRlcGVuZGluZyBvbiB2YXIgdHlwZVxufTtcbiIsICIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQgY2FtZWxjYXNlOiBcIm9mZlwiICovXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxudmFyIFpzdHJlYW0gPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL3pzdHJlYW0nKTtcbnZhciB6bGliX2RlZmxhdGUgPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL2RlZmxhdGUuanMnKTtcbnZhciB6bGliX2luZmxhdGUgPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL2luZmxhdGUuanMnKTtcbnZhciBjb25zdGFudHMgPSByZXF1aXJlKCdwYWtvL2xpYi96bGliL2NvbnN0YW50cycpO1xuXG5mb3IgKHZhciBrZXkgaW4gY29uc3RhbnRzKSB7XG4gIGV4cG9ydHNba2V5XSA9IGNvbnN0YW50c1trZXldO1xufVxuXG4vLyB6bGliIG1vZGVzXG5leHBvcnRzLk5PTkUgPSAwO1xuZXhwb3J0cy5ERUZMQVRFID0gMTtcbmV4cG9ydHMuSU5GTEFURSA9IDI7XG5leHBvcnRzLkdaSVAgPSAzO1xuZXhwb3J0cy5HVU5aSVAgPSA0O1xuZXhwb3J0cy5ERUZMQVRFUkFXID0gNTtcbmV4cG9ydHMuSU5GTEFURVJBVyA9IDY7XG5leHBvcnRzLlVOWklQID0gNztcblxudmFyIEdaSVBfSEVBREVSX0lEMSA9IDB4MWY7XG52YXIgR1pJUF9IRUFERVJfSUQyID0gMHg4YjtcblxuLyoqXG4gKiBFbXVsYXRlIE5vZGUncyB6bGliIEMrKyBsYXllciBmb3IgdXNlIGJ5IHRoZSBKUyBsYXllciBpbiBpbmRleC5qc1xuICovXG5mdW5jdGlvbiBabGliKG1vZGUpIHtcbiAgaWYgKHR5cGVvZiBtb2RlICE9PSAnbnVtYmVyJyB8fCBtb2RlIDwgZXhwb3J0cy5ERUZMQVRFIHx8IG1vZGUgPiBleHBvcnRzLlVOWklQKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGFyZ3VtZW50Jyk7XG4gIH1cblxuICB0aGlzLmRpY3Rpb25hcnkgPSBudWxsO1xuICB0aGlzLmVyciA9IDA7XG4gIHRoaXMuZmx1c2ggPSAwO1xuICB0aGlzLmluaXRfZG9uZSA9IGZhbHNlO1xuICB0aGlzLmxldmVsID0gMDtcbiAgdGhpcy5tZW1MZXZlbCA9IDA7XG4gIHRoaXMubW9kZSA9IG1vZGU7XG4gIHRoaXMuc3RyYXRlZ3kgPSAwO1xuICB0aGlzLndpbmRvd0JpdHMgPSAwO1xuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG4gIHRoaXMucGVuZGluZ19jbG9zZSA9IGZhbHNlO1xuICB0aGlzLmd6aXBfaWRfYnl0ZXNfcmVhZCA9IDA7XG59XG5cblpsaWIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy53cml0ZV9pbl9wcm9ncmVzcykge1xuICAgIHRoaXMucGVuZGluZ19jbG9zZSA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5wZW5kaW5nX2Nsb3NlID0gZmFsc2U7XG5cbiAgYXNzZXJ0KHRoaXMuaW5pdF9kb25lLCAnY2xvc2UgYmVmb3JlIGluaXQnKTtcbiAgYXNzZXJ0KHRoaXMubW9kZSA8PSBleHBvcnRzLlVOWklQKTtcblxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLkRFRkxBVEUgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLkdaSVAgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLkRFRkxBVEVSQVcpIHtcbiAgICB6bGliX2RlZmxhdGUuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gZXhwb3J0cy5JTkZMQVRFIHx8IHRoaXMubW9kZSA9PT0gZXhwb3J0cy5HVU5aSVAgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLklORkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLlVOWklQKSB7XG4gICAgemxpYl9pbmZsYXRlLmluZmxhdGVFbmQodGhpcy5zdHJtKTtcbiAgfVxuXG4gIHRoaXMubW9kZSA9IGV4cG9ydHMuTk9ORTtcblxuICB0aGlzLmRpY3Rpb25hcnkgPSBudWxsO1xufTtcblxuWmxpYi5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZmx1c2gsIGlucHV0LCBpbl9vZmYsIGluX2xlbiwgb3V0LCBvdXRfb2ZmLCBvdXRfbGVuKSB7XG4gIHJldHVybiB0aGlzLl93cml0ZSh0cnVlLCBmbHVzaCwgaW5wdXQsIGluX29mZiwgaW5fbGVuLCBvdXQsIG91dF9vZmYsIG91dF9sZW4pO1xufTtcblxuWmxpYi5wcm90b3R5cGUud3JpdGVTeW5jID0gZnVuY3Rpb24gKGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbikge1xuICByZXR1cm4gdGhpcy5fd3JpdGUoZmFsc2UsIGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbik7XG59O1xuXG5abGliLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoYXN5bmMsIGZsdXNoLCBpbnB1dCwgaW5fb2ZmLCBpbl9sZW4sIG91dCwgb3V0X29mZiwgb3V0X2xlbikge1xuICBhc3NlcnQuZXF1YWwoYXJndW1lbnRzLmxlbmd0aCwgOCk7XG5cbiAgYXNzZXJ0KHRoaXMuaW5pdF9kb25lLCAnd3JpdGUgYmVmb3JlIGluaXQnKTtcbiAgYXNzZXJ0KHRoaXMubW9kZSAhPT0gZXhwb3J0cy5OT05FLCAnYWxyZWFkeSBmaW5hbGl6ZWQnKTtcbiAgYXNzZXJ0LmVxdWFsKGZhbHNlLCB0aGlzLndyaXRlX2luX3Byb2dyZXNzLCAnd3JpdGUgYWxyZWFkeSBpbiBwcm9ncmVzcycpO1xuICBhc3NlcnQuZXF1YWwoZmFsc2UsIHRoaXMucGVuZGluZ19jbG9zZSwgJ2Nsb3NlIGlzIHBlbmRpbmcnKTtcblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gdHJ1ZTtcblxuICBhc3NlcnQuZXF1YWwoZmFsc2UsIGZsdXNoID09PSB1bmRlZmluZWQsICdtdXN0IHByb3ZpZGUgZmx1c2ggdmFsdWUnKTtcblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gdHJ1ZTtcblxuICBpZiAoZmx1c2ggIT09IGV4cG9ydHMuWl9OT19GTFVTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX1BBUlRJQUxfRkxVU0ggJiYgZmx1c2ggIT09IGV4cG9ydHMuWl9TWU5DX0ZMVVNIICYmIGZsdXNoICE9PSBleHBvcnRzLlpfRlVMTF9GTFVTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX0ZJTklTSCAmJiBmbHVzaCAhPT0gZXhwb3J0cy5aX0JMT0NLKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZsdXNoIHZhbHVlJyk7XG4gIH1cblxuICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgIGlucHV0ID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIGluX2xlbiA9IDA7XG4gICAgaW5fb2ZmID0gMDtcbiAgfVxuXG4gIHRoaXMuc3RybS5hdmFpbF9pbiA9IGluX2xlbjtcbiAgdGhpcy5zdHJtLmlucHV0ID0gaW5wdXQ7XG4gIHRoaXMuc3RybS5uZXh0X2luID0gaW5fb2ZmO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gb3V0X2xlbjtcbiAgdGhpcy5zdHJtLm91dHB1dCA9IG91dDtcbiAgdGhpcy5zdHJtLm5leHRfb3V0ID0gb3V0X29mZjtcbiAgdGhpcy5mbHVzaCA9IGZsdXNoO1xuXG4gIGlmICghYXN5bmMpIHtcbiAgICAvLyBzeW5jIHZlcnNpb25cbiAgICB0aGlzLl9wcm9jZXNzKCk7XG5cbiAgICBpZiAodGhpcy5fY2hlY2tFcnJvcigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fYWZ0ZXJTeW5jKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGFzeW5jIHZlcnNpb25cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9wcm9jZXNzKCk7XG4gICAgc2VsZi5fYWZ0ZXIoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5abGliLnByb3RvdHlwZS5fYWZ0ZXJTeW5jID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXZhaWxfb3V0ID0gdGhpcy5zdHJtLmF2YWlsX291dDtcbiAgdmFyIGF2YWlsX2luID0gdGhpcy5zdHJtLmF2YWlsX2luO1xuXG4gIHRoaXMud3JpdGVfaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcblxuICByZXR1cm4gW2F2YWlsX2luLCBhdmFpbF9vdXRdO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlID0gbnVsbDtcblxuICAvLyBJZiB0aGUgYXZhaWxfb3V0IGlzIGxlZnQgYXQgMCwgdGhlbiBpdCBtZWFucyB0aGF0IGl0IHJhbiBvdXRcbiAgLy8gb2Ygcm9vbS4gIElmIHRoZXJlIHdhcyBhdmFpbF9vdXQgbGVmdCBvdmVyLCB0aGVuIGl0IG1lYW5zXG4gIC8vIHRoYXQgYWxsIG9mIHRoZSBpbnB1dCB3YXMgY29uc3VtZWQuXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkdaSVA6XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlKHRoaXMuc3RybSwgdGhpcy5mbHVzaCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cG9ydHMuVU5aSVA6XG4gICAgICBpZiAodGhpcy5zdHJtLmF2YWlsX2luID4gMCkge1xuICAgICAgICBuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlID0gdGhpcy5zdHJtLm5leHRfaW47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodGhpcy5nemlwX2lkX2J5dGVzX3JlYWQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGlmIChuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5zdHJtLmlucHV0W25leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGVdID09PSBHWklQX0hFQURFUl9JRDEpIHtcbiAgICAgICAgICAgIHRoaXMuZ3ppcF9pZF9ieXRlc19yZWFkID0gMTtcbiAgICAgICAgICAgIG5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUrKztcblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RybS5hdmFpbF9pbiA9PT0gMSkge1xuICAgICAgICAgICAgICAvLyBUaGUgb25seSBhdmFpbGFibGUgYnl0ZSB3YXMgYWxyZWFkeSByZWFkLlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb2RlID0gZXhwb3J0cy5JTkZMQVRFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAobmV4dF9leHBlY3RlZF9oZWFkZXJfYnl0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuc3RybS5pbnB1dFtuZXh0X2V4cGVjdGVkX2hlYWRlcl9ieXRlXSA9PT0gR1pJUF9IRUFERVJfSUQyKSB7XG4gICAgICAgICAgICB0aGlzLmd6aXBfaWRfYnl0ZXNfcmVhZCA9IDI7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSBleHBvcnRzLkdVTlpJUDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gYWN0dWFsIGRpZmZlcmVuY2UgYmV0d2VlbiBJTkZMQVRFIGFuZCBJTkZMQVRFUkFXXG4gICAgICAgICAgICAvLyAoYWZ0ZXIgaW5pdGlhbGl6YXRpb24pLlxuICAgICAgICAgICAgdGhpcy5tb2RlID0gZXhwb3J0cy5JTkZMQVRFO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBudW1iZXIgb2YgZ3ppcCBtYWdpYyBudW1iZXIgYnl0ZXMgcmVhZCcpO1xuICAgICAgfVxuXG4gICAgLy8gZmFsbHRocm91Z2hcbiAgICBjYXNlIGV4cG9ydHMuSU5GTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuR1VOWklQOlxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFUkFXOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZSh0aGlzLnN0cm0sIHRoaXMuZmx1c2hcblxuICAgICAgLy8gSWYgZGF0YSB3YXMgZW5jb2RlZCB3aXRoIGRpY3Rpb25hcnlcbiAgICAgICk7aWYgKHRoaXMuZXJyID09PSBleHBvcnRzLlpfTkVFRF9ESUNUICYmIHRoaXMuZGljdGlvbmFyeSkge1xuICAgICAgICAvLyBMb2FkIGl0XG4gICAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgdGhpcy5kaWN0aW9uYXJ5KTtcbiAgICAgICAgaWYgKHRoaXMuZXJyID09PSBleHBvcnRzLlpfT0spIHtcbiAgICAgICAgICAvLyBBbmQgdHJ5IHRvIGRlY29kZSBhZ2FpblxuICAgICAgICAgIHRoaXMuZXJyID0gemxpYl9pbmZsYXRlLmluZmxhdGUodGhpcy5zdHJtLCB0aGlzLmZsdXNoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVyciA9PT0gZXhwb3J0cy5aX0RBVEFfRVJST1IpIHtcbiAgICAgICAgICAvLyBCb3RoIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgYW5kIGluZmxhdGUoKSByZXR1cm4gWl9EQVRBX0VSUk9SLlxuICAgICAgICAgIC8vIE1ha2UgaXQgcG9zc2libGUgZm9yIEFmdGVyKCkgdG8gdGVsbCBhIGJhZCBkaWN0aW9uYXJ5IGZyb20gYmFkXG4gICAgICAgICAgLy8gaW5wdXQuXG4gICAgICAgICAgdGhpcy5lcnIgPSBleHBvcnRzLlpfTkVFRF9ESUNUO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAodGhpcy5zdHJtLmF2YWlsX2luID4gMCAmJiB0aGlzLm1vZGUgPT09IGV4cG9ydHMuR1VOWklQICYmIHRoaXMuZXJyID09PSBleHBvcnRzLlpfU1RSRUFNX0VORCAmJiB0aGlzLnN0cm0ubmV4dF9pblswXSAhPT0gMHgwMCkge1xuICAgICAgICAvLyBCeXRlcyByZW1haW4gaW4gaW5wdXQgYnVmZmVyLiBQZXJoYXBzIHRoaXMgaXMgYW5vdGhlciBjb21wcmVzc2VkXG4gICAgICAgIC8vIG1lbWJlciBpbiB0aGUgc2FtZSBhcmNoaXZlLCBvciBqdXN0IHRyYWlsaW5nIGdhcmJhZ2UuXG4gICAgICAgIC8vIFRyYWlsaW5nIHplcm8gYnl0ZXMgYXJlIG9rYXksIHRob3VnaCwgc2luY2UgdGhleSBhcmUgZnJlcXVlbnRseVxuICAgICAgICAvLyB1c2VkIGZvciBwYWRkaW5nLlxuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZSh0aGlzLnN0cm0sIHRoaXMuZmx1c2gpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlICcgKyB0aGlzLm1vZGUpO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5fY2hlY2tFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gQWNjZXB0YWJsZSBlcnJvciBzdGF0ZXMgZGVwZW5kIG9uIHRoZSB0eXBlIG9mIHpsaWIgc3RyZWFtLlxuICBzd2l0Y2ggKHRoaXMuZXJyKSB7XG4gICAgY2FzZSBleHBvcnRzLlpfT0s6XG4gICAgY2FzZSBleHBvcnRzLlpfQlVGX0VSUk9SOlxuICAgICAgaWYgKHRoaXMuc3RybS5hdmFpbF9vdXQgIT09IDAgJiYgdGhpcy5mbHVzaCA9PT0gZXhwb3J0cy5aX0ZJTklTSCkge1xuICAgICAgICB0aGlzLl9lcnJvcigndW5leHBlY3RlZCBlbmQgb2YgZmlsZScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cG9ydHMuWl9TVFJFQU1fRU5EOlxuICAgICAgLy8gbm9ybWFsIHN0YXR1c2VzLCBub3QgZmF0YWxcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwb3J0cy5aX05FRURfRElDVDpcbiAgICAgIGlmICh0aGlzLmRpY3Rpb25hcnkgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9lcnJvcignTWlzc2luZyBkaWN0aW9uYXJ5Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lcnJvcignQmFkIGRpY3Rpb25hcnknKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gc29tZXRoaW5nIGVsc2UuXG4gICAgICB0aGlzLl9lcnJvcignWmxpYiBlcnJvcicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5abGliLnByb3RvdHlwZS5fYWZ0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fY2hlY2tFcnJvcigpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGF2YWlsX291dCA9IHRoaXMuc3RybS5hdmFpbF9vdXQ7XG4gIHZhciBhdmFpbF9pbiA9IHRoaXMuc3RybS5hdmFpbF9pbjtcblxuICB0aGlzLndyaXRlX2luX3Byb2dyZXNzID0gZmFsc2U7XG5cbiAgLy8gY2FsbCB0aGUgd3JpdGUoKSBjYlxuICB0aGlzLmNhbGxiYWNrKGF2YWlsX2luLCBhdmFpbF9vdXQpO1xuXG4gIGlmICh0aGlzLnBlbmRpbmdfY2xvc2UpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cbn07XG5cblpsaWIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIGlmICh0aGlzLnN0cm0ubXNnKSB7XG4gICAgbWVzc2FnZSA9IHRoaXMuc3RybS5tc2c7XG4gIH1cbiAgdGhpcy5vbmVycm9yKG1lc3NhZ2UsIHRoaXMuZXJyXG5cbiAgLy8gbm8gaG9wZSBvZiByZXNjdWUuXG4gICk7dGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICBpZiAodGhpcy5wZW5kaW5nX2Nsb3NlKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHdpbmRvd0JpdHMsIGxldmVsLCBtZW1MZXZlbCwgc3RyYXRlZ3ksIGRpY3Rpb25hcnkpIHtcbiAgYXNzZXJ0KGFyZ3VtZW50cy5sZW5ndGggPT09IDQgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gNSwgJ2luaXQod2luZG93Qml0cywgbGV2ZWwsIG1lbUxldmVsLCBzdHJhdGVneSwgW2RpY3Rpb25hcnldKScpO1xuXG4gIGFzc2VydCh3aW5kb3dCaXRzID49IDggJiYgd2luZG93Qml0cyA8PSAxNSwgJ2ludmFsaWQgd2luZG93Qml0cycpO1xuICBhc3NlcnQobGV2ZWwgPj0gLTEgJiYgbGV2ZWwgPD0gOSwgJ2ludmFsaWQgY29tcHJlc3Npb24gbGV2ZWwnKTtcblxuICBhc3NlcnQobWVtTGV2ZWwgPj0gMSAmJiBtZW1MZXZlbCA8PSA5LCAnaW52YWxpZCBtZW1sZXZlbCcpO1xuXG4gIGFzc2VydChzdHJhdGVneSA9PT0gZXhwb3J0cy5aX0ZJTFRFUkVEIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfUkxFIHx8IHN0cmF0ZWd5ID09PSBleHBvcnRzLlpfRklYRUQgfHwgc3RyYXRlZ3kgPT09IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZLCAnaW52YWxpZCBzdHJhdGVneScpO1xuXG4gIHRoaXMuX2luaXQobGV2ZWwsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSwgZGljdGlvbmFyeSk7XG4gIHRoaXMuX3NldERpY3Rpb25hcnkoKTtcbn07XG5cblpsaWIucHJvdG90eXBlLnBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdkZWZsYXRlUGFyYW1zIE5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cblpsaWIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLl9zZXREaWN0aW9uYXJ5KCk7XG59O1xuXG5abGliLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChsZXZlbCwgd2luZG93Qml0cywgbWVtTGV2ZWwsIHN0cmF0ZWd5LCBkaWN0aW9uYXJ5KSB7XG4gIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgdGhpcy53aW5kb3dCaXRzID0gd2luZG93Qml0cztcbiAgdGhpcy5tZW1MZXZlbCA9IG1lbUxldmVsO1xuICB0aGlzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG5cbiAgdGhpcy5mbHVzaCA9IGV4cG9ydHMuWl9OT19GTFVTSDtcblxuICB0aGlzLmVyciA9IGV4cG9ydHMuWl9PSztcblxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLkdaSVAgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLkdVTlpJUCkge1xuICAgIHRoaXMud2luZG93Qml0cyArPSAxNjtcbiAgfVxuXG4gIGlmICh0aGlzLm1vZGUgPT09IGV4cG9ydHMuVU5aSVApIHtcbiAgICB0aGlzLndpbmRvd0JpdHMgKz0gMzI7XG4gIH1cblxuICBpZiAodGhpcy5tb2RlID09PSBleHBvcnRzLkRFRkxBVEVSQVcgfHwgdGhpcy5tb2RlID09PSBleHBvcnRzLklORkxBVEVSQVcpIHtcbiAgICB0aGlzLndpbmRvd0JpdHMgPSAtMSAqIHRoaXMud2luZG93Qml0cztcbiAgfVxuXG4gIHRoaXMuc3RybSA9IG5ldyBac3RyZWFtKCk7XG5cbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuR1pJUDpcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sIHRoaXMubGV2ZWwsIGV4cG9ydHMuWl9ERUZMQVRFRCwgdGhpcy53aW5kb3dCaXRzLCB0aGlzLm1lbUxldmVsLCB0aGlzLnN0cmF0ZWd5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5HVU5aSVA6XG4gICAgY2FzZSBleHBvcnRzLklORkxBVEVSQVc6XG4gICAgY2FzZSBleHBvcnRzLlVOWklQOlxuICAgICAgdGhpcy5lcnIgPSB6bGliX2luZmxhdGUuaW5mbGF0ZUluaXQyKHRoaXMuc3RybSwgdGhpcy53aW5kb3dCaXRzKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbW9kZSAnICsgdGhpcy5tb2RlKTtcbiAgfVxuXG4gIGlmICh0aGlzLmVyciAhPT0gZXhwb3J0cy5aX09LKSB7XG4gICAgdGhpcy5fZXJyb3IoJ0luaXQgZXJyb3InKTtcbiAgfVxuXG4gIHRoaXMuZGljdGlvbmFyeSA9IGRpY3Rpb25hcnk7XG5cbiAgdGhpcy53cml0ZV9pbl9wcm9ncmVzcyA9IGZhbHNlO1xuICB0aGlzLmluaXRfZG9uZSA9IHRydWU7XG59O1xuXG5abGliLnByb3RvdHlwZS5fc2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuZGljdGlvbmFyeSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lcnIgPSBleHBvcnRzLlpfT0s7XG5cbiAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURTpcbiAgICBjYXNlIGV4cG9ydHMuREVGTEFURVJBVzpcbiAgICAgIHRoaXMuZXJyID0gemxpYl9kZWZsYXRlLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgdGhpcy5kaWN0aW9uYXJ5KTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmICh0aGlzLmVyciAhPT0gZXhwb3J0cy5aX09LKSB7XG4gICAgdGhpcy5fZXJyb3IoJ0ZhaWxlZCB0byBzZXQgZGljdGlvbmFyeScpO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZXJyID0gZXhwb3J0cy5aX09LO1xuXG4gIHN3aXRjaCAodGhpcy5tb2RlKSB7XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEU6XG4gICAgY2FzZSBleHBvcnRzLkRFRkxBVEVSQVc6XG4gICAgY2FzZSBleHBvcnRzLkdaSVA6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlUmVzZXQodGhpcy5zdHJtKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFOlxuICAgIGNhc2UgZXhwb3J0cy5JTkZMQVRFUkFXOlxuICAgIGNhc2UgZXhwb3J0cy5HVU5aSVA6XG4gICAgICB0aGlzLmVyciA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlUmVzZXQodGhpcy5zdHJtKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmICh0aGlzLmVyciAhPT0gZXhwb3J0cy5aX09LKSB7XG4gICAgdGhpcy5fZXJyb3IoJ0ZhaWxlZCB0byByZXNldCBzdHJlYW0nKTtcbiAgfVxufTtcblxuZXhwb3J0cy5abGliID0gWmxpYjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcbnZhciBiaW5kaW5nID0gcmVxdWlyZSgnLi9iaW5kaW5nJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKS5vaztcbnZhciBrTWF4TGVuZ3RoID0gcmVxdWlyZSgnYnVmZmVyJykua01heExlbmd0aDtcbnZhciBrUmFuZ2VFcnJvck1lc3NhZ2UgPSAnQ2Fubm90IGNyZWF0ZSBmaW5hbCBCdWZmZXIuIEl0IHdvdWxkIGJlIGxhcmdlciAnICsgJ3RoYW4gMHgnICsga01heExlbmd0aC50b1N0cmluZygxNikgKyAnIGJ5dGVzJztcblxuLy8gemxpYiBkb2Vzbid0IHByb3ZpZGUgdGhlc2UsIHNvIGtsdWRnZSB0aGVtIGluIGZvbGxvd2luZyB0aGUgc2FtZVxuLy8gY29uc3QgbmFtaW5nIHNjaGVtZSB6bGliIHVzZXMuXG5iaW5kaW5nLlpfTUlOX1dJTkRPV0JJVFMgPSA4O1xuYmluZGluZy5aX01BWF9XSU5ET1dCSVRTID0gMTU7XG5iaW5kaW5nLlpfREVGQVVMVF9XSU5ET1dCSVRTID0gMTU7XG5cbi8vIGZld2VyIHRoYW4gNjQgYnl0ZXMgcGVyIGNodW5rIGlzIHN0dXBpZC5cbi8vIHRlY2huaWNhbGx5IGl0IGNvdWxkIHdvcmsgd2l0aCBhcyBmZXcgYXMgOCwgYnV0IGV2ZW4gNjQgYnl0ZXNcbi8vIGlzIGFic3VyZGx5IGxvdy4gIFVzdWFsbHkgYSBNQiBvciBtb3JlIGlzIGJlc3QuXG5iaW5kaW5nLlpfTUlOX0NIVU5LID0gNjQ7XG5iaW5kaW5nLlpfTUFYX0NIVU5LID0gSW5maW5pdHk7XG5iaW5kaW5nLlpfREVGQVVMVF9DSFVOSyA9IDE2ICogMTAyNDtcblxuYmluZGluZy5aX01JTl9NRU1MRVZFTCA9IDE7XG5iaW5kaW5nLlpfTUFYX01FTUxFVkVMID0gOTtcbmJpbmRpbmcuWl9ERUZBVUxUX01FTUxFVkVMID0gODtcblxuYmluZGluZy5aX01JTl9MRVZFTCA9IC0xO1xuYmluZGluZy5aX01BWF9MRVZFTCA9IDk7XG5iaW5kaW5nLlpfREVGQVVMVF9MRVZFTCA9IGJpbmRpbmcuWl9ERUZBVUxUX0NPTVBSRVNTSU9OO1xuXG4vLyBleHBvc2UgYWxsIHRoZSB6bGliIGNvbnN0YW50c1xudmFyIGJrZXlzID0gT2JqZWN0LmtleXMoYmluZGluZyk7XG5mb3IgKHZhciBiayA9IDA7IGJrIDwgYmtleXMubGVuZ3RoOyBiaysrKSB7XG4gIHZhciBia2V5ID0gYmtleXNbYmtdO1xuICBpZiAoYmtleS5tYXRjaCgvXlovKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBia2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogYmluZGluZ1tia2V5XSwgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbn1cblxuLy8gdHJhbnNsYXRpb24gdGFibGUgZm9yIHJldHVybiBjb2Rlcy5cbnZhciBjb2RlcyA9IHtcbiAgWl9PSzogYmluZGluZy5aX09LLFxuICBaX1NUUkVBTV9FTkQ6IGJpbmRpbmcuWl9TVFJFQU1fRU5ELFxuICBaX05FRURfRElDVDogYmluZGluZy5aX05FRURfRElDVCxcbiAgWl9FUlJOTzogYmluZGluZy5aX0VSUk5PLFxuICBaX1NUUkVBTV9FUlJPUjogYmluZGluZy5aX1NUUkVBTV9FUlJPUixcbiAgWl9EQVRBX0VSUk9SOiBiaW5kaW5nLlpfREFUQV9FUlJPUixcbiAgWl9NRU1fRVJST1I6IGJpbmRpbmcuWl9NRU1fRVJST1IsXG4gIFpfQlVGX0VSUk9SOiBiaW5kaW5nLlpfQlVGX0VSUk9SLFxuICBaX1ZFUlNJT05fRVJST1I6IGJpbmRpbmcuWl9WRVJTSU9OX0VSUk9SXG59O1xuXG52YXIgY2tleXMgPSBPYmplY3Qua2V5cyhjb2Rlcyk7XG5mb3IgKHZhciBjayA9IDA7IGNrIDwgY2tleXMubGVuZ3RoOyBjaysrKSB7XG4gIHZhciBja2V5ID0gY2tleXNbY2tdO1xuICBjb2Rlc1tjb2Rlc1tja2V5XV0gPSBja2V5O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NvZGVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogT2JqZWN0LmZyZWV6ZShjb2RlcyksIHdyaXRhYmxlOiBmYWxzZVxufSk7XG5cbmV4cG9ydHMuRGVmbGF0ZSA9IERlZmxhdGU7XG5leHBvcnRzLkluZmxhdGUgPSBJbmZsYXRlO1xuZXhwb3J0cy5HemlwID0gR3ppcDtcbmV4cG9ydHMuR3VuemlwID0gR3VuemlwO1xuZXhwb3J0cy5EZWZsYXRlUmF3ID0gRGVmbGF0ZVJhdztcbmV4cG9ydHMuSW5mbGF0ZVJhdyA9IEluZmxhdGVSYXc7XG5leHBvcnRzLlVuemlwID0gVW56aXA7XG5cbmV4cG9ydHMuY3JlYXRlRGVmbGF0ZSA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgRGVmbGF0ZShvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlSW5mbGF0ZSA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgSW5mbGF0ZShvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlRGVmbGF0ZVJhdyA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgRGVmbGF0ZVJhdyhvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlSW5mbGF0ZVJhdyA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgSW5mbGF0ZVJhdyhvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlR3ppcCA9IGZ1bmN0aW9uIChvKSB7XG4gIHJldHVybiBuZXcgR3ppcChvKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlR3VuemlwID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBHdW56aXAobyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVVuemlwID0gZnVuY3Rpb24gKG8pIHtcbiAgcmV0dXJuIG5ldyBVbnppcChvKTtcbn07XG5cbi8vIENvbnZlbmllbmNlIG1ldGhvZHMuXG4vLyBjb21wcmVzcy9kZWNvbXByZXNzIGEgc3RyaW5nIG9yIGJ1ZmZlciBpbiBvbmUgc3RlcC5cbmV4cG9ydHMuZGVmbGF0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IERlZmxhdGUob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5kZWZsYXRlU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBEZWZsYXRlKG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy5nemlwID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICByZXR1cm4gemxpYkJ1ZmZlcihuZXcgR3ppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLmd6aXBTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEd6aXAob3B0cyksIGJ1ZmZlcik7XG59O1xuXG5leHBvcnRzLmRlZmxhdGVSYXcgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBEZWZsYXRlUmF3KG9wdHMpLCBidWZmZXIsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMuZGVmbGF0ZVJhd1N5bmMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XG4gIHJldHVybiB6bGliQnVmZmVyU3luYyhuZXcgRGVmbGF0ZVJhdyhvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMudW56aXAgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBVbnppcChvcHRzKSwgYnVmZmVyLCBjYWxsYmFjayk7XG59O1xuXG5leHBvcnRzLnVuemlwU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBVbnppcChvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMuaW5mbGF0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5pbmZsYXRlU3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBJbmZsYXRlKG9wdHMpLCBidWZmZXIpO1xufTtcblxuZXhwb3J0cy5ndW56aXAgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIHJldHVybiB6bGliQnVmZmVyKG5ldyBHdW56aXAob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5ndW56aXBTeW5jID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEd1bnppcChvcHRzKSwgYnVmZmVyKTtcbn07XG5cbmV4cG9ydHMuaW5mbGF0ZVJhdyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgcmV0dXJuIHpsaWJCdWZmZXIobmV3IEluZmxhdGVSYXcob3B0cyksIGJ1ZmZlciwgY2FsbGJhY2spO1xufTtcblxuZXhwb3J0cy5pbmZsYXRlUmF3U3luYyA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcbiAgcmV0dXJuIHpsaWJCdWZmZXJTeW5jKG5ldyBJbmZsYXRlUmF3KG9wdHMpLCBidWZmZXIpO1xufTtcblxuZnVuY3Rpb24gemxpYkJ1ZmZlcihlbmdpbmUsIGJ1ZmZlciwgY2FsbGJhY2spIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIG5yZWFkID0gMDtcblxuICBlbmdpbmUub24oJ2Vycm9yJywgb25FcnJvcik7XG4gIGVuZ2luZS5vbignZW5kJywgb25FbmQpO1xuXG4gIGVuZ2luZS5lbmQoYnVmZmVyKTtcbiAgZmxvdygpO1xuXG4gIGZ1bmN0aW9uIGZsb3coKSB7XG4gICAgdmFyIGNodW5rO1xuICAgIHdoaWxlIChudWxsICE9PSAoY2h1bmsgPSBlbmdpbmUucmVhZCgpKSkge1xuICAgICAgYnVmZmVycy5wdXNoKGNodW5rKTtcbiAgICAgIG5yZWFkICs9IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gICAgZW5naW5lLm9uY2UoJ3JlYWRhYmxlJywgZmxvdyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVycm9yKGVycikge1xuICAgIGVuZ2luZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25FbmQpO1xuICAgIGVuZ2luZS5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCBmbG93KTtcbiAgICBjYWxsYmFjayhlcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25FbmQoKSB7XG4gICAgdmFyIGJ1ZjtcbiAgICB2YXIgZXJyID0gbnVsbDtcblxuICAgIGlmIChucmVhZCA+PSBrTWF4TGVuZ3RoKSB7XG4gICAgICBlcnIgPSBuZXcgUmFuZ2VFcnJvcihrUmFuZ2VFcnJvck1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWYgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIG5yZWFkKTtcbiAgICB9XG5cbiAgICBidWZmZXJzID0gW107XG4gICAgZW5naW5lLmNsb3NlKCk7XG4gICAgY2FsbGJhY2soZXJyLCBidWYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHpsaWJCdWZmZXJTeW5jKGVuZ2luZSwgYnVmZmVyKSB7XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykgYnVmZmVyID0gQnVmZmVyLmZyb20oYnVmZmVyKTtcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdOb3QgYSBzdHJpbmcgb3IgYnVmZmVyJyk7XG5cbiAgdmFyIGZsdXNoRmxhZyA9IGVuZ2luZS5fZmluaXNoRmx1c2hGbGFnO1xuXG4gIHJldHVybiBlbmdpbmUuX3Byb2Nlc3NDaHVuayhidWZmZXIsIGZsdXNoRmxhZyk7XG59XG5cbi8vIGdlbmVyaWMgemxpYlxuLy8gbWluaW1hbCAyLWJ5dGUgaGVhZGVyXG5mdW5jdGlvbiBEZWZsYXRlKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERlZmxhdGUpKSByZXR1cm4gbmV3IERlZmxhdGUob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkRFRkxBVEUpO1xufVxuXG5mdW5jdGlvbiBJbmZsYXRlKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEluZmxhdGUpKSByZXR1cm4gbmV3IEluZmxhdGUob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLklORkxBVEUpO1xufVxuXG4vLyBnemlwIC0gYmlnZ2VyIGhlYWRlciwgc2FtZSBkZWZsYXRlIGNvbXByZXNzaW9uXG5mdW5jdGlvbiBHemlwKG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEd6aXApKSByZXR1cm4gbmV3IEd6aXAob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkdaSVApO1xufVxuXG5mdW5jdGlvbiBHdW56aXAob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR3VuemlwKSkgcmV0dXJuIG5ldyBHdW56aXAob3B0cyk7XG4gIFpsaWIuY2FsbCh0aGlzLCBvcHRzLCBiaW5kaW5nLkdVTlpJUCk7XG59XG5cbi8vIHJhdyAtIG5vIGhlYWRlclxuZnVuY3Rpb24gRGVmbGF0ZVJhdyhvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEZWZsYXRlUmF3KSkgcmV0dXJuIG5ldyBEZWZsYXRlUmF3KG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5ERUZMQVRFUkFXKTtcbn1cblxuZnVuY3Rpb24gSW5mbGF0ZVJhdyhvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBJbmZsYXRlUmF3KSkgcmV0dXJuIG5ldyBJbmZsYXRlUmF3KG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5JTkZMQVRFUkFXKTtcbn1cblxuLy8gYXV0by1kZXRlY3QgaGVhZGVyLlxuZnVuY3Rpb24gVW56aXAob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVW56aXApKSByZXR1cm4gbmV3IFVuemlwKG9wdHMpO1xuICBabGliLmNhbGwodGhpcywgb3B0cywgYmluZGluZy5VTlpJUCk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRGbHVzaEZsYWcoZmxhZykge1xuICByZXR1cm4gZmxhZyA9PT0gYmluZGluZy5aX05PX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9QQVJUSUFMX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9TWU5DX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9GVUxMX0ZMVVNIIHx8IGZsYWcgPT09IGJpbmRpbmcuWl9GSU5JU0ggfHwgZmxhZyA9PT0gYmluZGluZy5aX0JMT0NLO1xufVxuXG4vLyB0aGUgWmxpYiBjbGFzcyB0aGV5IGFsbCBpbmhlcml0IGZyb21cbi8vIFRoaXMgdGhpbmcgbWFuYWdlcyB0aGUgcXVldWUgb2YgcmVxdWVzdHMsIGFuZCByZXR1cm5zXG4vLyB0cnVlIG9yIGZhbHNlIGlmIHRoZXJlIGlzIGFueXRoaW5nIGluIHRoZSBxdWV1ZSB3aGVuXG4vLyB5b3UgY2FsbCB0aGUgLndyaXRlKCkgbWV0aG9kLlxuXG5mdW5jdGlvbiBabGliKG9wdHMsIG1vZGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLl9vcHRzID0gb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMuX2NodW5rU2l6ZSA9IG9wdHMuY2h1bmtTaXplIHx8IGV4cG9ydHMuWl9ERUZBVUxUX0NIVU5LO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdHMpO1xuXG4gIGlmIChvcHRzLmZsdXNoICYmICFpc1ZhbGlkRmx1c2hGbGFnKG9wdHMuZmx1c2gpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZsdXNoIGZsYWc6ICcgKyBvcHRzLmZsdXNoKTtcbiAgfVxuICBpZiAob3B0cy5maW5pc2hGbHVzaCAmJiAhaXNWYWxpZEZsdXNoRmxhZyhvcHRzLmZpbmlzaEZsdXNoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBmbHVzaCBmbGFnOiAnICsgb3B0cy5maW5pc2hGbHVzaCk7XG4gIH1cblxuICB0aGlzLl9mbHVzaEZsYWcgPSBvcHRzLmZsdXNoIHx8IGJpbmRpbmcuWl9OT19GTFVTSDtcbiAgdGhpcy5fZmluaXNoRmx1c2hGbGFnID0gdHlwZW9mIG9wdHMuZmluaXNoRmx1c2ggIT09ICd1bmRlZmluZWQnID8gb3B0cy5maW5pc2hGbHVzaCA6IGJpbmRpbmcuWl9GSU5JU0g7XG5cbiAgaWYgKG9wdHMuY2h1bmtTaXplKSB7XG4gICAgaWYgKG9wdHMuY2h1bmtTaXplIDwgZXhwb3J0cy5aX01JTl9DSFVOSyB8fCBvcHRzLmNodW5rU2l6ZSA+IGV4cG9ydHMuWl9NQVhfQ0hVTkspIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaHVuayBzaXplOiAnICsgb3B0cy5jaHVua1NpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLndpbmRvd0JpdHMpIHtcbiAgICBpZiAob3B0cy53aW5kb3dCaXRzIDwgZXhwb3J0cy5aX01JTl9XSU5ET1dCSVRTIHx8IG9wdHMud2luZG93Qml0cyA+IGV4cG9ydHMuWl9NQVhfV0lORE9XQklUUykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHdpbmRvd0JpdHM6ICcgKyBvcHRzLndpbmRvd0JpdHMpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLmxldmVsKSB7XG4gICAgaWYgKG9wdHMubGV2ZWwgPCBleHBvcnRzLlpfTUlOX0xFVkVMIHx8IG9wdHMubGV2ZWwgPiBleHBvcnRzLlpfTUFYX0xFVkVMKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29tcHJlc3Npb24gbGV2ZWw6ICcgKyBvcHRzLmxldmVsKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5tZW1MZXZlbCkge1xuICAgIGlmIChvcHRzLm1lbUxldmVsIDwgZXhwb3J0cy5aX01JTl9NRU1MRVZFTCB8fCBvcHRzLm1lbUxldmVsID4gZXhwb3J0cy5aX01BWF9NRU1MRVZFTCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1lbUxldmVsOiAnICsgb3B0cy5tZW1MZXZlbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMuc3RyYXRlZ3kpIHtcbiAgICBpZiAob3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfRklMVEVSRUQgJiYgb3B0cy5zdHJhdGVneSAhPSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZICYmIG9wdHMuc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX1JMRSAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSVhFRCAmJiBvcHRzLnN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyYXRlZ3k6ICcgKyBvcHRzLnN0cmF0ZWd5KTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5kaWN0aW9uYXJ5KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3B0cy5kaWN0aW9uYXJ5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRpY3Rpb25hcnk6IGl0IHNob3VsZCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2hhbmRsZSA9IG5ldyBiaW5kaW5nLlpsaWIobW9kZSk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl9oYWRFcnJvciA9IGZhbHNlO1xuICB0aGlzLl9oYW5kbGUub25lcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBlcnJubykge1xuICAgIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjbGVhbmx5IHJlY292ZXIuXG4gICAgLy8gY29udGludWluZyBvbmx5IG9ic2N1cmVzIHByb2JsZW1zLlxuICAgIF9jbG9zZShzZWxmKTtcbiAgICBzZWxmLl9oYWRFcnJvciA9IHRydWU7XG5cbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IuZXJybm8gPSBlcnJubztcbiAgICBlcnJvci5jb2RlID0gZXhwb3J0cy5jb2Rlc1tlcnJub107XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgfTtcblxuICB2YXIgbGV2ZWwgPSBleHBvcnRzLlpfREVGQVVMVF9DT01QUkVTU0lPTjtcbiAgaWYgKHR5cGVvZiBvcHRzLmxldmVsID09PSAnbnVtYmVyJykgbGV2ZWwgPSBvcHRzLmxldmVsO1xuXG4gIHZhciBzdHJhdGVneSA9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZO1xuICBpZiAodHlwZW9mIG9wdHMuc3RyYXRlZ3kgPT09ICdudW1iZXInKSBzdHJhdGVneSA9IG9wdHMuc3RyYXRlZ3k7XG5cbiAgdGhpcy5faGFuZGxlLmluaXQob3B0cy53aW5kb3dCaXRzIHx8IGV4cG9ydHMuWl9ERUZBVUxUX1dJTkRPV0JJVFMsIGxldmVsLCBvcHRzLm1lbUxldmVsIHx8IGV4cG9ydHMuWl9ERUZBVUxUX01FTUxFVkVMLCBzdHJhdGVneSwgb3B0cy5kaWN0aW9uYXJ5KTtcblxuICB0aGlzLl9idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUodGhpcy5fY2h1bmtTaXplKTtcbiAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcbiAgdGhpcy5fc3RyYXRlZ3kgPSBzdHJhdGVneTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIHRoaXMuY2xvc2UpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2Nsb3NlZCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuX2hhbmRsZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG51dGlsLmluaGVyaXRzKFpsaWIsIFRyYW5zZm9ybSk7XG5cblpsaWIucHJvdG90eXBlLnBhcmFtcyA9IGZ1bmN0aW9uIChsZXZlbCwgc3RyYXRlZ3ksIGNhbGxiYWNrKSB7XG4gIGlmIChsZXZlbCA8IGV4cG9ydHMuWl9NSU5fTEVWRUwgfHwgbGV2ZWwgPiBleHBvcnRzLlpfTUFYX0xFVkVMKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29tcHJlc3Npb24gbGV2ZWw6ICcgKyBsZXZlbCk7XG4gIH1cbiAgaWYgKHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9GSUxURVJFRCAmJiBzdHJhdGVneSAhPSBleHBvcnRzLlpfSFVGRk1BTl9PTkxZICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9STEUgJiYgc3RyYXRlZ3kgIT0gZXhwb3J0cy5aX0ZJWEVEICYmIHN0cmF0ZWd5ICE9IGV4cG9ydHMuWl9ERUZBVUxUX1NUUkFURUdZKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBzdHJhdGVneTogJyArIHN0cmF0ZWd5KTtcbiAgfVxuXG4gIGlmICh0aGlzLl9sZXZlbCAhPT0gbGV2ZWwgfHwgdGhpcy5fc3RyYXRlZ3kgIT09IHN0cmF0ZWd5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuZmx1c2goYmluZGluZy5aX1NZTkNfRkxVU0gsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFzc2VydChzZWxmLl9oYW5kbGUsICd6bGliIGJpbmRpbmcgY2xvc2VkJyk7XG4gICAgICBzZWxmLl9oYW5kbGUucGFyYW1zKGxldmVsLCBzdHJhdGVneSk7XG4gICAgICBpZiAoIXNlbGYuX2hhZEVycm9yKSB7XG4gICAgICAgIHNlbGYuX2xldmVsID0gbGV2ZWw7XG4gICAgICAgIHNlbGYuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKTtcbiAgfVxufTtcblxuWmxpYi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGFzc2VydCh0aGlzLl9oYW5kbGUsICd6bGliIGJpbmRpbmcgY2xvc2VkJyk7XG4gIHJldHVybiB0aGlzLl9oYW5kbGUucmVzZXQoKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIF9mbHVzaCBmdW5jdGlvbiBjYWxsZWQgYnkgdGhlIHRyYW5zZm9ybSBjbGFzcyxcbi8vIGludGVybmFsbHksIHdoZW4gdGhlIGxhc3QgY2h1bmsgaGFzIGJlZW4gd3JpdHRlbi5cblpsaWIucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLl90cmFuc2Zvcm0oQnVmZmVyLmFsbG9jKDApLCAnJywgY2FsbGJhY2spO1xufTtcblxuWmxpYi5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoa2luZCwgY2FsbGJhY2spIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdmFyIHdzID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGtpbmQgPT09ICdmdW5jdGlvbicgfHwga2luZCA9PT0gdW5kZWZpbmVkICYmICFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0ga2luZDtcbiAgICBraW5kID0gYmluZGluZy5aX0ZVTExfRkxVU0g7XG4gIH1cblxuICBpZiAod3MuZW5kZWQpIHtcbiAgICBpZiAoY2FsbGJhY2spIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHdzLmVuZGluZykge1xuICAgIGlmIChjYWxsYmFjaykgdGhpcy5vbmNlKCdlbmQnLCBjYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAod3MubmVlZERyYWluKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmZsdXNoKGtpbmQsIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9mbHVzaEZsYWcgPSBraW5kO1xuICAgIHRoaXMud3JpdGUoQnVmZmVyLmFsbG9jKDApLCAnJywgY2FsbGJhY2spO1xuICB9XG59O1xuXG5abGliLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBfY2xvc2UodGhpcywgY2FsbGJhY2spO1xuICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCB0aGlzKTtcbn07XG5cbmZ1bmN0aW9uIF9jbG9zZShlbmdpbmUsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjaykgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG5cbiAgLy8gQ2FsbGVyIG1heSBpbnZva2UgLmNsb3NlIGFmdGVyIGEgemxpYiBlcnJvciAod2hpY2ggd2lsbCBudWxsIF9oYW5kbGUpLlxuICBpZiAoIWVuZ2luZS5faGFuZGxlKSByZXR1cm47XG5cbiAgZW5naW5lLl9oYW5kbGUuY2xvc2UoKTtcbiAgZW5naW5lLl9oYW5kbGUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XG4gIHNlbGYuZW1pdCgnY2xvc2UnKTtcbn1cblxuWmxpYi5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBmbHVzaEZsYWc7XG4gIHZhciB3cyA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBlbmRpbmcgPSB3cy5lbmRpbmcgfHwgd3MuZW5kZWQ7XG4gIHZhciBsYXN0ID0gZW5kaW5nICYmICghY2h1bmsgfHwgd3MubGVuZ3RoID09PSBjaHVuay5sZW5ndGgpO1xuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgcmV0dXJuIGNiKG5ldyBFcnJvcignaW52YWxpZCBpbnB1dCcpKTtcblxuICBpZiAoIXRoaXMuX2hhbmRsZSkgcmV0dXJuIGNiKG5ldyBFcnJvcignemxpYiBiaW5kaW5nIGNsb3NlZCcpKTtcblxuICAvLyBJZiBpdCdzIHRoZSBsYXN0IGNodW5rLCBvciBhIGZpbmFsIGZsdXNoLCB3ZSB1c2UgdGhlIFpfRklOSVNIIGZsdXNoIGZsYWdcbiAgLy8gKG9yIHdoYXRldmVyIGZsYWcgd2FzIHByb3ZpZGVkIHVzaW5nIG9wdHMuZmluaXNoRmx1c2gpLlxuICAvLyBJZiBpdCdzIGV4cGxpY2l0bHkgZmx1c2hpbmcgYXQgc29tZSBvdGhlciB0aW1lLCB0aGVuIHdlIHVzZVxuICAvLyBaX0ZVTExfRkxVU0guIE90aGVyd2lzZSwgdXNlIFpfTk9fRkxVU0ggZm9yIG1heGltdW0gY29tcHJlc3Npb25cbiAgLy8gZ29vZG5lc3MuXG4gIGlmIChsYXN0KSBmbHVzaEZsYWcgPSB0aGlzLl9maW5pc2hGbHVzaEZsYWc7ZWxzZSB7XG4gICAgZmx1c2hGbGFnID0gdGhpcy5fZmx1c2hGbGFnO1xuICAgIC8vIG9uY2Ugd2UndmUgZmx1c2hlZCB0aGUgbGFzdCBvZiB0aGUgcXVldWUsIHN0b3AgZmx1c2hpbmcgYW5kXG4gICAgLy8gZ28gYmFjayB0byB0aGUgbm9ybWFsIGJlaGF2aW9yLlxuICAgIGlmIChjaHVuay5sZW5ndGggPj0gd3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9mbHVzaEZsYWcgPSB0aGlzLl9vcHRzLmZsdXNoIHx8IGJpbmRpbmcuWl9OT19GTFVTSDtcbiAgICB9XG4gIH1cblxuICB0aGlzLl9wcm9jZXNzQ2h1bmsoY2h1bmssIGZsdXNoRmxhZywgY2IpO1xufTtcblxuWmxpYi5wcm90b3R5cGUuX3Byb2Nlc3NDaHVuayA9IGZ1bmN0aW9uIChjaHVuaywgZmx1c2hGbGFnLCBjYikge1xuICB2YXIgYXZhaWxJbkJlZm9yZSA9IGNodW5rICYmIGNodW5rLmxlbmd0aDtcbiAgdmFyIGF2YWlsT3V0QmVmb3JlID0gdGhpcy5fY2h1bmtTaXplIC0gdGhpcy5fb2Zmc2V0O1xuICB2YXIgaW5PZmYgPSAwO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgYXN5bmMgPSB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbic7XG5cbiAgaWYgKCFhc3luYykge1xuICAgIHZhciBidWZmZXJzID0gW107XG4gICAgdmFyIG5yZWFkID0gMDtcblxuICAgIHZhciBlcnJvcjtcbiAgICB0aGlzLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcikge1xuICAgICAgZXJyb3IgPSBlcjtcbiAgICB9KTtcblxuICAgIGFzc2VydCh0aGlzLl9oYW5kbGUsICd6bGliIGJpbmRpbmcgY2xvc2VkJyk7XG4gICAgZG8ge1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX2hhbmRsZS53cml0ZVN5bmMoZmx1c2hGbGFnLCBjaHVuaywgLy8gaW5cbiAgICAgIGluT2ZmLCAvLyBpbl9vZmZcbiAgICAgIGF2YWlsSW5CZWZvcmUsIC8vIGluX2xlblxuICAgICAgdGhpcy5fYnVmZmVyLCAvLyBvdXRcbiAgICAgIHRoaXMuX29mZnNldCwgLy9vdXRfb2ZmXG4gICAgICBhdmFpbE91dEJlZm9yZSk7IC8vIG91dF9sZW5cbiAgICB9IHdoaWxlICghdGhpcy5faGFkRXJyb3IgJiYgY2FsbGJhY2socmVzWzBdLCByZXNbMV0pKTtcblxuICAgIGlmICh0aGlzLl9oYWRFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKG5yZWFkID49IGtNYXhMZW5ndGgpIHtcbiAgICAgIF9jbG9zZSh0aGlzKTtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGtSYW5nZUVycm9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgbnJlYWQpO1xuICAgIF9jbG9zZSh0aGlzKTtcblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICBhc3NlcnQodGhpcy5faGFuZGxlLCAnemxpYiBiaW5kaW5nIGNsb3NlZCcpO1xuICB2YXIgcmVxID0gdGhpcy5faGFuZGxlLndyaXRlKGZsdXNoRmxhZywgY2h1bmssIC8vIGluXG4gIGluT2ZmLCAvLyBpbl9vZmZcbiAgYXZhaWxJbkJlZm9yZSwgLy8gaW5fbGVuXG4gIHRoaXMuX2J1ZmZlciwgLy8gb3V0XG4gIHRoaXMuX29mZnNldCwgLy9vdXRfb2ZmXG4gIGF2YWlsT3V0QmVmb3JlKTsgLy8gb3V0X2xlblxuXG4gIHJlcS5idWZmZXIgPSBjaHVuaztcbiAgcmVxLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgZnVuY3Rpb24gY2FsbGJhY2soYXZhaWxJbkFmdGVyLCBhdmFpbE91dEFmdGVyKSB7XG4gICAgLy8gV2hlbiB0aGUgY2FsbGJhY2sgaXMgdXNlZCBpbiBhbiBhc3luYyB3cml0ZSwgdGhlIGNhbGxiYWNrJ3NcbiAgICAvLyBjb250ZXh0IGlzIHRoZSBgcmVxYCBvYmplY3QgdGhhdCB3YXMgY3JlYXRlZC4gVGhlIHJlcSBvYmplY3RcbiAgICAvLyBpcyA9PT0gdGhpcy5faGFuZGxlLCBhbmQgdGhhdCdzIHdoeSBpdCdzIGltcG9ydGFudCB0byBudWxsXG4gICAgLy8gb3V0IHRoZSB2YWx1ZXMgYWZ0ZXIgdGhleSBhcmUgZG9uZSBiZWluZyB1c2VkLiBgdGhpcy5faGFuZGxlYFxuICAgIC8vIGNhbiBzdGF5IGluIG1lbW9yeSBsb25nZXIgdGhhbiB0aGUgY2FsbGJhY2sgYW5kIGJ1ZmZlciBhcmUgbmVlZGVkLlxuICAgIGlmICh0aGlzKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICB0aGlzLmNhbGxiYWNrID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5faGFkRXJyb3IpIHJldHVybjtcblxuICAgIHZhciBoYXZlID0gYXZhaWxPdXRCZWZvcmUgLSBhdmFpbE91dEFmdGVyO1xuICAgIGFzc2VydChoYXZlID49IDAsICdoYXZlIHNob3VsZCBub3QgZ28gZG93bicpO1xuXG4gICAgaWYgKGhhdmUgPiAwKSB7XG4gICAgICB2YXIgb3V0ID0gc2VsZi5fYnVmZmVyLnNsaWNlKHNlbGYuX29mZnNldCwgc2VsZi5fb2Zmc2V0ICsgaGF2ZSk7XG4gICAgICBzZWxmLl9vZmZzZXQgKz0gaGF2ZTtcbiAgICAgIC8vIHNlcnZlIHNvbWUgb3V0cHV0IHRvIHRoZSBjb25zdW1lci5cbiAgICAgIGlmIChhc3luYykge1xuICAgICAgICBzZWxmLnB1c2gob3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlcnMucHVzaChvdXQpO1xuICAgICAgICBucmVhZCArPSBvdXQubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGV4aGF1c3RlZCB0aGUgb3V0cHV0IGJ1ZmZlciwgb3IgdXNlZCBhbGwgdGhlIGlucHV0IGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDAgfHwgc2VsZi5fb2Zmc2V0ID49IHNlbGYuX2NodW5rU2l6ZSkge1xuICAgICAgYXZhaWxPdXRCZWZvcmUgPSBzZWxmLl9jaHVua1NpemU7XG4gICAgICBzZWxmLl9vZmZzZXQgPSAwO1xuICAgICAgc2VsZi5fYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNlbGYuX2NodW5rU2l6ZSk7XG4gICAgfVxuXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDApIHtcbiAgICAgIC8vIE5vdCBhY3R1YWxseSBkb25lLiAgTmVlZCB0byByZXByb2Nlc3MuXG4gICAgICAvLyBBbHNvLCB1cGRhdGUgdGhlIGF2YWlsSW5CZWZvcmUgdG8gdGhlIGF2YWlsSW5BZnRlciB2YWx1ZSxcbiAgICAgIC8vIHNvIHRoYXQgaWYgd2UgaGF2ZSB0byBoaXQgaXQgYSB0aGlyZCAoZm91cnRoLCBldGMuKSB0aW1lLFxuICAgICAgLy8gaXQnbGwgaGF2ZSB0aGUgY29ycmVjdCBieXRlIGNvdW50cy5cbiAgICAgIGluT2ZmICs9IGF2YWlsSW5CZWZvcmUgLSBhdmFpbEluQWZ0ZXI7XG4gICAgICBhdmFpbEluQmVmb3JlID0gYXZhaWxJbkFmdGVyO1xuXG4gICAgICBpZiAoIWFzeW5jKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgdmFyIG5ld1JlcSA9IHNlbGYuX2hhbmRsZS53cml0ZShmbHVzaEZsYWcsIGNodW5rLCBpbk9mZiwgYXZhaWxJbkJlZm9yZSwgc2VsZi5fYnVmZmVyLCBzZWxmLl9vZmZzZXQsIHNlbGYuX2NodW5rU2l6ZSk7XG4gICAgICBuZXdSZXEuY2FsbGJhY2sgPSBjYWxsYmFjazsgLy8gdGhpcyBzYW1lIGZ1bmN0aW9uXG4gICAgICBuZXdSZXEuYnVmZmVyID0gY2h1bms7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFhc3luYykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gZmluaXNoZWQgd2l0aCB0aGUgY2h1bmsuXG4gICAgY2IoKTtcbiAgfVxufTtcblxudXRpbC5pbmhlcml0cyhEZWZsYXRlLCBabGliKTtcbnV0aWwuaW5oZXJpdHMoSW5mbGF0ZSwgWmxpYik7XG51dGlsLmluaGVyaXRzKEd6aXAsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhHdW56aXAsIFpsaWIpO1xudXRpbC5pbmhlcml0cyhEZWZsYXRlUmF3LCBabGliKTtcbnV0aWwuaW5oZXJpdHMoSW5mbGF0ZVJhdywgWmxpYik7XG51dGlsLmluaGVyaXRzKFVuemlwLCBabGliKTsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5sZXQgU3RyZWFtID0gcmVxdWlyZShcInN0cmVhbVwiKTtcblxubGV0IENodW5rU3RyZWFtID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICB0aGlzLl9idWZmZXJzID0gW107XG4gIHRoaXMuX2J1ZmZlcmVkID0gMDtcblxuICB0aGlzLl9yZWFkcyA9IFtdO1xuICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLl9lbmNvZGluZyA9IFwidXRmOFwiO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbn0pO1xudXRpbC5pbmhlcml0cyhDaHVua1N0cmVhbSwgU3RyZWFtKTtcblxuQ2h1bmtTdHJlYW0ucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobGVuZ3RoLCBjYWxsYmFjaykge1xuICB0aGlzLl9yZWFkcy5wdXNoKHtcbiAgICBsZW5ndGg6IE1hdGguYWJzKGxlbmd0aCksIC8vIGlmIGxlbmd0aCA8IDAgdGhlbiBhdCBtb3N0IHRoaXMgbGVuZ3RoXG4gICAgYWxsb3dMZXNzOiBsZW5ndGggPCAwLFxuICAgIGZ1bmM6IGNhbGxiYWNrLFxuICB9KTtcblxuICBwcm9jZXNzLm5leHRUaWNrKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuICAgICAgLy8gaXRzIHBhdXNlZCBhbmQgdGhlcmUgaXMgbm90IGVub3VnaHQgZGF0YSB0aGVuIGFzayBmb3IgbW9yZVxuICAgICAgaWYgKHRoaXMuX3BhdXNlZCAmJiB0aGlzLl9yZWFkcyAmJiB0aGlzLl9yZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKVxuICApO1xufTtcblxuQ2h1bmtTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBFcnJvcihcIlN0cmVhbSBub3Qgd3JpdGFibGVcIikpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBkYXRhQnVmZmVyO1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgZGF0YUJ1ZmZlciA9IGRhdGE7XG4gIH0gZWxzZSB7XG4gICAgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuY29kaW5nIHx8IHRoaXMuX2VuY29kaW5nKTtcbiAgfVxuXG4gIHRoaXMuX2J1ZmZlcnMucHVzaChkYXRhQnVmZmVyKTtcbiAgdGhpcy5fYnVmZmVyZWQgKz0gZGF0YUJ1ZmZlci5sZW5ndGg7XG5cbiAgdGhpcy5fcHJvY2VzcygpO1xuXG4gIC8vIG9rIGlmIHRoZXJlIGFyZSBubyBtb3JlIHJlYWQgcmVxdWVzdHNcbiAgaWYgKHRoaXMuX3JlYWRzICYmIHRoaXMuX3JlYWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy53cml0YWJsZSAmJiAhdGhpcy5fcGF1c2VkO1xufTtcblxuQ2h1bmtTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICBpZiAoZGF0YSkge1xuICAgIHRoaXMud3JpdGUoZGF0YSwgZW5jb2RpbmcpO1xuICB9XG5cbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGFscmVhZHkgZGVzdHJveWVkXG4gIGlmICghdGhpcy5fYnVmZmVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVucXVldWUgb3IgaGFuZGxlIGVuZFxuICBpZiAodGhpcy5fYnVmZmVycy5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLl9lbmQoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9idWZmZXJzLnB1c2gobnVsbCk7XG4gICAgdGhpcy5fcHJvY2VzcygpO1xuICB9XG59O1xuXG5DaHVua1N0cmVhbS5wcm90b3R5cGUuZGVzdHJveVNvb24gPSBDaHVua1N0cmVhbS5wcm90b3R5cGUuZW5kO1xuXG5DaHVua1N0cmVhbS5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX3JlYWRzLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dFwiKSk7XG4gIH1cblxuICB0aGlzLmRlc3Ryb3koKTtcbn07XG5cbkNodW5rU3RyZWFtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX2J1ZmZlcnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHRoaXMuX3JlYWRzID0gbnVsbDtcbiAgdGhpcy5fYnVmZmVycyA9IG51bGw7XG5cbiAgdGhpcy5lbWl0KFwiY2xvc2VcIik7XG59O1xuXG5DaHVua1N0cmVhbS5wcm90b3R5cGUuX3Byb2Nlc3NSZWFkQWxsb3dpbmdMZXNzID0gZnVuY3Rpb24gKHJlYWQpIHtcbiAgLy8gb2sgdGhlcmUgaXMgYW55IGRhdGEgc28gdGhhdCB3ZSBjYW4gc2F0aXNmeSB0aGlzIHJlcXVlc3RcbiAgdGhpcy5fcmVhZHMuc2hpZnQoKTsgLy8gPT0gcmVhZFxuXG4gIC8vIGZpcnN0IHdlIG5lZWQgdG8gcGVlayBpbnRvIGZpcnN0IGJ1ZmZlclxuICBsZXQgc21hbGxlckJ1ZiA9IHRoaXMuX2J1ZmZlcnNbMF07XG5cbiAgLy8gb2sgdGhlcmUgaXMgbW9yZSBkYXRhIHRoYW4gd2UgbmVlZFxuICBpZiAoc21hbGxlckJ1Zi5sZW5ndGggPiByZWFkLmxlbmd0aCkge1xuICAgIHRoaXMuX2J1ZmZlcmVkIC09IHJlYWQubGVuZ3RoO1xuICAgIHRoaXMuX2J1ZmZlcnNbMF0gPSBzbWFsbGVyQnVmLnNsaWNlKHJlYWQubGVuZ3RoKTtcblxuICAgIHJlYWQuZnVuYy5jYWxsKHRoaXMsIHNtYWxsZXJCdWYuc2xpY2UoMCwgcmVhZC5sZW5ndGgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBvayB0aGlzIGlzIGxlc3MgdGhhbiBtYXhpbXVtIGxlbmd0aCBzbyB1c2UgaXQgYWxsXG4gICAgdGhpcy5fYnVmZmVyZWQgLT0gc21hbGxlckJ1Zi5sZW5ndGg7XG4gICAgdGhpcy5fYnVmZmVycy5zaGlmdCgpOyAvLyA9PSBzbWFsbGVyQnVmXG5cbiAgICByZWFkLmZ1bmMuY2FsbCh0aGlzLCBzbWFsbGVyQnVmKTtcbiAgfVxufTtcblxuQ2h1bmtTdHJlYW0ucHJvdG90eXBlLl9wcm9jZXNzUmVhZCA9IGZ1bmN0aW9uIChyZWFkKSB7XG4gIHRoaXMuX3JlYWRzLnNoaWZ0KCk7IC8vID09IHJlYWRcblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IGRhdGEgPSBCdWZmZXIuYWxsb2MocmVhZC5sZW5ndGgpO1xuXG4gIC8vIGNyZWF0ZSBidWZmZXIgZm9yIGFsbCBkYXRhXG4gIHdoaWxlIChwb3MgPCByZWFkLmxlbmd0aCkge1xuICAgIGxldCBidWYgPSB0aGlzLl9idWZmZXJzW2NvdW50KytdO1xuICAgIGxldCBsZW4gPSBNYXRoLm1pbihidWYubGVuZ3RoLCByZWFkLmxlbmd0aCAtIHBvcyk7XG5cbiAgICBidWYuY29weShkYXRhLCBwb3MsIDAsIGxlbik7XG4gICAgcG9zICs9IGxlbjtcblxuICAgIC8vIGxhc3QgYnVmZmVyIHdhc24ndCB1c2VkIGFsbCBzbyBqdXN0IHNsaWNlIGl0IGFuZCBsZWF2ZVxuICAgIGlmIChsZW4gIT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2J1ZmZlcnNbLS1jb3VudF0gPSBidWYuc2xpY2UobGVuKTtcbiAgICB9XG4gIH1cblxuICAvLyByZW1vdmUgYWxsIHVzZWQgYnVmZmVyc1xuICBpZiAoY291bnQgPiAwKSB7XG4gICAgdGhpcy5fYnVmZmVycy5zcGxpY2UoMCwgY291bnQpO1xuICB9XG5cbiAgdGhpcy5fYnVmZmVyZWQgLT0gcmVhZC5sZW5ndGg7XG5cbiAgcmVhZC5mdW5jLmNhbGwodGhpcywgZGF0YSk7XG59O1xuXG5DaHVua1N0cmVhbS5wcm90b3R5cGUuX3Byb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gYXMgbG9uZyBhcyB0aGVyZSBpcyBhbnkgZGF0YSBhbmQgcmVhZCByZXF1ZXN0c1xuICAgIHdoaWxlICh0aGlzLl9idWZmZXJlZCA+IDAgJiYgdGhpcy5fcmVhZHMgJiYgdGhpcy5fcmVhZHMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IHJlYWQgPSB0aGlzLl9yZWFkc1swXTtcblxuICAgICAgLy8gcmVhZCBhbnkgZGF0YSAoYnV0IG5vIG1vcmUgdGhhbiBsZW5ndGgpXG4gICAgICBpZiAocmVhZC5hbGxvd0xlc3MpIHtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc1JlYWRBbGxvd2luZ0xlc3MocmVhZCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2J1ZmZlcmVkID49IHJlYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIG9rIHdlIGNhbiBtZWV0IHNvbWUgZXhwZWN0YXRpb25zXG5cbiAgICAgICAgdGhpcy5fcHJvY2Vzc1JlYWQocmVhZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBub3QgZW5vdWdodCBkYXRhIHRvIHNhdGlzZnkgZmlyc3QgcmVxdWVzdCBpbiBxdWV1ZVxuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHdhaXQgZm9yIG1vcmVcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2J1ZmZlcnMgJiYgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIHRoaXMuX2VuZCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBleCk7XG4gIH1cbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEFkYW0gN1xuLy8gICAwIDEgMiAzIDQgNSA2IDdcbi8vIDAgeCA2IDQgNiB4IDYgNCA2XG4vLyAxIDcgNyA3IDcgNyA3IDcgN1xuLy8gMiA1IDYgNSA2IDUgNiA1IDZcbi8vIDMgNyA3IDcgNyA3IDcgNyA3XG4vLyA0IDMgNiA0IDYgMyA2IDQgNlxuLy8gNSA3IDcgNyA3IDcgNyA3IDdcbi8vIDYgNSA2IDUgNiA1IDYgNSA2XG4vLyA3IDcgNyA3IDcgNyA3IDcgN1xuXG5sZXQgaW1hZ2VQYXNzZXMgPSBbXG4gIHtcbiAgICAvLyBwYXNzIDEgLSAxcHhcbiAgICB4OiBbMF0sXG4gICAgeTogWzBdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyAyIC0gMXB4XG4gICAgeDogWzRdLFxuICAgIHk6IFswXSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgMyAtIDJweFxuICAgIHg6IFswLCA0XSxcbiAgICB5OiBbNF0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDQgLSA0cHhcbiAgICB4OiBbMiwgNl0sXG4gICAgeTogWzAsIDRdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA1IC0gOHB4XG4gICAgeDogWzAsIDIsIDQsIDZdLFxuICAgIHk6IFsyLCA2XSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgNiAtIDE2cHhcbiAgICB4OiBbMSwgMywgNSwgN10sXG4gICAgeTogWzAsIDIsIDQsIDZdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA3IC0gMzJweFxuICAgIHg6IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3XSxcbiAgICB5OiBbMSwgMywgNSwgN10sXG4gIH0sXG5dO1xuXG5leHBvcnRzLmdldEltYWdlUGFzc2VzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IGltYWdlcyA9IFtdO1xuICBsZXQgeExlZnRPdmVyID0gd2lkdGggJSA4O1xuICBsZXQgeUxlZnRPdmVyID0gaGVpZ2h0ICUgODtcbiAgbGV0IHhSZXBlYXRzID0gKHdpZHRoIC0geExlZnRPdmVyKSAvIDg7XG4gIGxldCB5UmVwZWF0cyA9IChoZWlnaHQgLSB5TGVmdE92ZXIpIC8gODtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZVBhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwYXNzID0gaW1hZ2VQYXNzZXNbaV07XG4gICAgbGV0IHBhc3NXaWR0aCA9IHhSZXBlYXRzICogcGFzcy54Lmxlbmd0aDtcbiAgICBsZXQgcGFzc0hlaWdodCA9IHlSZXBlYXRzICogcGFzcy55Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhc3MueC5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueFtqXSA8IHhMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzV2lkdGgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhc3MueS5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHBhc3MueVtqXSA8IHlMZWZ0T3Zlcikge1xuICAgICAgICBwYXNzSGVpZ2h0Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhc3NXaWR0aCA+IDAgJiYgcGFzc0hlaWdodCA+IDApIHtcbiAgICAgIGltYWdlcy5wdXNoKHsgd2lkdGg6IHBhc3NXaWR0aCwgaGVpZ2h0OiBwYXNzSGVpZ2h0LCBpbmRleDogaSB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGltYWdlcztcbn07XG5cbmV4cG9ydHMuZ2V0SW50ZXJsYWNlSXRlcmF0b3IgPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5LCBwYXNzKSB7XG4gICAgbGV0IG91dGVyWExlZnRPdmVyID0geCAlIGltYWdlUGFzc2VzW3Bhc3NdLngubGVuZ3RoO1xuICAgIGxldCBvdXRlclggPVxuICAgICAgKCh4IC0gb3V0ZXJYTGVmdE92ZXIpIC8gaW1hZ2VQYXNzZXNbcGFzc10ueC5sZW5ndGgpICogOCArXG4gICAgICBpbWFnZVBhc3Nlc1twYXNzXS54W291dGVyWExlZnRPdmVyXTtcbiAgICBsZXQgb3V0ZXJZTGVmdE92ZXIgPSB5ICUgaW1hZ2VQYXNzZXNbcGFzc10ueS5sZW5ndGg7XG4gICAgbGV0IG91dGVyWSA9XG4gICAgICAoKHkgLSBvdXRlcllMZWZ0T3ZlcikgLyBpbWFnZVBhc3Nlc1twYXNzXS55Lmxlbmd0aCkgKiA4ICtcbiAgICAgIGltYWdlUGFzc2VzW3Bhc3NdLnlbb3V0ZXJZTGVmdE92ZXJdO1xuICAgIHJldHVybiBvdXRlclggKiA0ICsgb3V0ZXJZICogd2lkdGggKiA0O1xuICB9O1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYWV0aFByZWRpY3RvcihsZWZ0LCBhYm92ZSwgdXBMZWZ0KSB7XG4gIGxldCBwYWV0aCA9IGxlZnQgKyBhYm92ZSAtIHVwTGVmdDtcbiAgbGV0IHBMZWZ0ID0gTWF0aC5hYnMocGFldGggLSBsZWZ0KTtcbiAgbGV0IHBBYm92ZSA9IE1hdGguYWJzKHBhZXRoIC0gYWJvdmUpO1xuICBsZXQgcFVwTGVmdCA9IE1hdGguYWJzKHBhZXRoIC0gdXBMZWZ0KTtcblxuICBpZiAocExlZnQgPD0gcEFib3ZlICYmIHBMZWZ0IDw9IHBVcExlZnQpIHtcbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuICBpZiAocEFib3ZlIDw9IHBVcExlZnQpIHtcbiAgICByZXR1cm4gYWJvdmU7XG4gIH1cbiAgcmV0dXJuIHVwTGVmdDtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBpbnRlcmxhY2VVdGlscyA9IHJlcXVpcmUoXCIuL2ludGVybGFjZVwiKTtcbmxldCBwYWV0aFByZWRpY3RvciA9IHJlcXVpcmUoXCIuL3BhZXRoLXByZWRpY3RvclwiKTtcblxuZnVuY3Rpb24gZ2V0Qnl0ZVdpZHRoKHdpZHRoLCBicHAsIGRlcHRoKSB7XG4gIGxldCBieXRlV2lkdGggPSB3aWR0aCAqIGJwcDtcbiAgaWYgKGRlcHRoICE9PSA4KSB7XG4gICAgYnl0ZVdpZHRoID0gTWF0aC5jZWlsKGJ5dGVXaWR0aCAvICg4IC8gZGVwdGgpKTtcbiAgfVxuICByZXR1cm4gYnl0ZVdpZHRoO1xufVxuXG5sZXQgRmlsdGVyID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcEluZm8sIGRlcGVuZGVuY2llcykge1xuICBsZXQgd2lkdGggPSBiaXRtYXBJbmZvLndpZHRoO1xuICBsZXQgaGVpZ2h0ID0gYml0bWFwSW5mby5oZWlnaHQ7XG4gIGxldCBpbnRlcmxhY2UgPSBiaXRtYXBJbmZvLmludGVybGFjZTtcbiAgbGV0IGJwcCA9IGJpdG1hcEluZm8uYnBwO1xuICBsZXQgZGVwdGggPSBiaXRtYXBJbmZvLmRlcHRoO1xuXG4gIHRoaXMucmVhZCA9IGRlcGVuZGVuY2llcy5yZWFkO1xuICB0aGlzLndyaXRlID0gZGVwZW5kZW5jaWVzLndyaXRlO1xuICB0aGlzLmNvbXBsZXRlID0gZGVwZW5kZW5jaWVzLmNvbXBsZXRlO1xuXG4gIHRoaXMuX2ltYWdlSW5kZXggPSAwO1xuICB0aGlzLl9pbWFnZXMgPSBbXTtcbiAgaWYgKGludGVybGFjZSkge1xuICAgIGxldCBwYXNzZXMgPSBpbnRlcmxhY2VVdGlscy5nZXRJbWFnZVBhc3Nlcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5faW1hZ2VzLnB1c2goe1xuICAgICAgICBieXRlV2lkdGg6IGdldEJ5dGVXaWR0aChwYXNzZXNbaV0ud2lkdGgsIGJwcCwgZGVwdGgpLFxuICAgICAgICBoZWlnaHQ6IHBhc3Nlc1tpXS5oZWlnaHQsXG4gICAgICAgIGxpbmVJbmRleDogMCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9pbWFnZXMucHVzaCh7XG4gICAgICBieXRlV2lkdGg6IGdldEJ5dGVXaWR0aCh3aWR0aCwgYnBwLCBkZXB0aCksXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGxpbmVJbmRleDogMCxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHdoZW4gZmlsdGVyaW5nIHRoZSBsaW5lIHdlIGxvb2sgYXQgdGhlIHBpeGVsIHRvIHRoZSBsZWZ0XG4gIC8vIHRoZSBzcGVjIGFsc28gc2F5cyBpdCBpcyBkb25lIG9uIGEgYnl0ZSBsZXZlbCByZWdhcmRsZXNzIG9mIHRoZSBudW1iZXIgb2YgcGl4ZWxzXG4gIC8vIHNvIGlmIHRoZSBkZXB0aCBpcyBieXRlIGNvbXBhdGlibGUgKDggb3IgMTYpIHdlIHN1YnRyYWN0IHRoZSBicHAgaW4gb3JkZXIgdG8gY29tcGFyZSBiYWNrXG4gIC8vIGEgcGl4ZWwgcmF0aGVyIHRoYW4ganVzdCBhIGRpZmZlcmVudCBieXRlIHBhcnQuIEhvd2V2ZXIgaWYgd2UgYXJlIHN1YiBieXRlLCB3ZSBpZ25vcmUuXG4gIGlmIChkZXB0aCA9PT0gOCkge1xuICAgIHRoaXMuX3hDb21wYXJpc29uID0gYnBwO1xuICB9IGVsc2UgaWYgKGRlcHRoID09PSAxNikge1xuICAgIHRoaXMuX3hDb21wYXJpc29uID0gYnBwICogMjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl94Q29tcGFyaXNvbiA9IDE7XG4gIH1cbn0pO1xuXG5GaWx0ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWQoXG4gICAgdGhpcy5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdLmJ5dGVXaWR0aCArIDEsXG4gICAgdGhpcy5fcmV2ZXJzZUZpbHRlckxpbmUuYmluZCh0aGlzKVxuICApO1xufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMSA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCB4Q29tcGFyaXNvbiA9IHRoaXMuX3hDb21wYXJpc29uO1xuICBsZXQgeEJpZ2dlclRoYW4gPSB4Q29tcGFyaXNvbiAtIDE7XG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCByYXdCeXRlID0gcmF3RGF0YVsxICsgeF07XG4gICAgbGV0IGYxTGVmdCA9IHggPiB4QmlnZ2VyVGhhbiA/IHVuZmlsdGVyZWRMaW5lW3ggLSB4Q29tcGFyaXNvbl0gOiAwO1xuICAgIHVuZmlsdGVyZWRMaW5lW3hdID0gcmF3Qnl0ZSArIGYxTGVmdDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMiA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCBsYXN0TGluZSA9IHRoaXMuX2xhc3RMaW5lO1xuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgcmF3Qnl0ZSA9IHJhd0RhdGFbMSArIHhdO1xuICAgIGxldCBmMlVwID0gbGFzdExpbmUgPyBsYXN0TGluZVt4XSA6IDA7XG4gICAgdW5maWx0ZXJlZExpbmVbeF0gPSByYXdCeXRlICsgZjJVcDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMyA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCB4Q29tcGFyaXNvbiA9IHRoaXMuX3hDb21wYXJpc29uO1xuICBsZXQgeEJpZ2dlclRoYW4gPSB4Q29tcGFyaXNvbiAtIDE7XG4gIGxldCBsYXN0TGluZSA9IHRoaXMuX2xhc3RMaW5lO1xuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgcmF3Qnl0ZSA9IHJhd0RhdGFbMSArIHhdO1xuICAgIGxldCBmM1VwID0gbGFzdExpbmUgPyBsYXN0TGluZVt4XSA6IDA7XG4gICAgbGV0IGYzTGVmdCA9IHggPiB4QmlnZ2VyVGhhbiA/IHVuZmlsdGVyZWRMaW5lW3ggLSB4Q29tcGFyaXNvbl0gOiAwO1xuICAgIGxldCBmM0FkZCA9IE1hdGguZmxvb3IoKGYzTGVmdCArIGYzVXApIC8gMik7XG4gICAgdW5maWx0ZXJlZExpbmVbeF0gPSByYXdCeXRlICsgZjNBZGQ7XG4gIH1cbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3VuRmlsdGVyVHlwZTQgPSBmdW5jdGlvbiAoXG4gIHJhd0RhdGEsXG4gIHVuZmlsdGVyZWRMaW5lLFxuICBieXRlV2lkdGhcbikge1xuICBsZXQgeENvbXBhcmlzb24gPSB0aGlzLl94Q29tcGFyaXNvbjtcbiAgbGV0IHhCaWdnZXJUaGFuID0geENvbXBhcmlzb24gLSAxO1xuICBsZXQgbGFzdExpbmUgPSB0aGlzLl9sYXN0TGluZTtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGJ5dGVXaWR0aDsgeCsrKSB7XG4gICAgbGV0IHJhd0J5dGUgPSByYXdEYXRhWzEgKyB4XTtcbiAgICBsZXQgZjRVcCA9IGxhc3RMaW5lID8gbGFzdExpbmVbeF0gOiAwO1xuICAgIGxldCBmNExlZnQgPSB4ID4geEJpZ2dlclRoYW4gPyB1bmZpbHRlcmVkTGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICBsZXQgZjRVcExlZnQgPSB4ID4geEJpZ2dlclRoYW4gJiYgbGFzdExpbmUgPyBsYXN0TGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICBsZXQgZjRBZGQgPSBwYWV0aFByZWRpY3RvcihmNExlZnQsIGY0VXAsIGY0VXBMZWZ0KTtcbiAgICB1bmZpbHRlcmVkTGluZVt4XSA9IHJhd0J5dGUgKyBmNEFkZDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fcmV2ZXJzZUZpbHRlckxpbmUgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xuICBsZXQgZmlsdGVyID0gcmF3RGF0YVswXTtcbiAgbGV0IHVuZmlsdGVyZWRMaW5lO1xuICBsZXQgY3VycmVudEltYWdlID0gdGhpcy5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdO1xuICBsZXQgYnl0ZVdpZHRoID0gY3VycmVudEltYWdlLmJ5dGVXaWR0aDtcblxuICBpZiAoZmlsdGVyID09PSAwKSB7XG4gICAgdW5maWx0ZXJlZExpbmUgPSByYXdEYXRhLnNsaWNlKDEsIGJ5dGVXaWR0aCArIDEpO1xuICB9IGVsc2Uge1xuICAgIHVuZmlsdGVyZWRMaW5lID0gQnVmZmVyLmFsbG9jKGJ5dGVXaWR0aCk7XG5cbiAgICBzd2l0Y2ggKGZpbHRlcikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aGlzLl91bkZpbHRlclR5cGUxKHJhd0RhdGEsIHVuZmlsdGVyZWRMaW5lLCBieXRlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdGhpcy5fdW5GaWx0ZXJUeXBlMihyYXdEYXRhLCB1bmZpbHRlcmVkTGluZSwgYnl0ZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHRoaXMuX3VuRmlsdGVyVHlwZTMocmF3RGF0YSwgdW5maWx0ZXJlZExpbmUsIGJ5dGVXaWR0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICB0aGlzLl91bkZpbHRlclR5cGU0KHJhd0RhdGEsIHVuZmlsdGVyZWRMaW5lLCBieXRlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXNlZCBmaWx0ZXIgdHlwZSAtIFwiICsgZmlsdGVyKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLndyaXRlKHVuZmlsdGVyZWRMaW5lKTtcblxuICBjdXJyZW50SW1hZ2UubGluZUluZGV4Kys7XG4gIGlmIChjdXJyZW50SW1hZ2UubGluZUluZGV4ID49IGN1cnJlbnRJbWFnZS5oZWlnaHQpIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IG51bGw7XG4gICAgdGhpcy5faW1hZ2VJbmRleCsrO1xuICAgIGN1cnJlbnRJbWFnZSA9IHRoaXMuX2ltYWdlc1t0aGlzLl9pbWFnZUluZGV4XTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IHVuZmlsdGVyZWRMaW5lO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJbWFnZSkge1xuICAgIC8vIHJlYWQsIHVzaW5nIHRoZSBieXRlIHdpZHRoIHRoYXQgbWF5IGJlIGZyb20gdGhlIG5ldyBjdXJyZW50IGltYWdlXG4gICAgdGhpcy5yZWFkKGN1cnJlbnRJbWFnZS5ieXRlV2lkdGggKyAxLCB0aGlzLl9yZXZlcnNlRmlsdGVyTGluZS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IG51bGw7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IENodW5rU3RyZWFtID0gcmVxdWlyZShcIi4vY2h1bmtzdHJlYW1cIik7XG5sZXQgRmlsdGVyID0gcmVxdWlyZShcIi4vZmlsdGVyLXBhcnNlXCIpO1xuXG5sZXQgRmlsdGVyQXN5bmMgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwSW5mbykge1xuICBDaHVua1N0cmVhbS5jYWxsKHRoaXMpO1xuXG4gIGxldCBidWZmZXJzID0gW107XG4gIGxldCB0aGF0ID0gdGhpcztcbiAgdGhpcy5fZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogdGhpcy5yZWFkLmJpbmQodGhpcyksXG4gICAgd3JpdGU6IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChidWZmZXIpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuZW1pdChcImNvbXBsZXRlXCIsIEJ1ZmZlci5jb25jYXQoYnVmZmVycykpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHRoaXMuX2ZpbHRlci5zdGFydCgpO1xufSk7XG51dGlsLmluaGVyaXRzKEZpbHRlckFzeW5jLCBDaHVua1N0cmVhbSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQTkdfU0lHTkFUVVJFOiBbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV0sXG5cbiAgVFlQRV9JSERSOiAweDQ5NDg0NDUyLFxuICBUWVBFX0lFTkQ6IDB4NDk0NTRlNDQsXG4gIFRZUEVfSURBVDogMHg0OTQ0NDE1NCxcbiAgVFlQRV9QTFRFOiAweDUwNGM1NDQ1LFxuICBUWVBFX3RSTlM6IDB4NzQ1MjRlNTMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gIFRZUEVfZ0FNQTogMHg2NzQxNGQ0MSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAvLyBjb2xvci10eXBlIGJpdHNcbiAgQ09MT1JUWVBFX0dSQVlTQ0FMRTogMCxcbiAgQ09MT1JUWVBFX1BBTEVUVEU6IDEsXG4gIENPTE9SVFlQRV9DT0xPUjogMixcbiAgQ09MT1JUWVBFX0FMUEhBOiA0LCAvLyBlLmcuIGdyYXlzY2FsZSBhbmQgYWxwaGFcblxuICAvLyBjb2xvci10eXBlIGNvbWJpbmF0aW9uc1xuICBDT0xPUlRZUEVfUEFMRVRURV9DT0xPUjogMyxcbiAgQ09MT1JUWVBFX0NPTE9SX0FMUEhBOiA2LFxuXG4gIENPTE9SVFlQRV9UT19CUFBfTUFQOiB7XG4gICAgMDogMSxcbiAgICAyOiAzLFxuICAgIDM6IDEsXG4gICAgNDogMixcbiAgICA2OiA0LFxuICB9LFxuXG4gIEdBTU1BX0RJVklTSU9OOiAxMDAwMDAsXG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgY3JjVGFibGUgPSBbXTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGxldCBjdXJyZW50Q3JjID0gaTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgaWYgKGN1cnJlbnRDcmMgJiAxKSB7XG4gICAgICAgIGN1cnJlbnRDcmMgPSAweGVkYjg4MzIwIF4gKGN1cnJlbnRDcmMgPj4+IDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudENyYyA9IGN1cnJlbnRDcmMgPj4+IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGNyY1RhYmxlW2ldID0gY3VycmVudENyYztcbiAgfVxufSkoKTtcblxubGV0IENyY0NhbGN1bGF0b3IgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NyYyA9IC0xO1xufSk7XG5cbkNyY0NhbGN1bGF0b3IucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fY3JjID0gY3JjVGFibGVbKHRoaXMuX2NyYyBeIGRhdGFbaV0pICYgMHhmZl0gXiAodGhpcy5fY3JjID4+PiA4KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNyY0NhbGN1bGF0b3IucHJvdG90eXBlLmNyYzMyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fY3JjIF4gLTE7XG59O1xuXG5DcmNDYWxjdWxhdG9yLmNyYzMyID0gZnVuY3Rpb24gKGJ1Zikge1xuICBsZXQgY3JjID0gLTE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JjID0gY3JjVGFibGVbKGNyYyBeIGJ1ZltpXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpO1xuICB9XG4gIHJldHVybiBjcmMgXiAtMTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5sZXQgQ3JjQ2FsY3VsYXRvciA9IHJlcXVpcmUoXCIuL2NyY1wiKTtcblxubGV0IFBhcnNlciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBkZXBlbmRlbmNpZXMpIHtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIG9wdGlvbnMuY2hlY2tDUkMgPSBvcHRpb25zLmNoZWNrQ1JDICE9PSBmYWxzZTtcblxuICB0aGlzLl9oYXNJSERSID0gZmFsc2U7XG4gIHRoaXMuX2hhc0lFTkQgPSBmYWxzZTtcbiAgdGhpcy5fZW1pdHRlZEhlYWRlcnNGaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGlucHV0IGZsYWdzL21ldGFkYXRhXG4gIHRoaXMuX3BhbGV0dGUgPSBbXTtcbiAgdGhpcy5fY29sb3JUeXBlID0gMDtcblxuICB0aGlzLl9jaHVua3MgPSB7fTtcbiAgdGhpcy5fY2h1bmtzW2NvbnN0YW50cy5UWVBFX0lIRFJdID0gdGhpcy5faGFuZGxlSUhEUi5iaW5kKHRoaXMpO1xuICB0aGlzLl9jaHVua3NbY29uc3RhbnRzLlRZUEVfSUVORF0gPSB0aGlzLl9oYW5kbGVJRU5ELmJpbmQodGhpcyk7XG4gIHRoaXMuX2NodW5rc1tjb25zdGFudHMuVFlQRV9JREFUXSA9IHRoaXMuX2hhbmRsZUlEQVQuYmluZCh0aGlzKTtcbiAgdGhpcy5fY2h1bmtzW2NvbnN0YW50cy5UWVBFX1BMVEVdID0gdGhpcy5faGFuZGxlUExURS5iaW5kKHRoaXMpO1xuICB0aGlzLl9jaHVua3NbY29uc3RhbnRzLlRZUEVfdFJOU10gPSB0aGlzLl9oYW5kbGVUUk5TLmJpbmQodGhpcyk7XG4gIHRoaXMuX2NodW5rc1tjb25zdGFudHMuVFlQRV9nQU1BXSA9IHRoaXMuX2hhbmRsZUdBTUEuYmluZCh0aGlzKTtcblxuICB0aGlzLnJlYWQgPSBkZXBlbmRlbmNpZXMucmVhZDtcbiAgdGhpcy5lcnJvciA9IGRlcGVuZGVuY2llcy5lcnJvcjtcbiAgdGhpcy5tZXRhZGF0YSA9IGRlcGVuZGVuY2llcy5tZXRhZGF0YTtcbiAgdGhpcy5nYW1tYSA9IGRlcGVuZGVuY2llcy5nYW1tYTtcbiAgdGhpcy50cmFuc0NvbG9yID0gZGVwZW5kZW5jaWVzLnRyYW5zQ29sb3I7XG4gIHRoaXMucGFsZXR0ZSA9IGRlcGVuZGVuY2llcy5wYWxldHRlO1xuICB0aGlzLnBhcnNlZCA9IGRlcGVuZGVuY2llcy5wYXJzZWQ7XG4gIHRoaXMuaW5mbGF0ZURhdGEgPSBkZXBlbmRlbmNpZXMuaW5mbGF0ZURhdGE7XG4gIHRoaXMuZmluaXNoZWQgPSBkZXBlbmRlbmNpZXMuZmluaXNoZWQ7XG4gIHRoaXMuc2ltcGxlVHJhbnNwYXJlbmN5ID0gZGVwZW5kZW5jaWVzLnNpbXBsZVRyYW5zcGFyZW5jeTtcbiAgdGhpcy5oZWFkZXJzRmluaXNoZWQgPSBkZXBlbmRlbmNpZXMuaGVhZGVyc0ZpbmlzaGVkIHx8IGZ1bmN0aW9uICgpIHt9O1xufSk7XG5cblBhcnNlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZChjb25zdGFudHMuUE5HX1NJR05BVFVSRS5sZW5ndGgsIHRoaXMuX3BhcnNlU2lnbmF0dXJlLmJpbmQodGhpcykpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VTaWduYXR1cmUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBsZXQgc2lnbmF0dXJlID0gY29uc3RhbnRzLlBOR19TSUdOQVRVUkU7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmUubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZGF0YVtpXSAhPT0gc2lnbmF0dXJlW2ldKSB7XG4gICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgZmlsZSBzaWduYXR1cmVcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICB0aGlzLnJlYWQoOCwgdGhpcy5fcGFyc2VDaHVua0JlZ2luLmJpbmQodGhpcykpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VDaHVua0JlZ2luID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgLy8gY2h1bmsgY29udGVudCBsZW5ndGhcbiAgbGV0IGxlbmd0aCA9IGRhdGEucmVhZFVJbnQzMkJFKDApO1xuXG4gIC8vIGNodW5rIHR5cGVcbiAgbGV0IHR5cGUgPSBkYXRhLnJlYWRVSW50MzJCRSg0KTtcbiAgbGV0IG5hbWUgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gNDsgaSA8IDg7IGkrKykge1xuICAgIG5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKTtcbiAgfVxuXG4gIC8vY29uc29sZS5sb2coJ2NodW5rICcsIG5hbWUsIGxlbmd0aCk7XG5cbiAgLy8gY2h1bmsgZmxhZ3NcbiAgbGV0IGFuY2lsbGFyeSA9IEJvb2xlYW4oZGF0YVs0XSAmIDB4MjApOyAvLyBvciBjcml0aWNhbFxuICAvLyAgICBwcml2ID0gQm9vbGVhbihkYXRhWzVdICYgMHgyMCksIC8vIG9yIHB1YmxpY1xuICAvLyAgICBzYWZlVG9Db3B5ID0gQm9vbGVhbihkYXRhWzddICYgMHgyMCk7IC8vIG9yIHVuc2FmZVxuXG4gIGlmICghdGhpcy5faGFzSUhEUiAmJiB0eXBlICE9PSBjb25zdGFudHMuVFlQRV9JSERSKSB7XG4gICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoXCJFeHBlY3RlZCBJSERSIG9uIGJlZ2dpbmluZ1wiKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fY3JjID0gbmV3IENyY0NhbGN1bGF0b3IoKTtcbiAgdGhpcy5fY3JjLndyaXRlKEJ1ZmZlci5mcm9tKG5hbWUpKTtcblxuICBpZiAodGhpcy5fY2h1bmtzW3R5cGVdKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NodW5rc1t0eXBlXShsZW5ndGgpO1xuICB9XG5cbiAgaWYgKCFhbmNpbGxhcnkpIHtcbiAgICB0aGlzLmVycm9yKG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGNyaXRpY2FsIGNodW5rIHR5cGUgXCIgKyBuYW1lKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5yZWFkKGxlbmd0aCArIDQsIHRoaXMuX3NraXBDaHVuay5iaW5kKHRoaXMpKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3NraXBDaHVuayA9IGZ1bmN0aW9uICgvKmRhdGEqLykge1xuICB0aGlzLnJlYWQoOCwgdGhpcy5fcGFyc2VDaHVua0JlZ2luLmJpbmQodGhpcykpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faGFuZGxlQ2h1bmtFbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZCg0LCB0aGlzLl9wYXJzZUNodW5rRW5kLmJpbmQodGhpcykpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VDaHVua0VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBmaWxlQ3JjID0gZGF0YS5yZWFkSW50MzJCRSgwKTtcbiAgbGV0IGNhbGNDcmMgPSB0aGlzLl9jcmMuY3JjMzIoKTtcblxuICAvLyBjaGVjayBDUkNcbiAgaWYgKHRoaXMuX29wdGlvbnMuY2hlY2tDUkMgJiYgY2FsY0NyYyAhPT0gZmlsZUNyYykge1xuICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKFwiQ3JjIGVycm9yIC0gXCIgKyBmaWxlQ3JjICsgXCIgLSBcIiArIGNhbGNDcmMpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXRoaXMuX2hhc0lFTkQpIHtcbiAgICB0aGlzLnJlYWQoOCwgdGhpcy5fcGFyc2VDaHVua0JlZ2luLmJpbmQodGhpcykpO1xuICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9oYW5kbGVJSERSID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICB0aGlzLnJlYWQobGVuZ3RoLCB0aGlzLl9wYXJzZUlIRFIuYmluZCh0aGlzKSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VJSERSID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY3JjLndyaXRlKGRhdGEpO1xuXG4gIGxldCB3aWR0aCA9IGRhdGEucmVhZFVJbnQzMkJFKDApO1xuICBsZXQgaGVpZ2h0ID0gZGF0YS5yZWFkVUludDMyQkUoNCk7XG4gIGxldCBkZXB0aCA9IGRhdGFbOF07XG4gIGxldCBjb2xvclR5cGUgPSBkYXRhWzldOyAvLyBiaXRzOiAxIHBhbGV0dGUsIDIgY29sb3IsIDQgYWxwaGFcbiAgbGV0IGNvbXByID0gZGF0YVsxMF07XG4gIGxldCBmaWx0ZXIgPSBkYXRhWzExXTtcbiAgbGV0IGludGVybGFjZSA9IGRhdGFbMTJdO1xuXG4gIC8vIGNvbnNvbGUubG9nKCcgICAgd2lkdGgnLCB3aWR0aCwgJ2hlaWdodCcsIGhlaWdodCxcbiAgLy8gICAgICdkZXB0aCcsIGRlcHRoLCAnY29sb3JUeXBlJywgY29sb3JUeXBlLFxuICAvLyAgICAgJ2NvbXByJywgY29tcHIsICdmaWx0ZXInLCBmaWx0ZXIsICdpbnRlcmxhY2UnLCBpbnRlcmxhY2VcbiAgLy8gKTtcblxuICBpZiAoXG4gICAgZGVwdGggIT09IDggJiZcbiAgICBkZXB0aCAhPT0gNCAmJlxuICAgIGRlcHRoICE9PSAyICYmXG4gICAgZGVwdGggIT09IDEgJiZcbiAgICBkZXB0aCAhPT0gMTZcbiAgKSB7XG4gICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBiaXQgZGVwdGggXCIgKyBkZXB0aCkpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIShjb2xvclR5cGUgaW4gY29uc3RhbnRzLkNPTE9SVFlQRV9UT19CUFBfTUFQKSkge1xuICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgY29sb3IgdHlwZVwiKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb21wciAhPT0gMCkge1xuICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgY29tcHJlc3Npb24gbWV0aG9kXCIpKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZpbHRlciAhPT0gMCkge1xuICAgIHRoaXMuZXJyb3IobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZmlsdGVyIG1ldGhvZFwiKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbnRlcmxhY2UgIT09IDAgJiYgaW50ZXJsYWNlICE9PSAxKSB7XG4gICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBpbnRlcmxhY2UgbWV0aG9kXCIpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9jb2xvclR5cGUgPSBjb2xvclR5cGU7XG5cbiAgbGV0IGJwcCA9IGNvbnN0YW50cy5DT0xPUlRZUEVfVE9fQlBQX01BUFt0aGlzLl9jb2xvclR5cGVdO1xuXG4gIHRoaXMuX2hhc0lIRFIgPSB0cnVlO1xuXG4gIHRoaXMubWV0YWRhdGEoe1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgaW50ZXJsYWNlOiBCb29sZWFuKGludGVybGFjZSksXG4gICAgcGFsZXR0ZTogQm9vbGVhbihjb2xvclR5cGUgJiBjb25zdGFudHMuQ09MT1JUWVBFX1BBTEVUVEUpLFxuICAgIGNvbG9yOiBCb29sZWFuKGNvbG9yVHlwZSAmIGNvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1IpLFxuICAgIGFscGhhOiBCb29sZWFuKGNvbG9yVHlwZSAmIGNvbnN0YW50cy5DT0xPUlRZUEVfQUxQSEEpLFxuICAgIGJwcDogYnBwLFxuICAgIGNvbG9yVHlwZTogY29sb3JUeXBlLFxuICB9KTtcblxuICB0aGlzLl9oYW5kbGVDaHVua0VuZCgpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faGFuZGxlUExURSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgdGhpcy5yZWFkKGxlbmd0aCwgdGhpcy5fcGFyc2VQTFRFLmJpbmQodGhpcykpO1xufTtcblBhcnNlci5wcm90b3R5cGUuX3BhcnNlUExURSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NyYy53cml0ZShkYXRhKTtcblxuICBsZXQgZW50cmllcyA9IE1hdGguZmxvb3IoZGF0YS5sZW5ndGggLyAzKTtcbiAgLy8gY29uc29sZS5sb2coJ1BhbGV0dGU6JywgZW50cmllcyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzOyBpKyspIHtcbiAgICB0aGlzLl9wYWxldHRlLnB1c2goW2RhdGFbaSAqIDNdLCBkYXRhW2kgKiAzICsgMV0sIGRhdGFbaSAqIDMgKyAyXSwgMHhmZl0pO1xuICB9XG5cbiAgdGhpcy5wYWxldHRlKHRoaXMuX3BhbGV0dGUpO1xuXG4gIHRoaXMuX2hhbmRsZUNodW5rRW5kKCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9oYW5kbGVUUk5TID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICB0aGlzLnNpbXBsZVRyYW5zcGFyZW5jeSgpO1xuICB0aGlzLnJlYWQobGVuZ3RoLCB0aGlzLl9wYXJzZVRSTlMuYmluZCh0aGlzKSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VUUk5TID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY3JjLndyaXRlKGRhdGEpO1xuXG4gIC8vIHBhbGV0dGVcbiAgaWYgKHRoaXMuX2NvbG9yVHlwZSA9PT0gY29uc3RhbnRzLkNPTE9SVFlQRV9QQUxFVFRFX0NPTE9SKSB7XG4gICAgaWYgKHRoaXMuX3BhbGV0dGUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmVycm9yKG5ldyBFcnJvcihcIlRyYW5zcGFyZW5jeSBjaHVuayBtdXN0IGJlIGFmdGVyIHBhbGV0dGVcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGF0YS5sZW5ndGggPiB0aGlzLl9wYWxldHRlLmxlbmd0aCkge1xuICAgICAgdGhpcy5lcnJvcihuZXcgRXJyb3IoXCJNb3JlIHRyYW5zcGFyZW50IGNvbG9ycyB0aGFuIHBhbGV0dGUgc2l6ZVwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fcGFsZXR0ZVtpXVszXSA9IGRhdGFbaV07XG4gICAgfVxuICAgIHRoaXMucGFsZXR0ZSh0aGlzLl9wYWxldHRlKTtcbiAgfVxuXG4gIC8vIGZvciBjb2xvclR5cGUgMCAoZ3JheXNjYWxlKSBhbmQgMiAocmdiKVxuICAvLyB0aGVyZSBtaWdodCBiZSBvbmUgZ3JheS9jb2xvciBkZWZpbmVkIGFzIHRyYW5zcGFyZW50XG4gIGlmICh0aGlzLl9jb2xvclR5cGUgPT09IGNvbnN0YW50cy5DT0xPUlRZUEVfR1JBWVNDQUxFKSB7XG4gICAgLy8gZ3JleSwgMiBieXRlc1xuICAgIHRoaXMudHJhbnNDb2xvcihbZGF0YS5yZWFkVUludDE2QkUoMCldKTtcbiAgfVxuICBpZiAodGhpcy5fY29sb3JUeXBlID09PSBjb25zdGFudHMuQ09MT1JUWVBFX0NPTE9SKSB7XG4gICAgdGhpcy50cmFuc0NvbG9yKFtcbiAgICAgIGRhdGEucmVhZFVJbnQxNkJFKDApLFxuICAgICAgZGF0YS5yZWFkVUludDE2QkUoMiksXG4gICAgICBkYXRhLnJlYWRVSW50MTZCRSg0KSxcbiAgICBdKTtcbiAgfVxuXG4gIHRoaXMuX2hhbmRsZUNodW5rRW5kKCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9oYW5kbGVHQU1BID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICB0aGlzLnJlYWQobGVuZ3RoLCB0aGlzLl9wYXJzZUdBTUEuYmluZCh0aGlzKSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VHQU1BID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY3JjLndyaXRlKGRhdGEpO1xuICB0aGlzLmdhbW1hKGRhdGEucmVhZFVJbnQzMkJFKDApIC8gY29uc3RhbnRzLkdBTU1BX0RJVklTSU9OKTtcblxuICB0aGlzLl9oYW5kbGVDaHVua0VuZCgpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faGFuZGxlSURBVCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKCF0aGlzLl9lbWl0dGVkSGVhZGVyc0ZpbmlzaGVkKSB7XG4gICAgdGhpcy5fZW1pdHRlZEhlYWRlcnNGaW5pc2hlZCA9IHRydWU7XG4gICAgdGhpcy5oZWFkZXJzRmluaXNoZWQoKTtcbiAgfVxuICB0aGlzLnJlYWQoLWxlbmd0aCwgdGhpcy5fcGFyc2VJREFULmJpbmQodGhpcywgbGVuZ3RoKSk7XG59O1xuUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VJREFUID0gZnVuY3Rpb24gKGxlbmd0aCwgZGF0YSkge1xuICB0aGlzLl9jcmMud3JpdGUoZGF0YSk7XG5cbiAgaWYgKFxuICAgIHRoaXMuX2NvbG9yVHlwZSA9PT0gY29uc3RhbnRzLkNPTE9SVFlQRV9QQUxFVFRFX0NPTE9SICYmXG4gICAgdGhpcy5fcGFsZXR0ZS5sZW5ndGggPT09IDBcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgcGFsZXR0ZSBub3QgZm91bmRcIik7XG4gIH1cblxuICB0aGlzLmluZmxhdGVEYXRhKGRhdGEpO1xuICBsZXQgbGVmdE92ZXJMZW5ndGggPSBsZW5ndGggLSBkYXRhLmxlbmd0aDtcblxuICBpZiAobGVmdE92ZXJMZW5ndGggPiAwKSB7XG4gICAgdGhpcy5faGFuZGxlSURBVChsZWZ0T3Zlckxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5faGFuZGxlQ2h1bmtFbmQoKTtcbiAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faGFuZGxlSUVORCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgdGhpcy5yZWFkKGxlbmd0aCwgdGhpcy5fcGFyc2VJRU5ELmJpbmQodGhpcykpO1xufTtcblBhcnNlci5wcm90b3R5cGUuX3BhcnNlSUVORCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2NyYy53cml0ZShkYXRhKTtcblxuICB0aGlzLl9oYXNJRU5EID0gdHJ1ZTtcbiAgdGhpcy5faGFuZGxlQ2h1bmtFbmQoKTtcblxuICBpZiAodGhpcy5maW5pc2hlZCkge1xuICAgIHRoaXMuZmluaXNoZWQoKTtcbiAgfVxufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IGludGVybGFjZVV0aWxzID0gcmVxdWlyZShcIi4vaW50ZXJsYWNlXCIpO1xuXG5sZXQgcGl4ZWxCcHBNYXBwZXIgPSBbXG4gIC8vIDAgLSBkdW1teSBlbnRyeVxuICBmdW5jdGlvbiAoKSB7fSxcblxuICAvLyAxIC0gTFxuICAvLyAwOiAwLCAxOiAwLCAyOiAwLCAzOiAweGZmXG4gIGZ1bmN0aW9uIChweERhdGEsIGRhdGEsIHB4UG9zLCByYXdQb3MpIHtcbiAgICBpZiAocmF3UG9zID09PSBkYXRhLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFuIG91dCBvZiBkYXRhXCIpO1xuICAgIH1cblxuICAgIGxldCBwaXhlbCA9IGRhdGFbcmF3UG9zXTtcbiAgICBweERhdGFbcHhQb3NdID0gcGl4ZWw7XG4gICAgcHhEYXRhW3B4UG9zICsgMV0gPSBwaXhlbDtcbiAgICBweERhdGFbcHhQb3MgKyAyXSA9IHBpeGVsO1xuICAgIHB4RGF0YVtweFBvcyArIDNdID0gMHhmZjtcbiAgfSxcblxuICAvLyAyIC0gTEFcbiAgLy8gMDogMCwgMTogMCwgMjogMCwgMzogMVxuICBmdW5jdGlvbiAocHhEYXRhLCBkYXRhLCBweFBvcywgcmF3UG9zKSB7XG4gICAgaWYgKHJhd1BvcyArIDEgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbiBvdXQgb2YgZGF0YVwiKTtcbiAgICB9XG5cbiAgICBsZXQgcGl4ZWwgPSBkYXRhW3Jhd1Bvc107XG4gICAgcHhEYXRhW3B4UG9zXSA9IHBpeGVsO1xuICAgIHB4RGF0YVtweFBvcyArIDFdID0gcGl4ZWw7XG4gICAgcHhEYXRhW3B4UG9zICsgMl0gPSBwaXhlbDtcbiAgICBweERhdGFbcHhQb3MgKyAzXSA9IGRhdGFbcmF3UG9zICsgMV07XG4gIH0sXG5cbiAgLy8gMyAtIFJHQlxuICAvLyAwOiAwLCAxOiAxLCAyOiAyLCAzOiAweGZmXG4gIGZ1bmN0aW9uIChweERhdGEsIGRhdGEsIHB4UG9zLCByYXdQb3MpIHtcbiAgICBpZiAocmF3UG9zICsgMiA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFuIG91dCBvZiBkYXRhXCIpO1xuICAgIH1cblxuICAgIHB4RGF0YVtweFBvc10gPSBkYXRhW3Jhd1Bvc107XG4gICAgcHhEYXRhW3B4UG9zICsgMV0gPSBkYXRhW3Jhd1BvcyArIDFdO1xuICAgIHB4RGF0YVtweFBvcyArIDJdID0gZGF0YVtyYXdQb3MgKyAyXTtcbiAgICBweERhdGFbcHhQb3MgKyAzXSA9IDB4ZmY7XG4gIH0sXG5cbiAgLy8gNCAtIFJHQkFcbiAgLy8gMDogMCwgMTogMSwgMjogMiwgMzogM1xuICBmdW5jdGlvbiAocHhEYXRhLCBkYXRhLCBweFBvcywgcmF3UG9zKSB7XG4gICAgaWYgKHJhd1BvcyArIDMgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbiBvdXQgb2YgZGF0YVwiKTtcbiAgICB9XG5cbiAgICBweERhdGFbcHhQb3NdID0gZGF0YVtyYXdQb3NdO1xuICAgIHB4RGF0YVtweFBvcyArIDFdID0gZGF0YVtyYXdQb3MgKyAxXTtcbiAgICBweERhdGFbcHhQb3MgKyAyXSA9IGRhdGFbcmF3UG9zICsgMl07XG4gICAgcHhEYXRhW3B4UG9zICsgM10gPSBkYXRhW3Jhd1BvcyArIDNdO1xuICB9LFxuXTtcblxubGV0IHBpeGVsQnBwQ3VzdG9tTWFwcGVyID0gW1xuICAvLyAwIC0gZHVtbXkgZW50cnlcbiAgZnVuY3Rpb24gKCkge30sXG5cbiAgLy8gMSAtIExcbiAgLy8gMDogMCwgMTogMCwgMjogMCwgMzogMHhmZlxuICBmdW5jdGlvbiAocHhEYXRhLCBwaXhlbERhdGEsIHB4UG9zLCBtYXhCaXQpIHtcbiAgICBsZXQgcGl4ZWwgPSBwaXhlbERhdGFbMF07XG4gICAgcHhEYXRhW3B4UG9zXSA9IHBpeGVsO1xuICAgIHB4RGF0YVtweFBvcyArIDFdID0gcGl4ZWw7XG4gICAgcHhEYXRhW3B4UG9zICsgMl0gPSBwaXhlbDtcbiAgICBweERhdGFbcHhQb3MgKyAzXSA9IG1heEJpdDtcbiAgfSxcblxuICAvLyAyIC0gTEFcbiAgLy8gMDogMCwgMTogMCwgMjogMCwgMzogMVxuICBmdW5jdGlvbiAocHhEYXRhLCBwaXhlbERhdGEsIHB4UG9zKSB7XG4gICAgbGV0IHBpeGVsID0gcGl4ZWxEYXRhWzBdO1xuICAgIHB4RGF0YVtweFBvc10gPSBwaXhlbDtcbiAgICBweERhdGFbcHhQb3MgKyAxXSA9IHBpeGVsO1xuICAgIHB4RGF0YVtweFBvcyArIDJdID0gcGl4ZWw7XG4gICAgcHhEYXRhW3B4UG9zICsgM10gPSBwaXhlbERhdGFbMV07XG4gIH0sXG5cbiAgLy8gMyAtIFJHQlxuICAvLyAwOiAwLCAxOiAxLCAyOiAyLCAzOiAweGZmXG4gIGZ1bmN0aW9uIChweERhdGEsIHBpeGVsRGF0YSwgcHhQb3MsIG1heEJpdCkge1xuICAgIHB4RGF0YVtweFBvc10gPSBwaXhlbERhdGFbMF07XG4gICAgcHhEYXRhW3B4UG9zICsgMV0gPSBwaXhlbERhdGFbMV07XG4gICAgcHhEYXRhW3B4UG9zICsgMl0gPSBwaXhlbERhdGFbMl07XG4gICAgcHhEYXRhW3B4UG9zICsgM10gPSBtYXhCaXQ7XG4gIH0sXG5cbiAgLy8gNCAtIFJHQkFcbiAgLy8gMDogMCwgMTogMSwgMjogMiwgMzogM1xuICBmdW5jdGlvbiAocHhEYXRhLCBwaXhlbERhdGEsIHB4UG9zKSB7XG4gICAgcHhEYXRhW3B4UG9zXSA9IHBpeGVsRGF0YVswXTtcbiAgICBweERhdGFbcHhQb3MgKyAxXSA9IHBpeGVsRGF0YVsxXTtcbiAgICBweERhdGFbcHhQb3MgKyAyXSA9IHBpeGVsRGF0YVsyXTtcbiAgICBweERhdGFbcHhQb3MgKyAzXSA9IHBpeGVsRGF0YVszXTtcbiAgfSxcbl07XG5cbmZ1bmN0aW9uIGJpdFJldHJpZXZlcihkYXRhLCBkZXB0aCkge1xuICBsZXQgbGVmdE92ZXIgPSBbXTtcbiAgbGV0IGkgPSAwO1xuXG4gIGZ1bmN0aW9uIHNwbGl0KCkge1xuICAgIGlmIChpID09PSBkYXRhLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFuIG91dCBvZiBkYXRhXCIpO1xuICAgIH1cbiAgICBsZXQgYnl0ZSA9IGRhdGFbaV07XG4gICAgaSsrO1xuICAgIGxldCBieXRlOCwgYnl0ZTcsIGJ5dGU2LCBieXRlNSwgYnl0ZTQsIGJ5dGUzLCBieXRlMiwgYnl0ZTE7XG4gICAgc3dpdGNoIChkZXB0aCkge1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5yZWNvZ25pc2VkIGRlcHRoXCIpO1xuICAgICAgY2FzZSAxNjpcbiAgICAgICAgYnl0ZTIgPSBkYXRhW2ldO1xuICAgICAgICBpKys7XG4gICAgICAgIGxlZnRPdmVyLnB1c2goKGJ5dGUgPDwgOCkgKyBieXRlMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBieXRlMiA9IGJ5dGUgJiAweDBmO1xuICAgICAgICBieXRlMSA9IGJ5dGUgPj4gNDtcbiAgICAgICAgbGVmdE92ZXIucHVzaChieXRlMSwgYnl0ZTIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYnl0ZTQgPSBieXRlICYgMztcbiAgICAgICAgYnl0ZTMgPSAoYnl0ZSA+PiAyKSAmIDM7XG4gICAgICAgIGJ5dGUyID0gKGJ5dGUgPj4gNCkgJiAzO1xuICAgICAgICBieXRlMSA9IChieXRlID4+IDYpICYgMztcbiAgICAgICAgbGVmdE92ZXIucHVzaChieXRlMSwgYnl0ZTIsIGJ5dGUzLCBieXRlNCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBieXRlOCA9IGJ5dGUgJiAxO1xuICAgICAgICBieXRlNyA9IChieXRlID4+IDEpICYgMTtcbiAgICAgICAgYnl0ZTYgPSAoYnl0ZSA+PiAyKSAmIDE7XG4gICAgICAgIGJ5dGU1ID0gKGJ5dGUgPj4gMykgJiAxO1xuICAgICAgICBieXRlNCA9IChieXRlID4+IDQpICYgMTtcbiAgICAgICAgYnl0ZTMgPSAoYnl0ZSA+PiA1KSAmIDE7XG4gICAgICAgIGJ5dGUyID0gKGJ5dGUgPj4gNikgJiAxO1xuICAgICAgICBieXRlMSA9IChieXRlID4+IDcpICYgMTtcbiAgICAgICAgbGVmdE92ZXIucHVzaChieXRlMSwgYnl0ZTIsIGJ5dGUzLCBieXRlNCwgYnl0ZTUsIGJ5dGU2LCBieXRlNywgYnl0ZTgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICB3aGlsZSAobGVmdE92ZXIubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgc3BsaXQoKTtcbiAgICAgIH1cbiAgICAgIGxldCByZXR1cm5lciA9IGxlZnRPdmVyLnNsaWNlKDAsIGNvdW50KTtcbiAgICAgIGxlZnRPdmVyID0gbGVmdE92ZXIuc2xpY2UoY291bnQpO1xuICAgICAgcmV0dXJuIHJldHVybmVyO1xuICAgIH0sXG4gICAgcmVzZXRBZnRlckxpbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxlZnRPdmVyLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpICE9PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRyYSBkYXRhIGZvdW5kXCIpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcEltYWdlOEJpdChpbWFnZSwgcHhEYXRhLCBnZXRQeFBvcywgYnBwLCBkYXRhLCByYXdQb3MpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtcGFyYW1zXG4gIGxldCBpbWFnZVdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIGxldCBpbWFnZUhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgbGV0IGltYWdlUGFzcyA9IGltYWdlLmluZGV4O1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGltYWdlSGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltYWdlV2lkdGg7IHgrKykge1xuICAgICAgbGV0IHB4UG9zID0gZ2V0UHhQb3MoeCwgeSwgaW1hZ2VQYXNzKTtcbiAgICAgIHBpeGVsQnBwTWFwcGVyW2JwcF0ocHhEYXRhLCBkYXRhLCBweFBvcywgcmF3UG9zKTtcbiAgICAgIHJhd1BvcyArPSBicHA7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH1cbiAgfVxuICByZXR1cm4gcmF3UG9zO1xufVxuXG5mdW5jdGlvbiBtYXBJbWFnZUN1c3RvbUJpdChpbWFnZSwgcHhEYXRhLCBnZXRQeFBvcywgYnBwLCBiaXRzLCBtYXhCaXQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtcGFyYW1zXG4gIGxldCBpbWFnZVdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIGxldCBpbWFnZUhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgbGV0IGltYWdlUGFzcyA9IGltYWdlLmluZGV4O1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGltYWdlSGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltYWdlV2lkdGg7IHgrKykge1xuICAgICAgbGV0IHBpeGVsRGF0YSA9IGJpdHMuZ2V0KGJwcCk7XG4gICAgICBsZXQgcHhQb3MgPSBnZXRQeFBvcyh4LCB5LCBpbWFnZVBhc3MpO1xuICAgICAgcGl4ZWxCcHBDdXN0b21NYXBwZXJbYnBwXShweERhdGEsIHBpeGVsRGF0YSwgcHhQb3MsIG1heEJpdCk7XG4gICAgfVxuICAgIGJpdHMucmVzZXRBZnRlckxpbmUoKTtcbiAgfVxufVxuXG5leHBvcnRzLmRhdGFUb0JpdE1hcCA9IGZ1bmN0aW9uIChkYXRhLCBiaXRtYXBJbmZvKSB7XG4gIGxldCB3aWR0aCA9IGJpdG1hcEluZm8ud2lkdGg7XG4gIGxldCBoZWlnaHQgPSBiaXRtYXBJbmZvLmhlaWdodDtcbiAgbGV0IGRlcHRoID0gYml0bWFwSW5mby5kZXB0aDtcbiAgbGV0IGJwcCA9IGJpdG1hcEluZm8uYnBwO1xuICBsZXQgaW50ZXJsYWNlID0gYml0bWFwSW5mby5pbnRlcmxhY2U7XG4gIGxldCBiaXRzO1xuXG4gIGlmIChkZXB0aCAhPT0gOCkge1xuICAgIGJpdHMgPSBiaXRSZXRyaWV2ZXIoZGF0YSwgZGVwdGgpO1xuICB9XG4gIGxldCBweERhdGE7XG4gIGlmIChkZXB0aCA8PSA4KSB7XG4gICAgcHhEYXRhID0gQnVmZmVyLmFsbG9jKHdpZHRoICogaGVpZ2h0ICogNCk7XG4gIH0gZWxzZSB7XG4gICAgcHhEYXRhID0gbmV3IFVpbnQxNkFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG4gIH1cbiAgbGV0IG1heEJpdCA9IE1hdGgucG93KDIsIGRlcHRoKSAtIDE7XG4gIGxldCByYXdQb3MgPSAwO1xuICBsZXQgaW1hZ2VzO1xuICBsZXQgZ2V0UHhQb3M7XG5cbiAgaWYgKGludGVybGFjZSkge1xuICAgIGltYWdlcyA9IGludGVybGFjZVV0aWxzLmdldEltYWdlUGFzc2VzKHdpZHRoLCBoZWlnaHQpO1xuICAgIGdldFB4UG9zID0gaW50ZXJsYWNlVXRpbHMuZ2V0SW50ZXJsYWNlSXRlcmF0b3Iod2lkdGgsIGhlaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5vbkludGVybGFjZWRQeFBvcyA9IDA7XG4gICAgZ2V0UHhQb3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcmV0dXJuZXIgPSBub25JbnRlcmxhY2VkUHhQb3M7XG4gICAgICBub25JbnRlcmxhY2VkUHhQb3MgKz0gNDtcbiAgICAgIHJldHVybiByZXR1cm5lcjtcbiAgICB9O1xuICAgIGltYWdlcyA9IFt7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfV07XG4gIH1cblxuICBmb3IgKGxldCBpbWFnZUluZGV4ID0gMDsgaW1hZ2VJbmRleCA8IGltYWdlcy5sZW5ndGg7IGltYWdlSW5kZXgrKykge1xuICAgIGlmIChkZXB0aCA9PT0gOCkge1xuICAgICAgcmF3UG9zID0gbWFwSW1hZ2U4Qml0KFxuICAgICAgICBpbWFnZXNbaW1hZ2VJbmRleF0sXG4gICAgICAgIHB4RGF0YSxcbiAgICAgICAgZ2V0UHhQb3MsXG4gICAgICAgIGJwcCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgcmF3UG9zXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXBJbWFnZUN1c3RvbUJpdChcbiAgICAgICAgaW1hZ2VzW2ltYWdlSW5kZXhdLFxuICAgICAgICBweERhdGEsXG4gICAgICAgIGdldFB4UG9zLFxuICAgICAgICBicHAsXG4gICAgICAgIGJpdHMsXG4gICAgICAgIG1heEJpdFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKGRlcHRoID09PSA4KSB7XG4gICAgaWYgKHJhd1BvcyAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImV4dHJhIGRhdGEgZm91bmRcIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJpdHMuZW5kKCk7XG4gIH1cblxuICByZXR1cm4gcHhEYXRhO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gZGVQYWxldHRlKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgcGFsZXR0ZSkge1xuICBsZXQgcHhQb3MgPSAwO1xuICAvLyB1c2UgdmFsdWVzIGZyb20gcGFsZXR0ZVxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgY29sb3IgPSBwYWxldHRlW2luZGF0YVtweFBvc11dO1xuXG4gICAgICBpZiAoIWNvbG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluZGV4IFwiICsgaW5kYXRhW3B4UG9zXSArIFwiIG5vdCBpbiBwYWxldHRlXCIpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSBjb2xvcltpXTtcbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VUcmFuc3BhcmVudENvbG9yKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgdHJhbnNDb2xvcikge1xuICBsZXQgcHhQb3MgPSAwO1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgbWFrZVRyYW5zID0gZmFsc2U7XG5cbiAgICAgIGlmICh0cmFuc0NvbG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodHJhbnNDb2xvclswXSA9PT0gaW5kYXRhW3B4UG9zXSkge1xuICAgICAgICAgIG1ha2VUcmFucyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHRyYW5zQ29sb3JbMF0gPT09IGluZGF0YVtweFBvc10gJiZcbiAgICAgICAgdHJhbnNDb2xvclsxXSA9PT0gaW5kYXRhW3B4UG9zICsgMV0gJiZcbiAgICAgICAgdHJhbnNDb2xvclsyXSA9PT0gaW5kYXRhW3B4UG9zICsgMl1cbiAgICAgICkge1xuICAgICAgICBtYWtlVHJhbnMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG1ha2VUcmFucykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgIG91dGRhdGFbcHhQb3MgKyBpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB4UG9zICs9IDQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNjYWxlRGVwdGgoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCkge1xuICBsZXQgbWF4T3V0U2FtcGxlID0gMjU1O1xuICBsZXQgbWF4SW5TYW1wbGUgPSBNYXRoLnBvdygyLCBkZXB0aCkgLSAxO1xuICBsZXQgcHhQb3MgPSAwO1xuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIG91dGRhdGFbcHhQb3MgKyBpXSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgKGluZGF0YVtweFBvcyArIGldICogbWF4T3V0U2FtcGxlKSAvIG1heEluU2FtcGxlICsgMC41XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRhdGEsIGltYWdlRGF0YSwgc2tpcFJlc2NhbGUgPSBmYWxzZSkge1xuICBsZXQgZGVwdGggPSBpbWFnZURhdGEuZGVwdGg7XG4gIGxldCB3aWR0aCA9IGltYWdlRGF0YS53aWR0aDtcbiAgbGV0IGhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQ7XG4gIGxldCBjb2xvclR5cGUgPSBpbWFnZURhdGEuY29sb3JUeXBlO1xuICBsZXQgdHJhbnNDb2xvciA9IGltYWdlRGF0YS50cmFuc0NvbG9yO1xuICBsZXQgcGFsZXR0ZSA9IGltYWdlRGF0YS5wYWxldHRlO1xuXG4gIGxldCBvdXRkYXRhID0gaW5kYXRhOyAvLyBvbmx5IGRpZmZlcmVudCBmb3IgMTYgYml0c1xuXG4gIGlmIChjb2xvclR5cGUgPT09IDMpIHtcbiAgICAvLyBwYWxldHRlZFxuICAgIGRlUGFsZXR0ZShpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHBhbGV0dGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0cmFuc0NvbG9yKSB7XG4gICAgICByZXBsYWNlVHJhbnNwYXJlbnRDb2xvcihpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRyYW5zQ29sb3IpO1xuICAgIH1cbiAgICAvLyBpZiBpdCBuZWVkcyBzY2FsaW5nXG4gICAgaWYgKGRlcHRoICE9PSA4ICYmICFza2lwUmVzY2FsZSkge1xuICAgICAgLy8gaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJ1ZmZlciBzaXplXG4gICAgICBpZiAoZGVwdGggPT09IDE2KSB7XG4gICAgICAgIG91dGRhdGEgPSBCdWZmZXIuYWxsb2Mod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgIH1cbiAgICAgIHNjYWxlRGVwdGgoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRkYXRhO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XG5sZXQgQ2h1bmtTdHJlYW0gPSByZXF1aXJlKFwiLi9jaHVua3N0cmVhbVwiKTtcbmxldCBGaWx0ZXJBc3luYyA9IHJlcXVpcmUoXCIuL2ZpbHRlci1wYXJzZS1hc3luY1wiKTtcbmxldCBQYXJzZXIgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5sZXQgYml0bWFwcGVyID0gcmVxdWlyZShcIi4vYml0bWFwcGVyXCIpO1xubGV0IGZvcm1hdE5vcm1hbGlzZXIgPSByZXF1aXJlKFwiLi9mb3JtYXQtbm9ybWFsaXNlclwiKTtcblxubGV0IFBhcnNlckFzeW5jID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgQ2h1bmtTdHJlYW0uY2FsbCh0aGlzKTtcblxuICB0aGlzLl9wYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMsIHtcbiAgICByZWFkOiB0aGlzLnJlYWQuYmluZCh0aGlzKSxcbiAgICBlcnJvcjogdGhpcy5faGFuZGxlRXJyb3IuYmluZCh0aGlzKSxcbiAgICBtZXRhZGF0YTogdGhpcy5faGFuZGxlTWV0YURhdGEuYmluZCh0aGlzKSxcbiAgICBnYW1tYTogdGhpcy5lbWl0LmJpbmQodGhpcywgXCJnYW1tYVwiKSxcbiAgICBwYWxldHRlOiB0aGlzLl9oYW5kbGVQYWxldHRlLmJpbmQodGhpcyksXG4gICAgdHJhbnNDb2xvcjogdGhpcy5faGFuZGxlVHJhbnNDb2xvci5iaW5kKHRoaXMpLFxuICAgIGZpbmlzaGVkOiB0aGlzLl9maW5pc2hlZC5iaW5kKHRoaXMpLFxuICAgIGluZmxhdGVEYXRhOiB0aGlzLl9pbmZsYXRlRGF0YS5iaW5kKHRoaXMpLFxuICAgIHNpbXBsZVRyYW5zcGFyZW5jeTogdGhpcy5fc2ltcGxlVHJhbnNwYXJlbmN5LmJpbmQodGhpcyksXG4gICAgaGVhZGVyc0ZpbmlzaGVkOiB0aGlzLl9oZWFkZXJzRmluaXNoZWQuYmluZCh0aGlzKSxcbiAgfSk7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICB0aGlzLl9wYXJzZXIuc3RhcnQoKTtcbn0pO1xudXRpbC5pbmhlcml0cyhQYXJzZXJBc3luYywgQ2h1bmtTdHJlYW0pO1xuXG5QYXJzZXJBc3luYy5wcm90b3R5cGUuX2hhbmRsZUVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuXG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmRlc3Ryb3koKTtcblxuICBpZiAodGhpcy5faW5mbGF0ZSAmJiB0aGlzLl9pbmZsYXRlLmRlc3Ryb3kpIHtcbiAgICB0aGlzLl9pbmZsYXRlLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9maWx0ZXIpIHtcbiAgICB0aGlzLl9maWx0ZXIuZGVzdHJveSgpO1xuICAgIC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTm9kZSA3IGFuZCBiZWxvdy5cbiAgICAvLyBTdXBwcmVzcyBlcnJvcnMgZHVlIHRvIF9pbmZsYXRlIGNhbGxpbmcgd3JpdGUoKSBldmVuIGFmdGVyXG4gICAgLy8gaXQncyBkZXN0cm95KCknZWQuXG4gICAgdGhpcy5fZmlsdGVyLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge30pO1xuICB9XG5cbiAgdGhpcy5lcnJvcmQgPSB0cnVlO1xufTtcblxuUGFyc2VyQXN5bmMucHJvdG90eXBlLl9pbmZsYXRlRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGlmICghdGhpcy5faW5mbGF0ZSkge1xuICAgIGlmICh0aGlzLl9iaXRtYXBJbmZvLmludGVybGFjZSkge1xuICAgICAgdGhpcy5faW5mbGF0ZSA9IHpsaWIuY3JlYXRlSW5mbGF0ZSgpO1xuXG4gICAgICB0aGlzLl9pbmZsYXRlLm9uKFwiZXJyb3JcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKSk7XG4gICAgICB0aGlzLl9maWx0ZXIub24oXCJjb21wbGV0ZVwiLCB0aGlzLl9jb21wbGV0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgdGhpcy5faW5mbGF0ZS5waXBlKHRoaXMuX2ZpbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByb3dTaXplID1cbiAgICAgICAgKCh0aGlzLl9iaXRtYXBJbmZvLndpZHRoICpcbiAgICAgICAgICB0aGlzLl9iaXRtYXBJbmZvLmJwcCAqXG4gICAgICAgICAgdGhpcy5fYml0bWFwSW5mby5kZXB0aCArXG4gICAgICAgICAgNykgPj5cbiAgICAgICAgICAzKSArXG4gICAgICAgIDE7XG4gICAgICBsZXQgaW1hZ2VTaXplID0gcm93U2l6ZSAqIHRoaXMuX2JpdG1hcEluZm8uaGVpZ2h0O1xuICAgICAgbGV0IGNodW5rU2l6ZSA9IE1hdGgubWF4KGltYWdlU2l6ZSwgemxpYi5aX01JTl9DSFVOSyk7XG5cbiAgICAgIHRoaXMuX2luZmxhdGUgPSB6bGliLmNyZWF0ZUluZmxhdGUoeyBjaHVua1NpemU6IGNodW5rU2l6ZSB9KTtcbiAgICAgIGxldCBsZWZ0VG9JbmZsYXRlID0gaW1hZ2VTaXplO1xuXG4gICAgICBsZXQgZW1pdEVycm9yID0gdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKTtcbiAgICAgIHRoaXMuX2luZmxhdGUub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghbGVmdFRvSW5mbGF0ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXRFcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9maWx0ZXIub24oXCJjb21wbGV0ZVwiLCB0aGlzLl9jb21wbGV0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgbGV0IGZpbHRlcldyaXRlID0gdGhpcy5fZmlsdGVyLndyaXRlLmJpbmQodGhpcy5fZmlsdGVyKTtcbiAgICAgIHRoaXMuX2luZmxhdGUub24oXCJkYXRhXCIsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBpZiAoIWxlZnRUb0luZmxhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2h1bmsubGVuZ3RoID4gbGVmdFRvSW5mbGF0ZSkge1xuICAgICAgICAgIGNodW5rID0gY2h1bmsuc2xpY2UoMCwgbGVmdFRvSW5mbGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZWZ0VG9JbmZsYXRlIC09IGNodW5rLmxlbmd0aDtcblxuICAgICAgICBmaWx0ZXJXcml0ZShjaHVuayk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5faW5mbGF0ZS5vbihcImVuZFwiLCB0aGlzLl9maWx0ZXIuZW5kLmJpbmQodGhpcy5fZmlsdGVyKSk7XG4gICAgfVxuICB9XG4gIHRoaXMuX2luZmxhdGUud3JpdGUoZGF0YSk7XG59O1xuXG5QYXJzZXJBc3luYy5wcm90b3R5cGUuX2hhbmRsZU1ldGFEYXRhID0gZnVuY3Rpb24gKG1ldGFEYXRhKSB7XG4gIHRoaXMuX21ldGFEYXRhID0gbWV0YURhdGE7XG4gIHRoaXMuX2JpdG1hcEluZm8gPSBPYmplY3QuY3JlYXRlKG1ldGFEYXRhKTtcblxuICB0aGlzLl9maWx0ZXIgPSBuZXcgRmlsdGVyQXN5bmModGhpcy5fYml0bWFwSW5mbyk7XG59O1xuXG5QYXJzZXJBc3luYy5wcm90b3R5cGUuX2hhbmRsZVRyYW5zQ29sb3IgPSBmdW5jdGlvbiAodHJhbnNDb2xvcikge1xuICB0aGlzLl9iaXRtYXBJbmZvLnRyYW5zQ29sb3IgPSB0cmFuc0NvbG9yO1xufTtcblxuUGFyc2VyQXN5bmMucHJvdG90eXBlLl9oYW5kbGVQYWxldHRlID0gZnVuY3Rpb24gKHBhbGV0dGUpIHtcbiAgdGhpcy5fYml0bWFwSW5mby5wYWxldHRlID0gcGFsZXR0ZTtcbn07XG5cblBhcnNlckFzeW5jLnByb3RvdHlwZS5fc2ltcGxlVHJhbnNwYXJlbmN5ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9tZXRhRGF0YS5hbHBoYSA9IHRydWU7XG59O1xuXG5QYXJzZXJBc3luYy5wcm90b3R5cGUuX2hlYWRlcnNGaW5pc2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVXAgdW50aWwgdGhpcyBwb2ludCwgd2UgZG9uJ3Qga25vdyBpZiB3ZSBoYXZlIGEgdFJOUyBjaHVuayAoYWxwaGEpXG4gIC8vIHNvIHdlIGNhbid0IGVtaXQgbWV0YWRhdGEgYW55IGVhcmxpZXJcbiAgdGhpcy5lbWl0KFwibWV0YWRhdGFcIiwgdGhpcy5fbWV0YURhdGEpO1xufTtcblxuUGFyc2VyQXN5bmMucHJvdG90eXBlLl9maW5pc2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuZXJyb3JkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0aGlzLl9pbmZsYXRlKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgXCJObyBJbmZsYXRlIGJsb2NrXCIpO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vIG1vcmUgZGF0YSB0byBpbmZsYXRlXG4gICAgdGhpcy5faW5mbGF0ZS5lbmQoKTtcbiAgfVxufTtcblxuUGFyc2VyQXN5bmMucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uIChmaWx0ZXJlZERhdGEpIHtcbiAgaWYgKHRoaXMuZXJyb3JkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IG5vcm1hbGlzZWRCaXRtYXBEYXRhO1xuXG4gIHRyeSB7XG4gICAgbGV0IGJpdG1hcERhdGEgPSBiaXRtYXBwZXIuZGF0YVRvQml0TWFwKGZpbHRlcmVkRGF0YSwgdGhpcy5fYml0bWFwSW5mbyk7XG5cbiAgICBub3JtYWxpc2VkQml0bWFwRGF0YSA9IGZvcm1hdE5vcm1hbGlzZXIoXG4gICAgICBiaXRtYXBEYXRhLFxuICAgICAgdGhpcy5fYml0bWFwSW5mbyxcbiAgICAgIHRoaXMuX29wdGlvbnMuc2tpcFJlc2NhbGVcbiAgICApO1xuICAgIGJpdG1hcERhdGEgPSBudWxsO1xuICB9IGNhdGNoIChleCkge1xuICAgIHRoaXMuX2hhbmRsZUVycm9yKGV4KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVtaXQoXCJwYXJzZWRcIiwgbm9ybWFsaXNlZEJpdG1hcERhdGEpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGF0YUluLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKSB7XG4gIGxldCBvdXRIYXNBbHBoYSA9XG4gICAgW2NvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1JfQUxQSEEsIGNvbnN0YW50cy5DT0xPUlRZUEVfQUxQSEFdLmluZGV4T2YoXG4gICAgICBvcHRpb25zLmNvbG9yVHlwZVxuICAgICkgIT09IC0xO1xuICBpZiAob3B0aW9ucy5jb2xvclR5cGUgPT09IG9wdGlvbnMuaW5wdXRDb2xvclR5cGUpIHtcbiAgICBsZXQgYmlnRW5kaWFuID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMik7XG4gICAgICBuZXcgRGF0YVZpZXcoYnVmZmVyKS5zZXRJbnQxNigwLCAyNTYsIHRydWUgLyogbGl0dGxlRW5kaWFuICovKTtcbiAgICAgIC8vIEludDE2QXJyYXkgdXNlcyB0aGUgcGxhdGZvcm0ncyBlbmRpYW5uZXNzLlxuICAgICAgcmV0dXJuIG5ldyBJbnQxNkFycmF5KGJ1ZmZlcilbMF0gIT09IDI1NjtcbiAgICB9KSgpO1xuICAgIC8vIElmIG5vIG5lZWQgdG8gY29udmVydCB0byBncmF5c2NhbGUgYW5kIGFscGhhIGlzIHByZXNlbnQvYWJzZW50IGluIGJvdGgsIHRha2UgYSBmYXN0IHJvdXRlXG4gICAgaWYgKG9wdGlvbnMuYml0RGVwdGggPT09IDggfHwgKG9wdGlvbnMuYml0RGVwdGggPT09IDE2ICYmIGJpZ0VuZGlhbikpIHtcbiAgICAgIHJldHVybiBkYXRhSW47XG4gICAgfVxuICB9XG5cbiAgLy8gbWFwIHRvIGEgVUludDE2IGFycmF5IGlmIGRhdGEgaXMgMTZiaXQsIGZpeCBlbmRpYW5uZXNzIGJlbG93XG4gIGxldCBkYXRhID0gb3B0aW9ucy5iaXREZXB0aCAhPT0gMTYgPyBkYXRhSW4gOiBuZXcgVWludDE2QXJyYXkoZGF0YUluLmJ1ZmZlcik7XG5cbiAgbGV0IG1heFZhbHVlID0gMjU1O1xuICBsZXQgaW5CcHAgPSBjb25zdGFudHMuQ09MT1JUWVBFX1RPX0JQUF9NQVBbb3B0aW9ucy5pbnB1dENvbG9yVHlwZV07XG4gIGlmIChpbkJwcCA9PT0gNCAmJiAhb3B0aW9ucy5pbnB1dEhhc0FscGhhKSB7XG4gICAgaW5CcHAgPSAzO1xuICB9XG4gIGxldCBvdXRCcHAgPSBjb25zdGFudHMuQ09MT1JUWVBFX1RPX0JQUF9NQVBbb3B0aW9ucy5jb2xvclR5cGVdO1xuICBpZiAob3B0aW9ucy5iaXREZXB0aCA9PT0gMTYpIHtcbiAgICBtYXhWYWx1ZSA9IDY1NTM1O1xuICAgIG91dEJwcCAqPSAyO1xuICB9XG4gIGxldCBvdXREYXRhID0gQnVmZmVyLmFsbG9jKHdpZHRoICogaGVpZ2h0ICogb3V0QnBwKTtcblxuICBsZXQgaW5JbmRleCA9IDA7XG4gIGxldCBvdXRJbmRleCA9IDA7XG5cbiAgbGV0IGJnQ29sb3IgPSBvcHRpb25zLmJnQ29sb3IgfHwge307XG4gIGlmIChiZ0NvbG9yLnJlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYmdDb2xvci5yZWQgPSBtYXhWYWx1ZTtcbiAgfVxuICBpZiAoYmdDb2xvci5ncmVlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYmdDb2xvci5ncmVlbiA9IG1heFZhbHVlO1xuICB9XG4gIGlmIChiZ0NvbG9yLmJsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGJnQ29sb3IuYmx1ZSA9IG1heFZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UkdCQSgpIHtcbiAgICBsZXQgcmVkO1xuICAgIGxldCBncmVlbjtcbiAgICBsZXQgYmx1ZTtcbiAgICBsZXQgYWxwaGEgPSBtYXhWYWx1ZTtcbiAgICBzd2l0Y2ggKG9wdGlvbnMuaW5wdXRDb2xvclR5cGUpIHtcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUl9BTFBIQTpcbiAgICAgICAgYWxwaGEgPSBkYXRhW2luSW5kZXggKyAzXTtcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgYmx1ZSA9IGRhdGFbaW5JbmRleCArIDJdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUjpcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgYmx1ZSA9IGRhdGFbaW5JbmRleCArIDJdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgY29uc3RhbnRzLkNPTE9SVFlQRV9BTFBIQTpcbiAgICAgICAgYWxwaGEgPSBkYXRhW2luSW5kZXggKyAxXTtcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSByZWQ7XG4gICAgICAgIGJsdWUgPSByZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjb25zdGFudHMuQ09MT1JUWVBFX0dSQVlTQ0FMRTpcbiAgICAgICAgcmVkID0gZGF0YVtpbkluZGV4XTtcbiAgICAgICAgZ3JlZW4gPSByZWQ7XG4gICAgICAgIGJsdWUgPSByZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiaW5wdXQgY29sb3IgdHlwZTpcIiArXG4gICAgICAgICAgICBvcHRpb25zLmlucHV0Q29sb3JUeXBlICtcbiAgICAgICAgICAgIFwiIGlzIG5vdCBzdXBwb3J0ZWQgYXQgcHJlc2VudFwiXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5wdXRIYXNBbHBoYSkge1xuICAgICAgaWYgKCFvdXRIYXNBbHBoYSkge1xuICAgICAgICBhbHBoYSAvPSBtYXhWYWx1ZTtcbiAgICAgICAgcmVkID0gTWF0aC5taW4oXG4gICAgICAgICAgTWF0aC5tYXgoTWF0aC5yb3VuZCgoMSAtIGFscGhhKSAqIGJnQ29sb3IucmVkICsgYWxwaGEgKiByZWQpLCAwKSxcbiAgICAgICAgICBtYXhWYWx1ZVxuICAgICAgICApO1xuICAgICAgICBncmVlbiA9IE1hdGgubWluKFxuICAgICAgICAgIE1hdGgubWF4KE1hdGgucm91bmQoKDEgLSBhbHBoYSkgKiBiZ0NvbG9yLmdyZWVuICsgYWxwaGEgKiBncmVlbiksIDApLFxuICAgICAgICAgIG1heFZhbHVlXG4gICAgICAgICk7XG4gICAgICAgIGJsdWUgPSBNYXRoLm1pbihcbiAgICAgICAgICBNYXRoLm1heChNYXRoLnJvdW5kKCgxIC0gYWxwaGEpICogYmdDb2xvci5ibHVlICsgYWxwaGEgKiBibHVlKSwgMCksXG4gICAgICAgICAgbWF4VmFsdWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcmVkOiByZWQsIGdyZWVuOiBncmVlbiwgYmx1ZTogYmx1ZSwgYWxwaGE6IGFscGhhIH07XG4gIH1cblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgcmdiYSA9IGdldFJHQkEoZGF0YSwgaW5JbmRleCk7XG5cbiAgICAgIHN3aXRjaCAob3B0aW9ucy5jb2xvclR5cGUpIHtcbiAgICAgICAgY2FzZSBjb25zdGFudHMuQ09MT1JUWVBFX0NPTE9SX0FMUEhBOlxuICAgICAgICBjYXNlIGNvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1I6XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYml0RGVwdGggPT09IDgpIHtcbiAgICAgICAgICAgIG91dERhdGFbb3V0SW5kZXhdID0gcmdiYS5yZWQ7XG4gICAgICAgICAgICBvdXREYXRhW291dEluZGV4ICsgMV0gPSByZ2JhLmdyZWVuO1xuICAgICAgICAgICAgb3V0RGF0YVtvdXRJbmRleCArIDJdID0gcmdiYS5ibHVlO1xuICAgICAgICAgICAgaWYgKG91dEhhc0FscGhhKSB7XG4gICAgICAgICAgICAgIG91dERhdGFbb3V0SW5kZXggKyAzXSA9IHJnYmEuYWxwaGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dERhdGEud3JpdGVVSW50MTZCRShyZ2JhLnJlZCwgb3V0SW5kZXgpO1xuICAgICAgICAgICAgb3V0RGF0YS53cml0ZVVJbnQxNkJFKHJnYmEuZ3JlZW4sIG91dEluZGV4ICsgMik7XG4gICAgICAgICAgICBvdXREYXRhLndyaXRlVUludDE2QkUocmdiYS5ibHVlLCBvdXRJbmRleCArIDQpO1xuICAgICAgICAgICAgaWYgKG91dEhhc0FscGhhKSB7XG4gICAgICAgICAgICAgIG91dERhdGEud3JpdGVVSW50MTZCRShyZ2JhLmFscGhhLCBvdXRJbmRleCArIDYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBjb25zdGFudHMuQ09MT1JUWVBFX0FMUEhBOlxuICAgICAgICBjYXNlIGNvbnN0YW50cy5DT0xPUlRZUEVfR1JBWVNDQUxFOiB7XG4gICAgICAgICAgLy8gQ29udmVydCB0byBncmF5c2NhbGUgYW5kIGFscGhhXG4gICAgICAgICAgbGV0IGdyYXlzY2FsZSA9IChyZ2JhLnJlZCArIHJnYmEuZ3JlZW4gKyByZ2JhLmJsdWUpIC8gMztcbiAgICAgICAgICBpZiAob3B0aW9ucy5iaXREZXB0aCA9PT0gOCkge1xuICAgICAgICAgICAgb3V0RGF0YVtvdXRJbmRleF0gPSBncmF5c2NhbGU7XG4gICAgICAgICAgICBpZiAob3V0SGFzQWxwaGEpIHtcbiAgICAgICAgICAgICAgb3V0RGF0YVtvdXRJbmRleCArIDFdID0gcmdiYS5hbHBoYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0RGF0YS53cml0ZVVJbnQxNkJFKGdyYXlzY2FsZSwgb3V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKG91dEhhc0FscGhhKSB7XG4gICAgICAgICAgICAgIG91dERhdGEud3JpdGVVSW50MTZCRShyZ2JhLmFscGhhLCBvdXRJbmRleCArIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVucmVjb2duaXNlZCBjb2xvciBUeXBlIFwiICsgb3B0aW9ucy5jb2xvclR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpbkluZGV4ICs9IGluQnBwO1xuICAgICAgb3V0SW5kZXggKz0gb3V0QnBwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXREYXRhO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IHBhZXRoUHJlZGljdG9yID0gcmVxdWlyZShcIi4vcGFldGgtcHJlZGljdG9yXCIpO1xuXG5mdW5jdGlvbiBmaWx0ZXJOb25lKHB4RGF0YSwgcHhQb3MsIGJ5dGVXaWR0aCwgcmF3RGF0YSwgcmF3UG9zKSB7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICByYXdEYXRhW3Jhd1BvcyArIHhdID0gcHhEYXRhW3B4UG9zICsgeF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyU3VtTm9uZShweERhdGEsIHB4UG9zLCBieXRlV2lkdGgpIHtcbiAgbGV0IHN1bSA9IDA7XG4gIGxldCBsZW5ndGggPSBweFBvcyArIGJ5dGVXaWR0aDtcblxuICBmb3IgKGxldCBpID0gcHhQb3M7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHN1bSArPSBNYXRoLmFicyhweERhdGFbaV0pO1xuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmZ1bmN0aW9uIGZpbHRlclN1YihweERhdGEsIHB4UG9zLCBieXRlV2lkdGgsIHJhd0RhdGEsIHJhd1BvcywgYnBwKSB7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgbGVmdCA9IHggPj0gYnBwID8gcHhEYXRhW3B4UG9zICsgeCAtIGJwcF0gOiAwO1xuICAgIGxldCB2YWwgPSBweERhdGFbcHhQb3MgKyB4XSAtIGxlZnQ7XG5cbiAgICByYXdEYXRhW3Jhd1BvcyArIHhdID0gdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlclN1bVN1YihweERhdGEsIHB4UG9zLCBieXRlV2lkdGgsIGJwcCkge1xuICBsZXQgc3VtID0gMDtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCBsZWZ0ID0geCA+PSBicHAgPyBweERhdGFbcHhQb3MgKyB4IC0gYnBwXSA6IDA7XG4gICAgbGV0IHZhbCA9IHB4RGF0YVtweFBvcyArIHhdIC0gbGVmdDtcblxuICAgIHN1bSArPSBNYXRoLmFicyh2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHN1bTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyVXAocHhEYXRhLCBweFBvcywgYnl0ZVdpZHRoLCByYXdEYXRhLCByYXdQb3MpIHtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCB1cCA9IHB4UG9zID4gMCA/IHB4RGF0YVtweFBvcyArIHggLSBieXRlV2lkdGhdIDogMDtcbiAgICBsZXQgdmFsID0gcHhEYXRhW3B4UG9zICsgeF0gLSB1cDtcblxuICAgIHJhd0RhdGFbcmF3UG9zICsgeF0gPSB2YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyU3VtVXAocHhEYXRhLCBweFBvcywgYnl0ZVdpZHRoKSB7XG4gIGxldCBzdW0gPSAwO1xuICBsZXQgbGVuZ3RoID0gcHhQb3MgKyBieXRlV2lkdGg7XG4gIGZvciAobGV0IHggPSBweFBvczsgeCA8IGxlbmd0aDsgeCsrKSB7XG4gICAgbGV0IHVwID0gcHhQb3MgPiAwID8gcHhEYXRhW3ggLSBieXRlV2lkdGhdIDogMDtcbiAgICBsZXQgdmFsID0gcHhEYXRhW3hdIC0gdXA7XG5cbiAgICBzdW0gKz0gTWF0aC5hYnModmFsKTtcbiAgfVxuXG4gIHJldHVybiBzdW07XG59XG5cbmZ1bmN0aW9uIGZpbHRlckF2ZyhweERhdGEsIHB4UG9zLCBieXRlV2lkdGgsIHJhd0RhdGEsIHJhd1BvcywgYnBwKSB7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgbGVmdCA9IHggPj0gYnBwID8gcHhEYXRhW3B4UG9zICsgeCAtIGJwcF0gOiAwO1xuICAgIGxldCB1cCA9IHB4UG9zID4gMCA/IHB4RGF0YVtweFBvcyArIHggLSBieXRlV2lkdGhdIDogMDtcbiAgICBsZXQgdmFsID0gcHhEYXRhW3B4UG9zICsgeF0gLSAoKGxlZnQgKyB1cCkgPj4gMSk7XG5cbiAgICByYXdEYXRhW3Jhd1BvcyArIHhdID0gdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlclN1bUF2ZyhweERhdGEsIHB4UG9zLCBieXRlV2lkdGgsIGJwcCkge1xuICBsZXQgc3VtID0gMDtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCBsZWZ0ID0geCA+PSBicHAgPyBweERhdGFbcHhQb3MgKyB4IC0gYnBwXSA6IDA7XG4gICAgbGV0IHVwID0gcHhQb3MgPiAwID8gcHhEYXRhW3B4UG9zICsgeCAtIGJ5dGVXaWR0aF0gOiAwO1xuICAgIGxldCB2YWwgPSBweERhdGFbcHhQb3MgKyB4XSAtICgobGVmdCArIHVwKSA+PiAxKTtcblxuICAgIHN1bSArPSBNYXRoLmFicyh2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHN1bTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyUGFldGgocHhEYXRhLCBweFBvcywgYnl0ZVdpZHRoLCByYXdEYXRhLCByYXdQb3MsIGJwcCkge1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGJ5dGVXaWR0aDsgeCsrKSB7XG4gICAgbGV0IGxlZnQgPSB4ID49IGJwcCA/IHB4RGF0YVtweFBvcyArIHggLSBicHBdIDogMDtcbiAgICBsZXQgdXAgPSBweFBvcyA+IDAgPyBweERhdGFbcHhQb3MgKyB4IC0gYnl0ZVdpZHRoXSA6IDA7XG4gICAgbGV0IHVwbGVmdCA9XG4gICAgICBweFBvcyA+IDAgJiYgeCA+PSBicHAgPyBweERhdGFbcHhQb3MgKyB4IC0gKGJ5dGVXaWR0aCArIGJwcCldIDogMDtcbiAgICBsZXQgdmFsID0gcHhEYXRhW3B4UG9zICsgeF0gLSBwYWV0aFByZWRpY3RvcihsZWZ0LCB1cCwgdXBsZWZ0KTtcblxuICAgIHJhd0RhdGFbcmF3UG9zICsgeF0gPSB2YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyU3VtUGFldGgocHhEYXRhLCBweFBvcywgYnl0ZVdpZHRoLCBicHApIHtcbiAgbGV0IHN1bSA9IDA7XG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgbGVmdCA9IHggPj0gYnBwID8gcHhEYXRhW3B4UG9zICsgeCAtIGJwcF0gOiAwO1xuICAgIGxldCB1cCA9IHB4UG9zID4gMCA/IHB4RGF0YVtweFBvcyArIHggLSBieXRlV2lkdGhdIDogMDtcbiAgICBsZXQgdXBsZWZ0ID1cbiAgICAgIHB4UG9zID4gMCAmJiB4ID49IGJwcCA/IHB4RGF0YVtweFBvcyArIHggLSAoYnl0ZVdpZHRoICsgYnBwKV0gOiAwO1xuICAgIGxldCB2YWwgPSBweERhdGFbcHhQb3MgKyB4XSAtIHBhZXRoUHJlZGljdG9yKGxlZnQsIHVwLCB1cGxlZnQpO1xuXG4gICAgc3VtICs9IE1hdGguYWJzKHZhbCk7XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuXG5sZXQgZmlsdGVycyA9IHtcbiAgMDogZmlsdGVyTm9uZSxcbiAgMTogZmlsdGVyU3ViLFxuICAyOiBmaWx0ZXJVcCxcbiAgMzogZmlsdGVyQXZnLFxuICA0OiBmaWx0ZXJQYWV0aCxcbn07XG5cbmxldCBmaWx0ZXJTdW1zID0ge1xuICAwOiBmaWx0ZXJTdW1Ob25lLFxuICAxOiBmaWx0ZXJTdW1TdWIsXG4gIDI6IGZpbHRlclN1bVVwLFxuICAzOiBmaWx0ZXJTdW1BdmcsXG4gIDQ6IGZpbHRlclN1bVBhZXRoLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocHhEYXRhLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zLCBicHApIHtcbiAgbGV0IGZpbHRlclR5cGVzO1xuICBpZiAoIShcImZpbHRlclR5cGVcIiBpbiBvcHRpb25zKSB8fCBvcHRpb25zLmZpbHRlclR5cGUgPT09IC0xKSB7XG4gICAgZmlsdGVyVHlwZXMgPSBbMCwgMSwgMiwgMywgNF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyVHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGZpbHRlclR5cGVzID0gW29wdGlvbnMuZmlsdGVyVHlwZV07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5yZWNvZ25pc2VkIGZpbHRlciB0eXBlc1wiKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmJpdERlcHRoID09PSAxNikge1xuICAgIGJwcCAqPSAyO1xuICB9XG4gIGxldCBieXRlV2lkdGggPSB3aWR0aCAqIGJwcDtcbiAgbGV0IHJhd1BvcyA9IDA7XG4gIGxldCBweFBvcyA9IDA7XG4gIGxldCByYXdEYXRhID0gQnVmZmVyLmFsbG9jKChieXRlV2lkdGggKyAxKSAqIGhlaWdodCk7XG5cbiAgbGV0IHNlbCA9IGZpbHRlclR5cGVzWzBdO1xuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBpZiAoZmlsdGVyVHlwZXMubGVuZ3RoID4gMSkge1xuICAgICAgLy8gZmluZCBiZXN0IGZpbHRlciBmb3IgdGhpcyBsaW5lICh3aXRoIGxvd2VzdCBzdW0gb2YgdmFsdWVzKVxuICAgICAgbGV0IG1pbiA9IEluZmluaXR5O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbHRlclR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzdW0gPSBmaWx0ZXJTdW1zW2ZpbHRlclR5cGVzW2ldXShweERhdGEsIHB4UG9zLCBieXRlV2lkdGgsIGJwcCk7XG4gICAgICAgIGlmIChzdW0gPCBtaW4pIHtcbiAgICAgICAgICBzZWwgPSBmaWx0ZXJUeXBlc1tpXTtcbiAgICAgICAgICBtaW4gPSBzdW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByYXdEYXRhW3Jhd1Bvc10gPSBzZWw7XG4gICAgcmF3UG9zKys7XG4gICAgZmlsdGVyc1tzZWxdKHB4RGF0YSwgcHhQb3MsIGJ5dGVXaWR0aCwgcmF3RGF0YSwgcmF3UG9zLCBicHApO1xuICAgIHJhd1BvcyArPSBieXRlV2lkdGg7XG4gICAgcHhQb3MgKz0gYnl0ZVdpZHRoO1xuICB9XG4gIHJldHVybiByYXdEYXRhO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmxldCBDcmNTdHJlYW0gPSByZXF1aXJlKFwiLi9jcmNcIik7XG5sZXQgYml0UGFja2VyID0gcmVxdWlyZShcIi4vYml0cGFja2VyXCIpO1xubGV0IGZpbHRlciA9IHJlcXVpcmUoXCIuL2ZpbHRlci1wYWNrXCIpO1xubGV0IHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcblxubGV0IFBhY2tlciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXG4gIG9wdGlvbnMuZGVmbGF0ZUNodW5rU2l6ZSA9IG9wdGlvbnMuZGVmbGF0ZUNodW5rU2l6ZSB8fCAzMiAqIDEwMjQ7XG4gIG9wdGlvbnMuZGVmbGF0ZUxldmVsID1cbiAgICBvcHRpb25zLmRlZmxhdGVMZXZlbCAhPSBudWxsID8gb3B0aW9ucy5kZWZsYXRlTGV2ZWwgOiA5O1xuICBvcHRpb25zLmRlZmxhdGVTdHJhdGVneSA9XG4gICAgb3B0aW9ucy5kZWZsYXRlU3RyYXRlZ3kgIT0gbnVsbCA/IG9wdGlvbnMuZGVmbGF0ZVN0cmF0ZWd5IDogMztcbiAgb3B0aW9ucy5pbnB1dEhhc0FscGhhID1cbiAgICBvcHRpb25zLmlucHV0SGFzQWxwaGEgIT0gbnVsbCA/IG9wdGlvbnMuaW5wdXRIYXNBbHBoYSA6IHRydWU7XG4gIG9wdGlvbnMuZGVmbGF0ZUZhY3RvcnkgPSBvcHRpb25zLmRlZmxhdGVGYWN0b3J5IHx8IHpsaWIuY3JlYXRlRGVmbGF0ZTtcbiAgb3B0aW9ucy5iaXREZXB0aCA9IG9wdGlvbnMuYml0RGVwdGggfHwgODtcbiAgLy8gVGhpcyBpcyBvdXRwdXRDb2xvclR5cGVcbiAgb3B0aW9ucy5jb2xvclR5cGUgPVxuICAgIHR5cGVvZiBvcHRpb25zLmNvbG9yVHlwZSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyBvcHRpb25zLmNvbG9yVHlwZVxuICAgICAgOiBjb25zdGFudHMuQ09MT1JUWVBFX0NPTE9SX0FMUEhBO1xuICBvcHRpb25zLmlucHV0Q29sb3JUeXBlID1cbiAgICB0eXBlb2Ygb3B0aW9ucy5pbnB1dENvbG9yVHlwZSA9PT0gXCJudW1iZXJcIlxuICAgICAgPyBvcHRpb25zLmlucHV0Q29sb3JUeXBlXG4gICAgICA6IGNvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1JfQUxQSEE7XG5cbiAgaWYgKFxuICAgIFtcbiAgICAgIGNvbnN0YW50cy5DT0xPUlRZUEVfR1JBWVNDQUxFLFxuICAgICAgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUixcbiAgICAgIGNvbnN0YW50cy5DT0xPUlRZUEVfQ09MT1JfQUxQSEEsXG4gICAgICBjb25zdGFudHMuQ09MT1JUWVBFX0FMUEhBLFxuICAgIF0uaW5kZXhPZihvcHRpb25zLmNvbG9yVHlwZSkgPT09IC0xXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwib3B0aW9uIGNvbG9yIHR5cGU6XCIgKyBvcHRpb25zLmNvbG9yVHlwZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQgYXQgcHJlc2VudFwiXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgW1xuICAgICAgY29uc3RhbnRzLkNPTE9SVFlQRV9HUkFZU0NBTEUsXG4gICAgICBjb25zdGFudHMuQ09MT1JUWVBFX0NPTE9SLFxuICAgICAgY29uc3RhbnRzLkNPTE9SVFlQRV9DT0xPUl9BTFBIQSxcbiAgICAgIGNvbnN0YW50cy5DT0xPUlRZUEVfQUxQSEEsXG4gICAgXS5pbmRleE9mKG9wdGlvbnMuaW5wdXRDb2xvclR5cGUpID09PSAtMVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIm9wdGlvbiBpbnB1dCBjb2xvciB0eXBlOlwiICtcbiAgICAgICAgb3B0aW9ucy5pbnB1dENvbG9yVHlwZSArXG4gICAgICAgIFwiIGlzIG5vdCBzdXBwb3J0ZWQgYXQgcHJlc2VudFwiXG4gICAgKTtcbiAgfVxuICBpZiAob3B0aW9ucy5iaXREZXB0aCAhPT0gOCAmJiBvcHRpb25zLmJpdERlcHRoICE9PSAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwib3B0aW9uIGJpdCBkZXB0aDpcIiArIG9wdGlvbnMuYml0RGVwdGggKyBcIiBpcyBub3Qgc3VwcG9ydGVkIGF0IHByZXNlbnRcIlxuICAgICk7XG4gIH1cbn0pO1xuXG5QYWNrZXIucHJvdG90eXBlLmdldERlZmxhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGNodW5rU2l6ZTogdGhpcy5fb3B0aW9ucy5kZWZsYXRlQ2h1bmtTaXplLFxuICAgIGxldmVsOiB0aGlzLl9vcHRpb25zLmRlZmxhdGVMZXZlbCxcbiAgICBzdHJhdGVneTogdGhpcy5fb3B0aW9ucy5kZWZsYXRlU3RyYXRlZ3ksXG4gIH07XG59O1xuXG5QYWNrZXIucHJvdG90eXBlLmNyZWF0ZURlZmxhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9vcHRpb25zLmRlZmxhdGVGYWN0b3J5KHRoaXMuZ2V0RGVmbGF0ZU9wdGlvbnMoKSk7XG59O1xuXG5QYWNrZXIucHJvdG90eXBlLmZpbHRlckRhdGEgPSBmdW5jdGlvbiAoZGF0YSwgd2lkdGgsIGhlaWdodCkge1xuICAvLyBjb252ZXJ0IHRvIGNvcnJlY3QgZm9ybWF0IGZvciBmaWx0ZXJpbmcgKGUuZy4gcmlnaHQgYnBwIGFuZCBiaXQgZGVwdGgpXG4gIGxldCBwYWNrZWREYXRhID0gYml0UGFja2VyKGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRoaXMuX29wdGlvbnMpO1xuXG4gIC8vIGZpbHRlciBwaXhlbCBkYXRhXG4gIGxldCBicHAgPSBjb25zdGFudHMuQ09MT1JUWVBFX1RPX0JQUF9NQVBbdGhpcy5fb3B0aW9ucy5jb2xvclR5cGVdO1xuICBsZXQgZmlsdGVyZWREYXRhID0gZmlsdGVyKHBhY2tlZERhdGEsIHdpZHRoLCBoZWlnaHQsIHRoaXMuX29wdGlvbnMsIGJwcCk7XG4gIHJldHVybiBmaWx0ZXJlZERhdGE7XG59O1xuXG5QYWNrZXIucHJvdG90eXBlLl9wYWNrQ2h1bmsgPSBmdW5jdGlvbiAodHlwZSwgZGF0YSkge1xuICBsZXQgbGVuID0gZGF0YSA/IGRhdGEubGVuZ3RoIDogMDtcbiAgbGV0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhsZW4gKyAxMik7XG5cbiAgYnVmLndyaXRlVUludDMyQkUobGVuLCAwKTtcbiAgYnVmLndyaXRlVUludDMyQkUodHlwZSwgNCk7XG5cbiAgaWYgKGRhdGEpIHtcbiAgICBkYXRhLmNvcHkoYnVmLCA4KTtcbiAgfVxuXG4gIGJ1Zi53cml0ZUludDMyQkUoXG4gICAgQ3JjU3RyZWFtLmNyYzMyKGJ1Zi5zbGljZSg0LCBidWYubGVuZ3RoIC0gNCkpLFxuICAgIGJ1Zi5sZW5ndGggLSA0XG4gICk7XG4gIHJldHVybiBidWY7XG59O1xuXG5QYWNrZXIucHJvdG90eXBlLnBhY2tHQU1BID0gZnVuY3Rpb24gKGdhbW1hKSB7XG4gIGxldCBidWYgPSBCdWZmZXIuYWxsb2MoNCk7XG4gIGJ1Zi53cml0ZVVJbnQzMkJFKE1hdGguZmxvb3IoZ2FtbWEgKiBjb25zdGFudHMuR0FNTUFfRElWSVNJT04pLCAwKTtcbiAgcmV0dXJuIHRoaXMuX3BhY2tDaHVuayhjb25zdGFudHMuVFlQRV9nQU1BLCBidWYpO1xufTtcblxuUGFja2VyLnByb3RvdHlwZS5wYWNrSUhEUiA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBidWYgPSBCdWZmZXIuYWxsb2MoMTMpO1xuICBidWYud3JpdGVVSW50MzJCRSh3aWR0aCwgMCk7XG4gIGJ1Zi53cml0ZVVJbnQzMkJFKGhlaWdodCwgNCk7XG4gIGJ1Zls4XSA9IHRoaXMuX29wdGlvbnMuYml0RGVwdGg7IC8vIEJpdCBkZXB0aFxuICBidWZbOV0gPSB0aGlzLl9vcHRpb25zLmNvbG9yVHlwZTsgLy8gY29sb3JUeXBlXG4gIGJ1ZlsxMF0gPSAwOyAvLyBjb21wcmVzc2lvblxuICBidWZbMTFdID0gMDsgLy8gZmlsdGVyXG4gIGJ1ZlsxMl0gPSAwOyAvLyBpbnRlcmxhY2VcblxuICByZXR1cm4gdGhpcy5fcGFja0NodW5rKGNvbnN0YW50cy5UWVBFX0lIRFIsIGJ1Zik7XG59O1xuXG5QYWNrZXIucHJvdG90eXBlLnBhY2tJREFUID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIHRoaXMuX3BhY2tDaHVuayhjb25zdGFudHMuVFlQRV9JREFULCBkYXRhKTtcbn07XG5cblBhY2tlci5wcm90b3R5cGUucGFja0lFTkQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9wYWNrQ2h1bmsoY29uc3RhbnRzLlRZUEVfSUVORCwgbnVsbCk7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IFN0cmVhbSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5sZXQgY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xubGV0IFBhY2tlciA9IHJlcXVpcmUoXCIuL3BhY2tlclwiKTtcblxubGV0IFBhY2tlckFzeW5jID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdCkge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICBsZXQgb3B0aW9ucyA9IG9wdCB8fCB7fTtcblxuICB0aGlzLl9wYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuICB0aGlzLl9kZWZsYXRlID0gdGhpcy5fcGFja2VyLmNyZWF0ZURlZmxhdGUoKTtcblxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbn0pO1xudXRpbC5pbmhlcml0cyhQYWNrZXJBc3luYywgU3RyZWFtKTtcblxuUGFja2VyQXN5bmMucHJvdG90eXBlLnBhY2sgPSBmdW5jdGlvbiAoZGF0YSwgd2lkdGgsIGhlaWdodCwgZ2FtbWEpIHtcbiAgLy8gU2lnbmF0dXJlXG4gIHRoaXMuZW1pdChcImRhdGFcIiwgQnVmZmVyLmZyb20oY29uc3RhbnRzLlBOR19TSUdOQVRVUkUpKTtcbiAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0aGlzLl9wYWNrZXIucGFja0lIRFIod2lkdGgsIGhlaWdodCkpO1xuXG4gIGlmIChnYW1tYSkge1xuICAgIHRoaXMuZW1pdChcImRhdGFcIiwgdGhpcy5fcGFja2VyLnBhY2tHQU1BKGdhbW1hKSk7XG4gIH1cblxuICBsZXQgZmlsdGVyZWREYXRhID0gdGhpcy5fcGFja2VyLmZpbHRlckRhdGEoZGF0YSwgd2lkdGgsIGhlaWdodCk7XG5cbiAgLy8gY29tcHJlc3MgaXRcbiAgdGhpcy5fZGVmbGF0ZS5vbihcImVycm9yXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZXJyb3JcIikpO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oXG4gICAgXCJkYXRhXCIsXG4gICAgZnVuY3Rpb24gKGNvbXByZXNzZWREYXRhKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrSURBVChjb21wcmVzc2VkRGF0YSkpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xuXG4gIHRoaXMuX2RlZmxhdGUub24oXG4gICAgXCJlbmRcIixcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrSUVORCgpKTtcbiAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICB0aGlzLl9kZWZsYXRlLmVuZChmaWx0ZXJlZERhdGEpO1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIikub2s7XG5sZXQgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcblxubGV0IGtNYXhMZW5ndGggPSByZXF1aXJlKFwiYnVmZmVyXCIpLmtNYXhMZW5ndGg7XG5cbmZ1bmN0aW9uIEluZmxhdGUob3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW5mbGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IEluZmxhdGUob3B0cyk7XG4gIH1cblxuICBpZiAob3B0cyAmJiBvcHRzLmNodW5rU2l6ZSA8IHpsaWIuWl9NSU5fQ0hVTkspIHtcbiAgICBvcHRzLmNodW5rU2l6ZSA9IHpsaWIuWl9NSU5fQ0hVTks7XG4gIH1cblxuICB6bGliLkluZmxhdGUuY2FsbCh0aGlzLCBvcHRzKTtcblxuICAvLyBOb2RlIDggLS0+IDkgY29tcGF0aWJpbGl0eSBjaGVja1xuICB0aGlzLl9vZmZzZXQgPSB0aGlzLl9vZmZzZXQgPT09IHVuZGVmaW5lZCA/IHRoaXMuX291dE9mZnNldCA6IHRoaXMuX29mZnNldDtcbiAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyIHx8IHRoaXMuX291dEJ1ZmZlcjtcblxuICBpZiAob3B0cyAmJiBvcHRzLm1heExlbmd0aCAhPSBudWxsKSB7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gb3B0cy5tYXhMZW5ndGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5mbGF0ZShvcHRzKSB7XG4gIHJldHVybiBuZXcgSW5mbGF0ZShvcHRzKTtcbn1cblxuZnVuY3Rpb24gX2Nsb3NlKGVuZ2luZSwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7XG4gIH1cblxuICAvLyBDYWxsZXIgbWF5IGludm9rZSAuY2xvc2UgYWZ0ZXIgYSB6bGliIGVycm9yICh3aGljaCB3aWxsIG51bGwgX2hhbmRsZSkuXG4gIGlmICghZW5naW5lLl9oYW5kbGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBlbmdpbmUuX2hhbmRsZS5jbG9zZSgpO1xuICBlbmdpbmUuX2hhbmRsZSA9IG51bGw7XG59XG5cbkluZmxhdGUucHJvdG90eXBlLl9wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmssIGZsdXNoRmxhZywgYXN5bmNDYikge1xuICBpZiAodHlwZW9mIGFzeW5jQ2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB6bGliLkluZmxhdGUuX3Byb2Nlc3NDaHVuay5jYWxsKHRoaXMsIGNodW5rLCBmbHVzaEZsYWcsIGFzeW5jQ2IpO1xuICB9XG5cbiAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gIGxldCBhdmFpbEluQmVmb3JlID0gY2h1bmsgJiYgY2h1bmsubGVuZ3RoO1xuICBsZXQgYXZhaWxPdXRCZWZvcmUgPSB0aGlzLl9jaHVua1NpemUgLSB0aGlzLl9vZmZzZXQ7XG4gIGxldCBsZWZ0VG9JbmZsYXRlID0gdGhpcy5fbWF4TGVuZ3RoO1xuICBsZXQgaW5PZmYgPSAwO1xuXG4gIGxldCBidWZmZXJzID0gW107XG4gIGxldCBucmVhZCA9IDA7XG5cbiAgbGV0IGVycm9yO1xuICB0aGlzLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycikge1xuICAgIGVycm9yID0gZXJyO1xuICB9KTtcblxuICBmdW5jdGlvbiBoYW5kbGVDaHVuayhhdmFpbEluQWZ0ZXIsIGF2YWlsT3V0QWZ0ZXIpIHtcbiAgICBpZiAoc2VsZi5faGFkRXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaGF2ZSA9IGF2YWlsT3V0QmVmb3JlIC0gYXZhaWxPdXRBZnRlcjtcbiAgICBhc3NlcnQoaGF2ZSA+PSAwLCBcImhhdmUgc2hvdWxkIG5vdCBnbyBkb3duXCIpO1xuXG4gICAgaWYgKGhhdmUgPiAwKSB7XG4gICAgICBsZXQgb3V0ID0gc2VsZi5fYnVmZmVyLnNsaWNlKHNlbGYuX29mZnNldCwgc2VsZi5fb2Zmc2V0ICsgaGF2ZSk7XG4gICAgICBzZWxmLl9vZmZzZXQgKz0gaGF2ZTtcblxuICAgICAgaWYgKG91dC5sZW5ndGggPiBsZWZ0VG9JbmZsYXRlKSB7XG4gICAgICAgIG91dCA9IG91dC5zbGljZSgwLCBsZWZ0VG9JbmZsYXRlKTtcbiAgICAgIH1cblxuICAgICAgYnVmZmVycy5wdXNoKG91dCk7XG4gICAgICBucmVhZCArPSBvdXQubGVuZ3RoO1xuICAgICAgbGVmdFRvSW5mbGF0ZSAtPSBvdXQubGVuZ3RoO1xuXG4gICAgICBpZiAobGVmdFRvSW5mbGF0ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDAgfHwgc2VsZi5fb2Zmc2V0ID49IHNlbGYuX2NodW5rU2l6ZSkge1xuICAgICAgYXZhaWxPdXRCZWZvcmUgPSBzZWxmLl9jaHVua1NpemU7XG4gICAgICBzZWxmLl9vZmZzZXQgPSAwO1xuICAgICAgc2VsZi5fYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNlbGYuX2NodW5rU2l6ZSk7XG4gICAgfVxuXG4gICAgaWYgKGF2YWlsT3V0QWZ0ZXIgPT09IDApIHtcbiAgICAgIGluT2ZmICs9IGF2YWlsSW5CZWZvcmUgLSBhdmFpbEluQWZ0ZXI7XG4gICAgICBhdmFpbEluQmVmb3JlID0gYXZhaWxJbkFmdGVyO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBhc3NlcnQodGhpcy5faGFuZGxlLCBcInpsaWIgYmluZGluZyBjbG9zZWRcIik7XG4gIGxldCByZXM7XG4gIGRvIHtcbiAgICByZXMgPSB0aGlzLl9oYW5kbGUud3JpdGVTeW5jKFxuICAgICAgZmx1c2hGbGFnLFxuICAgICAgY2h1bmssIC8vIGluXG4gICAgICBpbk9mZiwgLy8gaW5fb2ZmXG4gICAgICBhdmFpbEluQmVmb3JlLCAvLyBpbl9sZW5cbiAgICAgIHRoaXMuX2J1ZmZlciwgLy8gb3V0XG4gICAgICB0aGlzLl9vZmZzZXQsIC8vb3V0X29mZlxuICAgICAgYXZhaWxPdXRCZWZvcmVcbiAgICApOyAvLyBvdXRfbGVuXG4gICAgLy8gTm9kZSA4IC0tPiA5IGNvbXBhdGliaWxpdHkgY2hlY2tcbiAgICByZXMgPSByZXMgfHwgdGhpcy5fd3JpdGVTdGF0ZTtcbiAgfSB3aGlsZSAoIXRoaXMuX2hhZEVycm9yICYmIGhhbmRsZUNodW5rKHJlc1swXSwgcmVzWzFdKSk7XG5cbiAgaWYgKHRoaXMuX2hhZEVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBpZiAobnJlYWQgPj0ga01heExlbmd0aCkge1xuICAgIF9jbG9zZSh0aGlzKTtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIFwiQ2Fubm90IGNyZWF0ZSBmaW5hbCBCdWZmZXIuIEl0IHdvdWxkIGJlIGxhcmdlciB0aGFuIDB4XCIgK1xuICAgICAgICBrTWF4TGVuZ3RoLnRvU3RyaW5nKDE2KSArXG4gICAgICAgIFwiIGJ5dGVzXCJcbiAgICApO1xuICB9XG5cbiAgbGV0IGJ1ZiA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgbnJlYWQpO1xuICBfY2xvc2UodGhpcyk7XG5cbiAgcmV0dXJuIGJ1Zjtcbn07XG5cbnV0aWwuaW5oZXJpdHMoSW5mbGF0ZSwgemxpYi5JbmZsYXRlKTtcblxuZnVuY3Rpb24gemxpYkJ1ZmZlclN5bmMoZW5naW5lLCBidWZmZXIpIHtcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBidWZmZXIgPSBCdWZmZXIuZnJvbShidWZmZXIpO1xuICB9XG4gIGlmICghKGJ1ZmZlciBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm90IGEgc3RyaW5nIG9yIGJ1ZmZlclwiKTtcbiAgfVxuXG4gIGxldCBmbHVzaEZsYWcgPSBlbmdpbmUuX2ZpbmlzaEZsdXNoRmxhZztcbiAgaWYgKGZsdXNoRmxhZyA9PSBudWxsKSB7XG4gICAgZmx1c2hGbGFnID0gemxpYi5aX0ZJTklTSDtcbiAgfVxuXG4gIHJldHVybiBlbmdpbmUuX3Byb2Nlc3NDaHVuayhidWZmZXIsIGZsdXNoRmxhZyk7XG59XG5cbmZ1bmN0aW9uIGluZmxhdGVTeW5jKGJ1ZmZlciwgb3B0cykge1xuICByZXR1cm4gemxpYkJ1ZmZlclN5bmMobmV3IEluZmxhdGUob3B0cyksIGJ1ZmZlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGluZmxhdGVTeW5jO1xuZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcbmV4cG9ydHMuY3JlYXRlSW5mbGF0ZSA9IGNyZWF0ZUluZmxhdGU7XG5leHBvcnRzLmluZmxhdGVTeW5jID0gaW5mbGF0ZVN5bmM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBTeW5jUmVhZGVyID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gIHRoaXMuX3JlYWRzID0gW107XG59KTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChsZW5ndGgsIGNhbGxiYWNrKSB7XG4gIHRoaXMuX3JlYWRzLnB1c2goe1xuICAgIGxlbmd0aDogTWF0aC5hYnMobGVuZ3RoKSwgLy8gaWYgbGVuZ3RoIDwgMCB0aGVuIGF0IG1vc3QgdGhpcyBsZW5ndGhcbiAgICBhbGxvd0xlc3M6IGxlbmd0aCA8IDAsXG4gICAgZnVuYzogY2FsbGJhY2ssXG4gIH0pO1xufTtcblxuU3luY1JlYWRlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gYXMgbG9uZyBhcyB0aGVyZSBpcyBhbnkgZGF0YSBhbmQgcmVhZCByZXF1ZXN0c1xuICB3aGlsZSAodGhpcy5fcmVhZHMubGVuZ3RoID4gMCAmJiB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgbGV0IHJlYWQgPSB0aGlzLl9yZWFkc1swXTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX2J1ZmZlci5sZW5ndGggJiZcbiAgICAgICh0aGlzLl9idWZmZXIubGVuZ3RoID49IHJlYWQubGVuZ3RoIHx8IHJlYWQuYWxsb3dMZXNzKVxuICAgICkge1xuICAgICAgLy8gb2sgdGhlcmUgaXMgYW55IGRhdGEgc28gdGhhdCB3ZSBjYW4gc2F0aXNmeSB0aGlzIHJlcXVlc3RcbiAgICAgIHRoaXMuX3JlYWRzLnNoaWZ0KCk7IC8vID09IHJlYWRcblxuICAgICAgbGV0IGJ1ZiA9IHRoaXMuX2J1ZmZlcjtcblxuICAgICAgdGhpcy5fYnVmZmVyID0gYnVmLnNsaWNlKHJlYWQubGVuZ3RoKTtcblxuICAgICAgcmVhZC5mdW5jLmNhbGwodGhpcywgYnVmLnNsaWNlKDAsIHJlYWQubGVuZ3RoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZWFkcy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlcmUgYXJlIHNvbWUgcmVhZCByZXF1ZXN0cyB3YWl0bmcgb24gZmluaXNoZWQgc3RyZWFtXCIpO1xuICB9XG5cbiAgaWYgKHRoaXMuX2J1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5yZWNvZ25pc2VkIGNvbnRlbnQgYXQgZW5kIG9mIHN0cmVhbVwiKTtcbiAgfVxufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxubGV0IFN5bmNSZWFkZXIgPSByZXF1aXJlKFwiLi9zeW5jLXJlYWRlclwiKTtcbmxldCBGaWx0ZXIgPSByZXF1aXJlKFwiLi9maWx0ZXItcGFyc2VcIik7XG5cbmV4cG9ydHMucHJvY2VzcyA9IGZ1bmN0aW9uIChpbkJ1ZmZlciwgYml0bWFwSW5mbykge1xuICBsZXQgb3V0QnVmZmVycyA9IFtdO1xuICBsZXQgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoaW5CdWZmZXIpO1xuICBsZXQgZmlsdGVyID0gbmV3IEZpbHRlcihiaXRtYXBJbmZvLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIHdyaXRlOiBmdW5jdGlvbiAoYnVmZmVyUGFydCkge1xuICAgICAgb3V0QnVmZmVycy5wdXNoKGJ1ZmZlclBhcnQpO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHt9LFxuICB9KTtcblxuICBmaWx0ZXIuc3RhcnQoKTtcbiAgcmVhZGVyLnByb2Nlc3MoKTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXRCdWZmZXJzKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBoYXNTeW5jWmxpYiA9IHRydWU7XG5sZXQgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xubGV0IGluZmxhdGVTeW5jID0gcmVxdWlyZShcIi4vc3luYy1pbmZsYXRlXCIpO1xuaWYgKCF6bGliLmRlZmxhdGVTeW5jKSB7XG4gIGhhc1N5bmNabGliID0gZmFsc2U7XG59XG5sZXQgU3luY1JlYWRlciA9IHJlcXVpcmUoXCIuL3N5bmMtcmVhZGVyXCIpO1xubGV0IEZpbHRlclN5bmMgPSByZXF1aXJlKFwiLi9maWx0ZXItcGFyc2Utc3luY1wiKTtcbmxldCBQYXJzZXIgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5sZXQgYml0bWFwcGVyID0gcmVxdWlyZShcIi4vYml0bWFwcGVyXCIpO1xubGV0IGZvcm1hdE5vcm1hbGlzZXIgPSByZXF1aXJlKFwiLi9mb3JtYXQtbm9ybWFsaXNlclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRpb25zKSB7XG4gIGlmICghaGFzU3luY1psaWIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRvIHVzZSB0aGUgc3luYyBjYXBhYmlsaXR5IG9mIHRoaXMgbGlicmFyeSBpbiBvbGQgbm9kZSB2ZXJzaW9ucywgcGxlYXNlIHBpbiBwbmdqcyB0byB2Mi4zLjBcIlxuICAgICk7XG4gIH1cblxuICBsZXQgZXJyO1xuICBmdW5jdGlvbiBoYW5kbGVFcnJvcihfZXJyXykge1xuICAgIGVyciA9IF9lcnJfO1xuICB9XG5cbiAgbGV0IG1ldGFEYXRhO1xuICBmdW5jdGlvbiBoYW5kbGVNZXRhRGF0YShfbWV0YURhdGFfKSB7XG4gICAgbWV0YURhdGEgPSBfbWV0YURhdGFfO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVHJhbnNDb2xvcih0cmFuc0NvbG9yKSB7XG4gICAgbWV0YURhdGEudHJhbnNDb2xvciA9IHRyYW5zQ29sb3I7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgICBtZXRhRGF0YS5wYWxldHRlID0gcGFsZXR0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSgpIHtcbiAgICBtZXRhRGF0YS5hbHBoYSA9IHRydWU7XG4gIH1cblxuICBsZXQgZ2FtbWE7XG4gIGZ1bmN0aW9uIGhhbmRsZUdhbW1hKF9nYW1tYV8pIHtcbiAgICBnYW1tYSA9IF9nYW1tYV87XG4gIH1cblxuICBsZXQgaW5mbGF0ZURhdGFMaXN0ID0gW107XG4gIGZ1bmN0aW9uIGhhbmRsZUluZmxhdGVEYXRhKGluZmxhdGVkRGF0YSkge1xuICAgIGluZmxhdGVEYXRhTGlzdC5wdXNoKGluZmxhdGVkRGF0YSk7XG4gIH1cblxuICBsZXQgcmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoYnVmZmVyKTtcblxuICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zLCB7XG4gICAgcmVhZDogcmVhZGVyLnJlYWQuYmluZChyZWFkZXIpLFxuICAgIGVycm9yOiBoYW5kbGVFcnJvcixcbiAgICBtZXRhZGF0YTogaGFuZGxlTWV0YURhdGEsXG4gICAgZ2FtbWE6IGhhbmRsZUdhbW1hLFxuICAgIHBhbGV0dGU6IGhhbmRsZVBhbGV0dGUsXG4gICAgdHJhbnNDb2xvcjogaGFuZGxlVHJhbnNDb2xvcixcbiAgICBpbmZsYXRlRGF0YTogaGFuZGxlSW5mbGF0ZURhdGEsXG4gICAgc2ltcGxlVHJhbnNwYXJlbmN5OiBoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3ksXG4gIH0pO1xuXG4gIHBhcnNlci5zdGFydCgpO1xuICByZWFkZXIucHJvY2VzcygpO1xuXG4gIGlmIChlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICAvL2pvaW4gdG9nZXRoZXIgdGhlIGluZmxhdGUgZGF0YXNcbiAgbGV0IGluZmxhdGVEYXRhID0gQnVmZmVyLmNvbmNhdChpbmZsYXRlRGF0YUxpc3QpO1xuICBpbmZsYXRlRGF0YUxpc3QubGVuZ3RoID0gMDtcblxuICBsZXQgaW5mbGF0ZWREYXRhO1xuICBpZiAobWV0YURhdGEuaW50ZXJsYWNlKSB7XG4gICAgaW5mbGF0ZWREYXRhID0gemxpYi5pbmZsYXRlU3luYyhpbmZsYXRlRGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvd1NpemUgPVxuICAgICAgKChtZXRhRGF0YS53aWR0aCAqIG1ldGFEYXRhLmJwcCAqIG1ldGFEYXRhLmRlcHRoICsgNykgPj4gMykgKyAxO1xuICAgIGxldCBpbWFnZVNpemUgPSByb3dTaXplICogbWV0YURhdGEuaGVpZ2h0O1xuICAgIGluZmxhdGVkRGF0YSA9IGluZmxhdGVTeW5jKGluZmxhdGVEYXRhLCB7XG4gICAgICBjaHVua1NpemU6IGltYWdlU2l6ZSxcbiAgICAgIG1heExlbmd0aDogaW1hZ2VTaXplLFxuICAgIH0pO1xuICB9XG4gIGluZmxhdGVEYXRhID0gbnVsbDtcblxuICBpZiAoIWluZmxhdGVkRGF0YSB8fCAhaW5mbGF0ZWREYXRhLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBwbmcgLSBpbnZhbGlkIGluZmxhdGUgZGF0YSByZXNwb25zZVwiKTtcbiAgfVxuXG4gIGxldCB1bmZpbHRlcmVkRGF0YSA9IEZpbHRlclN5bmMucHJvY2VzcyhpbmZsYXRlZERhdGEsIG1ldGFEYXRhKTtcbiAgaW5mbGF0ZURhdGEgPSBudWxsO1xuXG4gIGxldCBiaXRtYXBEYXRhID0gYml0bWFwcGVyLmRhdGFUb0JpdE1hcCh1bmZpbHRlcmVkRGF0YSwgbWV0YURhdGEpO1xuICB1bmZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgbGV0IG5vcm1hbGlzZWRCaXRtYXBEYXRhID0gZm9ybWF0Tm9ybWFsaXNlcihcbiAgICBiaXRtYXBEYXRhLFxuICAgIG1ldGFEYXRhLFxuICAgIG9wdGlvbnMuc2tpcFJlc2NhbGVcbiAgKTtcblxuICBtZXRhRGF0YS5kYXRhID0gbm9ybWFsaXNlZEJpdG1hcERhdGE7XG4gIG1ldGFEYXRhLmdhbW1hID0gZ2FtbWEgfHwgMDtcblxuICByZXR1cm4gbWV0YURhdGE7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgaGFzU3luY1psaWIgPSB0cnVlO1xubGV0IHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcbmlmICghemxpYi5kZWZsYXRlU3luYykge1xuICBoYXNTeW5jWmxpYiA9IGZhbHNlO1xufVxubGV0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmxldCBQYWNrZXIgPSByZXF1aXJlKFwiLi9wYWNrZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGFEYXRhLCBvcHQpIHtcbiAgaWYgKCFoYXNTeW5jWmxpYikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVG8gdXNlIHRoZSBzeW5jIGNhcGFiaWxpdHkgb2YgdGhpcyBsaWJyYXJ5IGluIG9sZCBub2RlIHZlcnNpb25zLCBwbGVhc2UgcGluIHBuZ2pzIHRvIHYyLjMuMFwiXG4gICAgKTtcbiAgfVxuXG4gIGxldCBvcHRpb25zID0gb3B0IHx8IHt9O1xuXG4gIGxldCBwYWNrZXIgPSBuZXcgUGFja2VyKG9wdGlvbnMpO1xuXG4gIGxldCBjaHVua3MgPSBbXTtcblxuICAvLyBTaWduYXR1cmVcbiAgY2h1bmtzLnB1c2goQnVmZmVyLmZyb20oY29uc3RhbnRzLlBOR19TSUdOQVRVUkUpKTtcblxuICAvLyBIZWFkZXJcbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJSERSKG1ldGFEYXRhLndpZHRoLCBtZXRhRGF0YS5oZWlnaHQpKTtcblxuICBpZiAobWV0YURhdGEuZ2FtbWEpIHtcbiAgICBjaHVua3MucHVzaChwYWNrZXIucGFja0dBTUEobWV0YURhdGEuZ2FtbWEpKTtcbiAgfVxuXG4gIGxldCBmaWx0ZXJlZERhdGEgPSBwYWNrZXIuZmlsdGVyRGF0YShcbiAgICBtZXRhRGF0YS5kYXRhLFxuICAgIG1ldGFEYXRhLndpZHRoLFxuICAgIG1ldGFEYXRhLmhlaWdodFxuICApO1xuXG4gIC8vIGNvbXByZXNzIGl0XG4gIGxldCBjb21wcmVzc2VkRGF0YSA9IHpsaWIuZGVmbGF0ZVN5bmMoXG4gICAgZmlsdGVyZWREYXRhLFxuICAgIHBhY2tlci5nZXREZWZsYXRlT3B0aW9ucygpXG4gICk7XG4gIGZpbHRlcmVkRGF0YSA9IG51bGw7XG5cbiAgaWYgKCFjb21wcmVzc2VkRGF0YSB8fCAhY29tcHJlc3NlZERhdGEubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHBuZyAtIGludmFsaWQgY29tcHJlc3NlZCBkYXRhIHJlc3BvbnNlXCIpO1xuICB9XG4gIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrSURBVChjb21wcmVzc2VkRGF0YSkpO1xuXG4gIC8vIEVuZFxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lFTkQoKSk7XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoY2h1bmtzKTtcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBwYXJzZSA9IHJlcXVpcmUoXCIuL3BhcnNlci1zeW5jXCIpO1xubGV0IHBhY2sgPSByZXF1aXJlKFwiLi9wYWNrZXItc3luY1wiKTtcblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0aW9ucykge1xuICByZXR1cm4gcGFyc2UoYnVmZmVyLCBvcHRpb25zIHx8IHt9KTtcbn07XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAocG5nLCBvcHRpb25zKSB7XG4gIHJldHVybiBwYWNrKHBuZywgb3B0aW9ucyk7XG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IFN0cmVhbSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5sZXQgUGFyc2VyID0gcmVxdWlyZShcIi4vcGFyc2VyLWFzeW5jXCIpO1xubGV0IFBhY2tlciA9IHJlcXVpcmUoXCIuL3BhY2tlci1hc3luY1wiKTtcbmxldCBQTkdTeW5jID0gcmVxdWlyZShcIi4vcG5nLXN5bmNcIik7XG5cbmxldCBQTkcgPSAoZXhwb3J0cy5QTkcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIC8vIGNvZXJjZSBwaXhlbCBkaW1lbnNpb25zIHRvIGludGVnZXJzIChhbHNvIGNvZXJjZXMgdW5kZWZpbmVkIC0+IDApOlxuICB0aGlzLndpZHRoID0gb3B0aW9ucy53aWR0aCB8IDA7XG4gIHRoaXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfCAwO1xuXG4gIHRoaXMuZGF0YSA9XG4gICAgdGhpcy53aWR0aCA+IDAgJiYgdGhpcy5oZWlnaHQgPiAwXG4gICAgICA/IEJ1ZmZlci5hbGxvYyg0ICogdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0KVxuICAgICAgOiBudWxsO1xuXG4gIGlmIChvcHRpb25zLmZpbGwgJiYgdGhpcy5kYXRhKSB7XG4gICAgdGhpcy5kYXRhLmZpbGwoMCk7XG4gIH1cblxuICB0aGlzLmdhbW1hID0gMDtcbiAgdGhpcy5yZWFkYWJsZSA9IHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIHRoaXMuX3BhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG5cbiAgdGhpcy5fcGFyc2VyLm9uKFwiZXJyb3JcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJlcnJvclwiKSk7XG4gIHRoaXMuX3BhcnNlci5vbihcImNsb3NlXCIsIHRoaXMuX2hhbmRsZUNsb3NlLmJpbmQodGhpcykpO1xuICB0aGlzLl9wYXJzZXIub24oXCJtZXRhZGF0YVwiLCB0aGlzLl9tZXRhZGF0YS5iaW5kKHRoaXMpKTtcbiAgdGhpcy5fcGFyc2VyLm9uKFwiZ2FtbWFcIiwgdGhpcy5fZ2FtbWEuYmluZCh0aGlzKSk7XG4gIHRoaXMuX3BhcnNlci5vbihcbiAgICBcInBhcnNlZFwiLFxuICAgIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgdGhpcy5lbWl0KFwicGFyc2VkXCIsIGRhdGEpO1xuICAgIH0uYmluZCh0aGlzKVxuICApO1xuXG4gIHRoaXMuX3BhY2tlciA9IG5ldyBQYWNrZXIob3B0aW9ucyk7XG4gIHRoaXMuX3BhY2tlci5vbihcImRhdGFcIiwgdGhpcy5lbWl0LmJpbmQodGhpcywgXCJkYXRhXCIpKTtcbiAgdGhpcy5fcGFja2VyLm9uKFwiZW5kXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZW5kXCIpKTtcbiAgdGhpcy5fcGFyc2VyLm9uKFwiY2xvc2VcIiwgdGhpcy5faGFuZGxlQ2xvc2UuYmluZCh0aGlzKSk7XG4gIHRoaXMuX3BhY2tlci5vbihcImVycm9yXCIsIHRoaXMuZW1pdC5iaW5kKHRoaXMsIFwiZXJyb3JcIikpO1xufSk7XG51dGlsLmluaGVyaXRzKFBORywgU3RyZWFtKTtcblxuUE5HLnN5bmMgPSBQTkdTeW5jO1xuXG5QTkcucHJvdG90eXBlLnBhY2sgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5kYXRhIHx8ICF0aGlzLmRhdGEubGVuZ3RoKSB7XG4gICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgXCJObyBkYXRhIHByb3ZpZGVkXCIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJvY2Vzcy5uZXh0VGljayhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9wYWNrZXIucGFjayh0aGlzLmRhdGEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmdhbW1hKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cblBORy5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgbGV0IG9uUGFyc2VkLCBvbkVycm9yO1xuXG4gICAgb25QYXJzZWQgPSBmdW5jdGlvbiAocGFyc2VkRGF0YSkge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uRXJyb3IpO1xuXG4gICAgICB0aGlzLmRhdGEgPSBwYXJzZWREYXRhO1xuICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcyk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgb25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJwYXJzZWRcIiwgb25QYXJzZWQpO1xuXG4gICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIHRoaXMub25jZShcInBhcnNlZFwiLCBvblBhcnNlZCk7XG4gICAgdGhpcy5vbmNlKFwiZXJyb3JcIiwgb25FcnJvcik7XG4gIH1cblxuICB0aGlzLmVuZChkYXRhKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5QTkcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fcGFyc2VyLndyaXRlKGRhdGEpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblBORy5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fcGFyc2VyLmVuZChkYXRhKTtcbn07XG5cblBORy5wcm90b3R5cGUuX21ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhKSB7XG4gIHRoaXMud2lkdGggPSBtZXRhZGF0YS53aWR0aDtcbiAgdGhpcy5oZWlnaHQgPSBtZXRhZGF0YS5oZWlnaHQ7XG5cbiAgdGhpcy5lbWl0KFwibWV0YWRhdGFcIiwgbWV0YWRhdGEpO1xufTtcblxuUE5HLnByb3RvdHlwZS5fZ2FtbWEgPSBmdW5jdGlvbiAoZ2FtbWEpIHtcbiAgdGhpcy5nYW1tYSA9IGdhbW1hO1xufTtcblxuUE5HLnByb3RvdHlwZS5faGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fcGFyc2VyLndyaXRhYmxlICYmICF0aGlzLl9wYWNrZXIucmVhZGFibGUpIHtcbiAgICB0aGlzLmVtaXQoXCJjbG9zZVwiKTtcbiAgfVxufTtcblxuUE5HLmJpdGJsdCA9IGZ1bmN0aW9uIChzcmMsIGRzdCwgc3JjWCwgc3JjWSwgd2lkdGgsIGhlaWdodCwgZGVsdGFYLCBkZWx0YVkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtcGFyYW1zXG4gIC8vIGNvZXJjZSBwaXhlbCBkaW1lbnNpb25zIHRvIGludGVnZXJzIChhbHNvIGNvZXJjZXMgdW5kZWZpbmVkIC0+IDApOlxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICBzcmNYIHw9IDA7XG4gIHNyY1kgfD0gMDtcbiAgd2lkdGggfD0gMDtcbiAgaGVpZ2h0IHw9IDA7XG4gIGRlbHRhWCB8PSAwO1xuICBkZWx0YVkgfD0gMDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG4gIGlmIChcbiAgICBzcmNYID4gc3JjLndpZHRoIHx8XG4gICAgc3JjWSA+IHNyYy5oZWlnaHQgfHxcbiAgICBzcmNYICsgd2lkdGggPiBzcmMud2lkdGggfHxcbiAgICBzcmNZICsgaGVpZ2h0ID4gc3JjLmhlaWdodFxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaXRibHQgcmVhZGluZyBvdXRzaWRlIGltYWdlXCIpO1xuICB9XG5cbiAgaWYgKFxuICAgIGRlbHRhWCA+IGRzdC53aWR0aCB8fFxuICAgIGRlbHRhWSA+IGRzdC5oZWlnaHQgfHxcbiAgICBkZWx0YVggKyB3aWR0aCA+IGRzdC53aWR0aCB8fFxuICAgIGRlbHRhWSArIGhlaWdodCA+IGRzdC5oZWlnaHRcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYml0Ymx0IHdyaXRpbmcgb3V0c2lkZSBpbWFnZVwiKTtcbiAgfVxuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICBzcmMuZGF0YS5jb3B5KFxuICAgICAgZHN0LmRhdGEsXG4gICAgICAoKGRlbHRhWSArIHkpICogZHN0LndpZHRoICsgZGVsdGFYKSA8PCAyLFxuICAgICAgKChzcmNZICsgeSkgKiBzcmMud2lkdGggKyBzcmNYKSA8PCAyLFxuICAgICAgKChzcmNZICsgeSkgKiBzcmMud2lkdGggKyBzcmNYICsgd2lkdGgpIDw8IDJcbiAgICApO1xuICB9XG59O1xuXG5QTkcucHJvdG90eXBlLmJpdGJsdCA9IGZ1bmN0aW9uIChcbiAgZHN0LFxuICBzcmNYLFxuICBzcmNZLFxuICB3aWR0aCxcbiAgaGVpZ2h0LFxuICBkZWx0YVgsXG4gIGRlbHRhWVxuKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbWF4LXBhcmFtc1xuXG4gIFBORy5iaXRibHQodGhpcywgZHN0LCBzcmNYLCBzcmNZLCB3aWR0aCwgaGVpZ2h0LCBkZWx0YVgsIGRlbHRhWSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUE5HLmFkanVzdEdhbW1hID0gZnVuY3Rpb24gKHNyYykge1xuICBpZiAoc3JjLmdhbW1hKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzcmMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgc3JjLndpZHRoOyB4KyspIHtcbiAgICAgICAgbGV0IGlkeCA9IChzcmMud2lkdGggKiB5ICsgeCkgPDwgMjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAgIGxldCBzYW1wbGUgPSBzcmMuZGF0YVtpZHggKyBpXSAvIDI1NTtcbiAgICAgICAgICBzYW1wbGUgPSBNYXRoLnBvdyhzYW1wbGUsIDEgLyAyLjIgLyBzcmMuZ2FtbWEpO1xuICAgICAgICAgIHNyYy5kYXRhW2lkeCArIGldID0gTWF0aC5yb3VuZChzYW1wbGUgKiAyNTUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNyYy5nYW1tYSA9IDA7XG4gIH1cbn07XG5cblBORy5wcm90b3R5cGUuYWRqdXN0R2FtbWEgPSBmdW5jdGlvbiAoKSB7XG4gIFBORy5hZGp1c3RHYW1tYSh0aGlzKTtcbn07XG4iLCAiLyohXG5cbkpTWmlwIHYzLjEwLjEgLSBBIEphdmFTY3JpcHQgY2xhc3MgZm9yIGdlbmVyYXRpbmcgYW5kIHJlYWRpbmcgemlwIGZpbGVzXG48aHR0cDovL3N0dWFydGsuY29tL2pzemlwPlxuXG4oYykgMjAwOS0yMDE2IFN0dWFydCBLbmlnaHRsZXkgPHN0dWFydCBbYXRdIHN0dWFydGsuY29tPlxuRHVhbCBsaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Ugb3IgR1BMdjMuIFNlZSBodHRwczovL3Jhdy5naXRodWIuY29tL1N0dWsvanN6aXAvbWFpbi9MSUNFTlNFLm1hcmtkb3duLlxuXG5KU1ppcCB1c2VzIHRoZSBsaWJyYXJ5IHBha28gcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIDpcbmh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9ibG9iL21haW4vTElDRU5TRVxuKi9cblxuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXsoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzKS5KU1ppcD1lKCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBzKGEsbyxoKXtmdW5jdGlvbiB1KHIsZSl7aWYoIW9bcl0pe2lmKCFhW3JdKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFlJiZ0KXJldHVybiB0KHIsITApO2lmKGwpcmV0dXJuIGwociwhMCk7dmFyIG49bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIityK1wiJ1wiKTt0aHJvdyBuLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsbn12YXIgaT1vW3JdPXtleHBvcnRzOnt9fTthW3JdWzBdLmNhbGwoaS5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciB0PWFbcl1bMV1bZV07cmV0dXJuIHUodHx8ZSl9LGksaS5leHBvcnRzLHMsYSxvLGgpfXJldHVybiBvW3JdLmV4cG9ydHN9Zm9yKHZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsZT0wO2U8aC5sZW5ndGg7ZSsrKXUoaFtlXSk7cmV0dXJuIHV9KHsxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGQ9ZShcIi4vdXRpbHNcIiksYz1lKFwiLi9zdXBwb3J0XCIpLHA9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO3IuZW5jb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyLG4saSxzLGEsbyxoPVtdLHU9MCxsPWUubGVuZ3RoLGY9bCxjPVwic3RyaW5nXCIhPT1kLmdldFR5cGVPZihlKTt1PGUubGVuZ3RoOylmPWwtdSxuPWM/KHQ9ZVt1KytdLHI9dTxsP2VbdSsrXTowLHU8bD9lW3UrK106MCk6KHQ9ZS5jaGFyQ29kZUF0KHUrKykscj11PGw/ZS5jaGFyQ29kZUF0KHUrKyk6MCx1PGw/ZS5jaGFyQ29kZUF0KHUrKyk6MCksaT10Pj4yLHM9KDMmdCk8PDR8cj4+NCxhPTE8Zj8oMTUmcik8PDJ8bj4+Njo2NCxvPTI8Zj82MyZuOjY0LGgucHVzaChwLmNoYXJBdChpKStwLmNoYXJBdChzKStwLmNoYXJBdChhKStwLmNoYXJBdChvKSk7cmV0dXJuIGguam9pbihcIlwiKX0sci5kZWNvZGU9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGkscyxhLG89MCxoPTAsdT1cImRhdGE6XCI7aWYoZS5zdWJzdHIoMCx1Lmxlbmd0aCk9PT11KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBpdCBsb29rcyBsaWtlIGEgZGF0YSB1cmwuXCIpO3ZhciBsLGY9MyooZT1lLnJlcGxhY2UoL1teQS1aYS16MC05Ky89XS9nLFwiXCIpKS5sZW5ndGgvNDtpZihlLmNoYXJBdChlLmxlbmd0aC0xKT09PXAuY2hhckF0KDY0KSYmZi0tLGUuY2hhckF0KGUubGVuZ3RoLTIpPT09cC5jaGFyQXQoNjQpJiZmLS0sZiUxIT0wKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGlucHV0LCBiYWQgY29udGVudCBsZW5ndGguXCIpO2ZvcihsPWMudWludDhhcnJheT9uZXcgVWludDhBcnJheSgwfGYpOm5ldyBBcnJheSgwfGYpO288ZS5sZW5ndGg7KXQ9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpPDwyfChpPXAuaW5kZXhPZihlLmNoYXJBdChvKyspKSk+PjQscj0oMTUmaSk8PDR8KHM9cC5pbmRleE9mKGUuY2hhckF0KG8rKykpKT4+MixuPSgzJnMpPDw2fChhPXAuaW5kZXhPZihlLmNoYXJBdChvKyspKSksbFtoKytdPXQsNjQhPT1zJiYobFtoKytdPXIpLDY0IT09YSYmKGxbaCsrXT1uKTtyZXR1cm4gbH19LHtcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGlsc1wiOjMyfV0sMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL2V4dGVybmFsXCIpLGk9ZShcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIikscz1lKFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiKSxhPWUoXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIik7ZnVuY3Rpb24gbyhlLHQscixuLGkpe3RoaXMuY29tcHJlc3NlZFNpemU9ZSx0aGlzLnVuY29tcHJlc3NlZFNpemU9dCx0aGlzLmNyYzMyPXIsdGhpcy5jb21wcmVzc2lvbj1uLHRoaXMuY29tcHJlc3NlZENvbnRlbnQ9aX1vLnByb3RvdHlwZT17Z2V0Q29udGVudFdvcmtlcjpmdW5jdGlvbigpe3ZhciBlPW5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBhKFwiZGF0YV9sZW5ndGhcIikpLHQ9dGhpcztyZXR1cm4gZS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7aWYodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoIT09dC51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IHVuY29tcHJlc3NlZCBkYXRhIHNpemUgbWlzbWF0Y2hcIil9KSxlfSxnZXRDb21wcmVzc2VkV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzZWRTaXplXCIsdGhpcy5jb21wcmVzc2VkU2l6ZSkud2l0aFN0cmVhbUluZm8oXCJ1bmNvbXByZXNzZWRTaXplXCIsdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsdGhpcy5jcmMzMikud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLHRoaXMuY29tcHJlc3Npb24pfX0sby5jcmVhdGVXb3JrZXJGcm9tPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5waXBlKG5ldyBzKS5waXBlKG5ldyBhKFwidW5jb21wcmVzc2VkU2l6ZVwiKSkucGlwZSh0LmNvbXByZXNzV29ya2VyKHIpKS5waXBlKG5ldyBhKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIix0KX0sdC5leHBvcnRzPW99LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6MjYsXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6Mjd9XSwzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIik7ci5TVE9SRT17bWFnaWM6XCJcXDBcXDBcIixjb21wcmVzc1dvcmtlcjpmdW5jdGlvbigpe3JldHVybiBuZXcgbihcIlNUT1JFIGNvbXByZXNzaW9uXCIpfSx1bmNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKX19LHIuREVGTEFURT1lKFwiLi9mbGF0ZVwiKX0se1wiLi9mbGF0ZVwiOjcsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6Mjh9XSw0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vdXRpbHNcIik7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1bXSxyPTA7cjwyNTY7cisrKXtlPXI7Zm9yKHZhciBuPTA7bjw4O24rKyllPTEmZT8zOTg4MjkyMzg0XmU+Pj4xOmU+Pj4xO3Rbcl09ZX1yZXR1cm4gdH0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwIT09ZSYmZS5sZW5ndGg/XCJzdHJpbmdcIiE9PW4uZ2V0VHlwZU9mKGUpP2Z1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPW8scz1uK3I7ZV49LTE7Zm9yKHZhciBhPW47YTxzO2ErKyllPWU+Pj44XmlbMjU1JihlXnRbYV0pXTtyZXR1cm4tMV5lfSgwfHQsZSxlLmxlbmd0aCwwKTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1vLHM9bityO2VePS0xO2Zvcih2YXIgYT1uO2E8czthKyspZT1lPj4+OF5pWzI1NSYoZV50LmNoYXJDb2RlQXQoYSkpXTtyZXR1cm4tMV5lfSgwfHQsZSxlLmxlbmd0aCwwKTowfX0se1wiLi91dGlsc1wiOjMyfV0sNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuYmFzZTY0PSExLHIuYmluYXJ5PSExLHIuZGlyPSExLHIuY3JlYXRlRm9sZGVycz0hMCxyLmRhdGU9bnVsbCxyLmNvbXByZXNzaW9uPW51bGwsci5jb21wcmVzc2lvbk9wdGlvbnM9bnVsbCxyLmNvbW1lbnQ9bnVsbCxyLnVuaXhQZXJtaXNzaW9ucz1udWxsLHIuZG9zUGVybWlzc2lvbnM9bnVsbH0se31dLDY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1udWxsO249XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2U/UHJvbWlzZTplKFwibGllXCIpLHQuZXhwb3J0cz17UHJvbWlzZTpufX0se2xpZTozN31dLDc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDMyQXJyYXksaT1lKFwicGFrb1wiKSxzPWUoXCIuL3V0aWxzXCIpLGE9ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksbz1uP1widWludDhhcnJheVwiOlwiYXJyYXlcIjtmdW5jdGlvbiBoKGUsdCl7YS5jYWxsKHRoaXMsXCJGbGF0ZVdvcmtlci9cIitlKSx0aGlzLl9wYWtvPW51bGwsdGhpcy5fcGFrb0FjdGlvbj1lLHRoaXMuX3Bha29PcHRpb25zPXQsdGhpcy5tZXRhPXt9fXIubWFnaWM9XCJcXGJcXDBcIixzLmluaGVyaXRzKGgsYSksaC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMubWV0YT1lLm1ldGEsbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2gocy50cmFuc2Zvcm1UbyhvLGUuZGF0YSksITEpfSxoLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2EucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcyksbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2goW10sITApfSxoLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7YS5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuX3Bha289bnVsbH0saC5wcm90b3R5cGUuX2NyZWF0ZVBha289ZnVuY3Rpb24oKXt0aGlzLl9wYWtvPW5ldyBpW3RoaXMuX3Bha29BY3Rpb25dKHtyYXc6ITAsbGV2ZWw6dGhpcy5fcGFrb09wdGlvbnMubGV2ZWx8fC0xfSk7dmFyIHQ9dGhpczt0aGlzLl9wYWtvLm9uRGF0YT1mdW5jdGlvbihlKXt0LnB1c2goe2RhdGE6ZSxtZXRhOnQubWV0YX0pfX0sci5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGgoXCJEZWZsYXRlXCIsZSl9LHIudW5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbigpe3JldHVybiBuZXcgaChcIkluZmxhdGVcIix7fSl9fSx7XCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3V0aWxzXCI6MzIscGFrbzozOH1dLDg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBBKGUsdCl7dmFyIHIsbj1cIlwiO2ZvcihyPTA7cjx0O3IrKyluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZlKSxlPj4+PTg7cmV0dXJuIG59ZnVuY3Rpb24gbihlLHQscixuLGkscyl7dmFyIGEsbyxoPWUuZmlsZSx1PWUuY29tcHJlc3Npb24sbD1zIT09Ty51dGY4ZW5jb2RlLGY9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoaC5uYW1lKSksYz1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsTy51dGY4ZW5jb2RlKGgubmFtZSkpLGQ9aC5jb21tZW50LHA9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoZCkpLG09SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLE8udXRmOGVuY29kZShkKSksXz1jLmxlbmd0aCE9PWgubmFtZS5sZW5ndGgsZz1tLmxlbmd0aCE9PWQubGVuZ3RoLGI9XCJcIix2PVwiXCIseT1cIlwiLHc9aC5kaXIsaz1oLmRhdGUseD17Y3JjMzI6MCxjb21wcmVzc2VkU2l6ZTowLHVuY29tcHJlc3NlZFNpemU6MH07dCYmIXJ8fCh4LmNyYzMyPWUuY3JjMzIseC5jb21wcmVzc2VkU2l6ZT1lLmNvbXByZXNzZWRTaXplLHgudW5jb21wcmVzc2VkU2l6ZT1lLnVuY29tcHJlc3NlZFNpemUpO3ZhciBTPTA7dCYmKFN8PTgpLGx8fCFfJiYhZ3x8KFN8PTIwNDgpO3ZhciB6PTAsQz0wO3cmJih6fD0xNiksXCJVTklYXCI9PT1pPyhDPTc5OCx6fD1mdW5jdGlvbihlLHQpe3ZhciByPWU7cmV0dXJuIGV8fChyPXQ/MTY4OTM6MzMyMDQpLCg2NTUzNSZyKTw8MTZ9KGgudW5peFBlcm1pc3Npb25zLHcpKTooQz0yMCx6fD1mdW5jdGlvbihlKXtyZXR1cm4gNjMmKGV8fDApfShoLmRvc1Blcm1pc3Npb25zKSksYT1rLmdldFVUQ0hvdXJzKCksYTw8PTYsYXw9ay5nZXRVVENNaW51dGVzKCksYTw8PTUsYXw9ay5nZXRVVENTZWNvbmRzKCkvMixvPWsuZ2V0VVRDRnVsbFllYXIoKS0xOTgwLG88PD00LG98PWsuZ2V0VVRDTW9udGgoKSsxLG88PD01LG98PWsuZ2V0VVRDRGF0ZSgpLF8mJih2PUEoMSwxKStBKEIoZiksNCkrYyxiKz1cInVwXCIrQSh2Lmxlbmd0aCwyKSt2KSxnJiYoeT1BKDEsMSkrQShCKHApLDQpK20sYis9XCJ1Y1wiK0EoeS5sZW5ndGgsMikreSk7dmFyIEU9XCJcIjtyZXR1cm4gRSs9XCJcXG5cXDBcIixFKz1BKFMsMiksRSs9dS5tYWdpYyxFKz1BKGEsMiksRSs9QShvLDIpLEUrPUEoeC5jcmMzMiw0KSxFKz1BKHguY29tcHJlc3NlZFNpemUsNCksRSs9QSh4LnVuY29tcHJlc3NlZFNpemUsNCksRSs9QShmLmxlbmd0aCwyKSxFKz1BKGIubGVuZ3RoLDIpLHtmaWxlUmVjb3JkOlIuTE9DQUxfRklMRV9IRUFERVIrRStmK2IsZGlyUmVjb3JkOlIuQ0VOVFJBTF9GSUxFX0hFQURFUitBKEMsMikrRStBKHAubGVuZ3RoLDIpK1wiXFwwXFwwXFwwXFwwXCIrQSh6LDQpK0Eobiw0KStmK2IrcH19dmFyIEk9ZShcIi4uL3V0aWxzXCIpLGk9ZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLE89ZShcIi4uL3V0ZjhcIiksQj1lKFwiLi4vY3JjMzJcIiksUj1lKFwiLi4vc2lnbmF0dXJlXCIpO2Z1bmN0aW9uIHMoZSx0LHIsbil7aS5jYWxsKHRoaXMsXCJaaXBGaWxlV29ya2VyXCIpLHRoaXMuYnl0ZXNXcml0dGVuPTAsdGhpcy56aXBDb21tZW50PXQsdGhpcy56aXBQbGF0Zm9ybT1yLHRoaXMuZW5jb2RlRmlsZU5hbWU9bix0aGlzLnN0cmVhbUZpbGVzPWUsdGhpcy5hY2N1bXVsYXRlPSExLHRoaXMuY29udGVudEJ1ZmZlcj1bXSx0aGlzLmRpclJlY29yZHM9W10sdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PTAsdGhpcy5lbnRyaWVzQ291bnQ9MCx0aGlzLmN1cnJlbnRGaWxlPW51bGwsdGhpcy5fc291cmNlcz1bXX1JLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlKXt2YXIgdD1lLm1ldGEucGVyY2VudHx8MCxyPXRoaXMuZW50cmllc0NvdW50LG49dGhpcy5fc291cmNlcy5sZW5ndGg7dGhpcy5hY2N1bXVsYXRlP3RoaXMuY29udGVudEJ1ZmZlci5wdXNoKGUpOih0aGlzLmJ5dGVzV3JpdHRlbis9ZS5kYXRhLmxlbmd0aCxpLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyx7ZGF0YTplLmRhdGEsbWV0YTp7Y3VycmVudEZpbGU6dGhpcy5jdXJyZW50RmlsZSxwZXJjZW50OnI/KHQrMTAwKihyLW4tMSkpL3I6MTAwfX0pKX0scy5wcm90b3R5cGUub3BlbmVkU291cmNlPWZ1bmN0aW9uKGUpe3RoaXMuY3VycmVudFNvdXJjZU9mZnNldD10aGlzLmJ5dGVzV3JpdHRlbix0aGlzLmN1cnJlbnRGaWxlPWUuZmlsZS5uYW1lO3ZhciB0PXRoaXMuc3RyZWFtRmlsZXMmJiFlLmZpbGUuZGlyO2lmKHQpe3ZhciByPW4oZSx0LCExLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTpyLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pfWVsc2UgdGhpcy5hY2N1bXVsYXRlPSEwfSxzLnByb3RvdHlwZS5jbG9zZWRTb3VyY2U9ZnVuY3Rpb24oZSl7dGhpcy5hY2N1bXVsYXRlPSExO3ZhciB0PXRoaXMuc3RyZWFtRmlsZXMmJiFlLmZpbGUuZGlyLHI9bihlLHQsITAsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7aWYodGhpcy5kaXJSZWNvcmRzLnB1c2goci5kaXJSZWNvcmQpLHQpdGhpcy5wdXNoKHtkYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBSLkRBVEFfREVTQ1JJUFRPUitBKGUuY3JjMzIsNCkrQShlLmNvbXByZXNzZWRTaXplLDQpK0EoZS51bmNvbXByZXNzZWRTaXplLDQpfShlKSxtZXRhOntwZXJjZW50OjEwMH19KTtlbHNlIGZvcih0aGlzLnB1c2goe2RhdGE6ci5maWxlUmVjb3JkLG1ldGE6e3BlcmNlbnQ6MH19KTt0aGlzLmNvbnRlbnRCdWZmZXIubGVuZ3RoOyl0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpO3RoaXMuY3VycmVudEZpbGU9bnVsbH0scy5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5ieXRlc1dyaXR0ZW4sdD0wO3Q8dGhpcy5kaXJSZWNvcmRzLmxlbmd0aDt0KyspdGhpcy5wdXNoKHtkYXRhOnRoaXMuZGlyUmVjb3Jkc1t0XSxtZXRhOntwZXJjZW50OjEwMH19KTt2YXIgcj10aGlzLmJ5dGVzV3JpdHRlbi1lLG49ZnVuY3Rpb24oZSx0LHIsbixpKXt2YXIgcz1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsaShuKSk7cmV0dXJuIFIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EK1wiXFwwXFwwXFwwXFwwXCIrQShlLDIpK0EoZSwyKStBKHQsNCkrQShyLDQpK0Eocy5sZW5ndGgsMikrc30odGhpcy5kaXJSZWNvcmRzLmxlbmd0aCxyLGUsdGhpcy56aXBDb21tZW50LHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTpuLG1ldGE6e3BlcmNlbnQ6MTAwfX0pfSxzLnByb3RvdHlwZS5wcmVwYXJlTmV4dFNvdXJjZT1mdW5jdGlvbigpe3RoaXMucHJldmlvdXM9dGhpcy5fc291cmNlcy5zaGlmdCgpLHRoaXMub3BlbmVkU291cmNlKHRoaXMucHJldmlvdXMuc3RyZWFtSW5mbyksdGhpcy5pc1BhdXNlZD90aGlzLnByZXZpb3VzLnBhdXNlKCk6dGhpcy5wcmV2aW91cy5yZXN1bWUoKX0scy5wcm90b3R5cGUucmVnaXN0ZXJQcmV2aW91cz1mdW5jdGlvbihlKXt0aGlzLl9zb3VyY2VzLnB1c2goZSk7dmFyIHQ9dGhpcztyZXR1cm4gZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnByb2Nlc3NDaHVuayhlKX0pLGUub24oXCJlbmRcIixmdW5jdGlvbigpe3QuY2xvc2VkU291cmNlKHQucHJldmlvdXMuc3RyZWFtSW5mbyksdC5fc291cmNlcy5sZW5ndGg/dC5wcmVwYXJlTmV4dFNvdXJjZSgpOnQuZW5kKCl9KSxlLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0LmVycm9yKGUpfSksdGhpc30scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLnByZXZpb3VzJiZ0aGlzLl9zb3VyY2VzLmxlbmd0aD8odGhpcy5wcmVwYXJlTmV4dFNvdXJjZSgpLCEwKTp0aGlzLnByZXZpb3VzfHx0aGlzLl9zb3VyY2VzLmxlbmd0aHx8dGhpcy5nZW5lcmF0ZWRFcnJvcj92b2lkIDA6KHRoaXMuZW5kKCksITApKX0scy5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fc291cmNlcztpZighaS5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLGUpKXJldHVybiExO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRyeXt0W3JdLmVycm9yKGUpfWNhdGNoKGUpe31yZXR1cm4hMH0scy5wcm90b3R5cGUubG9jaz1mdW5jdGlvbigpe2kucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTtmb3IodmFyIGU9dGhpcy5fc291cmNlcyx0PTA7dDxlLmxlbmd0aDt0KyspZVt0XS5sb2NrKCl9LHQuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi9zaWduYXR1cmVcIjoyMyxcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuLi91dGY4XCI6MzEsXCIuLi91dGlsc1wiOjMyfV0sOTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciB1PWUoXCIuLi9jb21wcmVzc2lvbnNcIiksbj1lKFwiLi9aaXBGaWxlV29ya2VyXCIpO3IuZ2VuZXJhdGVXb3JrZXI9ZnVuY3Rpb24oZSxhLHQpe3ZhciBvPW5ldyBuKGEuc3RyZWFtRmlsZXMsdCxhLnBsYXRmb3JtLGEuZW5jb2RlRmlsZU5hbWUpLGg9MDt0cnl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7aCsrO3ZhciByPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZXx8dCxuPXVbcl07aWYoIW4pdGhyb3cgbmV3IEVycm9yKHIrXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7cmV0dXJuIG59KHQub3B0aW9ucy5jb21wcmVzc2lvbixhLmNvbXByZXNzaW9uKSxuPXQub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnN8fGEuY29tcHJlc3Npb25PcHRpb25zfHx7fSxpPXQuZGlyLHM9dC5kYXRlO3QuX2NvbXByZXNzV29ya2VyKHIsbikud2l0aFN0cmVhbUluZm8oXCJmaWxlXCIse25hbWU6ZSxkaXI6aSxkYXRlOnMsY29tbWVudDp0LmNvbW1lbnR8fFwiXCIsdW5peFBlcm1pc3Npb25zOnQudW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOnQuZG9zUGVybWlzc2lvbnN9KS5waXBlKG8pfSksby5lbnRyaWVzQ291bnQ9aH1jYXRjaChlKXtvLmVycm9yKGUpfXJldHVybiBvfX0se1wiLi4vY29tcHJlc3Npb25zXCI6MyxcIi4vWmlwRmlsZVdvcmtlclwiOjh9XSwxMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oKXtpZighKHRoaXMgaW5zdGFuY2VvZiBuKSlyZXR1cm4gbmV3IG47aWYoYXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO3RoaXMuZmlsZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLmNvbW1lbnQ9bnVsbCx0aGlzLnJvb3Q9XCJcIix0aGlzLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47Zm9yKHZhciB0IGluIHRoaXMpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1t0XSYmKGVbdF09dGhpc1t0XSk7cmV0dXJuIGV9fShuLnByb3RvdHlwZT1lKFwiLi9vYmplY3RcIikpLmxvYWRBc3luYz1lKFwiLi9sb2FkXCIpLG4uc3VwcG9ydD1lKFwiLi9zdXBwb3J0XCIpLG4uZGVmYXVsdHM9ZShcIi4vZGVmYXVsdHNcIiksbi52ZXJzaW9uPVwiMy4xMC4xXCIsbi5sb2FkQXN5bmM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4obmV3IG4pLmxvYWRBc3luYyhlLHQpfSxuLmV4dGVybmFsPWUoXCIuL2V4dGVybmFsXCIpLHQuZXhwb3J0cz1ufSx7XCIuL2RlZmF1bHRzXCI6NSxcIi4vZXh0ZXJuYWxcIjo2LFwiLi9sb2FkXCI6MTEsXCIuL29iamVjdFwiOjE1LFwiLi9zdXBwb3J0XCI6MzB9XSwxMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciB1PWUoXCIuL3V0aWxzXCIpLGk9ZShcIi4vZXh0ZXJuYWxcIiksbj1lKFwiLi91dGY4XCIpLHM9ZShcIi4vemlwRW50cmllc1wiKSxhPWUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLGw9ZShcIi4vbm9kZWpzVXRpbHNcIik7ZnVuY3Rpb24gZihuKXtyZXR1cm4gbmV3IGkuUHJvbWlzZShmdW5jdGlvbihlLHQpe3ZhciByPW4uZGVjb21wcmVzc2VkLmdldENvbnRlbnRXb3JrZXIoKS5waXBlKG5ldyBhKTtyLm9uKFwiZXJyb3JcIixmdW5jdGlvbihlKXt0KGUpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3Iuc3RyZWFtSW5mby5jcmMzMiE9PW4uZGVjb21wcmVzc2VkLmNyYzMyP3QobmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IENSQzMyIG1pc21hdGNoXCIpKTplKCl9KS5yZXN1bWUoKX0pfXQuZXhwb3J0cz1mdW5jdGlvbihlLG8pe3ZhciBoPXRoaXM7cmV0dXJuIG89dS5leHRlbmQob3x8e30se2Jhc2U2NDohMSxjaGVja0NSQzMyOiExLG9wdGltaXplZEJpbmFyeVN0cmluZzohMSxjcmVhdGVGb2xkZXJzOiExLGRlY29kZUZpbGVOYW1lOm4udXRmOGRlY29kZX0pLGwuaXNOb2RlJiZsLmlzU3RyZWFtKGUpP2kuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSlNaaXAgY2FuJ3QgYWNjZXB0IGEgc3RyZWFtIHdoZW4gbG9hZGluZyBhIHppcCBmaWxlLlwiKSk6dS5wcmVwYXJlQ29udGVudChcInRoZSBsb2FkZWQgemlwIGZpbGVcIixlLCEwLG8ub3B0aW1pemVkQmluYXJ5U3RyaW5nLG8uYmFzZTY0KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzKG8pO3JldHVybiB0LmxvYWQoZSksdH0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9W2kuUHJvbWlzZS5yZXNvbHZlKGUpXSxyPWUuZmlsZXM7aWYoby5jaGVja0NSQzMyKWZvcih2YXIgbj0wO248ci5sZW5ndGg7bisrKXQucHVzaChmKHJbbl0pKTtyZXR1cm4gaS5Qcm9taXNlLmFsbCh0KX0pLnRoZW4oZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc2hpZnQoKSxyPXQuZmlsZXMsbj0wO248ci5sZW5ndGg7bisrKXt2YXIgaT1yW25dLHM9aS5maWxlTmFtZVN0cixhPXUucmVzb2x2ZShpLmZpbGVOYW1lU3RyKTtoLmZpbGUoYSxpLmRlY29tcHJlc3NlZCx7YmluYXJ5OiEwLG9wdGltaXplZEJpbmFyeVN0cmluZzohMCxkYXRlOmkuZGF0ZSxkaXI6aS5kaXIsY29tbWVudDppLmZpbGVDb21tZW50U3RyLmxlbmd0aD9pLmZpbGVDb21tZW50U3RyOm51bGwsdW5peFBlcm1pc3Npb25zOmkudW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOmkuZG9zUGVybWlzc2lvbnMsY3JlYXRlRm9sZGVyczpvLmNyZWF0ZUZvbGRlcnN9KSxpLmRpcnx8KGguZmlsZShhKS51bnNhZmVPcmlnaW5hbE5hbWU9cyl9cmV0dXJuIHQuemlwQ29tbWVudC5sZW5ndGgmJihoLmNvbW1lbnQ9dC56aXBDb21tZW50KSxofSl9fSx7XCIuL2V4dGVybmFsXCI6NixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjoyNSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBFbnRyaWVzXCI6MzN9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtmdW5jdGlvbiBzKGUsdCl7aS5jYWxsKHRoaXMsXCJOb2RlanMgc3RyZWFtIGlucHV0IGFkYXB0ZXIgZm9yIFwiK2UpLHRoaXMuX3Vwc3RyZWFtRW5kZWQ9ITEsdGhpcy5fYmluZFN0cmVhbSh0KX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUuX2JpbmRTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczsodGhpcy5fc3RyZWFtPWUpLnBhdXNlKCksZS5vbihcImRhdGFcIixmdW5jdGlvbihlKXt0LnB1c2goe2RhdGE6ZSxtZXRhOntwZXJjZW50OjB9fSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dC5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPWU6dC5lcnJvcihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0LmlzUGF1c2VkP3QuX3Vwc3RyZWFtRW5kZWQ9ITA6dC5lbmQoKX0pfSxzLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3JldHVybiEhaS5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSYmKHRoaXMuX3N0cmVhbS5wYXVzZSgpLCEwKX0scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKHRoaXMuX3Vwc3RyZWFtRW5kZWQ/dGhpcy5lbmQoKTp0aGlzLl9zdHJlYW0ucmVzdW1lKCksITApfSx0LmV4cG9ydHM9c30se1wiLi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4uL3V0aWxzXCI6MzJ9XSwxMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7ZnVuY3Rpb24gbihlLHQscil7aS5jYWxsKHRoaXMsdCksdGhpcy5faGVscGVyPWU7dmFyIG49dGhpcztlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGUsdCl7bi5wdXNoKGUpfHxuLl9oZWxwZXIucGF1c2UoKSxyJiZyKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe24uZW1pdChcImVycm9yXCIsZSl9KS5vbihcImVuZFwiLGZ1bmN0aW9uKCl7bi5wdXNoKG51bGwpfSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt0aGlzLl9oZWxwZXIucmVzdW1lKCl9LHQuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyLFwicmVhZGFibGUtc3RyZWFtXCI6MTZ9XSwxNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17aXNOb2RlOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsbmV3QnVmZmVyRnJvbTpmdW5jdGlvbihlLHQpe2lmKEJ1ZmZlci5mcm9tJiZCdWZmZXIuZnJvbSE9PVVpbnQ4QXJyYXkuZnJvbSlyZXR1cm4gQnVmZmVyLmZyb20oZSx0KTtpZihcIm51bWJlclwiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcImRhdGFcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVybiBuZXcgQnVmZmVyKGUsdCl9LGFsbG9jQnVmZmVyOmZ1bmN0aW9uKGUpe2lmKEJ1ZmZlci5hbGxvYylyZXR1cm4gQnVmZmVyLmFsbG9jKGUpO3ZhciB0PW5ldyBCdWZmZXIoZSk7cmV0dXJuIHQuZmlsbCgwKSx0fSxpc0J1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGUpfSxpc1N0cmVhbTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5wYXVzZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZXN1bWV9fX0se31dLDE1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyhlLHQscil7dmFyIG4saT11LmdldFR5cGVPZih0KSxzPXUuZXh0ZW5kKHJ8fHt9LGYpO3MuZGF0ZT1zLmRhdGV8fG5ldyBEYXRlLG51bGwhPT1zLmNvbXByZXNzaW9uJiYocy5jb21wcmVzc2lvbj1zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLFwic3RyaW5nXCI9PXR5cGVvZiBzLnVuaXhQZXJtaXNzaW9ucyYmKHMudW5peFBlcm1pc3Npb25zPXBhcnNlSW50KHMudW5peFBlcm1pc3Npb25zLDgpKSxzLnVuaXhQZXJtaXNzaW9ucyYmMTYzODQmcy51bml4UGVybWlzc2lvbnMmJihzLmRpcj0hMCkscy5kb3NQZXJtaXNzaW9ucyYmMTYmcy5kb3NQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRpciYmKGU9ZyhlKSkscy5jcmVhdGVGb2xkZXJzJiYobj1fKGUpKSYmYi5jYWxsKHRoaXMsbiwhMCk7dmFyIGE9XCJzdHJpbmdcIj09PWkmJiExPT09cy5iaW5hcnkmJiExPT09cy5iYXNlNjQ7ciYmdm9pZCAwIT09ci5iaW5hcnl8fChzLmJpbmFyeT0hYSksKHQgaW5zdGFuY2VvZiBjJiYwPT09dC51bmNvbXByZXNzZWRTaXplfHxzLmRpcnx8IXR8fDA9PT10Lmxlbmd0aCkmJihzLmJhc2U2ND0hMSxzLmJpbmFyeT0hMCx0PVwiXCIscy5jb21wcmVzc2lvbj1cIlNUT1JFXCIsaT1cInN0cmluZ1wiKTt2YXIgbz1udWxsO289dCBpbnN0YW5jZW9mIGN8fHQgaW5zdGFuY2VvZiBsP3Q6cC5pc05vZGUmJnAuaXNTdHJlYW0odCk/bmV3IG0oZSx0KTp1LnByZXBhcmVDb250ZW50KGUsdCxzLmJpbmFyeSxzLm9wdGltaXplZEJpbmFyeVN0cmluZyxzLmJhc2U2NCk7dmFyIGg9bmV3IGQoZSxvLHMpO3RoaXMuZmlsZXNbZV09aH12YXIgaT1lKFwiLi91dGY4XCIpLHU9ZShcIi4vdXRpbHNcIiksbD1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSxhPWUoXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIiksZj1lKFwiLi9kZWZhdWx0c1wiKSxjPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksZD1lKFwiLi96aXBPYmplY3RcIiksbz1lKFwiLi9nZW5lcmF0ZVwiKSxwPWUoXCIuL25vZGVqc1V0aWxzXCIpLG09ZShcIi4vbm9kZWpzL05vZGVqc1N0cmVhbUlucHV0QWRhcHRlclwiKSxfPWZ1bmN0aW9uKGUpe1wiL1wiPT09ZS5zbGljZSgtMSkmJihlPWUuc3Vic3RyaW5nKDAsZS5sZW5ndGgtMSkpO3ZhciB0PWUubGFzdEluZGV4T2YoXCIvXCIpO3JldHVybiAwPHQ/ZS5zdWJzdHJpbmcoMCx0KTpcIlwifSxnPWZ1bmN0aW9uKGUpe3JldHVyblwiL1wiIT09ZS5zbGljZSgtMSkmJihlKz1cIi9cIiksZX0sYj1mdW5jdGlvbihlLHQpe3JldHVybiB0PXZvaWQgMCE9PXQ/dDpmLmNyZWF0ZUZvbGRlcnMsZT1nKGUpLHRoaXMuZmlsZXNbZV18fHMuY2FsbCh0aGlzLGUsbnVsbCx7ZGlyOiEwLGNyZWF0ZUZvbGRlcnM6dH0pLHRoaXMuZmlsZXNbZV19O2Z1bmN0aW9uIGgoZSl7cmV0dXJuXCJbb2JqZWN0IFJlZ0V4cF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX12YXIgbj17bG9hZDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmb3JFYWNoOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbjtmb3IodCBpbiB0aGlzLmZpbGVzKW49dGhpcy5maWxlc1t0XSwocj10LnNsaWNlKHRoaXMucm9vdC5sZW5ndGgsdC5sZW5ndGgpKSYmdC5zbGljZSgwLHRoaXMucm9vdC5sZW5ndGgpPT09dGhpcy5yb290JiZlKHIsbil9LGZpbHRlcjpmdW5jdGlvbihyKXt2YXIgbj1bXTtyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cihlLHQpJiZuLnB1c2godCl9KSxufSxmaWxlOmZ1bmN0aW9uKGUsdCxyKXtpZigxIT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZT10aGlzLnJvb3QrZSxzLmNhbGwodGhpcyxlLHQsciksdGhpcztpZihoKGUpKXt2YXIgbj1lO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiF0LmRpciYmbi50ZXN0KGUpfSl9dmFyIGk9dGhpcy5maWxlc1t0aGlzLnJvb3QrZV07cmV0dXJuIGkmJiFpLmRpcj9pOm51bGx9LGZvbGRlcjpmdW5jdGlvbihyKXtpZighcilyZXR1cm4gdGhpcztpZihoKHIpKXJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlLHQpe3JldHVybiB0LmRpciYmci50ZXN0KGUpfSk7dmFyIGU9dGhpcy5yb290K3IsdD1iLmNhbGwodGhpcyxlKSxuPXRoaXMuY2xvbmUoKTtyZXR1cm4gbi5yb290PXQubmFtZSxufSxyZW1vdmU6ZnVuY3Rpb24ocil7cj10aGlzLnJvb3Qrcjt2YXIgZT10aGlzLmZpbGVzW3JdO2lmKGV8fChcIi9cIiE9PXIuc2xpY2UoLTEpJiYocis9XCIvXCIpLGU9dGhpcy5maWxlc1tyXSksZSYmIWUuZGlyKWRlbGV0ZSB0aGlzLmZpbGVzW3JdO2Vsc2UgZm9yKHZhciB0PXRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZS5zbGljZSgwLHIubGVuZ3RoKT09PXJ9KSxuPTA7bjx0Lmxlbmd0aDtuKyspZGVsZXRlIHRoaXMuZmlsZXNbdFtuXS5uYW1lXTtyZXR1cm4gdGhpc30sZ2VuZXJhdGU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKX0sZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTpmdW5jdGlvbihlKXt2YXIgdCxyPXt9O3RyeXtpZigocj11LmV4dGVuZChlfHx7fSx7c3RyZWFtRmlsZXM6ITEsY29tcHJlc3Npb246XCJTVE9SRVwiLGNvbXByZXNzaW9uT3B0aW9uczpudWxsLHR5cGU6XCJcIixwbGF0Zm9ybTpcIkRPU1wiLGNvbW1lbnQ6bnVsbCxtaW1lVHlwZTpcImFwcGxpY2F0aW9uL3ppcFwiLGVuY29kZUZpbGVOYW1lOmkudXRmOGVuY29kZX0pKS50eXBlPXIudHlwZS50b0xvd2VyQ2FzZSgpLHIuY29tcHJlc3Npb249ci5jb21wcmVzc2lvbi50b1VwcGVyQ2FzZSgpLFwiYmluYXJ5c3RyaW5nXCI9PT1yLnR5cGUmJihyLnR5cGU9XCJzdHJpbmdcIiksIXIudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO3UuY2hlY2tTdXBwb3J0KHIudHlwZSksXCJkYXJ3aW5cIiE9PXIucGxhdGZvcm0mJlwiZnJlZWJzZFwiIT09ci5wbGF0Zm9ybSYmXCJsaW51eFwiIT09ci5wbGF0Zm9ybSYmXCJzdW5vc1wiIT09ci5wbGF0Zm9ybXx8KHIucGxhdGZvcm09XCJVTklYXCIpLFwid2luMzJcIj09PXIucGxhdGZvcm0mJihyLnBsYXRmb3JtPVwiRE9TXCIpO3ZhciBuPXIuY29tbWVudHx8dGhpcy5jb21tZW50fHxcIlwiO3Q9by5nZW5lcmF0ZVdvcmtlcih0aGlzLHIsbil9Y2F0Y2goZSl7KHQ9bmV3IGwoXCJlcnJvclwiKSkuZXJyb3IoZSl9cmV0dXJuIG5ldyBhKHQsci50eXBlfHxcInN0cmluZ1wiLHIubWltZVR5cGUpfSxnZW5lcmF0ZUFzeW5jOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbShlKS5hY2N1bXVsYXRlKHQpfSxnZW5lcmF0ZU5vZGVTdHJlYW06ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT1lfHx7fSkudHlwZXx8KGUudHlwZT1cIm5vZGVidWZmZXJcIiksdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKGUpLnRvTm9kZWpzU3RyZWFtKHQpfX07dC5leHBvcnRzPW59LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2RlZmF1bHRzXCI6NSxcIi4vZ2VuZXJhdGVcIjo5LFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6MTIsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjoyOSxcIi4vdXRmOFwiOjMxLFwiLi91dGlsc1wiOjMyLFwiLi96aXBPYmplY3RcIjozNX1dLDE2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWUoXCJzdHJlYW1cIil9LHtzdHJlYW06dm9pZCAwfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9EYXRhUmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSk7Zm9yKHZhciB0PTA7dDx0aGlzLmRhdGEubGVuZ3RoO3QrKyllW3RdPTI1NSZlW3RdfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybytlXX0saS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hhckNvZGVBdCgwKSxyPWUuY2hhckNvZGVBdCgxKSxuPWUuY2hhckNvZGVBdCgyKSxpPWUuY2hhckNvZGVBdCgzKSxzPXRoaXMubGVuZ3RoLTQ7MDw9czstLXMpaWYodGhpcy5kYXRhW3NdPT09dCYmdGhpcy5kYXRhW3MrMV09PT1yJiZ0aGlzLmRhdGFbcysyXT09PW4mJnRoaXMuZGF0YVtzKzNdPT09aSlyZXR1cm4gcy10aGlzLnplcm87cmV0dXJuLTF9LGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZT1mdW5jdGlvbihlKXt2YXIgdD1lLmNoYXJDb2RlQXQoMCkscj1lLmNoYXJDb2RlQXQoMSksbj1lLmNoYXJDb2RlQXQoMiksaT1lLmNoYXJDb2RlQXQoMykscz10aGlzLnJlYWREYXRhKDQpO3JldHVybiB0PT09c1swXSYmcj09PXNbMV0mJm49PT1zWzJdJiZpPT09c1szXX0saS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7aWYodGhpcy5jaGVja09mZnNldChlKSwwPT09ZSlyZXR1cm5bXTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDE4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uL3V0aWxzXCIpO2Z1bmN0aW9uIGkoZSl7dGhpcy5kYXRhPWUsdGhpcy5sZW5ndGg9ZS5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMuemVybz0wfWkucHJvdG90eXBlPXtjaGVja09mZnNldDpmdW5jdGlvbihlKXt0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCtlKX0sY2hlY2tJbmRleDpmdW5jdGlvbihlKXtpZih0aGlzLmxlbmd0aDx0aGlzLnplcm8rZXx8ZTwwKXRocm93IG5ldyBFcnJvcihcIkVuZCBvZiBkYXRhIHJlYWNoZWQgKGRhdGEgbGVuZ3RoID0gXCIrdGhpcy5sZW5ndGgrXCIsIGFza2VkIGluZGV4ID0gXCIrZStcIikuIENvcnJ1cHRlZCB6aXAgP1wiKX0sc2V0SW5kZXg6ZnVuY3Rpb24oZSl7dGhpcy5jaGVja0luZGV4KGUpLHRoaXMuaW5kZXg9ZX0sc2tpcDpmdW5jdGlvbihlKXt0aGlzLnNldEluZGV4KHRoaXMuaW5kZXgrZSl9LGJ5dGVBdDpmdW5jdGlvbigpe30scmVhZEludDpmdW5jdGlvbihlKXt2YXIgdCxyPTA7Zm9yKHRoaXMuY2hlY2tPZmZzZXQoZSksdD10aGlzLmluZGV4K2UtMTt0Pj10aGlzLmluZGV4O3QtLSlyPShyPDw4KSt0aGlzLmJ5dGVBdCh0KTtyZXR1cm4gdGhpcy5pbmRleCs9ZSxyfSxyZWFkU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiBuLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5yZWFkRGF0YShlKSl9LHJlYWREYXRhOmZ1bmN0aW9uKCl7fSxsYXN0SW5kZXhPZlNpZ25hdHVyZTpmdW5jdGlvbigpe30scmVhZEFuZENoZWNrU2lnbmF0dXJlOmZ1bmN0aW9uKCl7fSxyZWFkRGF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZEludCg0KTtyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoMTk4MCsoZT4+MjUmMTI3KSwoZT4+MjEmMTUpLTEsZT4+MTYmMzEsZT4+MTEmMzEsZT4+NSY2MywoMzEmZSk8PDEpKX19LHQuZXhwb3J0cz1pfSx7XCIuLi91dGlsc1wiOjMyfV0sMTk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIGkoZSl7bi5jYWxsKHRoaXMsZSl9ZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksbiksaS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaGVja09mZnNldChlKTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjoyMX1dLDIwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vRGF0YVJlYWRlclwiKTtmdW5jdGlvbiBpKGUpe24uY2FsbCh0aGlzLGUpfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLG4pLGkucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvK2UpfSxpLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKGUpLXRoaXMuemVyb30saS5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09dGhpcy5yZWFkRGF0YSg0KX0saS5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaGVja09mZnNldChlKTt2YXIgdD10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDIxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vQXJyYXlSZWFkZXJcIik7ZnVuY3Rpb24gaShlKXtuLmNhbGwodGhpcyxlKX1lKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbihlKXtpZih0aGlzLmNoZWNrT2Zmc2V0KGUpLDA9PT1lKXJldHVybiBuZXcgVWludDhBcnJheSgwKTt2YXIgdD10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrZSk7cmV0dXJuIHRoaXMuaW5kZXgrPWUsdH0sdC5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0FycmF5UmVhZGVyXCI6MTd9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuLi9zdXBwb3J0XCIpLHM9ZShcIi4vQXJyYXlSZWFkZXJcIiksYT1lKFwiLi9TdHJpbmdSZWFkZXJcIiksbz1lKFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCIpLGg9ZShcIi4vVWludDhBcnJheVJlYWRlclwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi5nZXRUeXBlT2YoZSk7cmV0dXJuIG4uY2hlY2tTdXBwb3J0KHQpLFwic3RyaW5nXCIhPT10fHxpLnVpbnQ4YXJyYXk/XCJub2RlYnVmZmVyXCI9PT10P25ldyBvKGUpOmkudWludDhhcnJheT9uZXcgaChuLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLGUpKTpuZXcgcyhuLnRyYW5zZm9ybVRvKFwiYXJyYXlcIixlKSk6bmV3IGEoZSl9fSx7XCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3LFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCI6MTksXCIuL1N0cmluZ1JlYWRlclwiOjIwLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IuTE9DQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwM1x1MDAwNFwiLHIuQ0VOVFJBTF9GSUxFX0hFQURFUj1cIlBLXHUwMDAxXHUwMDAyXCIsci5DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNVx1MDAwNlwiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUj1cIlBLXHUwMDA2XHUwMDA3XCIsci5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNlx1MDAwNlwiLHIuREFUQV9ERVNDUklQVE9SPVwiUEtcdTAwMDdcXGJcIn0se31dLDI0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vR2VuZXJpY1dvcmtlclwiKSxpPWUoXCIuLi91dGlsc1wiKTtmdW5jdGlvbiBzKGUpe24uY2FsbCh0aGlzLFwiQ29udmVydFdvcmtlciB0byBcIitlKSx0aGlzLmRlc3RUeXBlPWV9aS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt0aGlzLnB1c2goe2RhdGE6aS50cmFuc2Zvcm1Ubyh0aGlzLmRlc3RUeXBlLGUuZGF0YSksbWV0YTplLm1ldGF9KX0sdC5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vR2VuZXJpY1dvcmtlclwiKSxpPWUoXCIuLi9jcmMzMlwiKTtmdW5jdGlvbiBzKCl7bi5jYWxsKHRoaXMsXCJDcmMzMlByb2JlXCIpLHRoaXMud2l0aFN0cmVhbUluZm8oXCJjcmMzMlwiLDApfWUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhzLG4pLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbihlKXt0aGlzLnN0cmVhbUluZm8uY3JjMzI9aShlLmRhdGEsdGhpcy5zdHJlYW1JbmZvLmNyYzMyfHwwKSx0aGlzLnB1c2goZSl9LHQuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyhlKXtpLmNhbGwodGhpcyxcIkRhdGFMZW5ndGhQcm9iZSBmb3IgXCIrZSksdGhpcy5wcm9wTmFtZT1lLHRoaXMud2l0aFN0cmVhbUluZm8oZSwwKX1uLmluaGVyaXRzKHMsaSkscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe2lmKGUpe3ZhciB0PXRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXXx8MDt0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV09dCtlLmRhdGEubGVuZ3RofWkucHJvdG90eXBlLnByb2Nlc3NDaHVuay5jYWxsKHRoaXMsZSl9LHQuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLi91dGlsc1wiKSxpPWUoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyhlKXtpLmNhbGwodGhpcyxcIkRhdGFXb3JrZXJcIik7dmFyIHQ9dGhpczt0aGlzLmRhdGFJc1JlYWR5PSExLHRoaXMuaW5kZXg9MCx0aGlzLm1heD0wLHRoaXMuZGF0YT1udWxsLHRoaXMudHlwZT1cIlwiLHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsZS50aGVuKGZ1bmN0aW9uKGUpe3QuZGF0YUlzUmVhZHk9ITAsdC5kYXRhPWUsdC5tYXg9ZSYmZS5sZW5ndGh8fDAsdC50eXBlPW4uZ2V0VHlwZU9mKGUpLHQuaXNQYXVzZWR8fHQuX3RpY2tBbmRSZXBlYXQoKX0sZnVuY3Rpb24oZSl7dC5lcnJvcihlKX0pfW4uaW5oZXJpdHMocyxpKSxzLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7aS5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuZGF0YT1udWxsfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMuX3RpY2tTY2hlZHVsZWQmJnRoaXMuZGF0YUlzUmVhZHkmJih0aGlzLl90aWNrU2NoZWR1bGVkPSEwLG4uZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSksITApfSxzLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdD1mdW5jdGlvbigpe3RoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkfHwodGhpcy5fdGljaygpLHRoaXMuaXNGaW5pc2hlZHx8KG4uZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSx0aGlzLl90aWNrU2NoZWR1bGVkPSEwKSl9LHMucHJvdG90eXBlLl90aWNrPWZ1bmN0aW9uKCl7aWYodGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciBlPW51bGwsdD1NYXRoLm1pbih0aGlzLm1heCx0aGlzLmluZGV4KzE2Mzg0KTtpZih0aGlzLmluZGV4Pj10aGlzLm1heClyZXR1cm4gdGhpcy5lbmQoKTtzd2l0Y2godGhpcy50eXBlKXtjYXNlXCJzdHJpbmdcIjplPXRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCx0KTticmVhaztjYXNlXCJ1aW50OGFycmF5XCI6ZT10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy5pbmRleCx0KTticmVhaztjYXNlXCJhcnJheVwiOmNhc2VcIm5vZGVidWZmZXJcIjplPXRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LHQpfXJldHVybiB0aGlzLmluZGV4PXQsdGhpcy5wdXNoKHtkYXRhOmUsbWV0YTp7cGVyY2VudDp0aGlzLm1heD90aGlzLmluZGV4L3RoaXMubWF4KjEwMDowfX0pfSx0LmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3RoaXMubmFtZT1lfHxcImRlZmF1bHRcIix0aGlzLnN0cmVhbUluZm89e30sdGhpcy5nZW5lcmF0ZWRFcnJvcj1udWxsLHRoaXMuZXh0cmFTdHJlYW1JbmZvPXt9LHRoaXMuaXNQYXVzZWQ9ITAsdGhpcy5pc0ZpbmlzaGVkPSExLHRoaXMuaXNMb2NrZWQ9ITEsdGhpcy5fbGlzdGVuZXJzPXtkYXRhOltdLGVuZDpbXSxlcnJvcjpbXX0sdGhpcy5wcmV2aW91cz1udWxsfW4ucHJvdG90eXBlPXtwdXNoOmZ1bmN0aW9uKGUpe3RoaXMuZW1pdChcImRhdGFcIixlKX0sZW5kOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3RoaXMuZmx1c2goKTt0cnl7dGhpcy5lbWl0KFwiZW5kXCIpLHRoaXMuY2xlYW5VcCgpLHRoaXMuaXNGaW5pc2hlZD0hMH1jYXRjaChlKXt0aGlzLmVtaXQoXCJlcnJvclwiLGUpfXJldHVybiEwfSxlcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4hdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPWU6KHRoaXMuaXNGaW5pc2hlZD0hMCx0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMuZXJyb3IoZSksdGhpcy5jbGVhblVwKCkpLCEwKX0sb246ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fbGlzdGVuZXJzW2VdLnB1c2godCksdGhpc30sY2xlYW5VcDpmdW5jdGlvbigpe3RoaXMuc3RyZWFtSW5mbz10aGlzLmdlbmVyYXRlZEVycm9yPXRoaXMuZXh0cmFTdHJlYW1JbmZvPW51bGwsdGhpcy5fbGlzdGVuZXJzPVtdfSxlbWl0OmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5fbGlzdGVuZXJzW2VdKWZvcih2YXIgcj0wO3I8dGhpcy5fbGlzdGVuZXJzW2VdLmxlbmd0aDtyKyspdGhpcy5fbGlzdGVuZXJzW2VdW3JdLmNhbGwodGhpcyx0KX0scGlwZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWdpc3RlclByZXZpb3VzKHRoaXMpfSxyZWdpc3RlclByZXZpb3VzOmZ1bmN0aW9uKGUpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLnN0cmVhbUluZm89ZS5zdHJlYW1JbmZvLHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpcy5wcmV2aW91cz1lO3ZhciB0PXRoaXM7cmV0dXJuIGUub24oXCJkYXRhXCIsZnVuY3Rpb24oZSl7dC5wcm9jZXNzQ2h1bmsoZSl9KSxlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0LmVuZCgpfSksZS5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7dC5lcnJvcihlKX0pLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXNQYXVzZWQmJiF0aGlzLmlzRmluaXNoZWQmJih0aGlzLmlzUGF1c2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucGF1c2UoKSwhMCl9LHJlc3VtZTpmdW5jdGlvbigpe2lmKCF0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dmFyIGU9dGhpcy5pc1BhdXNlZD0hMTtyZXR1cm4gdGhpcy5nZW5lcmF0ZWRFcnJvciYmKHRoaXMuZXJyb3IodGhpcy5nZW5lcmF0ZWRFcnJvciksZT0hMCksdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5yZXN1bWUoKSwhZX0sZmx1c2g6ZnVuY3Rpb24oKXt9LHByb2Nlc3NDaHVuazpmdW5jdGlvbihlKXt0aGlzLnB1c2goZSl9LHdpdGhTdHJlYW1JbmZvOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZXh0cmFTdHJlYW1JbmZvW2VdPXQsdGhpcy5tZXJnZVN0cmVhbUluZm8oKSx0aGlzfSxtZXJnZVN0cmVhbUluZm86ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5leHRyYVN0cmVhbUluZm8pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXh0cmFTdHJlYW1JbmZvLGUpJiYodGhpcy5zdHJlYW1JbmZvW2VdPXRoaXMuZXh0cmFTdHJlYW1JbmZvW2VdKX0sbG9jazpmdW5jdGlvbigpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLmlzTG9ja2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMubG9jaygpfSx0b1N0cmluZzpmdW5jdGlvbigpe3ZhciBlPVwiV29ya2VyIFwiK3RoaXMubmFtZTtyZXR1cm4gdGhpcy5wcmV2aW91cz90aGlzLnByZXZpb3VzK1wiIC0+IFwiK2U6ZX19LHQuZXhwb3J0cz1ufSx7fV0sMjk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaD1lKFwiLi4vdXRpbHNcIiksaT1lKFwiLi9Db252ZXJ0V29ya2VyXCIpLHM9ZShcIi4vR2VuZXJpY1dvcmtlclwiKSx1PWUoXCIuLi9iYXNlNjRcIiksbj1lKFwiLi4vc3VwcG9ydFwiKSxhPWUoXCIuLi9leHRlcm5hbFwiKSxvPW51bGw7aWYobi5ub2Rlc3RyZWFtKXRyeXtvPWUoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKX1jYXRjaChlKXt9ZnVuY3Rpb24gbChlLG8pe3JldHVybiBuZXcgYS5Qcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIG49W10saT1lLl9pbnRlcm5hbFR5cGUscz1lLl9vdXRwdXRUeXBlLGE9ZS5fbWltZVR5cGU7ZS5vbihcImRhdGFcIixmdW5jdGlvbihlLHQpe24ucHVzaChlKSxvJiZvKHQpfSkub24oXCJlcnJvclwiLGZ1bmN0aW9uKGUpe249W10scihlKX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXt0cnl7dmFyIGU9ZnVuY3Rpb24oZSx0LHIpe3N3aXRjaChlKXtjYXNlXCJibG9iXCI6cmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIix0KSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdS5lbmNvZGUodCk7ZGVmYXVsdDpyZXR1cm4gaC50cmFuc2Zvcm1UbyhlLHQpfX0ocyxmdW5jdGlvbihlLHQpe3ZhciByLG49MCxpPW51bGwscz0wO2ZvcihyPTA7cjx0Lmxlbmd0aDtyKyspcys9dFtyXS5sZW5ndGg7c3dpdGNoKGUpe2Nhc2VcInN0cmluZ1wiOnJldHVybiB0LmpvaW4oXCJcIik7Y2FzZVwiYXJyYXlcIjpyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSx0KTtjYXNlXCJ1aW50OGFycmF5XCI6Zm9yKGk9bmV3IFVpbnQ4QXJyYXkocykscj0wO3I8dC5sZW5ndGg7cisrKWkuc2V0KHRbcl0sbiksbis9dFtyXS5sZW5ndGg7cmV0dXJuIGk7Y2FzZVwibm9kZWJ1ZmZlclwiOnJldHVybiBCdWZmZXIuY29uY2F0KHQpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiY29uY2F0IDogdW5zdXBwb3J0ZWQgdHlwZSAnXCIrZStcIidcIil9fShpLG4pLGEpO3QoZSl9Y2F0Y2goZSl7cihlKX1uPVtdfSkucmVzdW1lKCl9KX1mdW5jdGlvbiBmKGUsdCxyKXt2YXIgbj10O3N3aXRjaCh0KXtjYXNlXCJibG9iXCI6Y2FzZVwiYXJyYXlidWZmZXJcIjpuPVwidWludDhhcnJheVwiO2JyZWFrO2Nhc2VcImJhc2U2NFwiOm49XCJzdHJpbmdcIn10cnl7dGhpcy5faW50ZXJuYWxUeXBlPW4sdGhpcy5fb3V0cHV0VHlwZT10LHRoaXMuX21pbWVUeXBlPXIsaC5jaGVja1N1cHBvcnQobiksdGhpcy5fd29ya2VyPWUucGlwZShuZXcgaShuKSksZS5sb2NrKCl9Y2F0Y2goZSl7dGhpcy5fd29ya2VyPW5ldyBzKFwiZXJyb3JcIiksdGhpcy5fd29ya2VyLmVycm9yKGUpfX1mLnByb3RvdHlwZT17YWNjdW11bGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbCh0aGlzLGUpfSxvbjpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuXCJkYXRhXCI9PT1lP3RoaXMuX3dvcmtlci5vbihlLGZ1bmN0aW9uKGUpe3QuY2FsbChyLGUuZGF0YSxlLm1ldGEpfSk6dGhpcy5fd29ya2VyLm9uKGUsZnVuY3Rpb24oKXtoLmRlbGF5KHQsYXJndW1lbnRzLHIpfSksdGhpc30scmVzdW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGguZGVsYXkodGhpcy5fd29ya2VyLnJlc3VtZSxbXSx0aGlzLl93b3JrZXIpLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dvcmtlci5wYXVzZSgpLHRoaXN9LHRvTm9kZWpzU3RyZWFtOmZ1bmN0aW9uKGUpe2lmKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSxcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGUpdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIG1ldGhvZFwiKTtyZXR1cm4gbmV3IG8odGhpcyx7b2JqZWN0TW9kZTpcIm5vZGVidWZmZXJcIiE9PXRoaXMuX291dHB1dFR5cGV9LGUpfX0sdC5leHBvcnRzPWZ9LHtcIi4uL2Jhc2U2NFwiOjEsXCIuLi9leHRlcm5hbFwiOjYsXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiOjEzLFwiLi4vc3VwcG9ydFwiOjMwLFwiLi4vdXRpbHNcIjozMixcIi4vQ29udmVydFdvcmtlclwiOjI0LFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwzMDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2lmKHIuYmFzZTY0PSEwLHIuYXJyYXk9ITAsci5zdHJpbmc9ITAsci5hcnJheWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LHIubm9kZWJ1ZmZlcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgQnVmZmVyLHIudWludDhhcnJheT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSxcInVuZGVmaW5lZFwiPT10eXBlb2YgQXJyYXlCdWZmZXIpci5ibG9iPSExO2Vsc2V7dmFyIG49bmV3IEFycmF5QnVmZmVyKDApO3RyeXtyLmJsb2I9MD09PW5ldyBCbG9iKFtuXSx7dHlwZTpcImFwcGxpY2F0aW9uL3ppcFwifSkuc2l6ZX1jYXRjaChlKXt0cnl7dmFyIGk9bmV3KHNlbGYuQmxvYkJ1aWxkZXJ8fHNlbGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fHNlbGYuTW96QmxvYkJ1aWxkZXJ8fHNlbGYuTVNCbG9iQnVpbGRlcik7aS5hcHBlbmQobiksci5ibG9iPTA9PT1pLmdldEJsb2IoXCJhcHBsaWNhdGlvbi96aXBcIikuc2l6ZX1jYXRjaChlKXtyLmJsb2I9ITF9fX10cnl7ci5ub2Rlc3RyZWFtPSEhZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZX1jYXRjaChlKXtyLm5vZGVzdHJlYW09ITF9fSx7XCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDMxOltmdW5jdGlvbihlLHQscyl7XCJ1c2Ugc3RyaWN0XCI7Zm9yKHZhciBvPWUoXCIuL3V0aWxzXCIpLGg9ZShcIi4vc3VwcG9ydFwiKSxyPWUoXCIuL25vZGVqc1V0aWxzXCIpLG49ZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksdT1uZXcgQXJyYXkoMjU2KSxpPTA7aTwyNTY7aSsrKXVbaV09MjUyPD1pPzY6MjQ4PD1pPzU6MjQwPD1pPzQ6MjI0PD1pPzM6MTkyPD1pPzI6MTt1WzI1NF09dVsyNTRdPTE7ZnVuY3Rpb24gYSgpe24uY2FsbCh0aGlzLFwidXRmLTggZGVjb2RlXCIpLHRoaXMubGVmdE92ZXI9bnVsbH1mdW5jdGlvbiBsKCl7bi5jYWxsKHRoaXMsXCJ1dGYtOCBlbmNvZGVcIil9cy51dGY4ZW5jb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVidWZmZXI/ci5uZXdCdWZmZXJGcm9tKGUsXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzLGE9ZS5sZW5ndGgsbz0wO2ZvcihpPTA7aTxhO2krKyk1NTI5Nj09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKSkpJiZpKzE8YSYmNTYzMjA9PSg2NDUxMiYobj1lLmNoYXJDb2RlQXQoaSsxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspLG8rPXI8MTI4PzE6cjwyMDQ4PzI6cjw2NTUzNj8zOjQ7Zm9yKHQ9aC51aW50OGFycmF5P25ldyBVaW50OEFycmF5KG8pOm5ldyBBcnJheShvKSxpPXM9MDtzPG87aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKykscjwxMjg/dFtzKytdPXI6KHI8MjA0OD90W3MrK109MTkyfHI+Pj42OihyPDY1NTM2P3RbcysrXT0yMjR8cj4+PjEyOih0W3MrK109MjQwfHI+Pj4xOCx0W3MrK109MTI4fHI+Pj4xMiY2MyksdFtzKytdPTEyOHxyPj4+NiY2MyksdFtzKytdPTEyOHw2MyZyKTtyZXR1cm4gdH0oZSl9LHMudXRmOGRlY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gaC5ub2RlYnVmZmVyP28udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsZSkudG9TdHJpbmcoXCJ1dGYtOFwiKTpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxzPWUubGVuZ3RoLGE9bmV3IEFycmF5KDIqcyk7Zm9yKHQ9cj0wO3Q8czspaWYoKG49ZVt0KytdKTwxMjgpYVtyKytdPW47ZWxzZSBpZig0PChpPXVbbl0pKWFbcisrXT02NTUzMyx0Kz1pLTE7ZWxzZXtmb3IobiY9Mj09PWk/MzE6Mz09PWk/MTU6NzsxPGkmJnQ8czspbj1uPDw2fDYzJmVbdCsrXSxpLS07MTxpP2FbcisrXT02NTUzMzpuPDY1NTM2P2FbcisrXT1uOihuLT02NTUzNixhW3IrK109NTUyOTZ8bj4+MTAmMTAyMyxhW3IrK109NTYzMjB8MTAyMyZuKX1yZXR1cm4gYS5sZW5ndGghPT1yJiYoYS5zdWJhcnJheT9hPWEuc3ViYXJyYXkoMCxyKTphLmxlbmd0aD1yKSxvLmFwcGx5RnJvbUNoYXJDb2RlKGEpfShlPW8udHJhbnNmb3JtVG8oaC51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIixlKSl9LG8uaW5oZXJpdHMoYSxuKSxhLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24oZSl7dmFyIHQ9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLGUuZGF0YSk7aWYodGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgpe2lmKGgudWludDhhcnJheSl7dmFyIHI9dDsodD1uZXcgVWludDhBcnJheShyLmxlbmd0aCt0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLDApLHQuc2V0KHIsdGhpcy5sZWZ0T3Zlci5sZW5ndGgpfWVsc2UgdD10aGlzLmxlZnRPdmVyLmNvbmNhdCh0KTt0aGlzLmxlZnRPdmVyPW51bGx9dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IoKHQ9dHx8ZS5sZW5ndGgpPmUubGVuZ3RoJiYodD1lLmxlbmd0aCkscj10LTE7MDw9ciYmMTI4PT0oMTkyJmVbcl0pOylyLS07cmV0dXJuIHI8MD90OjA9PT1yP3Q6cit1W2Vbcl1dPnQ/cjp0fSh0KSxpPXQ7biE9PXQubGVuZ3RoJiYoaC51aW50OGFycmF5PyhpPXQuc3ViYXJyYXkoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc3ViYXJyYXkobix0Lmxlbmd0aCkpOihpPXQuc2xpY2UoMCxuKSx0aGlzLmxlZnRPdmVyPXQuc2xpY2Uobix0Lmxlbmd0aCkpKSx0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKGkpLG1ldGE6ZS5tZXRhfSl9LGEucHJvdG90eXBlLmZsdXNoPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0T3ZlciYmdGhpcy5sZWZ0T3Zlci5sZW5ndGgmJih0aGlzLnB1c2goe2RhdGE6cy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLG1ldGE6e319KSx0aGlzLmxlZnRPdmVyPW51bGwpfSxzLlV0ZjhEZWNvZGVXb3JrZXI9YSxvLmluaGVyaXRzKGwsbiksbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKGUpe3RoaXMucHVzaCh7ZGF0YTpzLnV0ZjhlbmNvZGUoZS5kYXRhKSxtZXRhOmUubWV0YX0pfSxzLlV0ZjhFbmNvZGVXb3JrZXI9bH0se1wiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzJ9XSwzMjpbZnVuY3Rpb24oZSx0LGEpe1widXNlIHN0cmljdFwiO3ZhciBvPWUoXCIuL3N1cHBvcnRcIiksaD1lKFwiLi9iYXNlNjRcIikscj1lKFwiLi9ub2RlanNVdGlsc1wiKSx1PWUoXCIuL2V4dGVybmFsXCIpO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGV9ZnVuY3Rpb24gbChlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7KytyKXRbcl09MjU1JmUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH1lKFwic2V0aW1tZWRpYXRlXCIpLGEubmV3QmxvYj1mdW5jdGlvbih0LHIpe2EuY2hlY2tTdXBwb3J0KFwiYmxvYlwiKTt0cnl7cmV0dXJuIG5ldyBCbG9iKFt0XSx7dHlwZTpyfSl9Y2F0Y2goZSl7dHJ5e3ZhciBuPW5ldyhzZWxmLkJsb2JCdWlsZGVyfHxzZWxmLldlYktpdEJsb2JCdWlsZGVyfHxzZWxmLk1vekJsb2JCdWlsZGVyfHxzZWxmLk1TQmxvYkJ1aWxkZXIpO3JldHVybiBuLmFwcGVuZCh0KSxuLmdldEJsb2Iocil9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiQnVnIDogY2FuJ3QgY29uc3RydWN0IHRoZSBCbG9iLlwiKX19fTt2YXIgaT17c3RyaW5naWZ5QnlDaHVuazpmdW5jdGlvbihlLHQscil7dmFyIG49W10saT0wLHM9ZS5sZW5ndGg7aWYoczw9cilyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUpO2Zvcig7aTxzOylcImFycmF5XCI9PT10fHxcIm5vZGVidWZmZXJcIj09PXQ/bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlLnNsaWNlKGksTWF0aC5taW4oaStyLHMpKSkpOm4ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZS5zdWJhcnJheShpLE1hdGgubWluKGkrcixzKSkpKSxpKz1yO3JldHVybiBuLmpvaW4oXCJcIil9LHN0cmluZ2lmeUJ5Q2hhcjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDtyKyspdCs9U3RyaW5nLmZyb21DaGFyQ29kZShlW3JdKTtyZXR1cm4gdH0sYXBwbHlDYW5CZVVzZWQ6e3VpbnQ4YXJyYXk6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG8udWludDhhcnJheSYmMT09PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKSxub2RlYnVmZmVyOmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBvLm5vZGVidWZmZXImJjE9PT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsci5hbGxvY0J1ZmZlcigxKSkubGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKX19O2Z1bmN0aW9uIHMoZSl7dmFyIHQ9NjU1MzYscj1hLmdldFR5cGVPZihlKSxuPSEwO2lmKFwidWludDhhcnJheVwiPT09cj9uPWkuYXBwbHlDYW5CZVVzZWQudWludDhhcnJheTpcIm5vZGVidWZmZXJcIj09PXImJihuPWkuYXBwbHlDYW5CZVVzZWQubm9kZWJ1ZmZlciksbilmb3IoOzE8dDspdHJ5e3JldHVybiBpLnN0cmluZ2lmeUJ5Q2h1bmsoZSxyLHQpfWNhdGNoKGUpe3Q9TWF0aC5mbG9vcih0LzIpfXJldHVybiBpLnN0cmluZ2lmeUJ5Q2hhcihlKX1mdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdFtyXT1lW3JdO3JldHVybiB0fWEuYXBwbHlGcm9tQ2hhckNvZGU9czt2YXIgYz17fTtjLnN0cmluZz17c3RyaW5nOm4sYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGMuc3RyaW5nLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBsKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gbChlLHIuYWxsb2NCdWZmZXIoZS5sZW5ndGgpKX19LGMuYXJyYXk9e3N0cmluZzpzLGFycmF5Om4sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGUpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShlKX19LGMuYXJyYXlidWZmZXI9e3N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gcyhuZXcgVWludDhBcnJheShlKSl9LGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKG5ldyBVaW50OEFycmF5KGUpLG5ldyBBcnJheShlLmJ5dGVMZW5ndGgpKX0sYXJyYXlidWZmZXI6bix1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgVWludDhBcnJheShlKX0sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKG5ldyBVaW50OEFycmF5KGUpKX19LGMudWludDhhcnJheT17c3RyaW5nOnMsYXJyYXk6ZnVuY3Rpb24oZSl7cmV0dXJuIGYoZSxuZXcgQXJyYXkoZS5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYnVmZmVyfSx1aW50OGFycmF5Om4sbm9kZWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gci5uZXdCdWZmZXJGcm9tKGUpfX0sYy5ub2RlYnVmZmVyPXtzdHJpbmc6cyxhcnJheTpmdW5jdGlvbihlKXtyZXR1cm4gZihlLG5ldyBBcnJheShlLmxlbmd0aCkpfSxhcnJheWJ1ZmZlcjpmdW5jdGlvbihlKXtyZXR1cm4gYy5ub2RlYnVmZmVyLnVpbnQ4YXJyYXkoZSkuYnVmZmVyfSx1aW50OGFycmF5OmZ1bmN0aW9uKGUpe3JldHVybiBmKGUsbmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpKX0sbm9kZWJ1ZmZlcjpufSxhLnRyYW5zZm9ybVRvPWZ1bmN0aW9uKGUsdCl7aWYodD10fHxcIlwiLCFlKXJldHVybiB0O2EuY2hlY2tTdXBwb3J0KGUpO3ZhciByPWEuZ2V0VHlwZU9mKHQpO3JldHVybiBjW3JdW2VdKHQpfSxhLnJlc29sdmU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuc3BsaXQoXCIvXCIpLHI9W10sbj0wO248dC5sZW5ndGg7bisrKXt2YXIgaT10W25dO1wiLlwiPT09aXx8XCJcIj09PWkmJjAhPT1uJiZuIT09dC5sZW5ndGgtMXx8KFwiLi5cIj09PWk/ci5wb3AoKTpyLnB1c2goaSkpfXJldHVybiByLmpvaW4oXCIvXCIpfSxhLmdldFR5cGVPZj1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9cInN0cmluZ1wiOlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImFycmF5XCI6by5ub2RlYnVmZmVyJiZyLmlzQnVmZmVyKGUpP1wibm9kZWJ1ZmZlclwiOm8udWludDhhcnJheSYmZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJ1aW50OGFycmF5XCI6by5hcnJheWJ1ZmZlciYmZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP1wiYXJyYXlidWZmZXJcIjp2b2lkIDB9LGEuY2hlY2tTdXBwb3J0PWZ1bmN0aW9uKGUpe2lmKCFvW2UudG9Mb3dlckNhc2UoKV0pdGhyb3cgbmV3IEVycm9yKGUrXCIgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIHBsYXRmb3JtXCIpfSxhLk1BWF9WQUxVRV8xNkJJVFM9NjU1MzUsYS5NQVhfVkFMVUVfMzJCSVRTPS0xLGEucHJldHR5PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1cIlwiO2ZvcihyPTA7cjwoZXx8XCJcIikubGVuZ3RoO3IrKyluKz1cIlxcXFx4XCIrKCh0PWUuY2hhckNvZGVBdChyKSk8MTY/XCIwXCI6XCJcIikrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gbn0sYS5kZWxheT1mdW5jdGlvbihlLHQscil7c2V0SW1tZWRpYXRlKGZ1bmN0aW9uKCl7ZS5hcHBseShyfHxudWxsLHR8fFtdKX0pfSxhLmluaGVyaXRzPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe31yLnByb3RvdHlwZT10LnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgcn0sYS5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9e307Zm9yKGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKWZvcih0IGluIGFyZ3VtZW50c1tlXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2VdLHQpJiZ2b2lkIDA9PT1yW3RdJiYoclt0XT1hcmd1bWVudHNbZV1bdF0pO3JldHVybiByfSxhLnByZXBhcmVDb250ZW50PWZ1bmN0aW9uKHIsZSxuLGkscyl7cmV0dXJuIHUuUHJvbWlzZS5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24obil7cmV0dXJuIG8uYmxvYiYmKG4gaW5zdGFuY2VvZiBCbG9ifHwtMSE9PVtcIltvYmplY3QgRmlsZV1cIixcIltvYmplY3QgQmxvYl1cIl0uaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikpKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI/bmV3IHUuUHJvbWlzZShmdW5jdGlvbih0LHIpe3ZhciBlPW5ldyBGaWxlUmVhZGVyO2Uub25sb2FkPWZ1bmN0aW9uKGUpe3QoZS50YXJnZXQucmVzdWx0KX0sZS5vbmVycm9yPWZ1bmN0aW9uKGUpe3IoZS50YXJnZXQuZXJyb3IpfSxlLnJlYWRBc0FycmF5QnVmZmVyKG4pfSk6bn0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9YS5nZXRUeXBlT2YoZSk7cmV0dXJuIHQ/KFwiYXJyYXlidWZmZXJcIj09PXQ/ZT1hLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLGUpOlwic3RyaW5nXCI9PT10JiYocz9lPWguZGVjb2RlKGUpOm4mJiEwIT09aSYmKGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxvLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpOm5ldyBBcnJheShlLmxlbmd0aCkpfShlKSkpLGUpOnUuUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2FuJ3QgcmVhZCB0aGUgZGF0YSBvZiAnXCIrcitcIicuIElzIGl0IGluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpKX0pfX0se1wiLi9iYXNlNjRcIjoxLFwiLi9leHRlcm5hbFwiOjYsXCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N1cHBvcnRcIjozMCxzZXRpbW1lZGlhdGU6NTR9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksaT1lKFwiLi91dGlsc1wiKSxzPWUoXCIuL3NpZ25hdHVyZVwiKSxhPWUoXCIuL3ppcEVudHJ5XCIpLG89ZShcIi4vc3VwcG9ydFwiKTtmdW5jdGlvbiBoKGUpe3RoaXMuZmlsZXM9W10sdGhpcy5sb2FkT3B0aW9ucz1lfWgucHJvdG90eXBlPXtjaGVja1NpZ25hdHVyZTpmdW5jdGlvbihlKXtpZighdGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKGUpKXt0aGlzLnJlYWRlci5pbmRleC09NDt2YXIgdD10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpO3Rocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSAoXCIraS5wcmV0dHkodCkrXCIsIGV4cGVjdGVkIFwiK2kucHJldHR5KGUpK1wiKVwiKX19LGlzU2lnbmF0dXJlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5yZWFkZXIuaW5kZXg7dGhpcy5yZWFkZXIuc2V0SW5kZXgoZSk7dmFyIG49dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KT09PXQ7cmV0dXJuIHRoaXMucmVhZGVyLnNldEluZGV4KHIpLG59LHJlYWRCbG9ja0VuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy56aXBDb21tZW50TGVuZ3RoPXRoaXMucmVhZGVyLnJlYWRJbnQoMik7dmFyIGU9dGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKSx0PW8udWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIscj1pLnRyYW5zZm9ybVRvKHQsZSk7dGhpcy56aXBDb21tZW50PXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnJlYWRlci5za2lwKDQpLHRoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhPXt9O2Zvcih2YXIgZSx0LHIsbj10aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZS00NDswPG47KWU9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCkscj10aGlzLnJlYWRlci5yZWFkRGF0YSh0KSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZV09e2lkOmUsbGVuZ3RoOnQsdmFsdWU6cn19LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcjpmdW5jdGlvbigpe2lmKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuZGlza3NDb3VudD10aGlzLnJlYWRlci5yZWFkSW50KDQpLDE8dGhpcy5kaXNrc0NvdW50KXRocm93IG5ldyBFcnJvcihcIk11bHRpLXZvbHVtZXMgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpfSxyZWFkTG9jYWxGaWxlczpmdW5jdGlvbigpe3ZhciBlLHQ7Zm9yKGU9MDtlPHRoaXMuZmlsZXMubGVuZ3RoO2UrKyl0PXRoaXMuZmlsZXNbZV0sdGhpcy5yZWFkZXIuc2V0SW5kZXgodC5sb2NhbEhlYWRlck9mZnNldCksdGhpcy5jaGVja1NpZ25hdHVyZShzLkxPQ0FMX0ZJTEVfSEVBREVSKSx0LnJlYWRMb2NhbFBhcnQodGhpcy5yZWFkZXIpLHQuaGFuZGxlVVRGOCgpLHQucHJvY2Vzc0F0dHJpYnV0ZXMoKX0scmVhZENlbnRyYWxEaXI6ZnVuY3Rpb24oKXt2YXIgZTtmb3IodGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5jZW50cmFsRGlyT2Zmc2V0KTt0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0ZJTEVfSEVBREVSKTspKGU9bmV3IGEoe3ppcDY0OnRoaXMuemlwNjR9LHRoaXMubG9hZE9wdGlvbnMpKS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpLHRoaXMuZmlsZXMucHVzaChlKTtpZih0aGlzLmNlbnRyYWxEaXJSZWNvcmRzIT09dGhpcy5maWxlcy5sZW5ndGgmJjAhPT10aGlzLmNlbnRyYWxEaXJSZWNvcmRzJiYwPT09dGhpcy5maWxlcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiK3RoaXMuY2VudHJhbERpclJlY29yZHMrXCIgcmVjb3JkcyBpbiBjZW50cmFsIGRpciwgZ290IFwiK3RoaXMuZmlsZXMubGVuZ3RoKX0scmVhZEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtpZihlPDApdGhyb3chdGhpcy5pc1NpZ25hdHVyZSgwLHMuTE9DQUxfRklMRV9IRUFERVIpP25ldyBFcnJvcihcIkNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IDogaXMgdGhpcyBhIHppcCBmaWxlID8gSWYgaXQgaXMsIHNlZSBodHRwczovL3N0dWsuZ2l0aHViLmlvL2pzemlwL2RvY3VtZW50YXRpb24vaG93dG8vcmVhZF96aXAuaHRtbFwiKTpuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleChlKTt2YXIgdD1lO2lmKHRoaXMuY2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCksdGhpcy5kaXNrTnVtYmVyPT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PT09aS5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkcz09PWkuTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyU2l6ZT09PWkuTUFYX1ZBTFVFXzMyQklUU3x8dGhpcy5jZW50cmFsRGlyT2Zmc2V0PT09aS5NQVhfVkFMVUVfMzJCSVRTKXtpZih0aGlzLnppcDY0PSEwLChlPXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUikpPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7aWYodGhpcy5yZWFkZXIuc2V0SW5kZXgoZSksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCksIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSYmKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPDApKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKX12YXIgcj10aGlzLmNlbnRyYWxEaXJPZmZzZXQrdGhpcy5jZW50cmFsRGlyU2l6ZTt0aGlzLnppcDY0JiYocis9MjAscis9MTIrdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUpO3ZhciBuPXQtcjtpZigwPG4pdGhpcy5pc1NpZ25hdHVyZSh0LHMuQ0VOVFJBTF9GSUxFX0hFQURFUil8fCh0aGlzLnJlYWRlci56ZXJvPW4pO2Vsc2UgaWYobjwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IG1pc3NpbmcgXCIrTWF0aC5hYnMobikrXCIgYnl0ZXMuXCIpfSxwcmVwYXJlUmVhZGVyOmZ1bmN0aW9uKGUpe3RoaXMucmVhZGVyPW4oZSl9LGxvYWQ6ZnVuY3Rpb24oZSl7dGhpcy5wcmVwYXJlUmVhZGVyKGUpLHRoaXMucmVhZEVuZE9mQ2VudHJhbCgpLHRoaXMucmVhZENlbnRyYWxEaXIoKSx0aGlzLnJlYWRMb2NhbEZpbGVzKCl9fSx0LmV4cG9ydHM9aH0se1wiLi9yZWFkZXIvcmVhZGVyRm9yXCI6MjIsXCIuL3NpZ25hdHVyZVwiOjIzLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJ5XCI6MzR9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIikscz1lKFwiLi91dGlsc1wiKSxpPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksYT1lKFwiLi9jcmMzMlwiKSxvPWUoXCIuL3V0ZjhcIiksaD1lKFwiLi9jb21wcmVzc2lvbnNcIiksdT1lKFwiLi9zdXBwb3J0XCIpO2Z1bmN0aW9uIGwoZSx0KXt0aGlzLm9wdGlvbnM9ZSx0aGlzLmxvYWRPcHRpb25zPXR9bC5wcm90b3R5cGU9e2lzRW5jcnlwdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIDE9PSgxJnRoaXMuYml0RmxhZyl9LHVzZVVURjg6ZnVuY3Rpb24oKXtyZXR1cm4gMjA0OD09KDIwNDgmdGhpcy5iaXRGbGFnKX0scmVhZExvY2FsUGFydDpmdW5jdGlvbihlKXt2YXIgdCxyO2lmKGUuc2tpcCgyMiksdGhpcy5maWxlTmFtZUxlbmd0aD1lLnJlYWRJbnQoMikscj1lLnJlYWRJbnQoMiksdGhpcy5maWxlTmFtZT1lLnJlYWREYXRhKHRoaXMuZmlsZU5hbWVMZW5ndGgpLGUuc2tpcChyKSwtMT09PXRoaXMuY29tcHJlc3NlZFNpemV8fC0xPT09dGhpcy51bmNvbXByZXNzZWRTaXplKXRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgKGNvbXByZXNzZWRTaXplID09PSAtMSB8fCB1bmNvbXByZXNzZWRTaXplID09PSAtMSlcIik7aWYobnVsbD09PSh0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBoKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoLHQpJiZoW3RdLm1hZ2ljPT09ZSlyZXR1cm4gaFt0XTtyZXR1cm4gbnVsbH0odGhpcy5jb21wcmVzc2lvbk1ldGhvZCkpKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjb21wcmVzc2lvbiBcIitzLnByZXR0eSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKStcIiB1bmtub3duIChpbm5lciBmaWxlIDogXCIrcy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHRoaXMuZmlsZU5hbWUpK1wiKVwiKTt0aGlzLmRlY29tcHJlc3NlZD1uZXcgaSh0aGlzLmNvbXByZXNzZWRTaXplLHRoaXMudW5jb21wcmVzc2VkU2l6ZSx0aGlzLmNyYzMyLHQsZS5yZWFkRGF0YSh0aGlzLmNvbXByZXNzZWRTaXplKSl9LHJlYWRDZW50cmFsUGFydDpmdW5jdGlvbihlKXt0aGlzLnZlcnNpb25NYWRlQnk9ZS5yZWFkSW50KDIpLGUuc2tpcCgyKSx0aGlzLmJpdEZsYWc9ZS5yZWFkSW50KDIpLHRoaXMuY29tcHJlc3Npb25NZXRob2Q9ZS5yZWFkU3RyaW5nKDIpLHRoaXMuZGF0ZT1lLnJlYWREYXRlKCksdGhpcy5jcmMzMj1lLnJlYWRJbnQoNCksdGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoNCksdGhpcy51bmNvbXByZXNzZWRTaXplPWUucmVhZEludCg0KTt2YXIgdD1lLnJlYWRJbnQoMik7aWYodGhpcy5leHRyYUZpZWxkc0xlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5maWxlQ29tbWVudExlbmd0aD1lLnJlYWRJbnQoMiksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9ZS5yZWFkSW50KDIpLHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcz1lLnJlYWRJbnQoMiksdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPWUucmVhZEludCg0KSx0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg0KSx0aGlzLmlzRW5jcnlwdGVkKCkpdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGVkIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKTtlLnNraXAodCksdGhpcy5yZWFkRXh0cmFGaWVsZHMoZSksdGhpcy5wYXJzZVpJUDY0RXh0cmFGaWVsZChlKSx0aGlzLmZpbGVDb21tZW50PWUucmVhZERhdGEodGhpcy5maWxlQ29tbWVudExlbmd0aCl9LHByb2Nlc3NBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7dGhpcy51bml4UGVybWlzc2lvbnM9bnVsbCx0aGlzLmRvc1Blcm1pc3Npb25zPW51bGw7dmFyIGU9dGhpcy52ZXJzaW9uTWFkZUJ5Pj44O3RoaXMuZGlyPSEhKDE2JnRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksMD09ZSYmKHRoaXMuZG9zUGVybWlzc2lvbnM9NjMmdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwzPT1lJiYodGhpcy51bml4UGVybWlzc2lvbnM9dGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzPj4xNiY2NTUzNSksdGhpcy5kaXJ8fFwiL1wiIT09dGhpcy5maWxlTmFtZVN0ci5zbGljZSgtMSl8fCh0aGlzLmRpcj0hMCl9LHBhcnNlWklQNjRFeHRyYUZpZWxkOmZ1bmN0aW9uKCl7aWYodGhpcy5leHRyYUZpZWxkc1sxXSl7dmFyIGU9bih0aGlzLmV4dHJhRmllbGRzWzFdLnZhbHVlKTt0aGlzLnVuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLnVuY29tcHJlc3NlZFNpemU9ZS5yZWFkSW50KDgpKSx0aGlzLmNvbXByZXNzZWRTaXplPT09cy5NQVhfVkFMVUVfMzJCSVRTJiYodGhpcy5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0PWUucmVhZEludCg4KSksdGhpcy5kaXNrTnVtYmVyU3RhcnQ9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmRpc2tOdW1iZXJTdGFydD1lLnJlYWRJbnQoNCkpfX0scmVhZEV4dHJhRmllbGRzOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpPWUuaW5kZXgrdGhpcy5leHRyYUZpZWxkc0xlbmd0aDtmb3IodGhpcy5leHRyYUZpZWxkc3x8KHRoaXMuZXh0cmFGaWVsZHM9e30pO2UuaW5kZXgrNDxpOyl0PWUucmVhZEludCgyKSxyPWUucmVhZEludCgyKSxuPWUucmVhZERhdGEociksdGhpcy5leHRyYUZpZWxkc1t0XT17aWQ6dCxsZW5ndGg6cix2YWx1ZTpufTtlLnNldEluZGV4KGkpfSxoYW5kbGVVVEY4OmZ1bmN0aW9uKCl7dmFyIGU9dS51aW50OGFycmF5P1widWludDhhcnJheVwiOlwiYXJyYXlcIjtpZih0aGlzLnVzZVVURjgoKSl0aGlzLmZpbGVOYW1lU3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVOYW1lKSx0aGlzLmZpbGVDb21tZW50U3RyPW8udXRmOGRlY29kZSh0aGlzLmZpbGVDb21tZW50KTtlbHNle3ZhciB0PXRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCgpO2lmKG51bGwhPT10KXRoaXMuZmlsZU5hbWVTdHI9dDtlbHNle3ZhciByPXMudHJhbnNmb3JtVG8oZSx0aGlzLmZpbGVOYW1lKTt0aGlzLmZpbGVOYW1lU3RyPXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9dmFyIG49dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7aWYobnVsbCE9PW4pdGhpcy5maWxlQ29tbWVudFN0cj1uO2Vsc2V7dmFyIGk9cy50cmFuc2Zvcm1UbyhlLHRoaXMuZmlsZUNvbW1lbnQpO3RoaXMuZmlsZUNvbW1lbnRTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShpKX19fSxmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5leHRyYUZpZWxkc1syODc4OV07aWYoZSl7dmFyIHQ9bihlLnZhbHVlKTtyZXR1cm4gMSE9PXQucmVhZEludCgxKT9udWxsOmEodGhpcy5maWxlTmFtZSkhPT10LnJlYWRJbnQoNCk/bnVsbDpvLnV0ZjhkZWNvZGUodC5yZWFkRGF0YShlLmxlbmd0aC01KSl9cmV0dXJuIG51bGx9LGZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmV4dHJhRmllbGRzWzI1NDYxXTtpZihlKXt2YXIgdD1uKGUudmFsdWUpO3JldHVybiAxIT09dC5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVDb21tZW50KSE9PXQucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZSh0LnJlYWREYXRhKGUubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH19LHQuZXhwb3J0cz1sfSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9jb21wcmVzc2lvbnNcIjozLFwiLi9jcmMzMlwiOjQsXCIuL3JlYWRlci9yZWFkZXJGb3JcIjoyMixcIi4vc3VwcG9ydFwiOjMwLFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzJ9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LHIpe3RoaXMubmFtZT1lLHRoaXMuZGlyPXIuZGlyLHRoaXMuZGF0ZT1yLmRhdGUsdGhpcy5jb21tZW50PXIuY29tbWVudCx0aGlzLnVuaXhQZXJtaXNzaW9ucz1yLnVuaXhQZXJtaXNzaW9ucyx0aGlzLmRvc1Blcm1pc3Npb25zPXIuZG9zUGVybWlzc2lvbnMsdGhpcy5fZGF0YT10LHRoaXMuX2RhdGFCaW5hcnk9ci5iaW5hcnksdGhpcy5vcHRpb25zPXtjb21wcmVzc2lvbjpyLmNvbXByZXNzaW9uLGNvbXByZXNzaW9uT3B0aW9uczpyLmNvbXByZXNzaW9uT3B0aW9uc319dmFyIHM9ZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxpPWUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLGE9ZShcIi4vdXRmOFwiKSxvPWUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksaD1lKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtuLnByb3RvdHlwZT17aW50ZXJuYWxTdHJlYW06ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbCxyPVwic3RyaW5nXCI7dHJ5e2lmKCFlKXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dmFyIG49XCJzdHJpbmdcIj09PShyPWUudG9Mb3dlckNhc2UoKSl8fFwidGV4dFwiPT09cjtcImJpbmFyeXN0cmluZ1wiIT09ciYmXCJ0ZXh0XCIhPT1yfHwocj1cInN0cmluZ1wiKSx0PXRoaXMuX2RlY29tcHJlc3NXb3JrZXIoKTt2YXIgaT0hdGhpcy5fZGF0YUJpbmFyeTtpJiYhbiYmKHQ9dC5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIpKSwhaSYmbiYmKHQ9dC5waXBlKG5ldyBhLlV0ZjhEZWNvZGVXb3JrZXIpKX1jYXRjaChlKXsodD1uZXcgaChcImVycm9yXCIpKS5lcnJvcihlKX1yZXR1cm4gbmV3IHModCxyLFwiXCIpfSxhc3luYzpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGUpLmFjY3VtdWxhdGUodCl9LG5vZGVTdHJlYW06ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbShlfHxcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0odCl9LF9jb21wcmVzc1dvcmtlcjpmdW5jdGlvbihlLHQpe2lmKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvJiZ0aGlzLl9kYXRhLmNvbXByZXNzaW9uLm1hZ2ljPT09ZS5tYWdpYylyZXR1cm4gdGhpcy5fZGF0YS5nZXRDb21wcmVzc2VkV29ya2VyKCk7dmFyIHI9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3JldHVybiB0aGlzLl9kYXRhQmluYXJ5fHwocj1yLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLG8uY3JlYXRlV29ya2VyRnJvbShyLGUsdCl9LF9kZWNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvP3RoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpOnRoaXMuX2RhdGEgaW5zdGFuY2VvZiBoP3RoaXMuX2RhdGE6bmV3IGkodGhpcy5fZGF0YSl9fTtmb3IodmFyIHU9W1wiYXNUZXh0XCIsXCJhc0JpbmFyeVwiLFwiYXNOb2RlQnVmZmVyXCIsXCJhc1VpbnQ4QXJyYXlcIixcImFzQXJyYXlCdWZmZXJcIl0sbD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxmPTA7Zjx1Lmxlbmd0aDtmKyspbi5wcm90b3R5cGVbdVtmXV09bDt0LmV4cG9ydHM9bn0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyNyxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzF9XSwzNjpbZnVuY3Rpb24oZSxsLHQpeyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcixuLGU9dC5NdXRhdGlvbk9ic2VydmVyfHx0LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7aWYoZSl7dmFyIGk9MCxzPW5ldyBlKHUpLGE9dC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtzLm9ic2VydmUoYSx7Y2hhcmFjdGVyRGF0YTohMH0pLHI9ZnVuY3Rpb24oKXthLmRhdGE9aT0rK2klMn19ZWxzZSBpZih0LnNldEltbWVkaWF0ZXx8dm9pZCAwPT09dC5NZXNzYWdlQ2hhbm5lbClyPVwiZG9jdW1lbnRcImluIHQmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiB0LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik/ZnVuY3Rpb24oKXt2YXIgZT10LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt1KCksZS5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksZT1udWxsfSx0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChlKX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHUsMCl9O2Vsc2V7dmFyIG89bmV3IHQuTWVzc2FnZUNoYW5uZWw7by5wb3J0MS5vbm1lc3NhZ2U9dSxyPWZ1bmN0aW9uKCl7by5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19dmFyIGg9W107ZnVuY3Rpb24gdSgpe3ZhciBlLHQ7bj0hMDtmb3IodmFyIHI9aC5sZW5ndGg7cjspe2Zvcih0PWgsaD1bXSxlPS0xOysrZTxyOyl0W2VdKCk7cj1oLmxlbmd0aH1uPSExfWwuZXhwb3J0cz1mdW5jdGlvbihlKXsxIT09aC5wdXNoKGUpfHxufHxyKCl9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1lKFwiaW1tZWRpYXRlXCIpO2Z1bmN0aW9uIHUoKXt9dmFyIGw9e30scz1bXCJSRUpFQ1RFRFwiXSxhPVtcIkZVTEZJTExFRFwiXSxuPVtcIlBFTkRJTkdcIl07ZnVuY3Rpb24gbyhlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7dGhpcy5zdGF0ZT1uLHRoaXMucXVldWU9W10sdGhpcy5vdXRjb21lPXZvaWQgMCxlIT09dSYmZCh0aGlzLGUpfWZ1bmN0aW9uIGgoZSx0LHIpe3RoaXMucHJvbWlzZT1lLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJih0aGlzLm9uRnVsZmlsbGVkPXQsdGhpcy5jYWxsRnVsZmlsbGVkPXRoaXMub3RoZXJDYWxsRnVsZmlsbGVkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYodGhpcy5vblJlamVjdGVkPXIsdGhpcy5jYWxsUmVqZWN0ZWQ9dGhpcy5vdGhlckNhbGxSZWplY3RlZCl9ZnVuY3Rpb24gZih0LHIsbil7aShmdW5jdGlvbigpe3ZhciBlO3RyeXtlPXIobil9Y2F0Y2goZSl7cmV0dXJuIGwucmVqZWN0KHQsZSl9ZT09PXQ/bC5yZWplY3QodCxuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlc29sdmUgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKSk6bC5yZXNvbHZlKHQsZSl9KX1mdW5jdGlvbiBjKGUpe3ZhciB0PWUmJmUudGhlbjtpZihlJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiBmdW5jdGlvbigpe3QuYXBwbHkoZSxhcmd1bWVudHMpfX1mdW5jdGlvbiBkKHQsZSl7dmFyIHI9ITE7ZnVuY3Rpb24gbihlKXtyfHwocj0hMCxsLnJlamVjdCh0LGUpKX1mdW5jdGlvbiBpKGUpe3J8fChyPSEwLGwucmVzb2x2ZSh0LGUpKX12YXIgcz1wKGZ1bmN0aW9uKCl7ZShpLG4pfSk7XCJlcnJvclwiPT09cy5zdGF0dXMmJm4ocy52YWx1ZSl9ZnVuY3Rpb24gcChlLHQpe3ZhciByPXt9O3RyeXtyLnZhbHVlPWUodCksci5zdGF0dXM9XCJzdWNjZXNzXCJ9Y2F0Y2goZSl7ci5zdGF0dXM9XCJlcnJvclwiLHIudmFsdWU9ZX1yZXR1cm4gcn0odC5leHBvcnRzPW8pLnByb3RvdHlwZS5maW5hbGx5PWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpcmV0dXJuIHRoaXM7dmFyIHI9dGhpcy5jb25zdHJ1Y3RvcjtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiByLnJlc29sdmUodCgpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KX0sZnVuY3Rpb24oZSl7cmV0dXJuIHIucmVzb2x2ZSh0KCkpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBlfSl9KX0sby5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGUpfSxvLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmdGhpcy5zdGF0ZT09PWF8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJnRoaXMuc3RhdGU9PT1zKXJldHVybiB0aGlzO3ZhciByPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO3RoaXMuc3RhdGUhPT1uP2Yocix0aGlzLnN0YXRlPT09YT9lOnQsdGhpcy5vdXRjb21lKTp0aGlzLnF1ZXVlLnB1c2gobmV3IGgocixlLHQpKTtyZXR1cm4gcn0saC5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZD1mdW5jdGlvbihlKXtsLnJlc29sdmUodGhpcy5wcm9taXNlLGUpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQ9ZnVuY3Rpb24oZSl7Zih0aGlzLnByb21pc2UsdGhpcy5vbkZ1bGZpbGxlZCxlKX0saC5wcm90b3R5cGUuY2FsbFJlamVjdGVkPWZ1bmN0aW9uKGUpe2wucmVqZWN0KHRoaXMucHJvbWlzZSxlKX0saC5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7Zih0aGlzLnByb21pc2UsdGhpcy5vblJlamVjdGVkLGUpfSxsLnJlc29sdmU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1wKGMsdCk7aWYoXCJlcnJvclwiPT09ci5zdGF0dXMpcmV0dXJuIGwucmVqZWN0KGUsci52YWx1ZSk7dmFyIG49ci52YWx1ZTtpZihuKWQoZSxuKTtlbHNle2Uuc3RhdGU9YSxlLm91dGNvbWU9dDtmb3IodmFyIGk9LTEscz1lLnF1ZXVlLmxlbmd0aDsrK2k8czspZS5xdWV1ZVtpXS5jYWxsRnVsZmlsbGVkKHQpfXJldHVybiBlfSxsLnJlamVjdD1mdW5jdGlvbihlLHQpe2Uuc3RhdGU9cyxlLm91dGNvbWU9dDtmb3IodmFyIHI9LTEsbj1lLnF1ZXVlLmxlbmd0aDsrK3I8bjspZS5xdWV1ZVtyXS5jYWxsUmVqZWN0ZWQodCk7cmV0dXJuIGV9LG8ucmVzb2x2ZT1mdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2YgdGhpcylyZXR1cm4gZTtyZXR1cm4gbC5yZXNvbHZlKG5ldyB0aGlzKHUpLGUpfSxvLnJlamVjdD1mdW5jdGlvbihlKXt2YXIgdD1uZXcgdGhpcyh1KTtyZXR1cm4gbC5yZWplY3QodCxlKX0sby5hbGw9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcztpZihcIltvYmplY3QgQXJyYXldXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTt2YXIgbj1lLmxlbmd0aCxpPSExO2lmKCFuKXJldHVybiB0aGlzLnJlc29sdmUoW10pO3ZhciBzPW5ldyBBcnJheShuKSxhPTAsdD0tMSxvPW5ldyB0aGlzKHUpO2Zvcig7Kyt0PG47KWgoZVt0XSx0KTtyZXR1cm4gbztmdW5jdGlvbiBoKGUsdCl7ci5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7c1t0XT1lLCsrYSE9PW58fGl8fChpPSEwLGwucmVzb2x2ZShvLHMpKX0sZnVuY3Rpb24oZSl7aXx8KGk9ITAsbC5yZWplY3QobyxlKSl9KX19LG8ucmFjZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciByPWUubGVuZ3RoLG49ITE7aWYoIXIpcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIGk9LTEscz1uZXcgdGhpcyh1KTtmb3IoOysraTxyOylhPWVbaV0sdC5yZXNvbHZlKGEpLnRoZW4oZnVuY3Rpb24oZSl7bnx8KG49ITAsbC5yZXNvbHZlKHMsZSkpfSxmdW5jdGlvbihlKXtufHwobj0hMCxsLnJlamVjdChzLGUpKX0pO3ZhciBhO3JldHVybiBzfX0se2ltbWVkaWF0ZTozNn1dLDM4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e307KDAsZShcIi4vbGliL3V0aWxzL2NvbW1vblwiKS5hc3NpZ24pKG4sZShcIi4vbGliL2RlZmxhdGVcIiksZShcIi4vbGliL2luZmxhdGVcIiksZShcIi4vbGliL3psaWIvY29uc3RhbnRzXCIpKSx0LmV4cG9ydHM9bn0se1wiLi9saWIvZGVmbGF0ZVwiOjM5LFwiLi9saWIvaW5mbGF0ZVwiOjQwLFwiLi9saWIvdXRpbHMvY29tbW9uXCI6NDEsXCIuL2xpYi96bGliL2NvbnN0YW50c1wiOjQ0fV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgYT1lKFwiLi96bGliL2RlZmxhdGVcIiksbz1lKFwiLi91dGlscy9jb21tb25cIiksaD1lKFwiLi91dGlscy9zdHJpbmdzXCIpLGk9ZShcIi4vemxpYi9tZXNzYWdlc1wiKSxzPWUoXCIuL3psaWIvenN0cmVhbVwiKSx1PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbD0wLGY9LTEsYz0wLGQ9ODtmdW5jdGlvbiBwKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHApKXJldHVybiBuZXcgcChlKTt0aGlzLm9wdGlvbnM9by5hc3NpZ24oe2xldmVsOmYsbWV0aG9kOmQsY2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MTUsbWVtTGV2ZWw6OCxzdHJhdGVneTpjLHRvOlwiXCJ9LGV8fHt9KTt2YXIgdD10aGlzLm9wdGlvbnM7dC5yYXcmJjA8dC53aW5kb3dCaXRzP3Qud2luZG93Qml0cz0tdC53aW5kb3dCaXRzOnQuZ3ppcCYmMDx0LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgcyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9YS5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLHQubGV2ZWwsdC5tZXRob2QsdC53aW5kb3dCaXRzLHQubWVtTGV2ZWwsdC5zdHJhdGVneSk7aWYociE9PWwpdGhyb3cgbmV3IEVycm9yKGlbcl0pO2lmKHQuaGVhZGVyJiZhLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLHQuaGVhZGVyKSx0LmRpY3Rpb25hcnkpe3ZhciBuO2lmKG49XCJzdHJpbmdcIj09dHlwZW9mIHQuZGljdGlvbmFyeT9oLnN0cmluZzJidWYodC5kaWN0aW9uYXJ5KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwodC5kaWN0aW9uYXJ5KT9uZXcgVWludDhBcnJheSh0LmRpY3Rpb25hcnkpOnQuZGljdGlvbmFyeSwocj1hLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxuKSkhPT1sKXRocm93IG5ldyBFcnJvcihpW3JdKTt0aGlzLl9kaWN0X3NldD0hMH19ZnVuY3Rpb24gbihlLHQpe3ZhciByPW5ldyBwKHQpO2lmKHIucHVzaChlLCEwKSxyLmVycil0aHJvdyByLm1zZ3x8aVtyLmVycl07cmV0dXJuIHIucmVzdWx0fXAucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGk9dGhpcy5zdHJtLHM9dGhpcy5vcHRpb25zLmNodW5rU2l6ZTtpZih0aGlzLmVuZGVkKXJldHVybiExO249dD09PX5+dD90OiEwPT09dD80OjAsXCJzdHJpbmdcIj09dHlwZW9mIGU/aS5pbnB1dD1oLnN0cmluZzJidWYoZSk6XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiPT09dS5jYWxsKGUpP2kuaW5wdXQ9bmV3IFVpbnQ4QXJyYXkoZSk6aS5pbnB1dD1lLGkubmV4dF9pbj0wLGkuYXZhaWxfaW49aS5pbnB1dC5sZW5ndGg7ZG97aWYoMD09PWkuYXZhaWxfb3V0JiYoaS5vdXRwdXQ9bmV3IG8uQnVmOChzKSxpLm5leHRfb3V0PTAsaS5hdmFpbF9vdXQ9cyksMSE9PShyPWEuZGVmbGF0ZShpLG4pKSYmciE9PWwpcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTswIT09aS5hdmFpbF9vdXQmJigwIT09aS5hdmFpbF9pbnx8NCE9PW4mJjIhPT1uKXx8KFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5vbkRhdGEoaC5idWYyYmluc3RyaW5nKG8uc2hyaW5rQnVmKGkub3V0cHV0LGkubmV4dF9vdXQpKSk6dGhpcy5vbkRhdGEoby5zaHJpbmtCdWYoaS5vdXRwdXQsaS5uZXh0X291dCkpKX13aGlsZSgoMDxpLmF2YWlsX2lufHwwPT09aS5hdmFpbF9vdXQpJiYxIT09cik7cmV0dXJuIDQ9PT1uPyhyPWEuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pLHRoaXMub25FbmQociksdGhpcy5lbmRlZD0hMCxyPT09bCk6MiE9PW58fCh0aGlzLm9uRW5kKGwpLCEoaS5hdmFpbF9vdXQ9MCkpfSxwLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0scC5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PWwmJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9by5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9ZSx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkRlZmxhdGU9cCxyLmRlZmxhdGU9bixyLmRlZmxhdGVSYXc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkucmF3PSEwLG4oZSx0KX0sci5nemlwPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKHQ9dHx8e30pLmd6aXA9ITAsbihlLHQpfX0se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2RlZmxhdGVcIjo0NixcIi4vemxpYi9tZXNzYWdlc1wiOjUxLFwiLi96bGliL3pzdHJlYW1cIjo1M31dLDQwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9ZShcIi4vemxpYi9pbmZsYXRlXCIpLGQ9ZShcIi4vdXRpbHMvY29tbW9uXCIpLHA9ZShcIi4vdXRpbHMvc3RyaW5nc1wiKSxtPWUoXCIuL3psaWIvY29uc3RhbnRzXCIpLG49ZShcIi4vemxpYi9tZXNzYWdlc1wiKSxpPWUoXCIuL3psaWIvenN0cmVhbVwiKSxzPWUoXCIuL3psaWIvZ3poZWFkZXJcIiksXz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGEoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKGUpO3RoaXMub3B0aW9ucz1kLmFzc2lnbih7Y2h1bmtTaXplOjE2Mzg0LHdpbmRvd0JpdHM6MCx0bzpcIlwifSxlfHx7fSk7dmFyIHQ9dGhpcy5vcHRpb25zO3QucmF3JiYwPD10LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cz0tdC53aW5kb3dCaXRzLDA9PT10LndpbmRvd0JpdHMmJih0LndpbmRvd0JpdHM9LTE1KSksISgwPD10LndpbmRvd0JpdHMmJnQud2luZG93Qml0czwxNil8fGUmJmUud2luZG93Qml0c3x8KHQud2luZG93Qml0cys9MzIpLDE1PHQud2luZG93Qml0cyYmdC53aW5kb3dCaXRzPDQ4JiYwPT0oMTUmdC53aW5kb3dCaXRzKSYmKHQud2luZG93Qml0c3w9MTUpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgaSx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7dmFyIHI9Yy5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLHQud2luZG93Qml0cyk7aWYociE9PW0uWl9PSyl0aHJvdyBuZXcgRXJyb3IobltyXSk7dGhpcy5oZWFkZXI9bmV3IHMsYy5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSx0aGlzLmhlYWRlcil9ZnVuY3Rpb24gbyhlLHQpe3ZhciByPW5ldyBhKHQpO2lmKHIucHVzaChlLCEwKSxyLmVycil0aHJvdyByLm1zZ3x8bltyLmVycl07cmV0dXJuIHIucmVzdWx0fWEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saD10aGlzLnN0cm0sdT10aGlzLm9wdGlvbnMuY2h1bmtTaXplLGw9dGhpcy5vcHRpb25zLmRpY3Rpb25hcnksZj0hMTtpZih0aGlzLmVuZGVkKXJldHVybiExO249dD09PX5+dD90OiEwPT09dD9tLlpfRklOSVNIOm0uWl9OT19GTFVTSCxcInN0cmluZ1wiPT10eXBlb2YgZT9oLmlucHV0PXAuYmluc3RyaW5nMmJ1ZihlKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwoZSk/aC5pbnB1dD1uZXcgVWludDhBcnJheShlKTpoLmlucHV0PWUsaC5uZXh0X2luPTAsaC5hdmFpbF9pbj1oLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09aC5hdmFpbF9vdXQmJihoLm91dHB1dD1uZXcgZC5CdWY4KHUpLGgubmV4dF9vdXQ9MCxoLmF2YWlsX291dD11KSwocj1jLmluZmxhdGUoaCxtLlpfTk9fRkxVU0gpKT09PW0uWl9ORUVEX0RJQ1QmJmwmJihvPVwic3RyaW5nXCI9PXR5cGVvZiBsP3Auc3RyaW5nMmJ1ZihsKTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1fLmNhbGwobCk/bmV3IFVpbnQ4QXJyYXkobCk6bCxyPWMuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLG8pKSxyPT09bS5aX0JVRl9FUlJPUiYmITA9PT1mJiYocj1tLlpfT0ssZj0hMSksciE9PW0uWl9TVFJFQU1fRU5EJiZyIT09bS5aX09LKXJldHVybiB0aGlzLm9uRW5kKHIpLCEodGhpcy5lbmRlZD0hMCk7aC5uZXh0X291dCYmKDAhPT1oLmF2YWlsX291dCYmciE9PW0uWl9TVFJFQU1fRU5EJiYoMCE9PWguYXZhaWxfaW58fG4hPT1tLlpfRklOSVNIJiZuIT09bS5aX1NZTkNfRkxVU0gpfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz8oaT1wLnV0Zjhib3JkZXIoaC5vdXRwdXQsaC5uZXh0X291dCkscz1oLm5leHRfb3V0LWksYT1wLmJ1ZjJzdHJpbmcoaC5vdXRwdXQsaSksaC5uZXh0X291dD1zLGguYXZhaWxfb3V0PXUtcyxzJiZkLmFycmF5U2V0KGgub3V0cHV0LGgub3V0cHV0LGkscywwKSx0aGlzLm9uRGF0YShhKSk6dGhpcy5vbkRhdGEoZC5zaHJpbmtCdWYoaC5vdXRwdXQsaC5uZXh0X291dCkpKSksMD09PWguYXZhaWxfaW4mJjA9PT1oLmF2YWlsX291dCYmKGY9ITApfXdoaWxlKCgwPGguYXZhaWxfaW58fDA9PT1oLmF2YWlsX291dCkmJnIhPT1tLlpfU1RSRUFNX0VORCk7cmV0dXJuIHI9PT1tLlpfU1RSRUFNX0VORCYmKG49bS5aX0ZJTklTSCksbj09PW0uWl9GSU5JU0g/KHI9Yy5pbmZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1tLlpfT0spOm4hPT1tLlpfU1lOQ19GTFVTSHx8KHRoaXMub25FbmQobS5aX09LKSwhKGguYXZhaWxfb3V0PTApKX0sYS5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKGUpe3RoaXMuY2h1bmtzLnB1c2goZSl9LGEucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKGUpe2U9PT1tLlpfT0smJihcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvP3RoaXMucmVzdWx0PXRoaXMuY2h1bmtzLmpvaW4oXCJcIik6dGhpcy5yZXN1bHQ9ZC5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9ZSx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfSxyLkluZmxhdGU9YSxyLmluZmxhdGU9byxyLmluZmxhdGVSYXc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4odD10fHx7fSkucmF3PSEwLG8oZSx0KX0sci51bmd6aXA9b30se1wiLi91dGlscy9jb21tb25cIjo0MSxcIi4vdXRpbHMvc3RyaW5nc1wiOjQyLFwiLi96bGliL2NvbnN0YW50c1wiOjQ0LFwiLi96bGliL2d6aGVhZGVyXCI6NDcsXCIuL3psaWIvaW5mbGF0ZVwiOjQ5LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgSW50MzJBcnJheTtyLmFzc2lnbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3QubGVuZ3RoOyl7dmFyIHI9dC5zaGlmdCgpO2lmKHIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IocitcIm11c3QgYmUgbm9uLW9iamVjdFwiKTtmb3IodmFyIG4gaW4gcilyLmhhc093blByb3BlcnR5KG4pJiYoZVtuXT1yW25dKX19cmV0dXJuIGV9LHIuc2hyaW5rQnVmPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubGVuZ3RoPT09dD9lOmUuc3ViYXJyYXk/ZS5zdWJhcnJheSgwLHQpOihlLmxlbmd0aD10LGUpfTt2YXIgaT17YXJyYXlTZXQ6ZnVuY3Rpb24oZSx0LHIsbixpKXtpZih0LnN1YmFycmF5JiZlLnN1YmFycmF5KWUuc2V0KHQuc3ViYXJyYXkocixyK24pLGkpO2Vsc2UgZm9yKHZhciBzPTA7czxuO3MrKyllW2krc109dFtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYTtmb3IodD1uPTAscj1lLmxlbmd0aDt0PHI7dCsrKW4rPWVbdF0ubGVuZ3RoO2ZvcihhPW5ldyBVaW50OEFycmF5KG4pLHQ9aT0wLHI9ZS5sZW5ndGg7dDxyO3QrKylzPWVbdF0sYS5zZXQocyxpKSxpKz1zLmxlbmd0aDtyZXR1cm4gYX19LHM9e2FycmF5U2V0OmZ1bmN0aW9uKGUsdCxyLG4saSl7Zm9yKHZhciBzPTA7czxuO3MrKyllW2krc109dFtyK3NdfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKGUpe3JldHVybltdLmNvbmNhdC5hcHBseShbXSxlKX19O3Iuc2V0VHlwZWQ9ZnVuY3Rpb24oZSl7ZT8oci5CdWY4PVVpbnQ4QXJyYXksci5CdWYxNj1VaW50MTZBcnJheSxyLkJ1ZjMyPUludDMyQXJyYXksci5hc3NpZ24ocixpKSk6KHIuQnVmOD1BcnJheSxyLkJ1ZjE2PUFycmF5LHIuQnVmMzI9QXJyYXksci5hc3NpZ24ocixzKSl9LHIuc2V0VHlwZWQobil9LHt9XSw0MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBoPWUoXCIuL2NvbW1vblwiKSxpPSEwLHM9ITA7dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxbMF0pfWNhdGNoKGUpe2k9ITF9dHJ5e1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheSgxKSl9Y2F0Y2goZSl7cz0hMX1mb3IodmFyIHU9bmV3IGguQnVmOCgyNTYpLG49MDtuPDI1NjtuKyspdVtuXT0yNTI8PW4/NjoyNDg8PW4/NToyNDA8PW4/NDoyMjQ8PW4/MzoxOTI8PW4/MjoxO2Z1bmN0aW9uIGwoZSx0KXtpZih0PDY1NTM3JiYoZS5zdWJhcnJheSYmc3x8IWUuc3ViYXJyYXkmJmkpKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsaC5zaHJpbmtCdWYoZSx0KSk7Zm9yKHZhciByPVwiXCIsbj0wO248dDtuKyspcis9U3RyaW5nLmZyb21DaGFyQ29kZShlW25dKTtyZXR1cm4gcn11WzI1NF09dVsyNTRdPTEsci5zdHJpbmcyYnVmPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLHMsYT1lLmxlbmd0aCxvPTA7Zm9yKGk9MDtpPGE7aSsrKTU1Mjk2PT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkpKSkmJmkrMTxhJiY1NjMyMD09KDY0NTEyJihuPWUuY2hhckNvZGVBdChpKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKG4tNTYzMjApLGkrKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IodD1uZXcgaC5CdWY4KG8pLGk9cz0wO3M8bztpKyspNTUyOTY9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSkpKSYmaSsxPGEmJjU2MzIwPT0oNjQ1MTImKG49ZS5jaGFyQ29kZUF0KGkrMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSxyPDEyOD90W3MrK109cjoocjwyMDQ4P3RbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/dFtzKytdPTIyNHxyPj4+MTI6KHRbcysrXT0yNDB8cj4+PjE4LHRbcysrXT0xMjh8cj4+PjEyJjYzKSx0W3MrK109MTI4fHI+Pj42JjYzKSx0W3MrK109MTI4fDYzJnIpO3JldHVybiB0fSxyLmJ1ZjJiaW5zdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIGwoZSxlLmxlbmd0aCl9LHIuYmluc3RyaW5nMmJ1Zj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IGguQnVmOChlLmxlbmd0aCkscj0wLG49dC5sZW5ndGg7cjxuO3IrKyl0W3JdPWUuY2hhckNvZGVBdChyKTtyZXR1cm4gdH0sci5idWYyc3RyaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLHMsYT10fHxlLmxlbmd0aCxvPW5ldyBBcnJheSgyKmEpO2ZvcihyPW49MDtyPGE7KWlmKChpPWVbcisrXSk8MTI4KW9bbisrXT1pO2Vsc2UgaWYoNDwocz11W2ldKSlvW24rK109NjU1MzMscis9cy0xO2Vsc2V7Zm9yKGkmPTI9PT1zPzMxOjM9PT1zPzE1Ojc7MTxzJiZyPGE7KWk9aTw8Nnw2MyZlW3IrK10scy0tOzE8cz9vW24rK109NjU1MzM6aTw2NTUzNj9vW24rK109aTooaS09NjU1MzYsb1tuKytdPTU1Mjk2fGk+PjEwJjEwMjMsb1tuKytdPTU2MzIwfDEwMjMmaSl9cmV0dXJuIGwobyxuKX0sci51dGY4Ym9yZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKCh0PXR8fGUubGVuZ3RoKT5lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHI9dC0xOzA8PXImJjEyOD09KDE5MiZlW3JdKTspci0tO3JldHVybiByPDA/dDowPT09cj90OnIrdVtlW3JdXT50P3I6dH19LHtcIi4vY29tbW9uXCI6NDF9XSw0MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXtmb3IodmFyIGk9NjU1MzUmZXwwLHM9ZT4+PjE2JjY1NTM1fDAsYT0wOzAhPT1yOyl7Zm9yKHItPWE9MmUzPHI/MmUzOnI7cz1zKyhpPWkrdFtuKytdfDApfDAsLS1hOyk7aSU9NjU1MjEscyU9NjU1MjF9cmV0dXJuIGl8czw8MTZ8MH19LHt9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17Wl9OT19GTFVTSDowLFpfUEFSVElBTF9GTFVTSDoxLFpfU1lOQ19GTFVTSDoyLFpfRlVMTF9GTFVTSDozLFpfRklOSVNIOjQsWl9CTE9DSzo1LFpfVFJFRVM6NixaX09LOjAsWl9TVFJFQU1fRU5EOjEsWl9ORUVEX0RJQ1Q6MixaX0VSUk5POi0xLFpfU1RSRUFNX0VSUk9SOi0yLFpfREFUQV9FUlJPUjotMyxaX0JVRl9FUlJPUjotNSxaX05PX0NPTVBSRVNTSU9OOjAsWl9CRVNUX1NQRUVEOjEsWl9CRVNUX0NPTVBSRVNTSU9OOjksWl9ERUZBVUxUX0NPTVBSRVNTSU9OOi0xLFpfRklMVEVSRUQ6MSxaX0hVRkZNQU5fT05MWToyLFpfUkxFOjMsWl9GSVhFRDo0LFpfREVGQVVMVF9TVFJBVEVHWTowLFpfQklOQVJZOjAsWl9URVhUOjEsWl9VTktOT1dOOjIsWl9ERUZMQVRFRDo4fX0se31dLDQ1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1bXSxyPTA7cjwyNTY7cisrKXtlPXI7Zm9yKHZhciBuPTA7bjw4O24rKyllPTEmZT8zOTg4MjkyMzg0XmU+Pj4xOmU+Pj4xO3Rbcl09ZX1yZXR1cm4gdH0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9byxzPW4rcjtlXj0tMTtmb3IodmFyIGE9bjthPHM7YSsrKWU9ZT4+PjheaVsyNTUmKGVedFthXSldO3JldHVybi0xXmV9fSx7fV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaCxjPWUoXCIuLi91dGlscy9jb21tb25cIiksdT1lKFwiLi90cmVlc1wiKSxkPWUoXCIuL2FkbGVyMzJcIikscD1lKFwiLi9jcmMzMlwiKSxuPWUoXCIuL21lc3NhZ2VzXCIpLGw9MCxmPTQsbT0wLF89LTIsZz0tMSxiPTQsaT0yLHY9OCx5PTkscz0yODYsYT0zMCxvPTE5LHc9MipzKzEsaz0xNSx4PTMsUz0yNTgsej1TK3grMSxDPTQyLEU9MTEzLEE9MSxJPTIsTz0zLEI9NDtmdW5jdGlvbiBSKGUsdCl7cmV0dXJuIGUubXNnPW5bdF0sdH1mdW5jdGlvbiBUKGUpe3JldHVybihlPDwxKS0oNDxlPzk6MCl9ZnVuY3Rpb24gRChlKXtmb3IodmFyIHQ9ZS5sZW5ndGg7MDw9LS10OyllW3RdPTB9ZnVuY3Rpb24gRihlKXt2YXIgdD1lLnN0YXRlLHI9dC5wZW5kaW5nO3I+ZS5hdmFpbF9vdXQmJihyPWUuYXZhaWxfb3V0KSwwIT09ciYmKGMuYXJyYXlTZXQoZS5vdXRwdXQsdC5wZW5kaW5nX2J1Zix0LnBlbmRpbmdfb3V0LHIsZS5uZXh0X291dCksZS5uZXh0X291dCs9cix0LnBlbmRpbmdfb3V0Kz1yLGUudG90YWxfb3V0Kz1yLGUuYXZhaWxfb3V0LT1yLHQucGVuZGluZy09ciwwPT09dC5wZW5kaW5nJiYodC5wZW5kaW5nX291dD0wKSl9ZnVuY3Rpb24gTihlLHQpe3UuX3RyX2ZsdXNoX2Jsb2NrKGUsMDw9ZS5ibG9ja19zdGFydD9lLmJsb2NrX3N0YXJ0Oi0xLGUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydCx0KSxlLmJsb2NrX3N0YXJ0PWUuc3Ryc3RhcnQsRihlLnN0cm0pfWZ1bmN0aW9uIFUoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10fWZ1bmN0aW9uIFAoZSx0KXtlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10Pj4+OCYyNTUsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnR9ZnVuY3Rpb24gTChlLHQpe3ZhciByLG4saT1lLm1heF9jaGFpbl9sZW5ndGgscz1lLnN0cnN0YXJ0LGE9ZS5wcmV2X2xlbmd0aCxvPWUubmljZV9tYXRjaCxoPWUuc3Ryc3RhcnQ+ZS53X3NpemUtej9lLnN0cnN0YXJ0LShlLndfc2l6ZS16KTowLHU9ZS53aW5kb3csbD1lLndfbWFzayxmPWUucHJldixjPWUuc3Ryc3RhcnQrUyxkPXVbcythLTFdLHA9dVtzK2FdO2UucHJldl9sZW5ndGg+PWUuZ29vZF9tYXRjaCYmKGk+Pj0yKSxvPmUubG9va2FoZWFkJiYobz1lLmxvb2thaGVhZCk7ZG97aWYodVsocj10KSthXT09PXAmJnVbcithLTFdPT09ZCYmdVtyXT09PXVbc10mJnVbKytyXT09PXVbcysxXSl7cys9MixyKys7ZG97fXdoaWxlKHVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZzPGMpO2lmKG49Uy0oYy1zKSxzPWMtUyxhPG4pe2lmKGUubWF0Y2hfc3RhcnQ9dCxvPD0oYT1uKSlicmVhaztkPXVbcythLTFdLHA9dVtzK2FdfX19d2hpbGUoKHQ9Zlt0JmxdKT5oJiYwIT0tLWkpO3JldHVybiBhPD1lLmxvb2thaGVhZD9hOmUubG9va2FoZWFkfWZ1bmN0aW9uIGooZSl7dmFyIHQscixuLGkscyxhLG8saCx1LGwsZj1lLndfc2l6ZTtkb3tpZihpPWUud2luZG93X3NpemUtZS5sb29rYWhlYWQtZS5zdHJzdGFydCxlLnN0cnN0YXJ0Pj1mKyhmLXopKXtmb3IoYy5hcnJheVNldChlLndpbmRvdyxlLndpbmRvdyxmLGYsMCksZS5tYXRjaF9zdGFydC09ZixlLnN0cnN0YXJ0LT1mLGUuYmxvY2tfc3RhcnQtPWYsdD1yPWUuaGFzaF9zaXplO249ZS5oZWFkWy0tdF0sZS5oZWFkW3RdPWY8PW4/bi1mOjAsLS1yOyk7Zm9yKHQ9cj1mO249ZS5wcmV2Wy0tdF0sZS5wcmV2W3RdPWY8PW4/bi1mOjAsLS1yOyk7aSs9Zn1pZigwPT09ZS5zdHJtLmF2YWlsX2luKWJyZWFrO2lmKGE9ZS5zdHJtLG89ZS53aW5kb3csaD1lLnN0cnN0YXJ0K2UubG9va2FoZWFkLHU9aSxsPXZvaWQgMCxsPWEuYXZhaWxfaW4sdTxsJiYobD11KSxyPTA9PT1sPzA6KGEuYXZhaWxfaW4tPWwsYy5hcnJheVNldChvLGEuaW5wdXQsYS5uZXh0X2luLGwsaCksMT09PWEuc3RhdGUud3JhcD9hLmFkbGVyPWQoYS5hZGxlcixvLGwsaCk6Mj09PWEuc3RhdGUud3JhcCYmKGEuYWRsZXI9cChhLmFkbGVyLG8sbCxoKSksYS5uZXh0X2luKz1sLGEudG90YWxfaW4rPWwsbCksZS5sb29rYWhlYWQrPXIsZS5sb29rYWhlYWQrZS5pbnNlcnQ+PXgpZm9yKHM9ZS5zdHJzdGFydC1lLmluc2VydCxlLmluc19oPWUud2luZG93W3NdLGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tzKzFdKSZlLmhhc2hfbWFzaztlLmluc2VydCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tzK3gtMV0pJmUuaGFzaF9tYXNrLGUucHJldltzJmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPXMscysrLGUuaW5zZXJ0LS0sIShlLmxvb2thaGVhZCtlLmluc2VydDx4KSk7KTt9d2hpbGUoZS5sb29rYWhlYWQ8eiYmMCE9PWUuc3RybS5hdmFpbF9pbil9ZnVuY3Rpb24gWihlLHQpe2Zvcih2YXIgcixuOzspe2lmKGUubG9va2FoZWFkPHope2lmKGooZSksZS5sb29rYWhlYWQ8eiYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49eCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksMCE9PXImJmUuc3Ryc3RhcnQtcjw9ZS53X3NpemUteiYmKGUubWF0Y2hfbGVuZ3RoPUwoZSxyKSksZS5tYXRjaF9sZW5ndGg+PXgpaWYobj11Ll90cl90YWxseShlLGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aC14KSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg8PWUubWF4X2xhenlfbWF0Y2gmJmUubG9va2FoZWFkPj14KXtmb3IoZS5tYXRjaF9sZW5ndGgtLTtlLnN0cnN0YXJ0KyssZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQreC0xXSkmZS5oYXNoX21hc2sscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0LDAhPS0tZS5tYXRjaF9sZW5ndGg7KTtlLnN0cnN0YXJ0Kyt9ZWxzZSBlLnN0cnN0YXJ0Kz1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aD0wLGUuaW5zX2g9ZS53aW5kb3dbZS5zdHJzdGFydF0sZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQrMV0pJmUuaGFzaF9tYXNrO2Vsc2Ugbj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydF0pLGUubG9va2FoZWFkLS0sZS5zdHJzdGFydCsrO2lmKG4mJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9ZS5zdHJzdGFydDx4LTE/ZS5zdHJzdGFydDp4LTEsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIFcoZSx0KXtmb3IodmFyIHIsbixpOzspe2lmKGUubG9va2FoZWFkPHope2lmKGooZSksZS5sb29rYWhlYWQ8eiYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49eCYmKGUuaW5zX2g9KGUuaW5zX2g8PGUuaGFzaF9zaGlmdF5lLndpbmRvd1tlLnN0cnN0YXJ0K3gtMV0pJmUuaGFzaF9tYXNrLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCksZS5wcmV2X2xlbmd0aD1lLm1hdGNoX2xlbmd0aCxlLnByZXZfbWF0Y2g9ZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aD14LTEsMCE9PXImJmUucHJldl9sZW5ndGg8ZS5tYXhfbGF6eV9tYXRjaCYmZS5zdHJzdGFydC1yPD1lLndfc2l6ZS16JiYoZS5tYXRjaF9sZW5ndGg9TChlLHIpLGUubWF0Y2hfbGVuZ3RoPD01JiYoMT09PWUuc3RyYXRlZ3l8fGUubWF0Y2hfbGVuZ3RoPT09eCYmNDA5NjxlLnN0cnN0YXJ0LWUubWF0Y2hfc3RhcnQpJiYoZS5tYXRjaF9sZW5ndGg9eC0xKSksZS5wcmV2X2xlbmd0aD49eCYmZS5tYXRjaF9sZW5ndGg8PWUucHJldl9sZW5ndGgpe2ZvcihpPWUuc3Ryc3RhcnQrZS5sb29rYWhlYWQteCxuPXUuX3RyX3RhbGx5KGUsZS5zdHJzdGFydC0xLWUucHJldl9tYXRjaCxlLnByZXZfbGVuZ3RoLXgpLGUubG9va2FoZWFkLT1lLnByZXZfbGVuZ3RoLTEsZS5wcmV2X2xlbmd0aC09MjsrK2Uuc3Ryc3RhcnQ8PWkmJihlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCt4LTFdKSZlLmhhc2hfbWFzayxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpLDAhPS0tZS5wcmV2X2xlbmd0aDspO2lmKGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5tYXRjaF9sZW5ndGg9eC0xLGUuc3Ryc3RhcnQrKyxuJiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9ZWxzZSBpZihlLm1hdGNoX2F2YWlsYWJsZSl7aWYoKG49dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnQtMV0pKSYmTihlLCExKSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLSwwPT09ZS5zdHJtLmF2YWlsX291dClyZXR1cm4gQX1lbHNlIGUubWF0Y2hfYXZhaWxhYmxlPTEsZS5zdHJzdGFydCsrLGUubG9va2FoZWFkLS19cmV0dXJuIGUubWF0Y2hfYXZhaWxhYmxlJiYobj11Ll90cl90YWxseShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSksZS5tYXRjaF9hdmFpbGFibGU9MCksZS5pbnNlcnQ9ZS5zdHJzdGFydDx4LTE/ZS5zdHJzdGFydDp4LTEsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfWZ1bmN0aW9uIE0oZSx0LHIsbixpKXt0aGlzLmdvb2RfbGVuZ3RoPWUsdGhpcy5tYXhfbGF6eT10LHRoaXMubmljZV9sZW5ndGg9cix0aGlzLm1heF9jaGFpbj1uLHRoaXMuZnVuYz1pfWZ1bmN0aW9uIEgoKXt0aGlzLnN0cm09bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMucGVuZGluZ19idWY9bnVsbCx0aGlzLnBlbmRpbmdfYnVmX3NpemU9MCx0aGlzLnBlbmRpbmdfb3V0PTAsdGhpcy5wZW5kaW5nPTAsdGhpcy53cmFwPTAsdGhpcy5nemhlYWQ9bnVsbCx0aGlzLmd6aW5kZXg9MCx0aGlzLm1ldGhvZD12LHRoaXMubGFzdF9mbHVzaD0tMSx0aGlzLndfc2l6ZT0wLHRoaXMud19iaXRzPTAsdGhpcy53X21hc2s9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMud2luZG93X3NpemU9MCx0aGlzLnByZXY9bnVsbCx0aGlzLmhlYWQ9bnVsbCx0aGlzLmluc19oPTAsdGhpcy5oYXNoX3NpemU9MCx0aGlzLmhhc2hfYml0cz0wLHRoaXMuaGFzaF9tYXNrPTAsdGhpcy5oYXNoX3NoaWZ0PTAsdGhpcy5ibG9ja19zdGFydD0wLHRoaXMubWF0Y2hfbGVuZ3RoPTAsdGhpcy5wcmV2X21hdGNoPTAsdGhpcy5tYXRjaF9hdmFpbGFibGU9MCx0aGlzLnN0cnN0YXJ0PTAsdGhpcy5tYXRjaF9zdGFydD0wLHRoaXMubG9va2FoZWFkPTAsdGhpcy5wcmV2X2xlbmd0aD0wLHRoaXMubWF4X2NoYWluX2xlbmd0aD0wLHRoaXMubWF4X2xhenlfbWF0Y2g9MCx0aGlzLmxldmVsPTAsdGhpcy5zdHJhdGVneT0wLHRoaXMuZ29vZF9tYXRjaD0wLHRoaXMubmljZV9tYXRjaD0wLHRoaXMuZHluX2x0cmVlPW5ldyBjLkJ1ZjE2KDIqdyksdGhpcy5keW5fZHRyZWU9bmV3IGMuQnVmMTYoMiooMiphKzEpKSx0aGlzLmJsX3RyZWU9bmV3IGMuQnVmMTYoMiooMipvKzEpKSxEKHRoaXMuZHluX2x0cmVlKSxEKHRoaXMuZHluX2R0cmVlKSxEKHRoaXMuYmxfdHJlZSksdGhpcy5sX2Rlc2M9bnVsbCx0aGlzLmRfZGVzYz1udWxsLHRoaXMuYmxfZGVzYz1udWxsLHRoaXMuYmxfY291bnQ9bmV3IGMuQnVmMTYoaysxKSx0aGlzLmhlYXA9bmV3IGMuQnVmMTYoMipzKzEpLEQodGhpcy5oZWFwKSx0aGlzLmhlYXBfbGVuPTAsdGhpcy5oZWFwX21heD0wLHRoaXMuZGVwdGg9bmV3IGMuQnVmMTYoMipzKzEpLEQodGhpcy5kZXB0aCksdGhpcy5sX2J1Zj0wLHRoaXMubGl0X2J1ZnNpemU9MCx0aGlzLmxhc3RfbGl0PTAsdGhpcy5kX2J1Zj0wLHRoaXMub3B0X2xlbj0wLHRoaXMuc3RhdGljX2xlbj0wLHRoaXMubWF0Y2hlcz0wLHRoaXMuaW5zZXJ0PTAsdGhpcy5iaV9idWY9MCx0aGlzLmJpX3ZhbGlkPTB9ZnVuY3Rpb24gRyhlKXt2YXIgdDtyZXR1cm4gZSYmZS5zdGF0ZT8oZS50b3RhbF9pbj1lLnRvdGFsX291dD0wLGUuZGF0YV90eXBlPWksKHQ9ZS5zdGF0ZSkucGVuZGluZz0wLHQucGVuZGluZ19vdXQ9MCx0LndyYXA8MCYmKHQud3JhcD0tdC53cmFwKSx0LnN0YXR1cz10LndyYXA/QzpFLGUuYWRsZXI9Mj09PXQud3JhcD8wOjEsdC5sYXN0X2ZsdXNoPWwsdS5fdHJfaW5pdCh0KSxtKTpSKGUsXyl9ZnVuY3Rpb24gSyhlKXt2YXIgdD1HKGUpO3JldHVybiB0PT09bSYmZnVuY3Rpb24oZSl7ZS53aW5kb3dfc2l6ZT0yKmUud19zaXplLEQoZS5oZWFkKSxlLm1heF9sYXp5X21hdGNoPWhbZS5sZXZlbF0ubWF4X2xhenksZS5nb29kX21hdGNoPWhbZS5sZXZlbF0uZ29vZF9sZW5ndGgsZS5uaWNlX21hdGNoPWhbZS5sZXZlbF0ubmljZV9sZW5ndGgsZS5tYXhfY2hhaW5fbGVuZ3RoPWhbZS5sZXZlbF0ubWF4X2NoYWluLGUuc3Ryc3RhcnQ9MCxlLmJsb2NrX3N0YXJ0PTAsZS5sb29rYWhlYWQ9MCxlLmluc2VydD0wLGUubWF0Y2hfbGVuZ3RoPWUucHJldl9sZW5ndGg9eC0xLGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5pbnNfaD0wfShlLnN0YXRlKSx0fWZ1bmN0aW9uIFkoZSx0LHIsbixpLHMpe2lmKCFlKXJldHVybiBfO3ZhciBhPTE7aWYodD09PWcmJih0PTYpLG48MD8oYT0wLG49LW4pOjE1PG4mJihhPTIsbi09MTYpLGk8MXx8eTxpfHxyIT09dnx8bjw4fHwxNTxufHx0PDB8fDk8dHx8czwwfHxiPHMpcmV0dXJuIFIoZSxfKTs4PT09biYmKG49OSk7dmFyIG89bmV3IEg7cmV0dXJuKGUuc3RhdGU9bykuc3RybT1lLG8ud3JhcD1hLG8uZ3poZWFkPW51bGwsby53X2JpdHM9bixvLndfc2l6ZT0xPDxvLndfYml0cyxvLndfbWFzaz1vLndfc2l6ZS0xLG8uaGFzaF9iaXRzPWkrNyxvLmhhc2hfc2l6ZT0xPDxvLmhhc2hfYml0cyxvLmhhc2hfbWFzaz1vLmhhc2hfc2l6ZS0xLG8uaGFzaF9zaGlmdD1+figoby5oYXNoX2JpdHMreC0xKS94KSxvLndpbmRvdz1uZXcgYy5CdWY4KDIqby53X3NpemUpLG8uaGVhZD1uZXcgYy5CdWYxNihvLmhhc2hfc2l6ZSksby5wcmV2PW5ldyBjLkJ1ZjE2KG8ud19zaXplKSxvLmxpdF9idWZzaXplPTE8PGkrNixvLnBlbmRpbmdfYnVmX3NpemU9NCpvLmxpdF9idWZzaXplLG8ucGVuZGluZ19idWY9bmV3IGMuQnVmOChvLnBlbmRpbmdfYnVmX3NpemUpLG8uZF9idWY9MSpvLmxpdF9idWZzaXplLG8ubF9idWY9MypvLmxpdF9idWZzaXplLG8ubGV2ZWw9dCxvLnN0cmF0ZWd5PXMsby5tZXRob2Q9cixLKGUpfWg9W25ldyBNKDAsMCwwLDAsZnVuY3Rpb24oZSx0KXt2YXIgcj02NTUzNTtmb3Iocj5lLnBlbmRpbmdfYnVmX3NpemUtNSYmKHI9ZS5wZW5kaW5nX2J1Zl9zaXplLTUpOzspe2lmKGUubG9va2FoZWFkPD0xKXtpZihqKGUpLDA9PT1lLmxvb2thaGVhZCYmdD09PWwpcmV0dXJuIEE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWUuc3Ryc3RhcnQrPWUubG9va2FoZWFkLGUubG9va2FoZWFkPTA7dmFyIG49ZS5ibG9ja19zdGFydCtyO2lmKCgwPT09ZS5zdHJzdGFydHx8ZS5zdHJzdGFydD49bikmJihlLmxvb2thaGVhZD1lLnN0cnN0YXJ0LW4sZS5zdHJzdGFydD1uLE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBO2lmKGUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydD49ZS53X3NpemUteiYmKE4oZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiBlLmluc2VydD0wLHQ9PT1mPyhOKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0P086Qik6KGUuc3Ryc3RhcnQ+ZS5ibG9ja19zdGFydCYmKE4oZSwhMSksZS5zdHJtLmF2YWlsX291dCksQSl9KSxuZXcgTSg0LDQsOCw0LFopLG5ldyBNKDQsNSwxNiw4LFopLG5ldyBNKDQsNiwzMiwzMixaKSxuZXcgTSg0LDQsMTYsMTYsVyksbmV3IE0oOCwxNiwzMiwzMixXKSxuZXcgTSg4LDE2LDEyOCwxMjgsVyksbmV3IE0oOCwzMiwxMjgsMjU2LFcpLG5ldyBNKDMyLDEyOCwyNTgsMTAyNCxXKSxuZXcgTSgzMiwyNTgsMjU4LDQwOTYsVyldLHIuZGVmbGF0ZUluaXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gWShlLHQsdiwxNSw4LDApfSxyLmRlZmxhdGVJbml0Mj1ZLHIuZGVmbGF0ZVJlc2V0PUssci5kZWZsYXRlUmVzZXRLZWVwPUcsci5kZWZsYXRlU2V0SGVhZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJmUuc3RhdGU/MiE9PWUuc3RhdGUud3JhcD9fOihlLnN0YXRlLmd6aGVhZD10LG0pOl99LHIuZGVmbGF0ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxzO2lmKCFlfHwhZS5zdGF0ZXx8NTx0fHx0PDApcmV0dXJuIGU/UihlLF8pOl87aWYobj1lLnN0YXRlLCFlLm91dHB1dHx8IWUuaW5wdXQmJjAhPT1lLmF2YWlsX2lufHw2NjY9PT1uLnN0YXR1cyYmdCE9PWYpcmV0dXJuIFIoZSwwPT09ZS5hdmFpbF9vdXQ/LTU6Xyk7aWYobi5zdHJtPWUscj1uLmxhc3RfZmx1c2gsbi5sYXN0X2ZsdXNoPXQsbi5zdGF0dXM9PT1DKWlmKDI9PT1uLndyYXApZS5hZGxlcj0wLFUobiwzMSksVShuLDEzOSksVShuLDgpLG4uZ3poZWFkPyhVKG4sKG4uZ3poZWFkLnRleHQ/MTowKSsobi5nemhlYWQuaGNyYz8yOjApKyhuLmd6aGVhZC5leHRyYT80OjApKyhuLmd6aGVhZC5uYW1lPzg6MCkrKG4uZ3poZWFkLmNvbW1lbnQ/MTY6MCkpLFUobiwyNTUmbi5nemhlYWQudGltZSksVShuLG4uZ3poZWFkLnRpbWU+PjgmMjU1KSxVKG4sbi5nemhlYWQudGltZT4+MTYmMjU1KSxVKG4sbi5nemhlYWQudGltZT4+MjQmMjU1KSxVKG4sOT09PW4ubGV2ZWw/MjoyPD1uLnN0cmF0ZWd5fHxuLmxldmVsPDI/NDowKSxVKG4sMjU1Jm4uZ3poZWFkLm9zKSxuLmd6aGVhZC5leHRyYSYmbi5nemhlYWQuZXh0cmEubGVuZ3RoJiYoVShuLDI1NSZuLmd6aGVhZC5leHRyYS5sZW5ndGgpLFUobixuLmd6aGVhZC5leHRyYS5sZW5ndGg+PjgmMjU1KSksbi5nemhlYWQuaGNyYyYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLDApKSxuLmd6aW5kZXg9MCxuLnN0YXR1cz02OSk6KFUobiwwKSxVKG4sMCksVShuLDApLFUobiwwKSxVKG4sMCksVShuLDk9PT1uLmxldmVsPzI6Mjw9bi5zdHJhdGVneXx8bi5sZXZlbDwyPzQ6MCksVShuLDMpLG4uc3RhdHVzPUUpO2Vsc2V7dmFyIGE9disobi53X2JpdHMtODw8NCk8PDg7YXw9KDI8PW4uc3RyYXRlZ3l8fG4ubGV2ZWw8Mj8wOm4ubGV2ZWw8Nj8xOjY9PT1uLmxldmVsPzI6Myk8PDYsMCE9PW4uc3Ryc3RhcnQmJihhfD0zMiksYSs9MzEtYSUzMSxuLnN0YXR1cz1FLFAobixhKSwwIT09bi5zdHJzdGFydCYmKFAobixlLmFkbGVyPj4+MTYpLFAobiw2NTUzNSZlLmFkbGVyKSksZS5hZGxlcj0xfWlmKDY5PT09bi5zdGF0dXMpaWYobi5nemhlYWQuZXh0cmEpe2ZvcihpPW4ucGVuZGluZztuLmd6aW5kZXg8KDY1NTM1Jm4uZ3poZWFkLmV4dHJhLmxlbmd0aCkmJihuLnBlbmRpbmchPT1uLnBlbmRpbmdfYnVmX3NpemV8fChuLmd6aGVhZC5oY3JjJiZuLnBlbmRpbmc+aSYmKGUuYWRsZXI9cChlLmFkbGVyLG4ucGVuZGluZ19idWYsbi5wZW5kaW5nLWksaSkpLEYoZSksaT1uLnBlbmRpbmcsbi5wZW5kaW5nIT09bi5wZW5kaW5nX2J1Zl9zaXplKSk7KVUobiwyNTUmbi5nemhlYWQuZXh0cmFbbi5nemluZGV4XSksbi5nemluZGV4Kys7bi5nemhlYWQuaGNyYyYmbi5wZW5kaW5nPmkmJihlLmFkbGVyPXAoZS5hZGxlcixuLnBlbmRpbmdfYnVmLG4ucGVuZGluZy1pLGkpKSxuLmd6aW5kZXg9PT1uLmd6aGVhZC5leHRyYS5sZW5ndGgmJihuLmd6aW5kZXg9MCxuLnN0YXR1cz03Myl9ZWxzZSBuLnN0YXR1cz03MztpZig3Mz09PW4uc3RhdHVzKWlmKG4uZ3poZWFkLm5hbWUpe2k9bi5wZW5kaW5nO2Rve2lmKG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSYmKG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1uLmd6aW5kZXg8bi5nemhlYWQubmFtZS5sZW5ndGg/MjU1Jm4uZ3poZWFkLm5hbWUuY2hhckNvZGVBdChuLmd6aW5kZXgrKyk6MCxVKG4scyl9d2hpbGUoMCE9PXMpO24uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksMD09PXMmJihuLmd6aW5kZXg9MCxuLnN0YXR1cz05MSl9ZWxzZSBuLnN0YXR1cz05MTtpZig5MT09PW4uc3RhdHVzKWlmKG4uZ3poZWFkLmNvbW1lbnQpe2k9bi5wZW5kaW5nO2Rve2lmKG4ucGVuZGluZz09PW4ucGVuZGluZ19idWZfc2l6ZSYmKG4uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksRihlKSxpPW4ucGVuZGluZyxuLnBlbmRpbmc9PT1uLnBlbmRpbmdfYnVmX3NpemUpKXtzPTE7YnJlYWt9cz1uLmd6aW5kZXg8bi5nemhlYWQuY29tbWVudC5sZW5ndGg/MjU1Jm4uZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChuLmd6aW5kZXgrKyk6MCxVKG4scyl9d2hpbGUoMCE9PXMpO24uZ3poZWFkLmhjcmMmJm4ucGVuZGluZz5pJiYoZS5hZGxlcj1wKGUuYWRsZXIsbi5wZW5kaW5nX2J1ZixuLnBlbmRpbmctaSxpKSksMD09PXMmJihuLnN0YXR1cz0xMDMpfWVsc2Ugbi5zdGF0dXM9MTAzO2lmKDEwMz09PW4uc3RhdHVzJiYobi5nemhlYWQuaGNyYz8obi5wZW5kaW5nKzI+bi5wZW5kaW5nX2J1Zl9zaXplJiZGKGUpLG4ucGVuZGluZysyPD1uLnBlbmRpbmdfYnVmX3NpemUmJihVKG4sMjU1JmUuYWRsZXIpLFUobixlLmFkbGVyPj44JjI1NSksZS5hZGxlcj0wLG4uc3RhdHVzPUUpKTpuLnN0YXR1cz1FKSwwIT09bi5wZW5kaW5nKXtpZihGKGUpLDA9PT1lLmF2YWlsX291dClyZXR1cm4gbi5sYXN0X2ZsdXNoPS0xLG19ZWxzZSBpZigwPT09ZS5hdmFpbF9pbiYmVCh0KTw9VChyKSYmdCE9PWYpcmV0dXJuIFIoZSwtNSk7aWYoNjY2PT09bi5zdGF0dXMmJjAhPT1lLmF2YWlsX2luKXJldHVybiBSKGUsLTUpO2lmKDAhPT1lLmF2YWlsX2lufHwwIT09bi5sb29rYWhlYWR8fHQhPT1sJiY2NjYhPT1uLnN0YXR1cyl7dmFyIG89Mj09PW4uc3RyYXRlZ3k/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI7Oyl7aWYoMD09PWUubG9va2FoZWFkJiYoaihlKSwwPT09ZS5sb29rYWhlYWQpKXtpZih0PT09bClyZXR1cm4gQTticmVha31pZihlLm1hdGNoX2xlbmd0aD0wLHI9dS5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnRdKSxlLmxvb2thaGVhZC0tLGUuc3Ryc3RhcnQrKyxyJiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIGUuaW5zZXJ0PTAsdD09PWY/KE4oZSwhMCksMD09PWUuc3RybS5hdmFpbF9vdXQ/TzpCKTplLmxhc3RfbGl0JiYoTihlLCExKSwwPT09ZS5zdHJtLmF2YWlsX291dCk/QTpJfShuLHQpOjM9PT1uLnN0cmF0ZWd5P2Z1bmN0aW9uKGUsdCl7Zm9yKHZhciByLG4saSxzLGE9ZS53aW5kb3c7Oyl7aWYoZS5sb29rYWhlYWQ8PVMpe2lmKGooZSksZS5sb29rYWhlYWQ8PVMmJnQ9PT1sKXJldHVybiBBO2lmKDA9PT1lLmxvb2thaGVhZClicmVha31pZihlLm1hdGNoX2xlbmd0aD0wLGUubG9va2FoZWFkPj14JiYwPGUuc3Ryc3RhcnQmJihuPWFbaT1lLnN0cnN0YXJ0LTFdKT09PWFbKytpXSYmbj09PWFbKytpXSYmbj09PWFbKytpXSl7cz1lLnN0cnN0YXJ0K1M7ZG97fXdoaWxlKG49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJm49PT1hWysraV0mJmk8cyk7ZS5tYXRjaF9sZW5ndGg9Uy0ocy1pKSxlLm1hdGNoX2xlbmd0aD5lLmxvb2thaGVhZCYmKGUubWF0Y2hfbGVuZ3RoPWUubG9va2FoZWFkKX1pZihlLm1hdGNoX2xlbmd0aD49eD8ocj11Ll90cl90YWxseShlLDEsZS5tYXRjaF9sZW5ndGgteCksZS5sb29rYWhlYWQtPWUubWF0Y2hfbGVuZ3RoLGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTApOihyPXUuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyspLHImJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gZS5pbnNlcnQ9MCx0PT09Zj8oTihlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD9POkIpOmUubGFzdF9saXQmJihOKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT9BOkl9KG4sdCk6aFtuLmxldmVsXS5mdW5jKG4sdCk7aWYobyE9PU8mJm8hPT1CfHwobi5zdGF0dXM9NjY2KSxvPT09QXx8bz09PU8pcmV0dXJuIDA9PT1lLmF2YWlsX291dCYmKG4ubGFzdF9mbHVzaD0tMSksbTtpZihvPT09SSYmKDE9PT10P3UuX3RyX2FsaWduKG4pOjUhPT10JiYodS5fdHJfc3RvcmVkX2Jsb2NrKG4sMCwwLCExKSwzPT09dCYmKEQobi5oZWFkKSwwPT09bi5sb29rYWhlYWQmJihuLnN0cnN0YXJ0PTAsbi5ibG9ja19zdGFydD0wLG4uaW5zZXJ0PTApKSksRihlKSwwPT09ZS5hdmFpbF9vdXQpKXJldHVybiBuLmxhc3RfZmx1c2g9LTEsbX1yZXR1cm4gdCE9PWY/bTpuLndyYXA8PTA/MTooMj09PW4ud3JhcD8oVShuLDI1NSZlLmFkbGVyKSxVKG4sZS5hZGxlcj4+OCYyNTUpLFUobixlLmFkbGVyPj4xNiYyNTUpLFUobixlLmFkbGVyPj4yNCYyNTUpLFUobiwyNTUmZS50b3RhbF9pbiksVShuLGUudG90YWxfaW4+PjgmMjU1KSxVKG4sZS50b3RhbF9pbj4+MTYmMjU1KSxVKG4sZS50b3RhbF9pbj4+MjQmMjU1KSk6KFAobixlLmFkbGVyPj4+MTYpLFAobiw2NTUzNSZlLmFkbGVyKSksRihlKSwwPG4ud3JhcCYmKG4ud3JhcD0tbi53cmFwKSwwIT09bi5wZW5kaW5nP206MSl9LHIuZGVmbGF0ZUVuZD1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gZSYmZS5zdGF0ZT8odD1lLnN0YXRlLnN0YXR1cykhPT1DJiY2OSE9PXQmJjczIT09dCYmOTEhPT10JiYxMDMhPT10JiZ0IT09RSYmNjY2IT09dD9SKGUsXyk6KGUuc3RhdGU9bnVsbCx0PT09RT9SKGUsLTMpOm0pOl99LHIuZGVmbGF0ZVNldERpY3Rpb25hcnk9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGw9dC5sZW5ndGg7aWYoIWV8fCFlLnN0YXRlKXJldHVybiBfO2lmKDI9PT0ocz0ocj1lLnN0YXRlKS53cmFwKXx8MT09PXMmJnIuc3RhdHVzIT09Q3x8ci5sb29rYWhlYWQpcmV0dXJuIF87Zm9yKDE9PT1zJiYoZS5hZGxlcj1kKGUuYWRsZXIsdCxsLDApKSxyLndyYXA9MCxsPj1yLndfc2l6ZSYmKDA9PT1zJiYoRChyLmhlYWQpLHIuc3Ryc3RhcnQ9MCxyLmJsb2NrX3N0YXJ0PTAsci5pbnNlcnQ9MCksdT1uZXcgYy5CdWY4KHIud19zaXplKSxjLmFycmF5U2V0KHUsdCxsLXIud19zaXplLHIud19zaXplLDApLHQ9dSxsPXIud19zaXplKSxhPWUuYXZhaWxfaW4sbz1lLm5leHRfaW4saD1lLmlucHV0LGUuYXZhaWxfaW49bCxlLm5leHRfaW49MCxlLmlucHV0PXQsaihyKTtyLmxvb2thaGVhZD49eDspe2ZvcihuPXIuc3Ryc3RhcnQsaT1yLmxvb2thaGVhZC0oeC0xKTtyLmluc19oPShyLmluc19oPDxyLmhhc2hfc2hpZnReci53aW5kb3dbbit4LTFdKSZyLmhhc2hfbWFzayxyLnByZXZbbiZyLndfbWFza109ci5oZWFkW3IuaW5zX2hdLHIuaGVhZFtyLmluc19oXT1uLG4rKywtLWk7KTtyLnN0cnN0YXJ0PW4sci5sb29rYWhlYWQ9eC0xLGoocil9cmV0dXJuIHIuc3Ryc3RhcnQrPXIubG9va2FoZWFkLHIuYmxvY2tfc3RhcnQ9ci5zdHJzdGFydCxyLmluc2VydD1yLmxvb2thaGVhZCxyLmxvb2thaGVhZD0wLHIubWF0Y2hfbGVuZ3RoPXIucHJldl9sZW5ndGg9eC0xLHIubWF0Y2hfYXZhaWxhYmxlPTAsZS5uZXh0X2luPW8sZS5pbnB1dD1oLGUuYXZhaWxfaW49YSxyLndyYXA9cyxtfSxyLmRlZmxhdGVJbmZvPVwicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9tZXNzYWdlc1wiOjUxLFwiLi90cmVlc1wiOjUyfV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLnRleHQ9MCx0aGlzLnRpbWU9MCx0aGlzLnhmbGFncz0wLHRoaXMub3M9MCx0aGlzLmV4dHJhPW51bGwsdGhpcy5leHRyYV9sZW49MCx0aGlzLm5hbWU9XCJcIix0aGlzLmNvbW1lbnQ9XCJcIix0aGlzLmhjcmM9MCx0aGlzLmRvbmU9ITF9fSx7fV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGwsZixjLGQscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQztyPWUuc3RhdGUsbj1lLm5leHRfaW4sej1lLmlucHV0LGk9bisoZS5hdmFpbF9pbi01KSxzPWUubmV4dF9vdXQsQz1lLm91dHB1dCxhPXMtKHQtZS5hdmFpbF9vdXQpLG89cysoZS5hdmFpbF9vdXQtMjU3KSxoPXIuZG1heCx1PXIud3NpemUsbD1yLndoYXZlLGY9ci53bmV4dCxjPXIud2luZG93LGQ9ci5ob2xkLHA9ci5iaXRzLG09ci5sZW5jb2RlLF89ci5kaXN0Y29kZSxnPSgxPDxyLmxlbmJpdHMpLTEsYj0oMTw8ci5kaXN0Yml0cyktMTtlOmRve3A8MTUmJihkKz16W24rK108PHAscCs9OCxkKz16W24rK108PHAscCs9OCksdj1tW2QmZ107dDpmb3IoOzspe2lmKGQ+Pj49eT12Pj4+MjQscC09eSwwPT09KHk9dj4+PjE2JjI1NSkpQ1tzKytdPTY1NTM1JnY7ZWxzZXtpZighKDE2JnkpKXtpZigwPT0oNjQmeSkpe3Y9bVsoNjU1MzUmdikrKGQmKDE8PHkpLTEpXTtjb250aW51ZSB0fWlmKDMyJnkpe3IubW9kZT0xMjticmVhayBlfWUubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9dz02NTUzNSZ2LCh5Jj0xNSkmJihwPHkmJihkKz16W24rK108PHAscCs9OCksdys9ZCYoMTw8eSktMSxkPj4+PXkscC09eSkscDwxNSYmKGQrPXpbbisrXTw8cCxwKz04LGQrPXpbbisrXTw8cCxwKz04KSx2PV9bZCZiXTtyOmZvcig7Oyl7aWYoZD4+Pj15PXY+Pj4yNCxwLT15LCEoMTYmKHk9dj4+PjE2JjI1NSkpKXtpZigwPT0oNjQmeSkpe3Y9X1soNjU1MzUmdikrKGQmKDE8PHkpLTEpXTtjb250aW51ZSByfWUubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoaz02NTUzNSZ2LHA8KHkmPTE1KSYmKGQrPXpbbisrXTw8cCwocCs9OCk8eSYmKGQrPXpbbisrXTw8cCxwKz04KSksaDwoays9ZCYoMTw8eSktMSkpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgZX1pZihkPj4+PXkscC09eSwoeT1zLWEpPGspe2lmKGw8KHk9ay15KSYmci5zYW5lKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPTMwO2JyZWFrIGV9aWYoUz1jLCh4PTApPT09Zil7aWYoeCs9dS15LHk8dyl7Zm9yKHctPXk7Q1tzKytdPWNbeCsrXSwtLXk7KTt4PXMtayxTPUN9fWVsc2UgaWYoZjx5KXtpZih4Kz11K2YteSwoeS09Zik8dyl7Zm9yKHctPXk7Q1tzKytdPWNbeCsrXSwtLXk7KTtpZih4PTAsZjx3KXtmb3Iody09eT1mO0NbcysrXT1jW3grK10sLS15Oyk7eD1zLWssUz1DfX19ZWxzZSBpZih4Kz1mLXkseTx3KXtmb3Iody09eTtDW3MrK109Y1t4KytdLC0teTspO3g9cy1rLFM9Q31mb3IoOzI8dzspQ1tzKytdPVNbeCsrXSxDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sdy09Mzt3JiYoQ1tzKytdPVNbeCsrXSwxPHcmJihDW3MrK109U1t4KytdKSl9ZWxzZXtmb3IoeD1zLWs7Q1tzKytdPUNbeCsrXSxDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sMjwody09Myk7KTt3JiYoQ1tzKytdPUNbeCsrXSwxPHcmJihDW3MrK109Q1t4KytdKSl9YnJlYWt9fWJyZWFrfX13aGlsZShuPGkmJnM8byk7bi09dz1wPj4zLGQmPSgxPDwocC09dzw8MykpLTEsZS5uZXh0X2luPW4sZS5uZXh0X291dD1zLGUuYXZhaWxfaW49bjxpP2ktbis1OjUtKG4taSksZS5hdmFpbF9vdXQ9czxvP28tcysyNTc6MjU3LShzLW8pLHIuaG9sZD1kLHIuYml0cz1wfX0se31dLDQ5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEk9ZShcIi4uL3V0aWxzL2NvbW1vblwiKSxPPWUoXCIuL2FkbGVyMzJcIiksQj1lKFwiLi9jcmMzMlwiKSxSPWUoXCIuL2luZmZhc3RcIiksVD1lKFwiLi9pbmZ0cmVlc1wiKSxEPTEsRj0yLE49MCxVPS0yLFA9MSxuPTg1MixpPTU5MjtmdW5jdGlvbiBMKGUpe3JldHVybihlPj4+MjQmMjU1KSsoZT4+PjgmNjUyODApKygoNjUyODAmZSk8PDgpKygoMjU1JmUpPDwyNCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgSS5CdWYxNigzMjApLHRoaXMud29yaz1uZXcgSS5CdWYxNigyODgpLHRoaXMubGVuZHluPW51bGwsdGhpcy5kaXN0ZHluPW51bGwsdGhpcy5zYW5lPTAsdGhpcy5iYWNrPTAsdGhpcy53YXM9MH1mdW5jdGlvbiBhKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPyh0PWUuc3RhdGUsZS50b3RhbF9pbj1lLnRvdGFsX291dD10LnRvdGFsPTAsZS5tc2c9XCJcIix0LndyYXAmJihlLmFkbGVyPTEmdC53cmFwKSx0Lm1vZGU9UCx0Lmxhc3Q9MCx0LmhhdmVkaWN0PTAsdC5kbWF4PTMyNzY4LHQuaGVhZD1udWxsLHQuaG9sZD0wLHQuYml0cz0wLHQubGVuY29kZT10LmxlbmR5bj1uZXcgSS5CdWYzMihuKSx0LmRpc3Rjb2RlPXQuZGlzdGR5bj1uZXcgSS5CdWYzMihpKSx0LnNhbmU9MSx0LmJhY2s9LTEsTik6VX1mdW5jdGlvbiBvKGUpe3ZhciB0O3JldHVybiBlJiZlLnN0YXRlPygodD1lLnN0YXRlKS53c2l6ZT0wLHQud2hhdmU9MCx0LnduZXh0PTAsYShlKSk6VX1mdW5jdGlvbiBoKGUsdCl7dmFyIHIsbjtyZXR1cm4gZSYmZS5zdGF0ZT8obj1lLnN0YXRlLHQ8MD8ocj0wLHQ9LXQpOihyPTErKHQ+PjQpLHQ8NDgmJih0Jj0xNSkpLHQmJih0PDh8fDE1PHQpP1U6KG51bGwhPT1uLndpbmRvdyYmbi53Yml0cyE9PXQmJihuLndpbmRvdz1udWxsKSxuLndyYXA9cixuLndiaXRzPXQsbyhlKSkpOlV9ZnVuY3Rpb24gdShlLHQpe3ZhciByLG47cmV0dXJuIGU/KG49bmV3IHMsKGUuc3RhdGU9bikud2luZG93PW51bGwsKHI9aChlLHQpKSE9PU4mJihlLnN0YXRlPW51bGwpLHIpOlV9dmFyIGwsZixjPSEwO2Z1bmN0aW9uIGooZSl7aWYoYyl7dmFyIHQ7Zm9yKGw9bmV3IEkuQnVmMzIoNTEyKSxmPW5ldyBJLkJ1ZjMyKDMyKSx0PTA7dDwxNDQ7KWUubGVuc1t0KytdPTg7Zm9yKDt0PDI1NjspZS5sZW5zW3QrK109OTtmb3IoO3Q8MjgwOyllLmxlbnNbdCsrXT03O2Zvcig7dDwyODg7KWUubGVuc1t0KytdPTg7Zm9yKFQoRCxlLmxlbnMsMCwyODgsbCwwLGUud29yayx7Yml0czo5fSksdD0wO3Q8MzI7KWUubGVuc1t0KytdPTU7VChGLGUubGVucywwLDMyLGYsMCxlLndvcmsse2JpdHM6NX0pLGM9ITF9ZS5sZW5jb2RlPWwsZS5sZW5iaXRzPTksZS5kaXN0Y29kZT1mLGUuZGlzdGJpdHM9NX1mdW5jdGlvbiBaKGUsdCxyLG4pe3ZhciBpLHM9ZS5zdGF0ZTtyZXR1cm4gbnVsbD09PXMud2luZG93JiYocy53c2l6ZT0xPDxzLndiaXRzLHMud25leHQ9MCxzLndoYXZlPTAscy53aW5kb3c9bmV3IEkuQnVmOChzLndzaXplKSksbj49cy53c2l6ZT8oSS5hcnJheVNldChzLndpbmRvdyx0LHItcy53c2l6ZSxzLndzaXplLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihuPChpPXMud3NpemUtcy53bmV4dCkmJihpPW4pLEkuYXJyYXlTZXQocy53aW5kb3csdCxyLW4saSxzLnduZXh0KSwobi09aSk/KEkuYXJyYXlTZXQocy53aW5kb3csdCxyLW4sbiwwKSxzLnduZXh0PW4scy53aGF2ZT1zLndzaXplKToocy53bmV4dCs9aSxzLnduZXh0PT09cy53c2l6ZSYmKHMud25leHQ9MCkscy53aGF2ZTxzLndzaXplJiYocy53aGF2ZSs9aSkpKSwwfXIuaW5mbGF0ZVJlc2V0PW8sci5pbmZsYXRlUmVzZXQyPWgsci5pbmZsYXRlUmVzZXRLZWVwPWEsci5pbmZsYXRlSW5pdD1mdW5jdGlvbihlKXtyZXR1cm4gdShlLDE1KX0sci5pbmZsYXRlSW5pdDI9dSxyLmluZmxhdGU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGkscyxhLG8saCx1LGwsZixjLGQscCxtLF8sZyxiLHYseSx3LGsseCxTLHosQz0wLEU9bmV3IEkuQnVmOCg0KSxBPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XTtpZighZXx8IWUuc3RhdGV8fCFlLm91dHB1dHx8IWUuaW5wdXQmJjAhPT1lLmF2YWlsX2luKXJldHVybiBVOzEyPT09KHI9ZS5zdGF0ZSkubW9kZSYmKHIubW9kZT0xMyksYT1lLm5leHRfb3V0LGk9ZS5vdXRwdXQsaD1lLmF2YWlsX291dCxzPWUubmV4dF9pbixuPWUuaW5wdXQsbz1lLmF2YWlsX2luLHU9ci5ob2xkLGw9ci5iaXRzLGY9byxjPWgseD1OO2U6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgUDppZigwPT09ci53cmFwKXtyLm1vZGU9MTM7YnJlYWt9Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoMiZyLndyYXAmJjM1NjE1PT09dSl7RVtyLmNoZWNrPTBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSxsPXU9MCxyLm1vZGU9MjticmVha31pZihyLmZsYWdzPTAsci5oZWFkJiYoci5oZWFkLmRvbmU9ITEpLCEoMSZyLndyYXApfHwoKCgyNTUmdSk8PDgpKyh1Pj44KSklMzEpe2UubXNnPVwiaW5jb3JyZWN0IGhlYWRlciBjaGVja1wiLHIubW9kZT0zMDticmVha31pZig4IT0oMTUmdSkpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYobC09NCxrPTgrKDE1Jih1Pj4+PTQpKSwwPT09ci53Yml0cylyLndiaXRzPWs7ZWxzZSBpZihrPnIud2JpdHMpe2UubXNnPVwiaW52YWxpZCB3aW5kb3cgc2l6ZVwiLHIubW9kZT0zMDticmVha31yLmRtYXg9MTw8ayxlLmFkbGVyPXIuY2hlY2s9MSxyLm1vZGU9NTEyJnU/MTA6MTIsbD11PTA7YnJlYWs7Y2FzZSAyOmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHIuZmxhZ3M9dSw4IT0oMjU1JnIuZmxhZ3MpKXtlLm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsci5tb2RlPTMwO2JyZWFrfWlmKDU3MzQ0JnIuZmxhZ3Mpe2UubXNnPVwidW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0XCIsci5tb2RlPTMwO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PXU+PjgmMSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTM7Y2FzZSAzOmZvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC50aW1lPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxFWzJdPXU+Pj4xNiYyNTUsRVszXT11Pj4+MjQmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsNCwwKSksbD11PTAsci5tb2RlPTQ7Y2FzZSA0OmZvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1JnUsci5oZWFkLm9zPXU+PjgpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wLHIubW9kZT01O2Nhc2UgNTppZigxMDI0JnIuZmxhZ3Mpe2Zvcig7bDwxNjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIubGVuZ3RoPXUsci5oZWFkJiYoci5oZWFkLmV4dHJhX2xlbj11KSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MH1lbHNlIHIuaGVhZCYmKHIuaGVhZC5leHRyYT1udWxsKTtyLm1vZGU9NjtjYXNlIDY6aWYoMTAyNCZyLmZsYWdzJiYobzwoZD1yLmxlbmd0aCkmJihkPW8pLGQmJihyLmhlYWQmJihrPXIuaGVhZC5leHRyYV9sZW4tci5sZW5ndGgsci5oZWFkLmV4dHJhfHwoci5oZWFkLmV4dHJhPW5ldyBBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksSS5hcnJheVNldChyLmhlYWQuZXh0cmEsbixzLGQsaykpLDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssbixkLHMpKSxvLT1kLHMrPWQsci5sZW5ndGgtPWQpLHIubGVuZ3RoKSlicmVhayBlO3IubGVuZ3RoPTAsci5tb2RlPTc7Y2FzZSA3OmlmKDIwNDgmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgZTtmb3IoZD0wO2s9bltzK2QrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZkPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLG4sZCxzKSksby09ZCxzKz1kLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5uYW1lPW51bGwpO3IubGVuZ3RoPTAsci5tb2RlPTg7Y2FzZSA4OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PW8pYnJlYWsgZTtmb3IoZD0wO2s9bltzK2QrK10sci5oZWFkJiZrJiZyLmxlbmd0aDw2NTUzNiYmKHIuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGspKSxrJiZkPG87KTtpZig1MTImci5mbGFncyYmKHIuY2hlY2s9QihyLmNoZWNrLG4sZCxzKSksby09ZCxzKz1kLGspYnJlYWsgZX1lbHNlIHIuaGVhZCYmKHIuaGVhZC5jb21tZW50PW51bGwpO3IubW9kZT05O2Nhc2UgOTppZig1MTImci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYodSE9PSg2NTUzNSZyLmNoZWNrKSl7ZS5tc2c9XCJoZWFkZXIgY3JjIG1pc21hdGNoXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksZS5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPTEyO2JyZWFrO2Nhc2UgMTA6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9ZS5hZGxlcj1yLmNoZWNrPUwodSksbD11PTAsci5tb2RlPTExO2Nhc2UgMTE6aWYoMD09PXIuaGF2ZWRpY3QpcmV0dXJuIGUubmV4dF9vdXQ9YSxlLmF2YWlsX291dD1oLGUubmV4dF9pbj1zLGUuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwyO2UuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT0xMjtjYXNlIDEyOmlmKDU9PT10fHw2PT09dClicmVhayBlO2Nhc2UgMTM6aWYoci5sYXN0KXt1Pj4+PTcmbCxsLT03Jmwsci5tb2RlPTI3O2JyZWFrfWZvcig7bDwzOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9c3dpdGNoKHIubGFzdD0xJnUsbC09MSwzJih1Pj4+PTEpKXtjYXNlIDA6ci5tb2RlPTE0O2JyZWFrO2Nhc2UgMTppZihqKHIpLHIubW9kZT0yMCw2IT09dClicmVhazt1Pj4+PTIsbC09MjticmVhayBlO2Nhc2UgMjpyLm1vZGU9MTc7YnJlYWs7Y2FzZSAzOmUubXNnPVwiaW52YWxpZCBibG9jayB0eXBlXCIsci5tb2RlPTMwfXU+Pj49MixsLT0yO2JyZWFrO2Nhc2UgMTQ6Zm9yKHU+Pj49NyZsLGwtPTcmbDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoKDY1NTM1JnUpIT0odT4+PjE2XjY1NTM1KSl7ZS5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubGVuZ3RoPTY1NTM1JnUsbD11PTAsci5tb2RlPTE1LDY9PT10KWJyZWFrIGU7Y2FzZSAxNTpyLm1vZGU9MTY7Y2FzZSAxNjppZihkPXIubGVuZ3RoKXtpZihvPGQmJihkPW8pLGg8ZCYmKGQ9aCksMD09PWQpYnJlYWsgZTtJLmFycmF5U2V0KGksbixzLGQsYSksby09ZCxzKz1kLGgtPWQsYSs9ZCxyLmxlbmd0aC09ZDticmVha31yLm1vZGU9MTI7YnJlYWs7Y2FzZSAxNzpmb3IoO2w8MTQ7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZihyLm5sZW49MjU3KygzMSZ1KSx1Pj4+PTUsbC09NSxyLm5kaXN0PTErKDMxJnUpLHU+Pj49NSxsLT01LHIubmNvZGU9NCsoMTUmdSksdT4+Pj00LGwtPTQsMjg2PHIubmxlbnx8MzA8ci5uZGlzdCl7ZS5tc2c9XCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTg7Y2FzZSAxODpmb3IoO3IuaGF2ZTxyLm5jb2RlOyl7Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1yLmxlbnNbQVtyLmhhdmUrK11dPTcmdSx1Pj4+PTMsbC09M31mb3IoO3IuaGF2ZTwxOTspci5sZW5zW0Fbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9NyxTPXtiaXRzOnIubGVuYml0c30seD1UKDAsci5sZW5zLDAsMTksci5sZW5jb2RlLDAsci53b3JrLFMpLHIubGVuYml0cz1TLmJpdHMseCl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE5O2Nhc2UgMTk6Zm9yKDtyLmhhdmU8ci5ubGVuK3IubmRpc3Q7KXtmb3IoO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoYjwxNil1Pj4+PV8sbC09XyxyLmxlbnNbci5oYXZlKytdPWI7ZWxzZXtpZigxNj09PWIpe2Zvcih6PV8rMjtsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1pZih1Pj4+PV8sbC09XywwPT09ci5oYXZlKXtlLm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9az1yLmxlbnNbci5oYXZlLTFdLGQ9MysoMyZ1KSx1Pj4+PTIsbC09Mn1lbHNlIGlmKDE3PT09Yil7Zm9yKHo9XyszO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWwtPV8saz0wLGQ9MysoNyYodT4+Pj1fKSksdT4+Pj0zLGwtPTN9ZWxzZXtmb3Ioej1fKzc7bDx6Oyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9bC09XyxrPTAsZD0xMSsoMTI3Jih1Pj4+PV8pKSx1Pj4+PTcsbC09N31pZihyLmhhdmUrZD5yLm5sZW4rci5uZGlzdCl7ZS5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPTMwO2JyZWFrfWZvcig7ZC0tOylyLmxlbnNbci5oYXZlKytdPWt9fWlmKDMwPT09ci5tb2RlKWJyZWFrO2lmKDA9PT1yLmxlbnNbMjU2XSl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgLS0gbWlzc2luZyBlbmQtb2YtYmxvY2tcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5iaXRzPTksUz17Yml0czpyLmxlbmJpdHN9LHg9VChELHIubGVucywwLHIubmxlbixyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sUz17Yml0czpyLmRpc3RiaXRzfSx4PVQoRixyLmxlbnMsci5ubGVuLHIubmRpc3Qsci5kaXN0Y29kZSwwLHIud29yayxTKSxyLmRpc3RiaXRzPVMuYml0cyx4KXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT0zMDticmVha31pZihyLm1vZGU9MjAsNj09PXQpYnJlYWsgZTtjYXNlIDIwOnIubW9kZT0yMTtjYXNlIDIxOmlmKDY8PW8mJjI1ODw9aCl7ZS5uZXh0X291dD1hLGUuYXZhaWxfb3V0PWgsZS5uZXh0X2luPXMsZS5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLFIoZSxjKSxhPWUubmV4dF9vdXQsaT1lLm91dHB1dCxoPWUuYXZhaWxfb3V0LHM9ZS5uZXh0X2luLG49ZS5pbnB1dCxvPWUuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsMTI9PT1yLm1vZGUmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDtnPShDPXIubGVuY29kZVt1JigxPDxyLmxlbmJpdHMpLTFdKT4+PjE2JjI1NSxiPTY1NTM1JkMsISgoXz1DPj4+MjQpPD1sKTspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKGcmJjA9PSgyNDAmZykpe2Zvcih2PV8seT1nLHc9YjtnPShDPXIubGVuY29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9XyxyLmxlbmd0aD1iLDA9PT1nKXtyLm1vZGU9MjY7YnJlYWt9aWYoMzImZyl7ci5iYWNrPS0xLHIubW9kZT0xMjticmVha31pZig2NCZnKXtlLm1zZz1cImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiLHIubW9kZT0zMDticmVha31yLmV4dHJhPTE1Jmcsci5tb2RlPTIyO2Nhc2UgMjI6aWYoci5leHRyYSl7Zm9yKHo9ci5leHRyYTtsPHo7KXtpZigwPT09bylicmVhayBlO28tLSx1Kz1uW3MrK108PGwsbCs9OH1yLmxlbmd0aCs9dSYoMTw8ci5leHRyYSktMSx1Pj4+PXIuZXh0cmEsbC09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTIzO2Nhc2UgMjM6Zm9yKDtnPShDPXIuZGlzdGNvZGVbdSYoMTw8ci5kaXN0Yml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9aWYoMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5kaXN0Y29kZVt3KygodSYoMTw8dit5KS0xKT4+dildKT4+PjE2JjI1NSxiPTY1NTM1JkMsISh2KyhfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgZTtvLS0sdSs9bltzKytdPDxsLGwrPTh9dT4+Pj12LGwtPXYsci5iYWNrKz12fWlmKHU+Pj49XyxsLT1fLHIuYmFjays9Xyw2NCZnKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT0zMDticmVha31yLm9mZnNldD1iLHIuZXh0cmE9MTUmZyxyLm1vZGU9MjQ7Y2FzZSAyNDppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fXIub2Zmc2V0Kz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1pZihyLm9mZnNldD5yLmRtYXgpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9ci5tb2RlPTI1O2Nhc2UgMjU6aWYoMD09PWgpYnJlYWsgZTtpZihkPWMtaCxyLm9mZnNldD5kKXtpZigoZD1yLm9mZnNldC1kKT5yLndoYXZlJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWt9cD1kPnIud25leHQ/KGQtPXIud25leHQsci53c2l6ZS1kKTpyLnduZXh0LWQsZD5yLmxlbmd0aCYmKGQ9ci5sZW5ndGgpLG09ci53aW5kb3d9ZWxzZSBtPWkscD1hLXIub2Zmc2V0LGQ9ci5sZW5ndGg7Zm9yKGg8ZCYmKGQ9aCksaC09ZCxyLmxlbmd0aC09ZDtpW2ErK109bVtwKytdLC0tZDspOzA9PT1yLmxlbmd0aCYmKHIubW9kZT0yMSk7YnJlYWs7Y2FzZSAyNjppZigwPT09aClicmVhayBlO2lbYSsrXT1yLmxlbmd0aCxoLS0sci5tb2RlPTIxO2JyZWFrO2Nhc2UgMjc6aWYoci53cmFwKXtmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayBlO28tLSx1fD1uW3MrK108PGwsbCs9OH1pZihjLT1oLGUudG90YWxfb3V0Kz1jLHIudG90YWwrPWMsYyYmKGUuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP0Ioci5jaGVjayxpLGMsYS1jKTpPKHIuY2hlY2ssaSxjLGEtYykpLGM9aCwoci5mbGFncz91OkwodSkpIT09ci5jaGVjayl7ZS5tc2c9XCJpbmNvcnJlY3QgZGF0YSBjaGVja1wiLHIubW9kZT0zMDticmVha31sPXU9MH1yLm1vZGU9Mjg7Y2FzZSAyODppZihyLndyYXAmJnIuZmxhZ3Mpe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIGU7by0tLHUrPW5bcysrXTw8bCxsKz04fWlmKHUhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7ZS5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yOTtjYXNlIDI5Ong9MTticmVhayBlO2Nhc2UgMzA6eD0tMzticmVhayBlO2Nhc2UgMzE6cmV0dXJuLTQ7Y2FzZSAzMjpkZWZhdWx0OnJldHVybiBVfXJldHVybiBlLm5leHRfb3V0PWEsZS5hdmFpbF9vdXQ9aCxlLm5leHRfaW49cyxlLmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsKHIud3NpemV8fGMhPT1lLmF2YWlsX291dCYmci5tb2RlPDMwJiYoci5tb2RlPDI3fHw0IT09dCkpJiZaKGUsZS5vdXRwdXQsZS5uZXh0X291dCxjLWUuYXZhaWxfb3V0KT8oci5tb2RlPTMxLC00KTooZi09ZS5hdmFpbF9pbixjLT1lLmF2YWlsX291dCxlLnRvdGFsX2luKz1mLGUudG90YWxfb3V0Kz1jLHIudG90YWwrPWMsci53cmFwJiZjJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLGksYyxlLm5leHRfb3V0LWMpOk8oci5jaGVjayxpLGMsZS5uZXh0X291dC1jKSksZS5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKDEyPT09ci5tb2RlPzEyODowKSsoMjA9PT1yLm1vZGV8fDE1PT09ci5tb2RlPzI1NjowKSwoMD09ZiYmMD09PWN8fDQ9PT10KSYmeD09PU4mJih4PS01KSx4KX0sci5pbmZsYXRlRW5kPWZ1bmN0aW9uKGUpe2lmKCFlfHwhZS5zdGF0ZSlyZXR1cm4gVTt2YXIgdD1lLnN0YXRlO3JldHVybiB0LndpbmRvdyYmKHQud2luZG93PW51bGwpLGUuc3RhdGU9bnVsbCxOfSxyLmluZmxhdGVHZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gZSYmZS5zdGF0ZT8wPT0oMiYocj1lLnN0YXRlKS53cmFwKT9VOigoci5oZWFkPXQpLmRvbmU9ITEsTik6VX0sci5pbmZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbihlLHQpe3ZhciByLG49dC5sZW5ndGg7cmV0dXJuIGUmJmUuc3RhdGU/MCE9PShyPWUuc3RhdGUpLndyYXAmJjExIT09ci5tb2RlP1U6MTE9PT1yLm1vZGUmJk8oMSx0LG4sMCkhPT1yLmNoZWNrPy0zOlooZSx0LG4sbik/KHIubW9kZT0zMSwtNCk6KHIuaGF2ZWRpY3Q9MSxOKTpVfSxyLmluZmxhdGVJbmZvPVwicGFrbyBpbmZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwifSx7XCIuLi91dGlscy9jb21tb25cIjo0MSxcIi4vYWRsZXIzMlwiOjQzLFwiLi9jcmMzMlwiOjQ1LFwiLi9pbmZmYXN0XCI6NDgsXCIuL2luZnRyZWVzXCI6NTB9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBEPWUoXCIuLi91dGlscy9jb21tb25cIiksRj1bMyw0LDUsNiw3LDgsOSwxMCwxMSwxMywxNSwxNywxOSwyMywyNywzMSwzNSw0Myw1MSw1OSw2Nyw4Myw5OSwxMTUsMTMxLDE2MywxOTUsMjI3LDI1OCwwLDBdLE49WzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSxVPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzcsMCwwXSxQPVsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF07dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4saSxzLGEsbyl7dmFyIGgsdSxsLGYsYyxkLHAsbSxfLGc9by5iaXRzLGI9MCx2PTAseT0wLHc9MCxrPTAseD0wLFM9MCx6PTAsQz0wLEU9MCxBPW51bGwsST0wLE89bmV3IEQuQnVmMTYoMTYpLEI9bmV3IEQuQnVmMTYoMTYpLFI9bnVsbCxUPTA7Zm9yKGI9MDtiPD0xNTtiKyspT1tiXT0wO2Zvcih2PTA7djxuO3YrKylPW3Rbcit2XV0rKztmb3Ioaz1nLHc9MTU7MTw9dyYmMD09PU9bd107dy0tKTtpZih3PGsmJihrPXcpLDA9PT13KXJldHVybiBpW3MrK109MjA5NzE1MjAsaVtzKytdPTIwOTcxNTIwLG8uYml0cz0xLDA7Zm9yKHk9MTt5PHcmJjA9PT1PW3ldO3krKyk7Zm9yKGs8eSYmKGs9eSksYj16PTE7Yjw9MTU7YisrKWlmKHo8PD0xLCh6LT1PW2JdKTwwKXJldHVybi0xO2lmKDA8eiYmKDA9PT1lfHwxIT09dykpcmV0dXJuLTE7Zm9yKEJbMV09MCxiPTE7YjwxNTtiKyspQltiKzFdPUJbYl0rT1tiXTtmb3Iodj0wO3Y8bjt2KyspMCE9PXRbcit2XSYmKGFbQlt0W3Irdl1dKytdPXYpO2lmKGQ9MD09PWU/KEE9Uj1hLDE5KToxPT09ZT8oQT1GLEktPTI1NyxSPU4sVC09MjU3LDI1Nik6KEE9VSxSPVAsLTEpLGI9eSxjPXMsUz12PUU9MCxsPS0xLGY9KEM9MTw8KHg9aykpLTEsMT09PWUmJjg1MjxDfHwyPT09ZSYmNTkyPEMpcmV0dXJuIDE7Zm9yKDs7KXtmb3IocD1iLVMsXz1hW3ZdPGQ/KG09MCxhW3ZdKTphW3ZdPmQ/KG09UltUK2Fbdl1dLEFbSSthW3ZdXSk6KG09OTYsMCksaD0xPDxiLVMseT11PTE8PHg7aVtjKyhFPj5TKSsodS09aCldPXA8PDI0fG08PDE2fF98MCwwIT09dTspO2ZvcihoPTE8PGItMTtFJmg7KWg+Pj0xO2lmKDAhPT1oPyhFJj1oLTEsRSs9aCk6RT0wLHYrKywwPT0tLU9bYl0pe2lmKGI9PT13KWJyZWFrO2I9dFtyK2Fbdl1dfWlmKGs8YiYmKEUmZikhPT1sKXtmb3IoMD09PVMmJihTPWspLGMrPXksej0xPDwoeD1iLVMpO3grUzx3JiYhKCh6LT1PW3grU10pPD0wKTspeCsrLHo8PD0xO2lmKEMrPTE8PHgsMT09PWUmJjg1MjxDfHwyPT09ZSYmNTkyPEMpcmV0dXJuIDE7aVtsPUUmZl09azw8MjR8eDw8MTZ8Yy1zfDB9fXJldHVybiAwIT09RSYmKGlbYytFXT1iLVM8PDI0fDY0PDwxNnwwKSxvLmJpdHM9aywwfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17MjpcIm5lZWQgZGljdGlvbmFyeVwiLDE6XCJzdHJlYW0gZW5kXCIsMDpcIlwiLFwiLTFcIjpcImZpbGUgZXJyb3JcIixcIi0yXCI6XCJzdHJlYW0gZXJyb3JcIixcIi0zXCI6XCJkYXRhIGVycm9yXCIsXCItNFwiOlwiaW5zdWZmaWNpZW50IG1lbW9yeVwiLFwiLTVcIjpcImJ1ZmZlciBlcnJvclwiLFwiLTZcIjpcImluY29tcGF0aWJsZSB2ZXJzaW9uXCJ9fSx7fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1lKFwiLi4vdXRpbHMvY29tbW9uXCIpLG89MCxoPTE7ZnVuY3Rpb24gbihlKXtmb3IodmFyIHQ9ZS5sZW5ndGg7MDw9LS10OyllW3RdPTB9dmFyIHM9MCxhPTI5LHU9MjU2LGw9dSsxK2EsZj0zMCxjPTE5LF89MipsKzEsZz0xNSxkPTE2LHA9NyxtPTI1NixiPTE2LHY9MTcseT0xOCx3PVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdLGs9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTMsMTNdLHg9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLFM9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLHo9bmV3IEFycmF5KDIqKGwrMikpO24oeik7dmFyIEM9bmV3IEFycmF5KDIqZik7bihDKTt2YXIgRT1uZXcgQXJyYXkoNTEyKTtuKEUpO3ZhciBBPW5ldyBBcnJheSgyNTYpO24oQSk7dmFyIEk9bmV3IEFycmF5KGEpO24oSSk7dmFyIE8sQixSLFQ9bmV3IEFycmF5KGYpO2Z1bmN0aW9uIEQoZSx0LHIsbixpKXt0aGlzLnN0YXRpY190cmVlPWUsdGhpcy5leHRyYV9iaXRzPXQsdGhpcy5leHRyYV9iYXNlPXIsdGhpcy5lbGVtcz1uLHRoaXMubWF4X2xlbmd0aD1pLHRoaXMuaGFzX3N0cmVlPWUmJmUubGVuZ3RofWZ1bmN0aW9uIEYoZSx0KXt0aGlzLmR5bl90cmVlPWUsdGhpcy5tYXhfY29kZT0wLHRoaXMuc3RhdF9kZXNjPXR9ZnVuY3Rpb24gTihlKXtyZXR1cm4gZTwyNTY/RVtlXTpFWzI1NisoZT4+PjcpXX1mdW5jdGlvbiBVKGUsdCl7ZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnQsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109dD4+PjgmMjU1fWZ1bmN0aW9uIFAoZSx0LHIpe2UuYmlfdmFsaWQ+ZC1yPyhlLmJpX2J1Znw9dDw8ZS5iaV92YWxpZCY2NTUzNSxVKGUsZS5iaV9idWYpLGUuYmlfYnVmPXQ+PmQtZS5iaV92YWxpZCxlLmJpX3ZhbGlkKz1yLWQpOihlLmJpX2J1Znw9dDw8ZS5iaV92YWxpZCY2NTUzNSxlLmJpX3ZhbGlkKz1yKX1mdW5jdGlvbiBMKGUsdCxyKXtQKGUsclsyKnRdLHJbMip0KzFdKX1mdW5jdGlvbiBqKGUsdCl7Zm9yKHZhciByPTA7cnw9MSZlLGU+Pj49MSxyPDw9MSwwPC0tdDspO3JldHVybiByPj4+MX1mdW5jdGlvbiBaKGUsdCxyKXt2YXIgbixpLHM9bmV3IEFycmF5KGcrMSksYT0wO2ZvcihuPTE7bjw9ZztuKyspc1tuXT1hPWErcltuLTFdPDwxO2ZvcihpPTA7aTw9dDtpKyspe3ZhciBvPWVbMippKzFdOzAhPT1vJiYoZVsyKmldPWooc1tvXSsrLG8pKX19ZnVuY3Rpb24gVyhlKXt2YXIgdDtmb3IodD0wO3Q8bDt0KyspZS5keW5fbHRyZWVbMip0XT0wO2Zvcih0PTA7dDxmO3QrKyllLmR5bl9kdHJlZVsyKnRdPTA7Zm9yKHQ9MDt0PGM7dCsrKWUuYmxfdHJlZVsyKnRdPTA7ZS5keW5fbHRyZWVbMiptXT0xLGUub3B0X2xlbj1lLnN0YXRpY19sZW49MCxlLmxhc3RfbGl0PWUubWF0Y2hlcz0wfWZ1bmN0aW9uIE0oZSl7ODxlLmJpX3ZhbGlkP1UoZSxlLmJpX2J1Zik6MDxlLmJpX3ZhbGlkJiYoZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109ZS5iaV9idWYpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wfWZ1bmN0aW9uIEgoZSx0LHIsbil7dmFyIGk9Mip0LHM9MipyO3JldHVybiBlW2ldPGVbc118fGVbaV09PT1lW3NdJiZuW3RdPD1uW3JdfWZ1bmN0aW9uIEcoZSx0LHIpe2Zvcih2YXIgbj1lLmhlYXBbcl0saT1yPDwxO2k8PWUuaGVhcF9sZW4mJihpPGUuaGVhcF9sZW4mJkgodCxlLmhlYXBbaSsxXSxlLmhlYXBbaV0sZS5kZXB0aCkmJmkrKywhSCh0LG4sZS5oZWFwW2ldLGUuZGVwdGgpKTspZS5oZWFwW3JdPWUuaGVhcFtpXSxyPWksaTw8PTE7ZS5oZWFwW3JdPW59ZnVuY3Rpb24gSyhlLHQscil7dmFyIG4saSxzLGEsbz0wO2lmKDAhPT1lLmxhc3RfbGl0KWZvcig7bj1lLnBlbmRpbmdfYnVmW2UuZF9idWYrMipvXTw8OHxlLnBlbmRpbmdfYnVmW2UuZF9idWYrMipvKzFdLGk9ZS5wZW5kaW5nX2J1ZltlLmxfYnVmK29dLG8rKywwPT09bj9MKGUsaSx0KTooTChlLChzPUFbaV0pK3UrMSx0KSwwIT09KGE9d1tzXSkmJlAoZSxpLT1JW3NdLGEpLEwoZSxzPU4oLS1uKSxyKSwwIT09KGE9a1tzXSkmJlAoZSxuLT1UW3NdLGEpKSxvPGUubGFzdF9saXQ7KTtMKGUsbSx0KX1mdW5jdGlvbiBZKGUsdCl7dmFyIHIsbixpLHM9dC5keW5fdHJlZSxhPXQuc3RhdF9kZXNjLnN0YXRpY190cmVlLG89dC5zdGF0X2Rlc2MuaGFzX3N0cmVlLGg9dC5zdGF0X2Rlc2MuZWxlbXMsdT0tMTtmb3IoZS5oZWFwX2xlbj0wLGUuaGVhcF9tYXg9XyxyPTA7cjxoO3IrKykwIT09c1syKnJdPyhlLmhlYXBbKytlLmhlYXBfbGVuXT11PXIsZS5kZXB0aFtyXT0wKTpzWzIqcisxXT0wO2Zvcig7ZS5oZWFwX2xlbjwyOylzWzIqKGk9ZS5oZWFwWysrZS5oZWFwX2xlbl09dTwyPysrdTowKV09MSxlLmRlcHRoW2ldPTAsZS5vcHRfbGVuLS0sbyYmKGUuc3RhdGljX2xlbi09YVsyKmkrMV0pO2Zvcih0Lm1heF9jb2RlPXUscj1lLmhlYXBfbGVuPj4xOzE8PXI7ci0tKUcoZSxzLHIpO2ZvcihpPWg7cj1lLmhlYXBbMV0sZS5oZWFwWzFdPWUuaGVhcFtlLmhlYXBfbGVuLS1dLEcoZSxzLDEpLG49ZS5oZWFwWzFdLGUuaGVhcFstLWUuaGVhcF9tYXhdPXIsZS5oZWFwWy0tZS5oZWFwX21heF09bixzWzIqaV09c1syKnJdK3NbMipuXSxlLmRlcHRoW2ldPShlLmRlcHRoW3JdPj1lLmRlcHRoW25dP2UuZGVwdGhbcl06ZS5kZXB0aFtuXSkrMSxzWzIqcisxXT1zWzIqbisxXT1pLGUuaGVhcFsxXT1pKyssRyhlLHMsMSksMjw9ZS5oZWFwX2xlbjspO2UuaGVhcFstLWUuaGVhcF9tYXhdPWUuaGVhcFsxXSxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxzLGEsbyxoPXQuZHluX3RyZWUsdT10Lm1heF9jb2RlLGw9dC5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsZj10LnN0YXRfZGVzYy5oYXNfc3RyZWUsYz10LnN0YXRfZGVzYy5leHRyYV9iaXRzLGQ9dC5zdGF0X2Rlc2MuZXh0cmFfYmFzZSxwPXQuc3RhdF9kZXNjLm1heF9sZW5ndGgsbT0wO2ZvcihzPTA7czw9ZztzKyspZS5ibF9jb3VudFtzXT0wO2ZvcihoWzIqZS5oZWFwW2UuaGVhcF9tYXhdKzFdPTAscj1lLmhlYXBfbWF4KzE7cjxfO3IrKylwPChzPWhbMipoWzIqKG49ZS5oZWFwW3JdKSsxXSsxXSsxKSYmKHM9cCxtKyspLGhbMipuKzFdPXMsdTxufHwoZS5ibF9jb3VudFtzXSsrLGE9MCxkPD1uJiYoYT1jW24tZF0pLG89aFsyKm5dLGUub3B0X2xlbis9byoocythKSxmJiYoZS5zdGF0aWNfbGVuKz1vKihsWzIqbisxXSthKSkpO2lmKDAhPT1tKXtkb3tmb3Iocz1wLTE7MD09PWUuYmxfY291bnRbc107KXMtLTtlLmJsX2NvdW50W3NdLS0sZS5ibF9jb3VudFtzKzFdKz0yLGUuYmxfY291bnRbcF0tLSxtLT0yfXdoaWxlKDA8bSk7Zm9yKHM9cDswIT09cztzLS0pZm9yKG49ZS5ibF9jb3VudFtzXTswIT09bjspdTwoaT1lLmhlYXBbLS1yXSl8fChoWzIqaSsxXSE9PXMmJihlLm9wdF9sZW4rPShzLWhbMippKzFdKSpoWzIqaV0saFsyKmkrMV09cyksbi0tKX19KGUsdCksWihzLHUsZS5ibF9jb3VudCl9ZnVuY3Rpb24gWChlLHQscil7dmFyIG4saSxzPS0xLGE9dFsxXSxvPTAsaD03LHU9NDtmb3IoMD09PWEmJihoPTEzOCx1PTMpLHRbMioocisxKSsxXT02NTUzNSxuPTA7bjw9cjtuKyspaT1hLGE9dFsyKihuKzEpKzFdLCsrbzxoJiZpPT09YXx8KG88dT9lLmJsX3RyZWVbMippXSs9bzowIT09aT8oaSE9PXMmJmUuYmxfdHJlZVsyKmldKyssZS5ibF90cmVlWzIqYl0rKyk6bzw9MTA/ZS5ibF90cmVlWzIqdl0rKzplLmJsX3RyZWVbMip5XSsrLHM9aSx1PShvPTApPT09YT8oaD0xMzgsMyk6aT09PWE/KGg9NiwzKTooaD03LDQpKX1mdW5jdGlvbiBWKGUsdCxyKXt2YXIgbixpLHM9LTEsYT10WzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9Myksbj0wO248PXI7bisrKWlmKGk9YSxhPXRbMioobisxKSsxXSwhKCsrbzxoJiZpPT09YSkpe2lmKG88dSlmb3IoO0woZSxpLGUuYmxfdHJlZSksMCE9LS1vOyk7ZWxzZSAwIT09aT8oaSE9PXMmJihMKGUsaSxlLmJsX3RyZWUpLG8tLSksTChlLGIsZS5ibF90cmVlKSxQKGUsby0zLDIpKTpvPD0xMD8oTChlLHYsZS5ibF90cmVlKSxQKGUsby0zLDMpKTooTChlLHksZS5ibF90cmVlKSxQKGUsby0xMSw3KSk7cz1pLHU9KG89MCk9PT1hPyhoPTEzOCwzKTppPT09YT8oaD02LDMpOihoPTcsNCl9fW4oVCk7dmFyIHE9ITE7ZnVuY3Rpb24gSihlLHQscixuKXtQKGUsKHM8PDEpKyhuPzE6MCksMyksZnVuY3Rpb24oZSx0LHIsbil7TShlKSxuJiYoVShlLHIpLFUoZSx+cikpLGkuYXJyYXlTZXQoZS5wZW5kaW5nX2J1ZixlLndpbmRvdyx0LHIsZS5wZW5kaW5nKSxlLnBlbmRpbmcrPXJ9KGUsdCxyLCEwKX1yLl90cl9pbml0PWZ1bmN0aW9uKGUpe3F8fChmdW5jdGlvbigpe3ZhciBlLHQscixuLGkscz1uZXcgQXJyYXkoZysxKTtmb3Iobj1yPTA7bjxhLTE7bisrKWZvcihJW25dPXIsZT0wO2U8MTw8d1tuXTtlKyspQVtyKytdPW47Zm9yKEFbci0xXT1uLG49aT0wO248MTY7bisrKWZvcihUW25dPWksZT0wO2U8MTw8a1tuXTtlKyspRVtpKytdPW47Zm9yKGk+Pj03O248ZjtuKyspZm9yKFRbbl09aTw8NyxlPTA7ZTwxPDxrW25dLTc7ZSsrKUVbMjU2K2krK109bjtmb3IodD0wO3Q8PWc7dCsrKXNbdF09MDtmb3IoZT0wO2U8PTE0MzspelsyKmUrMV09OCxlKyssc1s4XSsrO2Zvcig7ZTw9MjU1Oyl6WzIqZSsxXT05LGUrKyxzWzldKys7Zm9yKDtlPD0yNzk7KXpbMiplKzFdPTcsZSsrLHNbN10rKztmb3IoO2U8PTI4NzspelsyKmUrMV09OCxlKyssc1s4XSsrO2ZvcihaKHosbCsxLHMpLGU9MDtlPGY7ZSsrKUNbMiplKzFdPTUsQ1syKmVdPWooZSw1KTtPPW5ldyBEKHosdyx1KzEsbCxnKSxCPW5ldyBEKEMsaywwLGYsZyksUj1uZXcgRChuZXcgQXJyYXkoMCkseCwwLGMscCl9KCkscT0hMCksZS5sX2Rlc2M9bmV3IEYoZS5keW5fbHRyZWUsTyksZS5kX2Rlc2M9bmV3IEYoZS5keW5fZHRyZWUsQiksZS5ibF9kZXNjPW5ldyBGKGUuYmxfdHJlZSxSKSxlLmJpX2J1Zj0wLGUuYmlfdmFsaWQ9MCxXKGUpfSxyLl90cl9zdG9yZWRfYmxvY2s9SixyLl90cl9mbHVzaF9ibG9jaz1mdW5jdGlvbihlLHQscixuKXt2YXIgaSxzLGE9MDswPGUubGV2ZWw/KDI9PT1lLnN0cm0uZGF0YV90eXBlJiYoZS5zdHJtLmRhdGFfdHlwZT1mdW5jdGlvbihlKXt2YXIgdCxyPTQwOTM2MjQ0NDc7Zm9yKHQ9MDt0PD0zMTt0Kysscj4+Pj0xKWlmKDEmciYmMCE9PWUuZHluX2x0cmVlWzIqdF0pcmV0dXJuIG87aWYoMCE9PWUuZHluX2x0cmVlWzE4XXx8MCE9PWUuZHluX2x0cmVlWzIwXXx8MCE9PWUuZHluX2x0cmVlWzI2XSlyZXR1cm4gaDtmb3IodD0zMjt0PHU7dCsrKWlmKDAhPT1lLmR5bl9sdHJlZVsyKnRdKXJldHVybiBoO3JldHVybiBvfShlKSksWShlLGUubF9kZXNjKSxZKGUsZS5kX2Rlc2MpLGE9ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKFgoZSxlLmR5bl9sdHJlZSxlLmxfZGVzYy5tYXhfY29kZSksWChlLGUuZHluX2R0cmVlLGUuZF9kZXNjLm1heF9jb2RlKSxZKGUsZS5ibF9kZXNjKSx0PWMtMTszPD10JiYwPT09ZS5ibF90cmVlWzIqU1t0XSsxXTt0LS0pO3JldHVybiBlLm9wdF9sZW4rPTMqKHQrMSkrNSs1KzQsdH0oZSksaT1lLm9wdF9sZW4rMys3Pj4+Mywocz1lLnN0YXRpY19sZW4rMys3Pj4+Myk8PWkmJihpPXMpKTppPXM9cis1LHIrNDw9aSYmLTEhPT10P0ooZSx0LHIsbik6ND09PWUuc3RyYXRlZ3l8fHM9PT1pPyhQKGUsMisobj8xOjApLDMpLEsoZSx6LEMpKTooUChlLDQrKG4/MTowKSwzKSxmdW5jdGlvbihlLHQscixuKXt2YXIgaTtmb3IoUChlLHQtMjU3LDUpLFAoZSxyLTEsNSksUChlLG4tNCw0KSxpPTA7aTxuO2krKylQKGUsZS5ibF90cmVlWzIqU1tpXSsxXSwzKTtWKGUsZS5keW5fbHRyZWUsdC0xKSxWKGUsZS5keW5fZHRyZWUsci0xKX0oZSxlLmxfZGVzYy5tYXhfY29kZSsxLGUuZF9kZXNjLm1heF9jb2RlKzEsYSsxKSxLKGUsZS5keW5fbHRyZWUsZS5keW5fZHRyZWUpKSxXKGUpLG4mJk0oZSl9LHIuX3RyX3RhbGx5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5wZW5kaW5nX2J1ZltlLmRfYnVmKzIqZS5sYXN0X2xpdF09dD4+PjgmMjU1LGUucGVuZGluZ19idWZbZS5kX2J1ZisyKmUubGFzdF9saXQrMV09MjU1JnQsZS5wZW5kaW5nX2J1ZltlLmxfYnVmK2UubGFzdF9saXRdPTI1NSZyLGUubGFzdF9saXQrKywwPT09dD9lLmR5bl9sdHJlZVsyKnJdKys6KGUubWF0Y2hlcysrLHQtLSxlLmR5bl9sdHJlZVsyKihBW3JdK3UrMSldKyssZS5keW5fZHRyZWVbMipOKHQpXSsrKSxlLmxhc3RfbGl0PT09ZS5saXRfYnVmc2l6ZS0xfSxyLl90cl9hbGlnbj1mdW5jdGlvbihlKXtQKGUsMiwzKSxMKGUsbSx6KSxmdW5jdGlvbihlKXsxNj09PWUuYmlfdmFsaWQ/KFUoZSxlLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTApOjg8PWUuYmlfdmFsaWQmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT0yNTUmZS5iaV9idWYsZS5iaV9idWY+Pj04LGUuYmlfdmFsaWQtPTgpfShlKX19LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxfV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmlucHV0PW51bGwsdGhpcy5uZXh0X2luPTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLm91dHB1dD1udWxsLHRoaXMubmV4dF9vdXQ9MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTAsdGhpcy5tc2c9XCJcIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9fSx7fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHIsbil7XCJ1c2Ugc3RyaWN0XCI7aWYoIXIuc2V0SW1tZWRpYXRlKXt2YXIgaSxzLHQsYSxvPTEsaD17fSx1PSExLGw9ci5kb2N1bWVudCxlPU9iamVjdC5nZXRQcm90b3R5cGVPZiYmT2JqZWN0LmdldFByb3RvdHlwZU9mKHIpO2U9ZSYmZS5zZXRUaW1lb3V0P2U6cixpPVwiW29iamVjdCBwcm9jZXNzXVwiPT09e30udG9TdHJpbmcuY2FsbChyLnByb2Nlc3MpP2Z1bmN0aW9uKGUpe3Byb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKXtjKGUpfSl9OmZ1bmN0aW9uKCl7aWYoci5wb3N0TWVzc2FnZSYmIXIuaW1wb3J0U2NyaXB0cyl7dmFyIGU9ITAsdD1yLm9ubWVzc2FnZTtyZXR1cm4gci5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtlPSExfSxyLnBvc3RNZXNzYWdlKFwiXCIsXCIqXCIpLHIub25tZXNzYWdlPXQsZX19KCk/KGE9XCJzZXRJbW1lZGlhdGUkXCIrTWF0aC5yYW5kb20oKStcIiRcIixyLmFkZEV2ZW50TGlzdGVuZXI/ci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGQsITEpOnIuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIixkKSxmdW5jdGlvbihlKXtyLnBvc3RNZXNzYWdlKGErZSxcIipcIil9KTpyLk1lc3NhZ2VDaGFubmVsPygodD1uZXcgTWVzc2FnZUNoYW5uZWwpLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbihlKXtjKGUuZGF0YSl9LGZ1bmN0aW9uKGUpe3QucG9ydDIucG9zdE1lc3NhZ2UoZSl9KTpsJiZcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiaW4gbC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpPyhzPWwuZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKGUpe3ZhciB0PWwuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTt0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2MoZSksdC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxzLnJlbW92ZUNoaWxkKHQpLHQ9bnVsbH0scy5hcHBlbmRDaGlsZCh0KX0pOmZ1bmN0aW9uKGUpe3NldFRpbWVvdXQoYywwLGUpfSxlLnNldEltbWVkaWF0ZT1mdW5jdGlvbihlKXtcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiYoZT1uZXcgRnVuY3Rpb24oXCJcIitlKSk7Zm9yKHZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpLHI9MDtyPHQubGVuZ3RoO3IrKyl0W3JdPWFyZ3VtZW50c1tyKzFdO3ZhciBuPXtjYWxsYmFjazplLGFyZ3M6dH07cmV0dXJuIGhbb109bixpKG8pLG8rK30sZS5jbGVhckltbWVkaWF0ZT1mfWZ1bmN0aW9uIGYoZSl7ZGVsZXRlIGhbZV19ZnVuY3Rpb24gYyhlKXtpZih1KXNldFRpbWVvdXQoYywwLGUpO2Vsc2V7dmFyIHQ9aFtlXTtpZih0KXt1PSEwO3RyeXshZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jYWxsYmFjayxyPWUuYXJncztzd2l0Y2goci5sZW5ndGgpe2Nhc2UgMDp0KCk7YnJlYWs7Y2FzZSAxOnQoclswXSk7YnJlYWs7Y2FzZSAyOnQoclswXSxyWzFdKTticmVhaztjYXNlIDM6dChyWzBdLHJbMV0sclsyXSk7YnJlYWs7ZGVmYXVsdDp0LmFwcGx5KG4scil9fSh0KX1maW5hbGx5e2YoZSksdT0hMX19fX1mdW5jdGlvbiBkKGUpe2Uuc291cmNlPT09ciYmXCJzdHJpbmdcIj09dHlwZW9mIGUuZGF0YSYmMD09PWUuZGF0YS5pbmRleE9mKGEpJiZjKCtlLmRhdGEuc2xpY2UoYS5sZW5ndGgpKX19KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmP3ZvaWQgMD09PWU/dGhpczplOnNlbGYpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV19LHt9LFsxMF0pKDEwKX0pOyIsICJleHBvcnQgbmFtZXNwYWNlIE1ieCB7XG4gIGV4cG9ydCB0eXBlIFZlY3RvcjMgPSBudW1iZXJbXTtcbiAgZXhwb3J0IHR5cGUgVmVjdG9yNCA9IG51bWJlcltdO1xuICBleHBvcnQgdHlwZSBNYXRyaXg0eDQgPSBudW1iZXJbXTtcblxuICBleHBvcnQgdHlwZSBWZWN0b3IzQXJyYXkgPSBudW1iZXJbXTtcblxuICBleHBvcnQgdHlwZSBCYXNlNjRTdHJpbmcgPSBzdHJpbmc7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlIHtcbiAgICBtZXRhZGF0YTogRmlsZU1ldGFkYXRhO1xuICAgIHBhcnRzOiBQYXJ0W107XG4gICAgY29uZmlndXJhdGlvbnM6IHsgW2luZGV4OiBzdHJpbmddOiB7IFtuYW1lOiBzdHJpbmddOiBDb25maWd1cmF0aW9uIH0gfTtcbiAgICBnZW9tZXRyaWVzOiB7IFtpbmRleDogc3RyaW5nXTogeyBbbmFtZTogc3RyaW5nXTogR2VvbWV0cnkgfSB9O1xuICAgIHRleHR1cmVzOiB7XG4gICAgICBcIjFcIj86IFRleHR1cmVQYWNrO1xuICAgICAgXCIyXCI/OiB7IG9mZmljaWFsOiBUZXh0dXJlUGFjazsgY3VzdG9tOiBUZXh0dXJlUGFjayB9O1xuICAgIH07XG4gICAgZGV0YWlsczoge1xuICAgICAgbG9nb3M6IHsgW2luZGV4OiBzdHJpbmddOiBHZW9tZXRyeSB9O1xuICAgICAga25vYnM6IHsgW2luZGV4OiBzdHJpbmddOiBHZW9tZXRyeSB9O1xuICAgICAgdHViZXM6IHsgW2luZGV4OiBzdHJpbmddOiBHZW9tZXRyeSB9O1xuICAgICAgcGluczogeyBbaW5kZXg6IHN0cmluZ106IEdlb21ldHJ5IH07XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZU1ldGFkYXRhIHtcbiAgICB2ZXJzaW9uOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgZGF0ZTogc3RyaW5nO1xuICAgIGdlbmVyYXRvcjogc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQYXJ0IHtcbiAgICB0eXBlOiBcInNvbGlkXCI7XG4gICAgdmVyc2lvbjogbnVtYmVyO1xuICAgIHNjb3BlOiBcIm9mZmljaWFsXCI7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBjb25maWd1cmF0aW9uOiBzdHJpbmc7XG4gICAgbWF0cml4OiBNYXRyaXg0eDQ7XG4gICAgb2JqZWN0SW5kZXg6IG51bWJlcjtcbiAgICBtYXRlcmlhbDoge1xuICAgICAgYmFzZTogW251bWJlcl07IC8vIFRPRE9cbiAgICAgIGRlY29yYXRpb246IHt9OyAvLyBUT0RPXG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGFydERlY29yYXRpb24ge1xuICAgIHV2PzogbnVtYmVyO1xuICAgIGNvbG9yPzoge1xuICAgICAgaWQ6IG51bWJlcjtcbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgIHJlYWxhbm1lOiBzdHJpbmc7XG4gICAgICBleGlzdHM6IGJvb2xlYW47XG4gICAgICBzY29wZTogXCJvZmZpY2lhbFwiIHwgXCJjdXN0b21cIjtcbiAgICAgIHR5cGU6IFwiY29sb3JcIjtcbiAgICAgIGZpbGVzaXplOiBudW1iZXI7XG4gICAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICBwYXRoOiBzdHJpbmc7XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbiB7XG4gICAgdHlwZTogXCJwYXJ0XCIgfCBcInNvbGlkXCI7XG4gICAgdmVyc2lvbjogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBnZW9tZXRyeTogQ29uZmlndXJhdGlvbkdlb21ldHJ5O1xuICAgIHBvaW50czogQ29uZmlndXJhdGlvblBvaW50W107XG4gICAgbm9ybWFscz86IFRleHR1cmVSZWZbXTtcbiAgICBidW1wcz86IFRleHR1cmVSZWZbXTtcbiAgICByb3VnaG5lc3M/OiBDb25maWd1cmF0aW9uUm91Z2huZXNzW107XG4gICAgbWF0ZXJpYWxzPzogW107IC8vIFRPRE9cbiAgICBkZWNvcmF0aW9uVXZzPzogbnVtYmVyW107IC8vIFRPRE9cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkdlb21ldHJ5IHtcbiAgICBmaWxlOiBzdHJpbmc7XG4gICAgZXh0cmFzOiB7XG4gICAgICBrbm9iczogQ29uZmlndXJhdGlvbkV4dHJhW107XG4gICAgICBwaW5zOiBDb25maWd1cmF0aW9uRXh0cmFbXTtcbiAgICAgIHR1YmVzOiBDb25maWd1cmF0aW9uRXh0cmFbXTtcbiAgICAgIGxvZ29zOiBDb25maWd1cmF0aW9uRXh0cmFbXTtcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uUG9pbnQge1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uRXh0cmEge1xuICAgIHR5cGU6IG51bWJlcjtcbiAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvblJvdWdobmVzcyB7XG4gICAgc2NhbGU6IG51bWJlcjtcbiAgICBzdHJlbmd0aDogbnVtYmVyO1xuICAgIG1hc2s/OiBUZXh0dXJlUmVmO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlUmVmIHtcbiAgICBmaWxlOiBzdHJpbmc7XG4gICAgdXY6IG51bWJlcjtcbiAgICBiZXZlbD86IGJvb2xlYW47XG4gICAgcmVwZWF0PzogYm9vbGVhbjtcbiAgICBjaGFubmVsPzogXCJyXCI7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybSB7XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcXVhdGVybmlvbjogVmVjdG9yNDtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgR2VvbWV0cnkge1xuICAgIG1ldGFkYXRhPzogSW9UaHJlZUdlb21ldHJ5TWV0YWRhdGEgfCBCbGVuZGVyR2VvbWV0cnlNZXRhZGF0YTtcbiAgICB2ZXJ0aWNlczogVmVjdG9yM0FycmF5O1xuICAgIGZhY2VzOiBudW1iZXJbXTtcbiAgICBub3JtYWxzOiBWZWN0b3IzQXJyYXk7XG4gICAgdXZzPzogbnVtYmVyW11bXTsgLy8gVE9ET1xuICB9XG5cbiAgZXhwb3J0IGNvbnN0IGVudW0gRmFjZUZsYWdzIHtcbiAgICBRVUFEID0gMHgwMSxcbiAgICBNQVRFUklBTCA9IDB4MDIsXG4gICAgVVZTID0gMHgwOCxcbiAgICBOT1JNQUxTID0gMHgyMCxcbiAgICBDT0xPUlMgPSAweDgwLFxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJb1RocmVlR2VvbWV0cnlNZXRhZGF0YSB7XG4gICAgdmVyc2lvbjogbnVtYmVyO1xuICAgIHR5cGU6IFwiR2VvbWV0cnlcIjtcbiAgICBnZW5lcmF0b3I6IFwiaW9fdGhyZWVcIjtcbiAgICB2ZXJ0aWNlczogbnVtYmVyO1xuICAgIGZhY2VzOiBudW1iZXI7XG4gICAgbm9ybWFsczogbnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBCbGVuZGVyR2VvbWV0cnlNZXRhZGF0YSB7XG4gICAgZm9ybWF0VmVyc2lvbjogbnVtYmVyO1xuICAgIGdlbmVyYXRlZEJ5OiBzdHJpbmc7XG4gICAgdmVydGljZXM6IG51bWJlcjtcbiAgICBmYWNlczogbnVtYmVyO1xuICAgIG5vcm1hbHM6IG51bWJlcjtcbiAgICBjb2xvcnM6IG51bWJlcjtcbiAgICB1dnM6IFtdOyAvLyBUT0RPXG4gICAgbWF0ZXJpYWxzOiBudW1iZXI7XG4gICAgbW9ycGhUYXJnZXRzOiBudW1iZXI7XG4gICAgYm9uZXM6IG51bWJlcjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGV4dHVyZVBhY2sge1xuICAgIGRlY29yYXRpb24/OiB7IFtuYW1lOiBzdHJpbmddOiBCYXNlNjRTdHJpbmcgfTtcbiAgICBidW1wPzogeyBbbmFtZTogc3RyaW5nXTogQmFzZTY0U3RyaW5nIH07XG4gICAgbWV0YWxuZXNzPzogeyBbbmFtZTogc3RyaW5nXTogQmFzZTY0U3RyaW5nIH07XG4gICAgbm9ybWFsPzogeyBbbmFtZTogc3RyaW5nXTogQmFzZTY0U3RyaW5nIH07XG4gICAgbWFzaz86IHsgW25hbWU6IHN0cmluZ106IEJhc2U2NFN0cmluZyB9O1xuICAgIGNvbG9yPzogeyBbbmFtZTogc3RyaW5nXTogQmFzZTY0U3RyaW5nIH07XG4gICAgZGF0YT86IHsgW25hbWU6IHN0cmluZ106IEJhc2U2NFN0cmluZyB9O1xuICB9XG59XG4iLCAiZXhwb3J0IG5hbWVzcGFjZSBHbHRmIHtcbiAgZXhwb3J0IHR5cGUgSW5kZXg8VD4gPSBudW1iZXI7XG5cbiAgZXhwb3J0IHR5cGUgTWF0cml4NHg0ID0gbnVtYmVyW107XG4gIGV4cG9ydCB0eXBlIFZlY3RvcjMgPSBudW1iZXJbXTtcbiAgZXhwb3J0IHR5cGUgVmVjdG9yNCA9IG51bWJlcltdO1xuXG4gIGV4cG9ydCB0eXBlIFVyaSA9IHN0cmluZztcblxuICBleHBvcnQgY29uc3QgZW51bSBDb25zdCB7XG4gICAgSTggPSA1MTIwLFxuICAgIFU4ID0gNTEyMSxcbiAgICBJMTYgPSA1MTIyLFxuICAgIFUxNiA9IDUxMjMsXG4gICAgVTMyID0gNTEyNSxcbiAgICBGMzIgPSA1MTI2LFxuXG4gICAgTkVBUkVTVCA9IDk3MjgsXG4gICAgTElORUFSID0gOTcyOSxcblxuICAgIFJFUEVBVCA9IDEwNDk3LFxuXG4gICAgTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCA9IDk5ODQsXG4gICAgTElORUFSX01JUE1BUF9ORUFSRVNUID0gOTk4NSxcbiAgICBORUFSRVNUX01JUE1BUF9MSU5FQVIgPSA5OTg2LFxuICAgIExJTkVBUl9NSVBNQVBfTElORUFSID0gOTk4NyxcblxuICAgIENMQU1QX1RPX0VER0UgPSAzMzA3MSxcblxuICAgIE1JUlJPUkVEX1JFUEVBVCA9IDMzNjQ4LFxuXG4gICAgQVJSQVlfQlVGRkVSID0gMzQ5NjIsXG4gICAgRUxFTUVOVF9BUlJBWV9CVUZGRVIgPSAzNDk2MyxcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZSB7XG4gICAgYXNzZXQ6IEFzc2V0O1xuICAgIGV4dGVuc2lvbnNVc2VkPzogc3RyaW5nW107XG4gICAgc2NlbmVzPzogU2NlbmVbXTtcbiAgICBzY2VuZT86IEluZGV4PFNjZW5lPjtcbiAgICBub2Rlcz86IE5vZGVbXTtcbiAgICBidWZmZXJzPzogQnVmZmVyW107XG4gICAgYnVmZmVyVmlld3M/OiBCdWZmZXJWaWV3W107XG4gICAgYWNjZXNzb3JzPzogQWNjZXNzb3JbXTtcbiAgICBtZXNoZXM/OiBNZXNoW107XG4gICAgc2tpbnM/OiBTa2luW107XG4gICAgdGV4dHVyZXM/OiBUZXh0dXJlW107XG4gICAgaW1hZ2VzPzogSW1hZ2VbXTtcbiAgICBzYW1wbGVycz86IFNhbXBsZXJbXTtcbiAgICBtYXRlcmlhbHM/OiBNYXRlcmlhbFtdO1xuICAgIGNhbWVyYXM/OiBDYW1lcmFbXTtcbiAgICBhbmltYXRpb25zPzogQW5pbWF0aW9uW107XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEFzc2V0IHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBtaW5WZXJzaW9uPzogc3RyaW5nO1xuICAgIGdlbmVyYXRvcj86IHN0cmluZztcbiAgICBjb3B5cmlnaHQ/OiBzdHJpbmc7XG4gICAgW25hbWU6IHN0cmluZ106IHVua25vd247XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFNjZW5lIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIG5vZGVzOiBJbmRleDxOb2RlPltdO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBOb2RlIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIGNoaWxkcmVuPzogSW5kZXg8Tm9kZT5bXTtcbiAgICBtYXRyaXg/OiBNYXRyaXg0eDQ7XG4gICAgdHJhbnNsYXRpb24/OiBWZWN0b3IzO1xuICAgIHNjYWxlPzogVmVjdG9yMztcbiAgICByb3RhdGlvbj86IFZlY3RvcjQ7XG4gICAgbWVzaD86IEluZGV4PE1lc2g+O1xuICAgIHdlaWdodHM/OiBudW1iZXJbXTtcbiAgICBjYW1lcmE/OiBJbmRleDxDYW1lcmE+O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBCdWZmZXIge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgYnl0ZUxlbmd0aDogbnVtYmVyO1xuICAgIHVyaT86IFVyaTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQnVmZmVyVmlldyB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBidWZmZXI6IEluZGV4PEJ1ZmZlcj47XG4gICAgYnl0ZUxlbmd0aDogbnVtYmVyO1xuICAgIGJ5dGVPZmZzZXQ6IG51bWJlcjtcbiAgICBieXRlU3RyaWRlPzogbnVtYmVyO1xuICAgIHRhcmdldD86IENvbnN0LkFSUkFZX0JVRkZFUiB8IENvbnN0LkVMRU1FTlRfQVJSQVlfQlVGRkVSO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBBY2Nlc3NvciB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBidWZmZXJWaWV3PzogSW5kZXg8QnVmZmVyVmlldz47XG4gICAgYnl0ZU9mZnNldDogbnVtYmVyO1xuICAgIGNvdW50OiBudW1iZXI7XG4gICAgdHlwZTogRGF0YVR5cGU7XG4gICAgY29tcG9uZW50VHlwZTogQ29tcG9uZW50VHlwZTtcbiAgICBub3JtYWxpemVkPzogYm9vbGVhbjtcbiAgICBtYXg/OiBudW1iZXJbXTtcbiAgICBtaW4/OiBudW1iZXJbXTtcbiAgICBzcGFyc2U/OiB7XG4gICAgICBjb3VudDogbnVtYmVyO1xuICAgICAgaW5kaWNlczogQWNjZXNzb3I7XG4gICAgICB2YWx1ZXM6IEFjY2Vzc29yO1xuICAgIH07XG4gIH1cblxuICBleHBvcnQgdHlwZSBEYXRhVHlwZSA9IFwiU0NBTEFSXCIgfCBcIlZFQzJcIiB8IFwiVkVDM1wiIHwgXCJWRUM0XCIgfCBcIk1BVDJcIiB8IFwiTUFUM1wiIHwgXCJNQVQ0XCI7XG5cbiAgZXhwb3J0IHR5cGUgQ29tcG9uZW50VHlwZSA9IENvbnN0Lkk4IHwgQ29uc3QuVTggfCBDb25zdC5JMTYgfCBDb25zdC5VMTYgfCBDb25zdC5VMzIgfCBDb25zdC5GMzI7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBNZXNoIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHByaW1pdGl2ZXM6IFByaW1pdGl2ZVtdO1xuICAgIHdlaWdodHM/OiBudW1iZXJbXTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJpbWl0aXZlIHtcbiAgICBhdHRyaWJ1dGVzOiBQYXJ0aWFsPFJlY29yZDxQcmltaXRpdmVBdHRyaWJ1dGVOYW1lLCBJbmRleDxBY2Nlc3Nvcj4+PjtcbiAgICBpbmRpY2VzPzogSW5kZXg8QWNjZXNzb3I+O1xuICAgIG1hdGVyaWFsPzogSW5kZXg8TWF0ZXJpYWw+O1xuICAgIG1vZGU/OiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgdHlwZSBQcmltaXRpdmVBdHRyaWJ1dGVOYW1lID1cbiAgICB8IFwiTk9STUFMXCJcbiAgICB8IFwiUE9TSVRJT05cIlxuICAgIHwgXCJUQU5HRU5UXCJcbiAgICB8IGBURVhDT09SRF8ke251bWJlcn1gXG4gICAgfCBgQ09MT1JfJHtudW1iZXJ9YFxuICAgIHwgYEpPSU5UU18ke251bWJlcn1gXG4gICAgfCBgV0VJR0hUU18ke251bWJlcn1gO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2tpbiB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBqb2ludHM6IEluZGV4PE5vZGU+W107XG4gICAgaW52ZXJzZUJpbmRNYXRyaWNlcz86IEluZGV4PEFjY2Vzc29yPjtcbiAgICBza2VsZXRvbj86IEluZGV4PE5vZGU+O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHNvdXJjZTogSW5kZXg8SW1hZ2U+O1xuICAgIHNhbXBsZXI/OiBJbmRleDxTYW1wbGVyPjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgSW1hZ2Uge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgdXJpPzogVXJpO1xuICAgIGJ1ZmZlclZpZXc/OiBJbmRleDxCdWZmZXJWaWV3PjtcbiAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlciB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBtYWdGaWx0ZXI/OiBTYW1wbGVyTWFnRmlsdGVyO1xuICAgIG1pbkZpbHRlcj86IFNhbXBsZXJNaW5GaWx0ZXI7XG4gICAgd3JhcFM/OiBTYW1wbGVyV3JhcDtcbiAgICB3cmFwVD86IFNhbXBsZXJXcmFwO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgU2FtcGxlck1hZ0ZpbHRlciA9IENvbnN0Lk5FQVJFU1QgfCBDb25zdC5MSU5FQVI7XG5cbiAgZXhwb3J0IHR5cGUgU2FtcGxlck1pbkZpbHRlciA9XG4gICAgfCBDb25zdC5ORUFSRVNUXG4gICAgfCBDb25zdC5MSU5FQVJcbiAgICB8IENvbnN0Lk5FQVJFU1RfTUlQTUFQX05FQVJFU1RcbiAgICB8IENvbnN0LkxJTkVBUl9NSVBNQVBfTkVBUkVTVFxuICAgIHwgQ29uc3QuTkVBUkVTVF9NSVBNQVBfTElORUFSXG4gICAgfCBDb25zdC5MSU5FQVJfTUlQTUFQX0xJTkVBUjtcblxuICBleHBvcnQgdHlwZSBTYW1wbGVyV3JhcCA9IENvbnN0LkNMQU1QX1RPX0VER0UgfCBDb25zdC5NSVJST1JFRF9SRVBFQVQgfCBDb25zdC5SRVBFQVQ7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBNYXRlcmlhbCB7XG4gICAgbmFtZT86IHN0cmluZztcblxuICAgIHBick1ldGFsbGljUm91Z2huZXNzPzoge1xuICAgICAgYmFzZUNvbG9yRmFjdG9yPzogVmVjdG9yNDtcbiAgICAgIGJhc2VDb2xvclRleHR1cmU/OiBUZXh0dXJlSW5mbztcbiAgICAgIG1ldGFsbGljRmFjdG9yPzogbnVtYmVyO1xuICAgICAgbWV0YWxsaWNUZXh0dXJlPzogVGV4dHVyZUluZm87XG4gICAgICByb3VnaG5lc3NGYWN0b3I/OiBudW1iZXI7XG4gICAgICByb3VnaG5lc3NUZXh0dXJlPzogVGV4dHVyZUluZm87XG4gICAgfTtcblxuICAgIG5vcm1hbEZhY3Rvcj86IFZlY3RvcjQ7XG4gICAgbm9ybWFsVGV4dHVyZT86IFRleHR1cmVJbmZvO1xuICAgIG9jY2x1c2lvbkZhY3Rvcj86IG51bWJlcjtcbiAgICBvY2NsdXNpb25UZXh0dXJlPzogVGV4dHVyZUluZm87XG4gICAgZW1pc3NpdmVGYWN0b3I/OiBWZWN0b3IzO1xuICAgIGVtaXNzaXZlVGV4dHVyZT86IFRleHR1cmVJbmZvO1xuXG4gICAgYWxwaGFNb2RlPzogXCJPUEFRVUVcIiB8IFwiTUFTS1wiIHwgXCJCTEVORFwiO1xuICAgIGRvdWJsZVNpZGVkPzogYm9vbGVhbjtcblxuICAgIGV4dGVuc2lvbnM/OiB7XG4gICAgICBLSFJfbWF0ZXJpYWxzX2lvcj86IHtcbiAgICAgICAgaW9yPzogbnVtYmVyO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlSW5mbyB7XG4gICAgaW5kZXg6IEluZGV4PFRleHR1cmU+O1xuICAgIHNjYWxlPzogbnVtYmVyO1xuICAgIHRleENvb3JkPzogbnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBDYW1lcmEge1xuICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgdHlwZTogXCJwZXJzcGVjdGl2ZVwiIHwgXCJvcnRob2dyYXBoaWNcIjtcblxuICAgIHBlcnNwZWN0aXZlPzoge1xuICAgICAgYXNwZWN0UmF0aW86IG51bWJlcjtcbiAgICAgIHlmb3Y6IG51bWJlcjtcbiAgICAgIHpuZWFyOiBudW1iZXI7XG4gICAgICB6ZmFyPzogbnVtYmVyO1xuICAgIH07XG5cbiAgICBvcnRob2dyYXBoaWM/OiB7XG4gICAgICB4bWFnOiBudW1iZXI7XG4gICAgICB5bWFnOiBudW1iZXI7XG4gICAgICB6bmVhcjogbnVtYmVyO1xuICAgICAgemZhcjogbnVtYmVyO1xuICAgIH07XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbiB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBjaGFubmVscz86IEFuaW1hdGlvbkNoYW5uZWxbXTtcbiAgICBzYW1wbGVycz86IEFuaW1hdGlvblNhbXBsZXJbXTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uQ2hhbm5lbCB7XG4gICAgc2FtcGxlcjogSW5kZXg8QW5pbWF0aW9uU2FtcGxlcj47XG4gICAgdGFyZ2V0OiB7XG4gICAgICBub2RlOiBJbmRleDxOb2RlPjtcbiAgICAgIHBhdGg6IFwidHJhbnNsYXRpb25cIiB8IFwicm90YXRpb25cIiB8IFwic2NhbGVcIiB8IFwid2VpZ2h0c1wiO1xuICAgIH07XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvblNhbXBsZXIge1xuICAgIGlucHV0OiBJbmRleDxBY2Nlc3Nvcj47XG4gICAgaW50ZXJwb2xhdGlvbjogXCJMSU5FQVJcIjtcbiAgICBvdXRwdXQ6IEluZGV4PEFjY2Vzc29yPjtcbiAgfVxufVxuIiwgImltcG9ydCB7IEdsdGYgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5jb25zdCBnZXRTdHJpY3QgPSA8SywgVj4obWFwOiBNYXA8SywgVj4sIGtleTogSyk6IFYgPT4ge1xuICBjb25zdCB2YWx1ZSA9IG1hcC5nZXQoa2V5KTtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBSYW5nZUVycm9yKFN0cmluZyhrZXkpKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuY29uc3Qgc2V0U3RyaWN0ID0gPEssIFY+KG1hcDogTWFwPEssIFY+LCBrZXk6IEssIHZhbHVlOiBWKTogdm9pZCA9PiB7XG4gIGlmIChtYXAuaGFzKGtleSkpIHRocm93IG5ldyBSYW5nZUVycm9yKFN0cmluZyhrZXkpKTtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBHbHRmQnVpbGRlciB7XG4gIHByaXZhdGUgX2ZpbGUhOiBHbHRmLkZpbGU7XG5cbiAgcHJpdmF0ZSBfaW1hZ2VJbmRpY2VzITogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgcHJpdmF0ZSBfYnVmZmVySW5kaWNlcyE6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIHByaXZhdGUgX2J1ZmZlclZpZXdJbmRpY2VzITogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgcHJpdmF0ZSBfYWNjZXNzb3JJbmRpY2VzITogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgcHJpdmF0ZSBfbWVzaEluZGljZXMhOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xuICBwcml2YXRlIF9ub2RlSW5kaWNlcyE6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIHByaXZhdGUgX3NjZW5lSW5kaWNlcyE6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIHByaXZhdGUgX21hdGVyaWFsSW5kaWNlcyE6IE1hcDxzdHJpbmcsIG51bWJlcj47XG4gIHByaXZhdGUgX3RleHR1cmVJbmRpY2VzITogTWFwPHN0cmluZywgbnVtYmVyPjtcbiAgcHJpdmF0ZSBfc2FtcGxlckluZGljZXMhOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX2ZpbGUgPSB7IGFzc2V0OiB7IHZlcnNpb246IFwiMi4wXCIgfSB9O1xuXG4gICAgdGhpcy5faW1hZ2VJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2J1ZmZlckluZGljZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fYnVmZmVyVmlld0luZGljZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fYWNjZXNzb3JJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX21lc2hJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX25vZGVJbmRpY2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3NjZW5lSW5kaWNlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9tYXRlcmlhbEluZGljZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fdGV4dHVyZUluZGljZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fc2FtcGxlckluZGljZXMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBidWlsZCgpOiBHbHRmLkZpbGUge1xuICAgIGNvbnN0IGZpbGUgPSB0aGlzLl9maWxlO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICByZXR1cm4gZmlsZTtcbiAgfVxuXG4gIHNldE1ldGFkYXRhKG1ldGFkYXRhOiBQYXJ0aWFsPEdsdGYuQXNzZXQ+KTogdm9pZCB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLl9maWxlLmFzc2V0LCBtZXRhZGF0YSk7XG4gIH1cblxuICB1c2VFeHRlbnNpb24oZXh0ZW5zaW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9maWxlLmV4dGVuc2lvbnNVc2VkID8/PSBbXTtcbiAgICB0aGlzLl9maWxlLmV4dGVuc2lvbnNVc2VkLnB1c2goZXh0ZW5zaW9uKTtcbiAgfVxuXG4gIHNldE1haW5TY2VuZShpbmRleDogR2x0Zi5JbmRleDxHbHRmLlNjZW5lPik6IHZvaWQge1xuICAgIHRoaXMuX2ZpbGUuc2NlbmUgPSBpbmRleDtcbiAgfVxuXG4gIGdldEltYWdlSW5kZXgoa2V5OiBzdHJpbmcpOiBHbHRmLkluZGV4PEdsdGYuSW1hZ2U+IHtcbiAgICByZXR1cm4gZ2V0U3RyaWN0KHRoaXMuX2ltYWdlSW5kaWNlcywga2V5KTtcbiAgfVxuXG4gIGdldEltYWdlKGtleTogc3RyaW5nKTogR2x0Zi5JbWFnZSB7XG4gICAgY29uc3QgaW5kZXggPSBnZXRTdHJpY3QodGhpcy5faW1hZ2VJbmRpY2VzLCBrZXkpO1xuICAgIHJldHVybiB0aGlzLl9maWxlLmltYWdlcyFbaW5kZXhdO1xuICB9XG5cbiAgYWRkSW1hZ2Uoa2V5OiBzdHJpbmcsIGltYWdlOiBHbHRmLkltYWdlKTogR2x0Zi5JbmRleDxHbHRmLkltYWdlPiB7XG4gICAgdGhpcy5fZmlsZS5pbWFnZXMgPz89IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZmlsZS5pbWFnZXMubGVuZ3RoO1xuICAgIHNldFN0cmljdCh0aGlzLl9pbWFnZUluZGljZXMsIGtleSwgaW5kZXgpO1xuICAgIHRoaXMuX2ZpbGUuaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGdldEJ1ZmZlckluZGV4KGtleTogc3RyaW5nKTogR2x0Zi5JbmRleDxHbHRmLkJ1ZmZlcj4ge1xuICAgIHJldHVybiBnZXRTdHJpY3QodGhpcy5fYnVmZmVySW5kaWNlcywga2V5KTtcbiAgfVxuXG4gIGFkZEJ1ZmZlcihrZXk6IHN0cmluZywgYnVmZmVyOiBHbHRmLkJ1ZmZlcik6IEdsdGYuSW5kZXg8R2x0Zi5CdWZmZXI+IHtcbiAgICB0aGlzLl9maWxlLmJ1ZmZlcnMgPz89IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZmlsZS5idWZmZXJzLmxlbmd0aDtcbiAgICBzZXRTdHJpY3QodGhpcy5fYnVmZmVySW5kaWNlcywga2V5LCBpbmRleCk7XG4gICAgdGhpcy5fZmlsZS5idWZmZXJzLnB1c2goYnVmZmVyKTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBnZXRCdWZmZXJWaWV3SW5kZXgoa2V5OiBzdHJpbmcpOiBHbHRmLkluZGV4PEdsdGYuQnVmZmVyVmlldz4ge1xuICAgIHJldHVybiBnZXRTdHJpY3QodGhpcy5fYnVmZmVyVmlld0luZGljZXMsIGtleSk7XG4gIH1cblxuICBhZGRCdWZmZXJWaWV3KGtleTogc3RyaW5nLCBidWZmZXJWaWV3OiBHbHRmLkJ1ZmZlclZpZXcpOiBHbHRmLkluZGV4PEdsdGYuQnVmZmVyVmlldz4ge1xuICAgIHRoaXMuX2ZpbGUuYnVmZmVyVmlld3MgPz89IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZmlsZS5idWZmZXJWaWV3cy5sZW5ndGg7XG4gICAgc2V0U3RyaWN0KHRoaXMuX2J1ZmZlclZpZXdJbmRpY2VzLCBrZXksIGluZGV4KTtcbiAgICB0aGlzLl9maWxlLmJ1ZmZlclZpZXdzLnB1c2goYnVmZmVyVmlldyk7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgdHJ5R2V0QWNjZXNzb3JJbmRleChrZXk6IHN0cmluZyk6IEdsdGYuSW5kZXg8R2x0Zi5BY2Nlc3Nvcj4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9hY2Nlc3NvckluZGljZXMuZ2V0KGtleSk7XG4gIH1cblxuICBnZXRBY2Nlc3NvckluZGV4KGtleTogc3RyaW5nKTogR2x0Zi5JbmRleDxHbHRmLkFjY2Vzc29yPiB7XG4gICAgcmV0dXJuIGdldFN0cmljdCh0aGlzLl9hY2Nlc3NvckluZGljZXMsIGtleSk7XG4gIH1cblxuICBhZGRBY2Nlc3NvcihrZXk6IHN0cmluZywgYWNjZXNzb3I6IEdsdGYuQWNjZXNzb3IpOiBHbHRmLkluZGV4PEdsdGYuQWNjZXNzb3I+IHtcbiAgICB0aGlzLl9maWxlLmFjY2Vzc29ycyA/Pz0gW107XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maWxlLmFjY2Vzc29ycy5sZW5ndGg7XG4gICAgc2V0U3RyaWN0KHRoaXMuX2FjY2Vzc29ySW5kaWNlcywga2V5LCBpbmRleCk7XG4gICAgdGhpcy5fZmlsZS5hY2Nlc3NvcnMucHVzaChhY2Nlc3Nvcik7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgZ2V0TWVzaEluZGV4KGtleTogc3RyaW5nKTogR2x0Zi5JbmRleDxHbHRmLk1lc2g+IHtcbiAgICByZXR1cm4gZ2V0U3RyaWN0KHRoaXMuX21lc2hJbmRpY2VzLCBrZXkpO1xuICB9XG5cbiAgYWRkTWVzaChrZXk6IHN0cmluZywgbWVzaDogR2x0Zi5NZXNoKTogR2x0Zi5JbmRleDxHbHRmLk1lc2g+IHtcbiAgICB0aGlzLl9maWxlLm1lc2hlcyA/Pz0gW107XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maWxlLm1lc2hlcy5sZW5ndGg7XG4gICAgc2V0U3RyaWN0KHRoaXMuX21lc2hJbmRpY2VzLCBrZXksIGluZGV4KTtcbiAgICB0aGlzLl9maWxlLm1lc2hlcy5wdXNoKG1lc2gpO1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGdldE5vZGVJbmRleChrZXk6IHN0cmluZyk6IEdsdGYuSW5kZXg8R2x0Zi5Ob2RlPiB7XG4gICAgcmV0dXJuIGdldFN0cmljdCh0aGlzLl9ub2RlSW5kaWNlcywga2V5KTtcbiAgfVxuXG4gIGFkZE5vZGUoa2V5OiBzdHJpbmcsIG5vZGU6IEdsdGYuTm9kZSk6IEdsdGYuSW5kZXg8R2x0Zi5Ob2RlPiB7XG4gICAgdGhpcy5fZmlsZS5ub2RlcyA/Pz0gW107XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maWxlLm5vZGVzLmxlbmd0aDtcbiAgICBzZXRTdHJpY3QodGhpcy5fbm9kZUluZGljZXMsIGtleSwgaW5kZXgpO1xuICAgIHRoaXMuX2ZpbGUubm9kZXMucHVzaChub2RlKTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBnZXRTY2VuZUluZGV4KGtleTogc3RyaW5nKTogR2x0Zi5JbmRleDxHbHRmLlNjZW5lPiB7XG4gICAgcmV0dXJuIGdldFN0cmljdCh0aGlzLl9zY2VuZUluZGljZXMsIGtleSk7XG4gIH1cblxuICBhZGRTY2VuZShrZXk6IHN0cmluZywgc2NlbmU6IEdsdGYuU2NlbmUpOiBHbHRmLkluZGV4PEdsdGYuU2NlbmU+IHtcbiAgICB0aGlzLl9maWxlLnNjZW5lcyA/Pz0gW107XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maWxlLnNjZW5lcy5sZW5ndGg7XG4gICAgc2V0U3RyaWN0KHRoaXMuX3NjZW5lSW5kaWNlcywga2V5LCBpbmRleCk7XG4gICAgdGhpcy5fZmlsZS5zY2VuZXMucHVzaChzY2VuZSk7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgaGFzTWF0ZXJpYWwoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbWF0ZXJpYWxJbmRpY2VzLmhhcyhrZXkpO1xuICB9XG5cbiAgZ2V0TWF0ZXJpYWxJbmRleChrZXk6IHN0cmluZyk6IEdsdGYuSW5kZXg8R2x0Zi5NYXRlcmlhbD4ge1xuICAgIHJldHVybiBnZXRTdHJpY3QodGhpcy5fbWF0ZXJpYWxJbmRpY2VzLCBrZXkpO1xuICB9XG5cbiAgYWRkTWF0ZXJpYWwoa2V5OiBzdHJpbmcsIG1hdGVyaWFsOiBHbHRmLk1hdGVyaWFsKTogR2x0Zi5JbmRleDxHbHRmLk1hdGVyaWFsPiB7XG4gICAgdGhpcy5fZmlsZS5tYXRlcmlhbHMgPz89IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZmlsZS5tYXRlcmlhbHMubGVuZ3RoO1xuICAgIHNldFN0cmljdCh0aGlzLl9tYXRlcmlhbEluZGljZXMsIGtleSwgaW5kZXgpO1xuICAgIHRoaXMuX2ZpbGUubWF0ZXJpYWxzLnB1c2gobWF0ZXJpYWwpO1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGdldFRleHR1cmVJbmRleChrZXk6IHN0cmluZyk6IEdsdGYuSW5kZXg8R2x0Zi5UZXh0dXJlPiB7XG4gICAgcmV0dXJuIGdldFN0cmljdCh0aGlzLl90ZXh0dXJlSW5kaWNlcywga2V5KTtcbiAgfVxuXG4gIGFkZFRleHR1cmUoa2V5OiBzdHJpbmcsIHRleHR1cmU6IEdsdGYuVGV4dHVyZSk6IEdsdGYuSW5kZXg8R2x0Zi5UZXh0dXJlPiB7XG4gICAgdGhpcy5fZmlsZS50ZXh0dXJlcyA/Pz0gW107XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9maWxlLnRleHR1cmVzLmxlbmd0aDtcbiAgICBzZXRTdHJpY3QodGhpcy5fdGV4dHVyZUluZGljZXMsIGtleSwgaW5kZXgpO1xuICAgIHRoaXMuX2ZpbGUudGV4dHVyZXMucHVzaCh0ZXh0dXJlKTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBnZXRTYW1wbGVySW5kZXgoa2V5OiBzdHJpbmcpOiBHbHRmLkluZGV4PEdsdGYuU2FtcGxlcj4ge1xuICAgIHJldHVybiBnZXRTdHJpY3QodGhpcy5fc2FtcGxlckluZGljZXMsIGtleSk7XG4gIH1cblxuICBhZGRTYW1wbGVyKGtleTogc3RyaW5nLCBzYW1wbGVyOiBHbHRmLlNhbXBsZXIpOiBHbHRmLkluZGV4PEdsdGYuU2FtcGxlcj4ge1xuICAgIHRoaXMuX2ZpbGUuc2FtcGxlcnMgPz89IFtdO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZmlsZS5zYW1wbGVycy5sZW5ndGg7XG4gICAgc2V0U3RyaWN0KHRoaXMuX3NhbXBsZXJJbmRpY2VzLCBrZXksIGluZGV4KTtcbiAgICB0aGlzLl9maWxlLnNhbXBsZXJzLnB1c2goc2FtcGxlcik7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG59XG4iLCAiaW1wb3J0IHsgR2x0ZiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmludGVyZmFjZSBSZWY8VD4ge1xuICBnZXQoKTogVDtcbiAgc2V0KHZhbHVlOiBUKTogVDtcbn1cblxuY29uc3QgbWVtYmVyUmVmID0gPE8sIEsgZXh0ZW5kcyBrZXlvZiBPPihvOiBPLCBrOiBLKTogUmVmPE9bS10+ID0+ICh7XG4gIGdldDogKCkgPT4gb1trXSxcbiAgc2V0OiAodikgPT4gKG9ba10gPSB2KSxcbn0pO1xuXG5jb25zdCBtYXliZU1lbWJlclJlZiA9IDxULCBLIGV4dGVuZHMga2V5b2YgYW55LCBPIGV4dGVuZHMgUGFydGlhbDxSZWNvcmQ8SywgVD4+PihcbiAgbzogTyB8IHVuZGVmaW5lZCxcbiAgazogS1xuKTogUmVmPE9bS10gfCB1bmRlZmluZWQ+ID0+ICh7XG4gIGdldDogKCkgPT4gbz8uW2tdLFxuICBzZXQ6ICh2KSA9PiAobyA/IChvW2tdID0gdiEpIDogdiksXG59KTtcblxuY29uc3QgY29sbGVjdFVudXNlZCA9IDxUPihcbiAgYXJyYXlSZWY6IFJlZjxUW10gfCB1bmRlZmluZWQ+LFxuICBpbmRleFJlZnM6ICgpID0+IEl0ZXJhYmxlPFJlZjxudW1iZXIgfCB1bmRlZmluZWQ+PlxuKTogdm9pZCA9PiB7XG4gIGNvbnN0IGFycmF5ID0gYXJyYXlSZWYuZ2V0KCk7XG4gIGlmICghYXJyYXkpIHJldHVybjtcblxuICBjb25zdCB1c2VkID0gbmV3IFNldDxudW1iZXI+KCk7XG4gIGZvciAoY29uc3QgcmVmIG9mIGluZGV4UmVmcygpKSB7XG4gICAgY29uc3QgaW5kZXggPSByZWYuZ2V0KCk7XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHVzZWQuYWRkKGluZGV4KTtcbiAgfVxuXG4gIGlmICh1c2VkLnNpemUgPT09IDApIHtcbiAgICBhcnJheVJlZi5zZXQodW5kZWZpbmVkKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbmRleE1hcCA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCB1IG9mIHVzZWQpIGluZGV4TWFwLnNldCh1LCBpKyspO1xuXG4gIGZvciAoY29uc3QgcmVmIG9mIGluZGV4UmVmcygpKSB7XG4gICAgY29uc3QgaW5kZXggPSByZWYuZ2V0KCk7XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHJlZi5zZXQoaW5kZXhNYXAuZ2V0KGluZGV4KSk7XG4gIH1cblxuICBjb25zdCBuZXdBcnJheSA9IGFycmF5LnNsaWNlKDAsIGluZGV4TWFwLnNpemUpO1xuICBmb3IgKGNvbnN0IFtvbGRJbmRleCwgbmV3SW5kZXhdIG9mIGluZGV4TWFwKSB7XG4gICAgbmV3QXJyYXlbbmV3SW5kZXhdID0gYXJyYXlbb2xkSW5kZXhdO1xuICB9XG5cbiAgYXJyYXlSZWYuc2V0KG5ld0FycmF5KTtcbn07XG5cbmNvbnN0IGRlZHVwID0gPFQsIEg+KFxuICBhcnJheVJlZjogUmVmPFRbXSB8IHVuZGVmaW5lZD4sXG4gIGhhc2hGbjogKHQ6IFQpID0+IEgsXG4gIGluZGV4UmVmczogKCkgPT4gSXRlcmFibGU8UmVmPG51bWJlciB8IHVuZGVmaW5lZD4+XG4pOiB2b2lkID0+IHtcbiAgY29uc3QgYXJyYXkgPSBhcnJheVJlZi5nZXQoKTtcbiAgaWYgKCFhcnJheSkgcmV0dXJuO1xuXG4gIGNvbnN0IGluZGV4TWFwID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgY29uc3QgaGFzaE1hcCA9IG5ldyBNYXA8SCwgbnVtYmVyPigpO1xuXG4gIGZvciAoY29uc3QgW2luZGV4LCB2YWx1ZV0gb2YgYXJyYXkuZW50cmllcygpKSB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hGbih2YWx1ZSk7XG4gICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IGhhc2hNYXAuZ2V0KGhhc2gpO1xuXG4gICAgaWYgKGV4aXN0aW5nSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5kZXhNYXAuc2V0KGluZGV4LCBleGlzdGluZ0luZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzaE1hcC5zZXQoaGFzaCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgcmVmIG9mIGluZGV4UmVmcygpKSB7XG4gICAgY29uc3QgaW5kZXggPSByZWYuZ2V0KCk7XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHJlZi5zZXQoaW5kZXhNYXAuZ2V0KGluZGV4KSA/PyBpbmRleCk7XG4gIH1cblxuICBjb2xsZWN0VW51c2VkKGFycmF5UmVmLCBpbmRleFJlZnMpO1xufTtcblxuZXhwb3J0IGNsYXNzIEdsdGZPcHRpbWl6ZXIge1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBmaWxlOiBHbHRmLkZpbGUpIHt9XG5cbiAgcHJpdmF0ZSAqX3RleHR1cmVJbmRleFJlZnMoKTogSXRlcmFibGU8UmVmPEdsdGYuSW5kZXg8R2x0Zi5UZXh0dXJlPj4+IHtcbiAgICBmb3IgKGNvbnN0IG0gb2YgdGhpcy5maWxlLm1hdGVyaWFscyA/PyBbXSkge1xuICAgICAgaWYgKG0uZW1pc3NpdmVUZXh0dXJlKSB5aWVsZCBtZW1iZXJSZWYobS5lbWlzc2l2ZVRleHR1cmUsIFwiaW5kZXhcIik7XG4gICAgICBpZiAobS5ub3JtYWxUZXh0dXJlKSB5aWVsZCBtZW1iZXJSZWYobS5ub3JtYWxUZXh0dXJlLCBcImluZGV4XCIpO1xuICAgICAgaWYgKG0ub2NjbHVzaW9uVGV4dHVyZSkgeWllbGQgbWVtYmVyUmVmKG0ub2NjbHVzaW9uVGV4dHVyZSwgXCJpbmRleFwiKTtcblxuICAgICAgY29uc3QgcGJyID0gbS5wYnJNZXRhbGxpY1JvdWdobmVzcztcbiAgICAgIGlmIChwYnI/LmJhc2VDb2xvclRleHR1cmUpIHlpZWxkIG1lbWJlclJlZihwYnIuYmFzZUNvbG9yVGV4dHVyZSwgXCJpbmRleFwiKTtcbiAgICAgIGlmIChwYnI/Lm1ldGFsbGljVGV4dHVyZSkgeWllbGQgbWVtYmVyUmVmKHBici5tZXRhbGxpY1RleHR1cmUsIFwiaW5kZXhcIik7XG4gICAgICBpZiAocGJyPy5yb3VnaG5lc3NUZXh0dXJlKSB5aWVsZCBtZW1iZXJSZWYocGJyLnJvdWdobmVzc1RleHR1cmUsIFwiaW5kZXhcIik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSAqX3NhbXBsZXJJbmRleFJlZnMoKTogSXRlcmFibGU8UmVmPEdsdGYuSW5kZXg8R2x0Zi5TYW1wbGVyPiB8IHVuZGVmaW5lZD4+IHtcbiAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5maWxlLnRleHR1cmVzID8/IFtdKSB7XG4gICAgICB5aWVsZCBtZW1iZXJSZWYodCwgXCJzYW1wbGVyXCIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgKl9pbWFnZUluZGV4UmVmcygpOiBJdGVyYWJsZTxSZWY8R2x0Zi5JbmRleDxHbHRmLkltYWdlPiB8IHVuZGVmaW5lZD4+IHtcbiAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5maWxlLnRleHR1cmVzID8/IFtdKSB7XG4gICAgICB5aWVsZCBtZW1iZXJSZWYodCwgXCJzb3VyY2VcIik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSAqX2FjY2Vzc29ySW5kZXhSZWZzKCk6IEl0ZXJhYmxlPFJlZjxHbHRmLkluZGV4PEdsdGYuQWNjZXNzb3I+IHwgdW5kZWZpbmVkPj4ge1xuICAgIGZvciAoY29uc3QgbSBvZiB0aGlzLmZpbGUubWVzaGVzID8/IFtdKSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgbS5wcmltaXRpdmVzKSB7XG4gICAgICAgIHlpZWxkIG1lbWJlclJlZihwLCBcImluZGljZXNcIik7XG4gICAgICAgIGZvciAoY29uc3QgYXR0ciBpbiBwLmF0dHJpYnV0ZXMpIHlpZWxkIG1lbWJlclJlZihwLmF0dHJpYnV0ZXMsIGF0dHIgYXMgYW55KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5maWxlLnNraW5zID8/IFtdKSB7XG4gICAgICB5aWVsZCBtZW1iZXJSZWYocywgXCJpbnZlcnNlQmluZE1hdHJpY2VzXCIpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgYSBvZiB0aGlzLmZpbGUuYW5pbWF0aW9ucyA/PyBbXSkge1xuICAgICAgZm9yIChjb25zdCBzIG9mIGEuc2FtcGxlcnMgPz8gW10pIHtcbiAgICAgICAgeWllbGQgbWVtYmVyUmVmKHMsIFwiaW5wdXRcIik7XG4gICAgICAgIHlpZWxkIG1lbWJlclJlZihzLCBcIm91dHB1dFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlICpfYnVmZmVyVmlld0luZGV4UmVmcygpOiBJdGVyYWJsZTxSZWY8R2x0Zi5JbmRleDxHbHRmLkJ1ZmZlclZpZXc+IHwgdW5kZWZpbmVkPj4ge1xuICAgIGZvciAoY29uc3QgYSBvZiB0aGlzLmZpbGUuYWNjZXNzb3JzID8/IFtdKSB7XG4gICAgICB5aWVsZCBtZW1iZXJSZWYoYSwgXCJidWZmZXJWaWV3XCIpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaW0gb2YgdGhpcy5maWxlLmltYWdlcyA/PyBbXSkge1xuICAgICAgeWllbGQgbWVtYmVyUmVmKGltLCBcImJ1ZmZlclZpZXdcIik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSAqX2J1ZmZlckluZGV4UmVmcygpOiBJdGVyYWJsZTxSZWY8R2x0Zi5JbmRleDxHbHRmLkJ1ZmZlcj4gfCB1bmRlZmluZWQ+PiB7XG4gICAgZm9yIChjb25zdCBidiBvZiB0aGlzLmZpbGUuYnVmZmVyVmlld3MgPz8gW10pIHtcbiAgICAgIHlpZWxkIG1lbWJlclJlZihidiwgXCJidWZmZXJcIik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfY29sbGVjdFVudXNlZFRleENvb3JkcygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IG1lc2ggb2YgdGhpcy5maWxlLm1lc2hlcyA/PyBbXSkge1xuICAgICAgZm9yIChjb25zdCBwcmltIG9mIG1lc2gucHJpbWl0aXZlcykge1xuICAgICAgICBjb25zdCBtYXQgPSBwcmltLm1hdGVyaWFsID8gdGhpcy5maWxlLm1hdGVyaWFscz8uW3ByaW0ubWF0ZXJpYWxdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IHJlZnMgPSBbXG4gICAgICAgICAgbWF5YmVNZW1iZXJSZWYobWF0Py5lbWlzc2l2ZVRleHR1cmUsIFwidGV4Q29vcmRcIiksXG4gICAgICAgICAgbWF5YmVNZW1iZXJSZWYobWF0Py5ub3JtYWxUZXh0dXJlLCBcInRleENvb3JkXCIpLFxuICAgICAgICAgIG1heWJlTWVtYmVyUmVmKG1hdD8ub2NjbHVzaW9uVGV4dHVyZSwgXCJ0ZXhDb29yZFwiKSxcbiAgICAgICAgICBtYXliZU1lbWJlclJlZihtYXQ/LnBick1ldGFsbGljUm91Z2huZXNzPy5iYXNlQ29sb3JUZXh0dXJlLCBcInRleENvb3JkXCIpLFxuICAgICAgICAgIG1heWJlTWVtYmVyUmVmKG1hdD8ucGJyTWV0YWxsaWNSb3VnaG5lc3M/Lm1ldGFsbGljVGV4dHVyZSwgXCJ0ZXhDb29yZFwiKSxcbiAgICAgICAgICBtYXliZU1lbWJlclJlZihtYXQ/LnBick1ldGFsbGljUm91Z2huZXNzPy5yb3VnaG5lc3NUZXh0dXJlLCBcInRleENvb3JkXCIpLFxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHVzZWQgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmcykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcmVmLmdldCgpO1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB1c2VkLmFkZChpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleE1hcCA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCB1IG9mIHVzZWQpIGluZGV4TWFwLnNldCh1LCBpKyspO1xuXG4gICAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZnMpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHJlZi5nZXQoKTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkgcmVmLnNldChpbmRleE1hcC5nZXQoaW5kZXgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW29sZEluZGV4LCBuZXdJbmRleF0gb2YgaW5kZXhNYXApIHtcbiAgICAgICAgICBwcmltLmF0dHJpYnV0ZXNbYFRFWENPT1JEXyR7bmV3SW5kZXh9YF0gPSBwcmltLmF0dHJpYnV0ZXNbYFRFWENPT1JEXyR7b2xkSW5kZXh9YF07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gdXNlZC5zaXplOyBgVEVYQ09PUkRfJHtpfWAgaW4gcHJpbS5hdHRyaWJ1dGVzOyBpKyspIHtcbiAgICAgICAgICBkZWxldGUgcHJpbS5hdHRyaWJ1dGVzW2BURVhDT09SRF8ke2l9YF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb2xsZWN0VW51c2VkKHRhcmdldHM6IHtcbiAgICB0ZXh0dXJlczogYm9vbGVhbjtcbiAgICBzYW1wbGVyczogYm9vbGVhbjtcbiAgICBpbWFnZXM6IGJvb2xlYW47XG4gICAgdGV4Q29vcmRzOiBib29sZWFuO1xuICAgIGFjY2Vzc29yczogYm9vbGVhbjtcbiAgICBidWZmZXJWaWV3czogYm9vbGVhbjtcbiAgICBidWZmZXJzOiBib29sZWFuO1xuICB9KTogdm9pZCB7XG4gICAgLy8gdGhlIG9yZGVyIGlzIGltcG9ydGFudDogdG9wLXRvLWJvdHRvbVxuICAgIC8qIHByZXR0aWVyLWlnbm9yZSAqLyB7XG4gICAgICBpZiAodGFyZ2V0cy50ZXh0dXJlcylcbiAgICAgICAgY29sbGVjdFVudXNlZChtZW1iZXJSZWYodGhpcy5maWxlLCBcInRleHR1cmVzXCIpLCAoKSA9PiB0aGlzLl90ZXh0dXJlSW5kZXhSZWZzKCkpO1xuICAgICAgaWYgKHRhcmdldHMuc2FtcGxlcnMpXG4gICAgICAgIGNvbGxlY3RVbnVzZWQobWVtYmVyUmVmKHRoaXMuZmlsZSwgXCJzYW1wbGVyc1wiKSwgKCkgPT4gdGhpcy5fc2FtcGxlckluZGV4UmVmcygpKTtcbiAgICAgIGlmICh0YXJnZXRzLmltYWdlcylcbiAgICAgICAgY29sbGVjdFVudXNlZChtZW1iZXJSZWYodGhpcy5maWxlLCBcImltYWdlc1wiKSwgKCkgPT4gdGhpcy5faW1hZ2VJbmRleFJlZnMoKSk7XG4gICAgICBpZiAodGFyZ2V0cy50ZXhDb29yZHMpXG4gICAgICAgIHRoaXMuX2NvbGxlY3RVbnVzZWRUZXhDb29yZHMoKTtcbiAgICAgIGlmICh0YXJnZXRzLmFjY2Vzc29ycylcbiAgICAgICAgY29sbGVjdFVudXNlZChtZW1iZXJSZWYodGhpcy5maWxlLCBcImFjY2Vzc29yc1wiKSwgKCkgPT4gdGhpcy5fYWNjZXNzb3JJbmRleFJlZnMoKSk7XG4gICAgICBpZiAodGFyZ2V0cy5idWZmZXJWaWV3cylcbiAgICAgICAgY29sbGVjdFVudXNlZChtZW1iZXJSZWYodGhpcy5maWxlLCBcImJ1ZmZlclZpZXdzXCIpLCAoKSA9PiB0aGlzLl9idWZmZXJWaWV3SW5kZXhSZWZzKCkpO1xuICAgICAgaWYgKHRhcmdldHMuYnVmZmVycylcbiAgICAgICAgY29sbGVjdFVudXNlZChtZW1iZXJSZWYodGhpcy5maWxlLCBcImJ1ZmZlcnNcIiksICgpID0+IHRoaXMuX2J1ZmZlckluZGV4UmVmcygpKTtcbiAgICB9XG4gIH1cblxuICBkZWR1cGxpY2F0ZSh0YXJnZXRzOiB7XG4gICAgYnVmZmVyczogYm9vbGVhbjtcbiAgICBidWZmZXJWaWV3czogYm9vbGVhbjtcbiAgICBhY2Nlc3NvcnM6IGJvb2xlYW47XG4gICAgaW1hZ2VzOiBib29sZWFuO1xuICAgIHNhbXBsZXJzOiBib29sZWFuO1xuICAgIHRleHR1cmVzOiBib29sZWFuO1xuICB9KTogdm9pZCB7XG4gICAgY29uc3QgaGFzaEZuID0gPFQgZXh0ZW5kcyB7IG5hbWU/OiBzdHJpbmcgfT4oeyBuYW1lLCAuLi5yZXN0IH06IFQpID0+IEpTT04uc3RyaW5naWZ5KHJlc3QpO1xuXG4gICAgLy8gdGhlIG9yZGVyIGlzIGltcG9ydGFudDogYm90dG9tLXRvLXRvcFxuICAgIC8vIFRPRE86IG1vcmUgb3B0aW1hbCBoYXNoIGZ1bmN0aW9ucz9cbiAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8ge1xuICAgICAgaWYgKHRhcmdldHMuYnVmZmVycylcbiAgICAgICAgZGVkdXAobWVtYmVyUmVmKHRoaXMuZmlsZSwgXCJidWZmZXJzXCIpLCBoYXNoRm4sICgpID0+IHRoaXMuX2J1ZmZlckluZGV4UmVmcygpKTtcbiAgICAgIGlmICh0YXJnZXRzLmJ1ZmZlclZpZXdzKVxuICAgICAgICBkZWR1cChtZW1iZXJSZWYodGhpcy5maWxlLCBcImJ1ZmZlclZpZXdzXCIpLCBoYXNoRm4sICgpID0+IHRoaXMuX2J1ZmZlclZpZXdJbmRleFJlZnMoKSk7XG4gICAgICBpZiAodGFyZ2V0cy5hY2Nlc3NvcnMpXG4gICAgICAgIGRlZHVwKG1lbWJlclJlZih0aGlzLmZpbGUsIFwiYWNjZXNzb3JzXCIpLCBoYXNoRm4sICgpID0+IHRoaXMuX2FjY2Vzc29ySW5kZXhSZWZzKCkpO1xuICAgICAgaWYgKHRhcmdldHMuaW1hZ2VzKVxuICAgICAgICBkZWR1cChtZW1iZXJSZWYodGhpcy5maWxlLCBcImltYWdlc1wiKSwgaGFzaEZuLCAoKSA9PiB0aGlzLl9pbWFnZUluZGV4UmVmcygpKTtcbiAgICAgIGlmICh0YXJnZXRzLnNhbXBsZXJzKVxuICAgICAgICBkZWR1cChtZW1iZXJSZWYodGhpcy5maWxlLCBcInNhbXBsZXJzXCIpLCBoYXNoRm4sICgpID0+IHRoaXMuX3NhbXBsZXJJbmRleFJlZnMoKSk7XG4gICAgICBpZiAodGFyZ2V0cy50ZXh0dXJlcylcbiAgICAgICAgZGVkdXAobWVtYmVyUmVmKHRoaXMuZmlsZSwgXCJ0ZXh0dXJlc1wiKSwgaGFzaEZuLCAoKSA9PiB0aGlzLl90ZXh0dXJlSW5kZXhSZWZzKCkpO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IEdsdGYgfSBmcm9tIFwiLi4vZ2x0ZlwiO1xuXG5leHBvcnQgY29uc3QgdG9EYXRhVXJpID0gKG1pbWU6IHN0cmluZywgZGF0YTogc3RyaW5nIHwgeyBidWZmZXI6IEFycmF5QnVmZmVyTGlrZSB9KTogc3RyaW5nID0+IHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSByZXR1cm4gYGRhdGE6JHttaW1lfTtiYXNlNjQsJHtkYXRhfWA7XG4gIHJldHVybiBgZGF0YToke21pbWV9O2Jhc2U2NCwke0J1ZmZlci5mcm9tKGRhdGEuYnVmZmVyKS50b1N0cmluZyhcImJhc2U2NFwiKX1gO1xufTtcblxuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgdHJhbnNwb3NlID0gKG06IEdsdGYuTWF0cml4NHg0KSA9PiBbXG4gIG1bMF0sIG1bNF0sIG1bOF0sIG1bMTJdLFxuICBtWzFdLCBtWzVdLCBtWzldLCBtWzEzXSxcbiAgbVsyXSwgbVs2XSwgbVsxMF0sIG1bMTRdLFxuICBtWzNdLCBtWzddLCBtWzExXSwgbVsxNV0sXG5dO1xuIiwgImltcG9ydCB7IEdsdGZCdWlsZGVyIH0gZnJvbSBcIi4uL2dsdGZcIjtcbmltcG9ydCB7IE1ieCB9IGZyb20gXCIuLi9tYnhcIjtcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5pbXBvcnQgeyB0b0RhdGFVcmkgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgY29udmVydFRleHR1cmVzID0gKG1ieDogTWJ4LkZpbGUsIGdsdGY6IEdsdGZCdWlsZGVyLCBvcHRpb25zOiBPcHRpb25zKTogdm9pZCA9PiB7XG4gIGZvciAoY29uc3QgW2tpbmQsIHRleHR1cmVzXSBvZiBPYmplY3QuZW50cmllcyhtYngudGV4dHVyZXNbXCIxXCJdID8/IHt9KSkge1xuICAgIGlmIChraW5kID09PSBcImNvbG9yXCIgJiYgIW9wdGlvbnMuZGVjYWxzKSBjb250aW51ZTtcbiAgICBpZiAoa2luZCA9PT0gXCJidW1wXCIgJiYgIW9wdGlvbnMuYnVtcE1hcHMpIGNvbnRpbnVlO1xuICAgIGlmIChraW5kID09PSBcIm5vcm1hbFwiICYmICFvcHRpb25zLm5vcm1hbE1hcHMpIGNvbnRpbnVlO1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgdGV4dHVyZV0gb2YgT2JqZWN0LmVudHJpZXM8c3RyaW5nPih0ZXh0dXJlcykpIHtcbiAgICAgIGNvbnZlcnRUZXh0dXJlKGAvdGV4dHVyZXMvJHtraW5kfS8ke25hbWV9YCwgdGV4dHVyZSwgZ2x0Zik7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBba2luZCwgdGV4dHVyZXNdIG9mIE9iamVjdC5lbnRyaWVzKG1ieC50ZXh0dXJlc1tcIjJcIl0/Lm9mZmljaWFsID8/IHt9KSkge1xuICAgIGlmIChraW5kID09PSBcImNvbG9yXCIgJiYgIW9wdGlvbnMuZGVjYWxzKSBjb250aW51ZTtcbiAgICBpZiAoa2luZCA9PT0gXCJidW1wXCIgJiYgIW9wdGlvbnMuYnVtcE1hcHMpIGNvbnRpbnVlO1xuICAgIGlmIChraW5kID09PSBcIm5vcm1hbFwiICYmICFvcHRpb25zLm5vcm1hbE1hcHMpIGNvbnRpbnVlO1xuXG4gICAgZm9yIChjb25zdCBbbmFtZSwgdGV4dHVyZV0gb2YgT2JqZWN0LmVudHJpZXM8c3RyaW5nPih0ZXh0dXJlcykpIHtcbiAgICAgIGNvbnZlcnRUZXh0dXJlKGAvdGV4dHVyZXMvJHtraW5kfS8ke25hbWV9YCwgdGV4dHVyZSwgZ2x0Zik7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBba2luZCwgdGV4dHVyZXNdIG9mIE9iamVjdC5lbnRyaWVzKG1ieC50ZXh0dXJlc1tcIjJcIl0/LmN1c3RvbSA/PyB7fSkpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJjb2xvclwiICYmICFvcHRpb25zLmRlY2FscykgY29udGludWU7XG4gICAgaWYgKGtpbmQgPT09IFwiYnVtcFwiICYmICFvcHRpb25zLmJ1bXBNYXBzKSBjb250aW51ZTtcbiAgICBpZiAoa2luZCA9PT0gXCJub3JtYWxcIiAmJiAhb3B0aW9ucy5ub3JtYWxNYXBzKSBjb250aW51ZTtcblxuICAgIGZvciAoY29uc3QgW25hbWUsIHRleHR1cmVdIG9mIE9iamVjdC5lbnRyaWVzPHN0cmluZz4odGV4dHVyZXMpKSB7XG4gICAgICBjb252ZXJ0VGV4dHVyZShgL3RleHR1cmVzLyR7a2luZH0vJHtuYW1lfWAsIHRleHR1cmUsIGdsdGYpO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgY29udmVydFRleHR1cmUgPSAocGF0aDogc3RyaW5nLCB0ZXh0dXJlOiBNYnguQmFzZTY0U3RyaW5nLCBnbHRmOiBHbHRmQnVpbGRlcik6IHZvaWQgPT4ge1xuICBnbHRmLmFkZEltYWdlKHBhdGgsIHsgbmFtZTogcGF0aCwgdXJpOiB0b0RhdGFVcmkoXCJpbWFnZS9wbmdcIiwgdGV4dHVyZSkgfSk7XG59O1xuIiwgImltcG9ydCB7IE1ieCB9IGZyb20gXCIuLi9tYnhcIjtcblxuZXhwb3J0IGludGVyZmFjZSBWZXJ0ZXgge1xuICBmbGFnczogbnVtYmVyO1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICBub3JtYWw6IG51bWJlcjtcbiAgY29sb3I6IG51bWJlcjtcbiAgdXZzOiBudW1iZXJbXTtcbn1cblxuY29uc3QgbWFrZVZlcnRleCA9IChmbGFnczogbnVtYmVyKTogVmVydGV4ID0+ICh7XG4gIGZsYWdzLFxuICBwb3NpdGlvbjogLTEsXG4gIG5vcm1hbDogLTEsXG4gIGNvbG9yOiAtMSxcbiAgdXZzOiBbXSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24qIGdldFZlcnRpY2VzKGZhY2VzOiBudW1iZXJbXSwgdXZMYXllckNvdW50OiBudW1iZXIpOiBJdGVyYWJsZTxWZXJ0ZXg+IHtcbiAgbGV0IG9mZiA9IDA7XG4gIHdoaWxlIChvZmYgPCBmYWNlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBmbGFncyA9IGZhY2VzW29mZl07XG4gICAgb2ZmICs9IDE7XG5cbiAgICBpZiAoZmxhZ3MgJiBNYnguRmFjZUZsYWdzLlFVQUQpIHtcbiAgICAgIGNvbnN0IHYwID0gbWFrZVZlcnRleChmbGFncyk7XG4gICAgICBjb25zdCB2MSA9IG1ha2VWZXJ0ZXgoZmxhZ3MpO1xuICAgICAgY29uc3QgdjIgPSBtYWtlVmVydGV4KGZsYWdzKTtcbiAgICAgIGNvbnN0IHYzID0gbWFrZVZlcnRleChmbGFncyk7XG5cbiAgICAgIHYwLnBvc2l0aW9uID0gZmFjZXNbb2ZmICsgMF07XG4gICAgICB2MS5wb3NpdGlvbiA9IGZhY2VzW29mZiArIDFdO1xuICAgICAgdjIucG9zaXRpb24gPSBmYWNlc1tvZmYgKyAyXTtcbiAgICAgIHYzLnBvc2l0aW9uID0gZmFjZXNbb2ZmICsgM107XG5cbiAgICAgIG9mZiArPSA0O1xuXG4gICAgICBpZiAoZmxhZ3MgJiBNYnguRmFjZUZsYWdzLk1BVEVSSUFMKSB7XG4gICAgICAgIG9mZiArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxhZ3MgJiBNYnguRmFjZUZsYWdzLlVWUykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHV2TGF5ZXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgdjAudXZzLnB1c2goZmFjZXNbb2ZmICsgMF0pO1xuICAgICAgICAgIHYxLnV2cy5wdXNoKGZhY2VzW29mZiArIDFdKTtcbiAgICAgICAgICB2Mi51dnMucHVzaChmYWNlc1tvZmYgKyAyXSk7XG4gICAgICAgICAgdjMudXZzLnB1c2goZmFjZXNbb2ZmICsgM10pO1xuXG4gICAgICAgICAgb2ZmICs9IDQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZsYWdzICYgTWJ4LkZhY2VGbGFncy5OT1JNQUxTKSB7XG4gICAgICAgIHYwLm5vcm1hbCA9IGZhY2VzW29mZiArIDBdO1xuICAgICAgICB2MS5ub3JtYWwgPSBmYWNlc1tvZmYgKyAxXTtcbiAgICAgICAgdjIubm9ybWFsID0gZmFjZXNbb2ZmICsgMl07XG4gICAgICAgIHYzLm5vcm1hbCA9IGZhY2VzW29mZiArIDNdO1xuXG4gICAgICAgIG9mZiArPSA0O1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxhZ3MgJiBNYnguRmFjZUZsYWdzLkNPTE9SUykge1xuICAgICAgICBvZmYgKz0gNDtcbiAgICAgIH1cblxuICAgICAgeWllbGQgdjA7XG4gICAgICB5aWVsZCB2MTtcbiAgICAgIHlpZWxkIHYyO1xuXG4gICAgICB5aWVsZCB2MjtcbiAgICAgIHlpZWxkIHYzO1xuICAgICAgeWllbGQgdjA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHYwID0gbWFrZVZlcnRleChmbGFncyk7XG4gICAgICBjb25zdCB2MSA9IG1ha2VWZXJ0ZXgoZmxhZ3MpO1xuICAgICAgY29uc3QgdjIgPSBtYWtlVmVydGV4KGZsYWdzKTtcblxuICAgICAgdjAucG9zaXRpb24gPSBmYWNlc1tvZmYgKyAwXTtcbiAgICAgIHYxLnBvc2l0aW9uID0gZmFjZXNbb2ZmICsgMV07XG4gICAgICB2Mi5wb3NpdGlvbiA9IGZhY2VzW29mZiArIDJdO1xuXG4gICAgICBvZmYgKz0gMztcblxuICAgICAgaWYgKGZsYWdzICYgTWJ4LkZhY2VGbGFncy5NQVRFUklBTCkge1xuICAgICAgICBvZmYgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsYWdzICYgTWJ4LkZhY2VGbGFncy5VVlMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1dkxheWVyQ291bnQ7IGkrKykge1xuICAgICAgICAgIHYwLnV2cy5wdXNoKGZhY2VzW29mZiArIDBdKTtcbiAgICAgICAgICB2MS51dnMucHVzaChmYWNlc1tvZmYgKyAxXSk7XG4gICAgICAgICAgdjIudXZzLnB1c2goZmFjZXNbb2ZmICsgMl0pO1xuXG4gICAgICAgICAgb2ZmICs9IDM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZsYWdzICYgTWJ4LkZhY2VGbGFncy5OT1JNQUxTKSB7XG4gICAgICAgIHYwLm5vcm1hbCA9IGZhY2VzW29mZiArIDBdO1xuICAgICAgICB2MS5ub3JtYWwgPSBmYWNlc1tvZmYgKyAxXTtcbiAgICAgICAgdjIubm9ybWFsID0gZmFjZXNbb2ZmICsgMl07XG5cbiAgICAgICAgb2ZmICs9IDM7XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGFncyAmIE1ieC5GYWNlRmxhZ3MuQ09MT1JTKSB7XG4gICAgICAgIG9mZiArPSAzO1xuICAgICAgfVxuXG4gICAgICB5aWVsZCB2MDtcbiAgICAgIHlpZWxkIHYxO1xuICAgICAgeWllbGQgdjI7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHsgTWJ4IH0gZnJvbSBcIi4uL21ieFwiO1xuaW1wb3J0IHsgR2x0ZiwgR2x0ZkJ1aWxkZXIgfSBmcm9tIFwiLi4vZ2x0ZlwiO1xuXG5pbXBvcnQgeyB0b0RhdGFVcmkgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5pbXBvcnQgeyBWZXJ0ZXgsIGdldFZlcnRpY2VzIH0gZnJvbSBcIi4vdmVydGljZXNcIjtcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0R2VvbWV0cmllcyA9IChtYng6IE1ieC5GaWxlLCBnbHRmOiBHbHRmQnVpbGRlciwgb3B0aW9uczogT3B0aW9ucyk6IHZvaWQgPT4ge1xuICBpZiAob3B0aW9ucy5sb2dvcykge1xuICAgIGZvciAoY29uc3QgW2luZGV4LCBnZW9tZXRyeV0gb2YgT2JqZWN0LmVudHJpZXMobWJ4LmRldGFpbHMubG9nb3MpKSB7XG4gICAgICBjb252ZXJ0R2VvbWV0cnkoYC9kZXRhaWxzL2xvZ29zLyR7aW5kZXh9Lmpzb25gLCBnZW9tZXRyeSwgZ2x0Zik7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBbaW5kZXgsIGdlb21ldHJ5XSBvZiBPYmplY3QuZW50cmllcyhtYnguZGV0YWlscy5rbm9icykpIHtcbiAgICBjb252ZXJ0R2VvbWV0cnkoYC9kZXRhaWxzL2tub2JzLyR7aW5kZXh9Lmpzb25gLCBnZW9tZXRyeSwgZ2x0Zik7XG4gIH1cblxuICBmb3IgKGNvbnN0IFtpbmRleCwgZ2VvbWV0cnldIG9mIE9iamVjdC5lbnRyaWVzKG1ieC5kZXRhaWxzLnR1YmVzKSkge1xuICAgIGNvbnZlcnRHZW9tZXRyeShgL2RldGFpbHMvdHViZXMvJHtpbmRleH0uanNvbmAsIGdlb21ldHJ5LCBnbHRmKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW2luZGV4LCBnZW9tZXRyeV0gb2YgT2JqZWN0LmVudHJpZXMobWJ4LmRldGFpbHMucGlucykpIHtcbiAgICBjb252ZXJ0R2VvbWV0cnkoYC9kZXRhaWxzL3BpbnMvJHtpbmRleH0uanNvbmAsIGdlb21ldHJ5LCBnbHRmKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW3ZlcnNpb24sIGdlb21ldHJpZXNdIG9mIE9iamVjdC5lbnRyaWVzKG1ieC5nZW9tZXRyaWVzKSkge1xuICAgIGZvciAoY29uc3QgW25hbWUsIGdlb21ldHJ5XSBvZiBPYmplY3QuZW50cmllcyhnZW9tZXRyaWVzKSkge1xuICAgICAgY29udmVydEdlb21ldHJ5KGAvZ2VvbWV0cmllcy8ke25hbWV9YCwgZ2VvbWV0cnksIGdsdGYpO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgY29udmVydEdlb21ldHJ5ID0gKHBhdGg6IHN0cmluZywgZ2VvbTogTWJ4Lkdlb21ldHJ5LCBnbHRmOiBHbHRmQnVpbGRlcik6IHZvaWQgPT4ge1xuICBjb25zdCBoYXNoVmVydGV4OiAodjogVmVydGV4KSA9PiBzdHJpbmcgPSAodikgPT4gSlNPTi5zdHJpbmdpZnkodik7IC8vIGdvb2QgZW5vdWdoIGZvciBwcm90b3R5cGVcbiAgY29uc3QgaW5kaWNlc0J5SGFzaCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgbGV0IG5leHRJbmRleCA9IDA7XG5cbiAgY29uc3QgaW5kaWNlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3QgcG9zaXRpb25zOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBub3JtYWxzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCB1dnM6IG51bWJlcltdW10gPSAoZ2VvbS51dnMgPz8gW10pLm1hcCgoKSA9PiBbXSk7XG5cbiAgY29uc3QgdXZMYXllckNvdW50ID0gZ2VvbS51dnM/Lmxlbmd0aCA/PyAwO1xuXG4gIGZvciAoY29uc3QgdmVydGV4IG9mIGdldFZlcnRpY2VzKGdlb20uZmFjZXMsIHV2TGF5ZXJDb3VudCkpIHtcbiAgICBjb25zdCB2ZXJ0ZXhIYXNoID0gaGFzaFZlcnRleCh2ZXJ0ZXgpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IGluZGljZXNCeUhhc2guZ2V0KHZlcnRleEhhc2gpO1xuICAgIGlmIChleGlzdGluZ0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGluZGljZXMucHVzaChleGlzdGluZ0luZGV4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gbmV4dEluZGV4Kys7XG4gICAgaW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICBpbmRpY2VzQnlIYXNoLnNldCh2ZXJ0ZXhIYXNoLCBpbmRleCk7XG5cbiAgICBwb3NpdGlvbnMucHVzaChnZW9tLnZlcnRpY2VzW3ZlcnRleC5wb3NpdGlvbiAqIDMgKyAwXSk7XG4gICAgcG9zaXRpb25zLnB1c2goZ2VvbS52ZXJ0aWNlc1t2ZXJ0ZXgucG9zaXRpb24gKiAzICsgMV0pO1xuICAgIHBvc2l0aW9ucy5wdXNoKGdlb20udmVydGljZXNbdmVydGV4LnBvc2l0aW9uICogMyArIDJdKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXZMYXllckNvdW50OyBpKyspIHtcbiAgICAgIHV2c1tpXS5wdXNoKGdlb20udXZzIVtpXVt2ZXJ0ZXgudXZzW2ldICogMiArIDBdKTtcbiAgICAgIHV2c1tpXS5wdXNoKDEgLSBnZW9tLnV2cyFbaV1bdmVydGV4LnV2c1tpXSAqIDIgKyAxXSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnRleC5mbGFncyAmIE1ieC5GYWNlRmxhZ3MuTk9STUFMUykge1xuICAgICAgbm9ybWFscy5wdXNoKGdlb20ubm9ybWFsc1t2ZXJ0ZXgubm9ybWFsICogMyArIDBdKTtcbiAgICAgIG5vcm1hbHMucHVzaChnZW9tLm5vcm1hbHNbdmVydGV4Lm5vcm1hbCAqIDMgKyAxXSk7XG4gICAgICBub3JtYWxzLnB1c2goZ2VvbS5ub3JtYWxzW3ZlcnRleC5ub3JtYWwgKiAzICsgMl0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGluZGljZXNBcnJheSA9IGluZGljZXMubGVuZ3RoIDwgMjU1ID8gbmV3IFVpbnQ4QXJyYXkoaW5kaWNlcykgOiBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyk7XG4gIGNvbnN0IHBvc2l0aW9uc0FycmF5ID0gbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbnMpO1xuICBjb25zdCBub3JtYWxzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG5vcm1hbHMpO1xuICBjb25zdCB1dkFycmF5cyA9IHV2cy5tYXAoKGxheWVyKSA9PiBuZXcgRmxvYXQzMkFycmF5KGxheWVyKSk7XG5cbiAgY29uc3QgcG9zaXRpb25NaW4gPSBbcG9zaXRpb25zQXJyYXlbMF0sIHBvc2l0aW9uc0FycmF5WzFdLCBwb3NpdGlvbnNBcnJheVsyXV07XG4gIGNvbnN0IHBvc2l0aW9uTWF4ID0gW3Bvc2l0aW9uc0FycmF5WzBdLCBwb3NpdGlvbnNBcnJheVsxXSwgcG9zaXRpb25zQXJyYXlbMl1dO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgcG9zaXRpb25NaW5bMF0gPSBNYXRoLm1pbihwb3NpdGlvbk1pblswXSwgcG9zaXRpb25zQXJyYXlbaSArIDBdKTtcbiAgICBwb3NpdGlvbk1pblsxXSA9IE1hdGgubWluKHBvc2l0aW9uTWluWzFdLCBwb3NpdGlvbnNBcnJheVtpICsgMV0pO1xuICAgIHBvc2l0aW9uTWluWzJdID0gTWF0aC5taW4ocG9zaXRpb25NaW5bMl0sIHBvc2l0aW9uc0FycmF5W2kgKyAyXSk7XG5cbiAgICBwb3NpdGlvbk1heFswXSA9IE1hdGgubWF4KHBvc2l0aW9uTWF4WzBdLCBwb3NpdGlvbnNBcnJheVtpICsgMF0pO1xuICAgIHBvc2l0aW9uTWF4WzFdID0gTWF0aC5tYXgocG9zaXRpb25NYXhbMV0sIHBvc2l0aW9uc0FycmF5W2kgKyAxXSk7XG4gICAgcG9zaXRpb25NYXhbMl0gPSBNYXRoLm1heChwb3NpdGlvbk1heFsyXSwgcG9zaXRpb25zQXJyYXlbaSArIDJdKTtcbiAgfVxuXG4gIGdsdGYuYWRkQWNjZXNzb3IocGF0aCArIFwiI2luZGljZXNcIiwge1xuICAgIG5hbWU6IHBhdGggKyBcIiNpbmRpY2VzXCIsXG4gICAgYnl0ZU9mZnNldDogMCxcbiAgICBjb3VudDogaW5kaWNlc0FycmF5Lmxlbmd0aCxcbiAgICB0eXBlOiBcIlNDQUxBUlwiLFxuICAgIGNvbXBvbmVudFR5cGU6IGluZGljZXNBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBHbHRmLkNvbnN0LlU4IDogR2x0Zi5Db25zdC5VMTYsXG5cbiAgICBidWZmZXJWaWV3OiBnbHRmLmFkZEJ1ZmZlclZpZXcocGF0aCArIFwiI2luZGljZXNcIiwge1xuICAgICAgbmFtZTogcGF0aCArIFwiI2luZGljZXNcIixcbiAgICAgIGJ5dGVPZmZzZXQ6IDAsXG4gICAgICBieXRlTGVuZ3RoOiBpbmRpY2VzQXJyYXkuYnl0ZUxlbmd0aCxcbiAgICAgIHRhcmdldDogR2x0Zi5Db25zdC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcblxuICAgICAgYnVmZmVyOiBnbHRmLmFkZEJ1ZmZlcihwYXRoICsgXCIjaW5kaWNlc1wiLCB7XG4gICAgICAgIG5hbWU6IHBhdGggKyBcIiNpbmRpY2VzXCIsXG4gICAgICAgIGJ5dGVMZW5ndGg6IGluZGljZXNBcnJheS5ieXRlTGVuZ3RoLFxuICAgICAgICB1cmk6IHRvRGF0YVVyaShcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLCBpbmRpY2VzQXJyYXkpLFxuICAgICAgfSksXG4gICAgfSksXG4gIH0pO1xuXG4gIGdsdGYuYWRkQWNjZXNzb3IocGF0aCArIFwiI3Bvc2l0aW9uc1wiLCB7XG4gICAgbmFtZTogcGF0aCArIFwiI3Bvc2l0aW9uc1wiLFxuICAgIGJ5dGVPZmZzZXQ6IDAsXG4gICAgY291bnQ6IHBvc2l0aW9uc0FycmF5Lmxlbmd0aCAvIDMsXG4gICAgdHlwZTogXCJWRUMzXCIsXG4gICAgY29tcG9uZW50VHlwZTogR2x0Zi5Db25zdC5GMzIsXG4gICAgbWluOiBwb3NpdGlvbk1pbixcbiAgICBtYXg6IHBvc2l0aW9uTWF4LFxuXG4gICAgYnVmZmVyVmlldzogZ2x0Zi5hZGRCdWZmZXJWaWV3KHBhdGggKyBcIiNwb3NpdGlvbnNcIiwge1xuICAgICAgbmFtZTogcGF0aCArIFwiI3Bvc2l0aW9uc1wiLFxuICAgICAgYnl0ZU9mZnNldDogMCxcbiAgICAgIGJ5dGVMZW5ndGg6IHBvc2l0aW9uc0FycmF5LmJ5dGVMZW5ndGgsXG4gICAgICB0YXJnZXQ6IEdsdGYuQ29uc3QuQVJSQVlfQlVGRkVSLFxuXG4gICAgICBidWZmZXI6IGdsdGYuYWRkQnVmZmVyKHBhdGggKyBcIiNwb3NpdGlvbnNcIiwge1xuICAgICAgICBuYW1lOiBwYXRoICsgXCIjcG9zaXRpb25zXCIsXG4gICAgICAgIGJ5dGVMZW5ndGg6IHBvc2l0aW9uc0FycmF5LmJ5dGVMZW5ndGgsXG4gICAgICAgIHVyaTogdG9EYXRhVXJpKFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsIHBvc2l0aW9uc0FycmF5KSxcbiAgICAgIH0pLFxuICAgIH0pLFxuICB9KTtcblxuICBpZiAobm9ybWFscykge1xuICAgIGdsdGYuYWRkQWNjZXNzb3IocGF0aCArIFwiI25vcm1hbHNcIiwge1xuICAgICAgbmFtZTogcGF0aCArIFwiI25vcm1hbHNcIixcbiAgICAgIGJ5dGVPZmZzZXQ6IDAsXG4gICAgICBjb3VudDogbm9ybWFsc0FycmF5Lmxlbmd0aCAvIDMsXG4gICAgICB0eXBlOiBcIlZFQzNcIixcbiAgICAgIGNvbXBvbmVudFR5cGU6IEdsdGYuQ29uc3QuRjMyLFxuXG4gICAgICBidWZmZXJWaWV3OiBnbHRmLmFkZEJ1ZmZlclZpZXcocGF0aCArIFwiI25vcm1hbHNcIiwge1xuICAgICAgICBuYW1lOiBwYXRoICsgXCIjbm9ybWFsc1wiLFxuICAgICAgICBieXRlT2Zmc2V0OiAwLFxuICAgICAgICBieXRlTGVuZ3RoOiBub3JtYWxzQXJyYXkuYnl0ZUxlbmd0aCxcbiAgICAgICAgdGFyZ2V0OiBHbHRmLkNvbnN0LkFSUkFZX0JVRkZFUixcblxuICAgICAgICBidWZmZXI6IGdsdGYuYWRkQnVmZmVyKHBhdGggKyBcIiNub3JtYWxzXCIsIHtcbiAgICAgICAgICBuYW1lOiBwYXRoICsgXCIjbm9ybWFsc1wiLFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IG5vcm1hbHNBcnJheS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIHVyaTogdG9EYXRhVXJpKFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsIG5vcm1hbHNBcnJheSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IFtpLCB1dkxheWVyQXJyYXldIG9mIHV2QXJyYXlzLmVudHJpZXMoKSkge1xuICAgIGdsdGYuYWRkQWNjZXNzb3IocGF0aCArIGAjdXZzLyR7aX1gLCB7XG4gICAgICBuYW1lOiBwYXRoICsgYCN1dnMvJHtpfWAsXG4gICAgICBieXRlT2Zmc2V0OiAwLFxuICAgICAgY291bnQ6IHV2TGF5ZXJBcnJheS5sZW5ndGggLyAyLFxuICAgICAgdHlwZTogXCJWRUMyXCIsXG4gICAgICBjb21wb25lbnRUeXBlOiBHbHRmLkNvbnN0LkYzMixcblxuICAgICAgYnVmZmVyVmlldzogZ2x0Zi5hZGRCdWZmZXJWaWV3KHBhdGggKyBgI3V2cy8ke2l9YCwge1xuICAgICAgICBuYW1lOiBwYXRoICsgYCN1dnMvJHtpfWAsXG4gICAgICAgIGJ5dGVPZmZzZXQ6IDAsXG4gICAgICAgIGJ5dGVMZW5ndGg6IHV2TGF5ZXJBcnJheS5ieXRlTGVuZ3RoLFxuICAgICAgICB0YXJnZXQ6IEdsdGYuQ29uc3QuQVJSQVlfQlVGRkVSLFxuXG4gICAgICAgIGJ1ZmZlcjogZ2x0Zi5hZGRCdWZmZXIocGF0aCArIGAjdXZzLyR7aX1gLCB7XG4gICAgICAgICAgbmFtZTogcGF0aCArIGAjdXZzLyR7aX1gLFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IHV2TGF5ZXJBcnJheS5ieXRlTGVuZ3RoLFxuICAgICAgICAgIHVyaTogdG9EYXRhVXJpKFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsIHV2TGF5ZXJBcnJheSksXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cbn07XG4iLCAiaW1wb3J0IHsgUE5HIH0gZnJvbSBcInBuZ2pzXCI7XG5cbmltcG9ydCB7IEdsdGYsIEdsdGZCdWlsZGVyIH0gZnJvbSBcIi4uL2dsdGZcIjtcbmltcG9ydCB7IE1ieCB9IGZyb20gXCIuLi9tYnhcIjtcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gXCIuL2RhdGEvY29sb3JzXCI7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xuXG5leHBvcnQgY29uc3QgY29udmVydE1hdGVyaWFsID0gKFxuICBpZDogbnVtYmVyLFxuICBub3JtYWxzOiBNYnguVGV4dHVyZVJlZltdIHwgdW5kZWZpbmVkLFxuICBkZWNvcmF0aW9uOiBNYnguUGFydERlY29yYXRpb24gfCB1bmRlZmluZWQsXG4gIGdsdGY6IEdsdGZCdWlsZGVyLFxuICBvcHRpb25zOiBPcHRpb25zXG4pOiBHbHRmLkluZGV4PEdsdGYuTWF0ZXJpYWw+IHwgdW5kZWZpbmVkID0+IHtcbiAgbm9ybWFscyA/Pz0gW107XG4gIGRlY29yYXRpb24gPz89IHt9O1xuXG4gIGNvbnN0IGlzU2ltcGxlID1cbiAgICAoIW9wdGlvbnMubm9ybWFsTWFwcyB8fCBub3JtYWxzLmxlbmd0aCA9PT0gMCkgJiZcbiAgICAoIW9wdGlvbnMuZGVjYWxzIHx8IE9iamVjdC5rZXlzKGRlY29yYXRpb24pLmxlbmd0aCA9PT0gMCk7XG5cbiAgY29uc3Qga2V5ID0gYC9tYXRlcmlhbHMvJHtpc1NpbXBsZSA/IGlkIDogTWF0aC5yYW5kb20oKX1gO1xuXG4gIGlmIChpc1NpbXBsZSAmJiBnbHRmLmhhc01hdGVyaWFsKGtleSkpIHJldHVybiBnbHRmLmdldE1hdGVyaWFsSW5kZXgoa2V5KTtcblxuICBjb25zdCBjb2xvciA9IGNvbG9yc1tpZF07XG4gIGlmICghY29sb3IpIHtcbiAgICBjb25zb2xlLndhcm4oXCJtYXRlcmlhbCBub3QgZm91bmQ6IFwiICsgaWQpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBsZXQgbWF0ZXJpYWw6IEdsdGYuTWF0ZXJpYWwgfCB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoY29sb3IudHlwZSkge1xuICAgIGNhc2UgXCJzb2xpZFwiOlxuICAgICAgbWF0ZXJpYWwgPSB7XG4gICAgICAgIG5hbWU6IGNvbG9yLm5hbWUsXG4gICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzOiB7XG4gICAgICAgICAgYmFzZUNvbG9yRmFjdG9yOiBjb2xvci5jb2xvcixcbiAgICAgICAgICBtZXRhbGxpY0ZhY3RvcjogMC4wLFxuICAgICAgICAgIHJvdWdobmVzc0ZhY3RvcjogMC4xLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInRyYW5zcGFyZW50XCI6XG4gICAgICBtYXRlcmlhbCA9IHtcbiAgICAgICAgbmFtZTogY29sb3IubmFtZSxcbiAgICAgICAgYWxwaGFNb2RlOiBcIkJMRU5EXCIsXG4gICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzOiB7XG4gICAgICAgICAgYmFzZUNvbG9yRmFjdG9yOiBjb2xvci5jb2xvcixcbiAgICAgICAgICBtZXRhbGxpY0ZhY3RvcjogMC4wLFxuICAgICAgICAgIHJvdWdobmVzc0ZhY3RvcjogMC4wLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInJ1YmJlclwiOlxuICAgICAgbWF0ZXJpYWwgPSB7XG4gICAgICAgIG5hbWU6IGNvbG9yLm5hbWUsXG4gICAgICAgIHBick1ldGFsbGljUm91Z2huZXNzOiB7XG4gICAgICAgICAgYmFzZUNvbG9yRmFjdG9yOiBjb2xvci5jb2xvcixcbiAgICAgICAgICBtZXRhbGxpY0ZhY3RvcjogMC4wLFxuICAgICAgICAgIHJvdWdobmVzc0ZhY3RvcjogMC43NSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLndhcm4oXCJhZGQgdGhpcyBtYXRlcmlhbFwiKTtcbiAgICAgIGNvbnNvbGUud2Fybihjb2xvcik7XG4gIH1cblxuICBpZiAoIW1hdGVyaWFsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gIGlmIChvcHRpb25zLmRlY2FscyAmJiBkZWNvcmF0aW9uLnV2ICYmIGRlY29yYXRpb24uY29sb3IpIHtcbiAgICBjb25zdCBiYXNlQ29sb3IgPSBtYXRlcmlhbC5wYnJNZXRhbGxpY1JvdWdobmVzcyEuYmFzZUNvbG9yRmFjdG9yITtcblxuICAgIGNvbnN0IGltYWdlRGF0YSA9IEJ1ZmZlci5mcm9tKFxuICAgICAgZ2x0Zi5nZXRJbWFnZShgL3RleHR1cmVzL2NvbG9yLyR7ZGVjb3JhdGlvbi5jb2xvci5uYW1lfWApLnVyaSEuc3BsaXQoXCIsXCIpWzFdLFxuICAgICAgXCJiYXNlNjRcIlxuICAgICk7XG5cbiAgICBjb25zdCBwbmcgPSBQTkcuc3luYy5yZWFkKGltYWdlRGF0YSk7XG5cbiAgICBmb3IgKGxldCBvZmYgPSAwOyBvZmYgPCBwbmcuZGF0YS5sZW5ndGg7IG9mZiArPSA0KSB7XG4gICAgICBjb25zdCBhbHBoYSA9IHBuZy5kYXRhW29mZiArIDNdIC8gMjU1O1xuXG4gICAgICBwbmcuZGF0YVtvZmYgKyAwXSA9IE1hdGgucm91bmQocG5nLmRhdGFbb2ZmICsgMF0gKiBhbHBoYSArIDI1NSAqIGJhc2VDb2xvclswXSAqICgxIC0gYWxwaGEpKTtcbiAgICAgIHBuZy5kYXRhW29mZiArIDFdID0gTWF0aC5yb3VuZChwbmcuZGF0YVtvZmYgKyAxXSAqIGFscGhhICsgMjU1ICogYmFzZUNvbG9yWzFdICogKDEgLSBhbHBoYSkpO1xuICAgICAgcG5nLmRhdGFbb2ZmICsgMl0gPSBNYXRoLnJvdW5kKHBuZy5kYXRhW29mZiArIDJdICogYWxwaGEgKyAyNTUgKiBiYXNlQ29sb3JbMl0gKiAoMSAtIGFscGhhKSk7XG4gICAgICBwbmcuZGF0YVtvZmYgKyAzXSA9IE1hdGgucm91bmQoMjU1ICogYmFzZUNvbG9yWzNdKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdUZXh0dXJlRGF0YVVyaSA9IFwiZGF0YTppbWFnZS9wbmc7YmFzZTY0LFwiICsgUE5HLnN5bmMud3JpdGUocG5nKS50b1N0cmluZyhcImJhc2U2NFwiKTtcblxuICAgIG1hdGVyaWFsLnBick1ldGFsbGljUm91Z2huZXNzIS5iYXNlQ29sb3JUZXh0dXJlID0ge1xuICAgICAgdGV4Q29vcmQ6IGRlY29yYXRpb24udXYsXG4gICAgICBpbmRleDogZ2x0Zi5hZGRUZXh0dXJlKGtleSArIFwiI2NvbG9yXCIsIHtcbiAgICAgICAgbmFtZToga2V5ICsgXCIjY29sb3JcIixcbiAgICAgICAgc291cmNlOiBnbHRmLmFkZEltYWdlKGtleSArIFwiI2NvbG9yXCIsIHtcbiAgICAgICAgICBuYW1lOiBrZXkgKyBcIiNjb2xvclwiLFxuICAgICAgICAgIHVyaTogbmV3VGV4dHVyZURhdGFVcmksXG4gICAgICAgIH0pLFxuICAgICAgICBzYW1wbGVyOiBnbHRmLmFkZFNhbXBsZXIoa2V5ICsgXCIjY29sb3JcIiwge1xuICAgICAgICAgIG5hbWU6IGtleSArIFwiI2NvbG9yXCIsXG4gICAgICAgICAgd3JhcFM6IEdsdGYuQ29uc3QuQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICB3cmFwVDogR2x0Zi5Db25zdC5DTEFNUF9UT19FREdFLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cblxuICBpZiAob3B0aW9ucy5ub3JtYWxNYXBzICYmIG5vcm1hbHNbMF0pIHtcbiAgICBtYXRlcmlhbC5ub3JtYWxUZXh0dXJlID0ge1xuICAgICAgdGV4Q29vcmQ6IG5vcm1hbHNbMF0udXYsXG4gICAgICBpbmRleDogZ2x0Zi5hZGRUZXh0dXJlKGtleSArIFwiI25vcm1hbHNcIiwge1xuICAgICAgICBuYW1lOiBrZXkgKyBcIiNub3JtYWxzXCIsXG4gICAgICAgIHNvdXJjZTogZ2x0Zi5nZXRJbWFnZUluZGV4KGAvdGV4dHVyZXMvbm9ybWFsLyR7bm9ybWFsc1swXS5maWxlfWApLFxuICAgICAgICBzYW1wbGVyOiBnbHRmLmFkZFNhbXBsZXIoa2V5ICsgXCIjbm9ybWFsc1wiLCB7XG4gICAgICAgICAgbmFtZToga2V5ICsgXCIjbm9ybWFsc1wiLFxuICAgICAgICAgIHdyYXBTOiBub3JtYWxzWzBdLnJlcGVhdCA/IEdsdGYuQ29uc3QuUkVQRUFUIDogR2x0Zi5Db25zdC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgIHdyYXBUOiBub3JtYWxzWzBdLnJlcGVhdCA/IEdsdGYuQ29uc3QuUkVQRUFUIDogR2x0Zi5Db25zdC5DTEFNUF9UT19FREdFLFxuICAgICAgICB9KSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2x0Zi5hZGRNYXRlcmlhbChrZXksIG1hdGVyaWFsKTtcbn07XG4iLCAiZXhwb3J0IHR5cGUgTWF0ZXJpYWxUeXBlID1cbiAgfCBcInRyYW5zcGFyZW50XCJcbiAgfCBcInNvbGlkXCJcbiAgfCBcInBlYXJsXCJcbiAgfCBcIm1ldGFsbGljXCJcbiAgfCBcInByb2Nlc3NcIlxuICB8IFwiaW5rXCJcbiAgfCBcImNocm9tZVwiXG4gIHwgXCJtaWxreVwiXG4gIHwgXCJnbGl0dGVyXCJcbiAgfCBcInJ1YmJlclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBNYXRlcmlhbFR5cGU7XG4gIGNvbG9yOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbG9yczogUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgQ29sb3I+PiA9IHtcbiAgXCIxXCI6IHtcbiAgICBuYW1lOiBcIldoaXRlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45NTY4NjI3NDc2NjkyMiwgMC45NTY4NjI3NDc2NjkyMiwgMC45NTY4NjI3NDc2NjkyMiwgMV0sXG4gIH0sXG4gIFwiMlwiOiB7XG4gICAgbmFtZTogXCJHcmV5XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41NDExNzY0OTc5MzYyNDg4LCAwLjU3MjU0OTA0NTA4NTkwNywgMC41NTI5NDEyMDMxMTczNzA2LCAxXSxcbiAgfSxcbiAgXCIzXCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IFllbGxvd1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzEsIDAuODM5MjE1Njk1ODU4MDAxNywgMC41NTI5NDEyMDMxMTczNzA2LCAxXSxcbiAgfSxcbiAgXCI0XCI6IHtcbiAgICBuYW1lOiBcIkJyaWNrIFJlZFwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTQ5MDE5NjEwODgxODA1NCwgMC40MzkyMTU2ODk4OTc1MzcyMywgMC4zNjg2Mjc0NTg4MTA4MDYzLCAxXSxcbiAgfSxcbiAgXCI1XCI6IHtcbiAgICBuYW1lOiBcIkJyaWNrIFllbGxvd1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuODAwMDAwMDExOTIwOTI5LCAwLjcyNTQ5MDIxMjQ0MDQ5MDcsIDAuNTUyOTQxMjAzMTE3MzcwNiwgMV0sXG4gIH0sXG4gIFwiNlwiOiB7XG4gICAgbmFtZTogXCJMaWdodCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNjc4NDMxMzkxNzE2MDAzNCwgMC44NTA5ODA0MDEwMzkxMjM1LCAwLjY1ODgyMzU0OTc0NzQ2NywgMV0sXG4gIH0sXG4gIFwiN1wiOiB7IG5hbWU6IFwiT3JhbmdlXCIsIHR5cGU6IFwic29saWRcIiwgY29sb3I6IFsxLCAwLjUyMTU2ODY1NTk2NzcxMjQsIDAsIDFdIH0sXG4gIFwiOFwiOiB7IG5hbWU6IFwiQ29iYWx0IEJsdWVcIiwgdHlwZTogXCJzb2xpZFwiLCBjb2xvcjogWzAuNTQ5MDE5NjM0NzIzNjYzMywgMCwgMSwgMV0gfSxcbiAgXCI5XCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IFJlZGRpc2ggVmlvbGV0XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45NjQ3MDU4ODQ0NTY2MzQ1LCAwLjY2Mjc0NTExODE0MTE3NDMsIDAuNzMzMzMzMzQ5MjI3OTA1MywgMV0sXG4gIH0sXG4gIFwiMTBcIjoge1xuICAgIG5hbWU6IFwiQ2xlYXIqIC8gVHJhbnNwYXJlbnQqXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMSwgMSwgMC43NDExNzY0ODYwMTUzMTk4LCAwLjIwMDAwMDAwMjk4MDIzMjI0XSxcbiAgfSxcbiAgXCIxMVwiOiB7XG4gICAgbmFtZTogXCJQYXN0ZWwgQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNjcwNTg4MjU0OTI4NTg4OSwgMC44NTA5ODA0MDEwMzkxMjM1LCAxLCAxXSxcbiAgfSxcbiAgXCIxMlwiOiB7XG4gICAgbmFtZTogXCJMaWdodCBPcmFuZ2UgQnJvd25cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjg0NzA1ODgzMjY0NTQxNjMsIDAuNDI3NDUwOTg0NzE2NDE1NCwgMC4xNzI1NDkwMjQyMjQyODEzLCAxXSxcbiAgfSxcbiAgXCIxM1wiOiB7IG5hbWU6IFwiUmVkIE9yYW5nZVwiLCB0eXBlOiBcInNvbGlkXCIsIGNvbG9yOiBbMSwgMC41MDE5NjA4MTM5OTkxNzYsIDAuMDc4NDMxMzc1MzI0NzI2MSwgMV0gfSxcbiAgXCIxNFwiOiB7XG4gICAgbmFtZTogXCJQYXN0ZWwgR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjQ3MDU4ODIzNzA0NzE5NTQzLCAwLjk4ODIzNTI5NDgxODg3ODIsIDAuNDcwNTg4MjM3MDQ3MTk1NDMsIDFdLFxuICB9LFxuICBcIjE1XCI6IHsgbmFtZTogXCJMZW1vblwiLCB0eXBlOiBcInNvbGlkXCIsIGNvbG9yOiBbMSwgMC45NDkwMTk2MTA4ODE4MDU0LCAwLjE4ODIzNTI5Nzc5OTExMDQsIDFdIH0sXG4gIFwiMTZcIjogeyBuYW1lOiBcIlBpbmtcIiwgdHlwZTogXCJzb2xpZFwiLCBjb2xvcjogWzEsIDAuNTI5NDExNzkyNzU1MTI3LCAwLjYxMTc2NDcyOTAyMjk3OTcsIDFdIH0sXG4gIFwiMTdcIjogeyBuYW1lOiBcIlJvc2VcIiwgdHlwZTogXCJzb2xpZFwiLCBjb2xvcjogWzEsIDAuNTgwMzkyMTgxODczMzIxNSwgMC41ODAzOTIxODE4NzMzMjE1LCAxXSB9LFxuICBcIjE4XCI6IHtcbiAgICBuYW1lOiBcIk5vdWdhdFwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNzMzMzMzMzQ5MjI3OTA1MywgMC41MDE5NjA4MTM5OTkxNzYsIDAuMzUyOTQxMTg1MjM1OTc3MiwgMV0sXG4gIH0sXG4gIFwiMTlcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgQnJvd25cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjgxMTc2NDcxNzEwMjA1MDgsIDAuNTQxMTc2NDk3OTM2MjQ4OCwgMC4yNzg0MzEzODU3NTU1Mzg5NCwgMV0sXG4gIH0sXG4gIFwiMjBcIjoge1xuICAgIG5hbWU6IFwiTmF0dXJlXCIsXG4gICAgdHlwZTogXCJtaWxreVwiLFxuICAgIGNvbG9yOiBbMC44NzQ1MDk4MTE0MDEzNjcyLCAwLjg3NDUwOTgxMTQwMTM2NzIsIDAuODc0NTA5ODExNDAxMzY3MiwgMV0sXG4gIH0sXG4gIFwiMjFcIjogeyBuYW1lOiBcIkJyaWdodCBSZWRcIiwgdHlwZTogXCJzb2xpZFwiLCBjb2xvcjogWzAuNzA1ODgyMzcwNDcxOTU0MywgMCwgMCwgMV0gfSxcbiAgXCIyMlwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gUmVkZGlzaCBWaW9sZXRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjgxNTY4NjI4NTQ5NTc1ODEsIDAuMzEzNzI1NTAxMjk4OTA0NCwgMC41OTYwNzg0NTU0NDgxNTA2LCAxXSxcbiAgfSxcbiAgXCIyM1wiOiB7XG4gICAgbmFtZTogXCJCcmlnaHQgQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMTE3NjQ3MDU5MjYxNzk4ODYsIDAuMzUyOTQxMTg1MjM1OTc3MiwgMC42NTg4MjM1NDk3NDc0NjcsIDFdLFxuICB9LFxuICBcIjI0XCI6IHtcbiAgICBuYW1lOiBcIkJyaWdodCBZZWxsb3dcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjk4MDM5MjE1ODAzMTQ2MzYsIDAuNzg0MzEzNzM4MzQ2MDk5OSwgMC4wMzkyMTU2ODc2NjIzNjMwNSwgMV0sXG4gIH0sXG4gIFwiMjVcIjoge1xuICAgIG5hbWU6IFwiRWFydGggT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC4zMjk0MTE3NzQ4NzM3MzM1LCAwLjIwMDAwMDAwMjk4MDIzMjI0LCAwLjE0MTE3NjQ3NzA3NDYyMzEsIDFdLFxuICB9LFxuICBcIjI2XCI6IHsgbmFtZTogXCJCbGFja1wiLCB0eXBlOiBcInNvbGlkXCIsIGNvbG9yOiBbMCwgMCwgMCwgMV0gfSxcbiAgXCIyN1wiOiB7XG4gICAgbmFtZTogXCJEYXJrIEdyZXlcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjMyOTQxMTc3NDg3MzczMzUsIDAuMzQ5MDE5NjE2ODQyMjY5OSwgMC4zMzMzMzMzNDMyNjc0NDA4LCAxXSxcbiAgfSxcbiAgXCIyOFwiOiB7XG4gICAgbmFtZTogXCJEYXJrIEdyZWVuXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMCwgMC41MjE1Njg2NTU5Njc3MTI0LCAwLjE2ODYyNzQ1NTgzMDU3NDA0LCAxXSxcbiAgfSxcbiAgXCIyOVwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjQ5ODAzOTIxNTgwMzE0NjM2LCAwLjc2ODYyNzQ2NDc3MTI3MDgsIDAuNDU4ODIzNTMxODY2MDczNiwgMV0sXG4gIH0sXG4gIFwiMzZcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgWWVsbG93aXNoIE9yYW5nZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTkyMTU2ODYzMjEyNTg1NCwgMC43NjQ3MDU4OTYzNzc1NjM1LCAwLjUxMzcyNTUxOTE4MDI5NzksIDFdLFxuICB9LFxuICBcIjM3XCI6IHtcbiAgICBuYW1lOiBcIkJyaWdodCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMzQ1MDk4MDQ4NDQ4NTYyNiwgMC42NzA1ODgyNTQ5Mjg1ODg5LCAwLjI1NDkwMTk3NTM5MzI5NTMsIDFdLFxuICB9LFxuICBcIjM4XCI6IHtcbiAgICBuYW1lOiBcIkRhcmsgT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41Njg2Mjc0NzY2OTIxOTk3LCAwLjMxMzcyNTUwMTI5ODkwNDQsIDAuMTA5ODAzOTIyNDc0Mzg0MzEsIDFdLFxuICB9LFxuICBcIjM5XCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IEJsdWlzaCBWaW9sZXRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjY4NjI3NDUyODUwMzQxOCwgMC43NDUwOTgwNTQ0MDkwMjcxLCAwLjgzOTIxNTY5NTg1ODAwMTcsIDFdLFxuICB9LFxuICBcIjQwXCI6IHsgbmFtZTogXCJUcmFuc3BhcmVudFwiLCB0eXBlOiBcInRyYW5zcGFyZW50XCIsIGNvbG9yOiBbMCwgMCwgMCwgMC4yMDAwMDAwMDI5ODAyMzIyNF0gfSxcbiAgXCI0MVwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBSZWRcIixcbiAgICB0eXBlOiBcInRyYW5zcGFyZW50XCIsXG4gICAgY29sb3I6IFswLjcyMTU2ODY0NDA0Njc4MzQsIDAsIDAsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCI0MlwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBMaWdodCBCbHVlXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC42Nzg0MzEzOTE3MTYwMDM0LCAwLjg2NjY2NjY3NDYxMzk1MjYsIDAuOTI5NDExNzY4OTEzMjY5LCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiNDNcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgQmx1ZVwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAsIDAuNTIxNTY4NjU1OTY3NzEyNCwgMC43MjE1Njg2NDQwNDY3ODM0LCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiNDRcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgWWVsbG93XCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMSwgMC45MDE5NjA3OTAxNTczMTgxLCAwLjEzMzMzMzM0MDI4NzIwODU2LCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiNDVcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNTkyMTU2ODg3MDU0NDQzNCwgMC43OTYwNzg0NDM1MjcyMjE3LCAwLjg1MDk4MDQwMTAzOTEyMzUsIDFdLFxuICB9LFxuICBcIjQ3XCI6IHtcbiAgICBuYW1lOiBcIlRyYW5zcGFyZW50IEZsdW9yZXNjZW50IFJlZGRpc2ggT3JhbmdlXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC43OTYwNzg0NDM1MjcyMjE3LCAwLjMwNTg4MjM2NDUxMTQ4OTg3LCAwLjE2MDc4NDMxOTA0MzE1OTQ4LCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiNDhcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgR3JlZW5cIixcbiAgICB0eXBlOiBcInRyYW5zcGFyZW50XCIsXG4gICAgY29sb3I6IFswLjQ1MDk4MDM5NTA3ODY1OTA2LCAwLjcwNTg4MjM3MDQ3MTk1NDMsIDAuMzkyMTU2ODY5MTczMDQ5OSwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjQ5XCI6IHtcbiAgICBuYW1lOiBcIlRyYW5zcGFyZW50IEZsdW9yZXNjZW50IEdyZWVuXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC45ODAzOTIxNTgwMzE0NjM2LCAwLjk0NTA5ODA0MjQ4ODA5ODEsIDAuMzU2ODYyNzUzNjI5Njg0NDUsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCI1MFwiOiB7XG4gICAgbmFtZTogXCJQaG9zcGhvcmVzY2VudCBXaGl0ZVwiLFxuICAgIHR5cGU6IFwibWlsa3lcIixcbiAgICBjb2xvcjogWzAuODk4MDM5MjIxNzYzNjEwOCwgMC44NzQ1MDk4MTE0MDEzNjcyLCAwLjgyNzQ1MDk5MDY3Njg3OTksIDFdLFxuICB9LFxuICBcIjEwMFwiOiB7XG4gICAgbmFtZTogXCJMaWdodCBSZWRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjk3NjQ3MDU4OTYzNzc1NjMsIDAuNzE3NjQ3MDc1NjUzMDc2MiwgMC42NDcwNTg4NDQ1NjYzNDUyLCAxXSxcbiAgfSxcbiAgXCIxMDFcIjoge1xuICAgIG5hbWU6IFwiTWVkaXVtIFJlZFwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTQxMTc2NDc0MDk0MzkwOSwgMC40Mjc0NTA5ODQ3MTY0MTU0LCAwLjM4MDM5MjE2Mzk5MTkyODEsIDFdLFxuICB9LFxuICBcIjEwMlwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNDUwOTgwMzk1MDc4NjU5MDYsIDAuNTg4MjM1MzE4NjYwNzM2MSwgMC43ODQzMTM3MzgzNDYwOTk5LCAxXSxcbiAgfSxcbiAgXCIxMDNcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgR3JleVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNzM3MjU0OTE3NjIxNjEyNSwgMC43MDU4ODIzNzA0NzE5NTQzLCAwLjY0NzA1ODg0NDU2NjM0NTIsIDFdLFxuICB9LFxuICBcIjEwNFwiOiB7XG4gICAgbmFtZTogXCJCcmlnaHQgVmlvbGV0XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC40MDM5MjE1NzQzNTQxNzE3NSwgMC4xMjE1Njg2Mjc2NTU1MDYxMywgMC41MDU4ODIzODIzOTI4ODMzLCAxXSxcbiAgfSxcbiAgXCIxMDVcIjoge1xuICAgIG5hbWU6IFwiQnJpZ2h0IFllbGxvd2lzaCBPcmFuZ2VcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjk2MDc4NDMxNjA2MjkyNzIsIDAuNTI1NDkwMjI0MzYxNDE5NywgMC4xNDExNzY0NzcwNzQ2MjMxLCAxXSxcbiAgfSxcbiAgXCIxMDZcIjoge1xuICAgIG5hbWU6IFwiQnJpZ2h0IE9yYW5nZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuODM5MjE1Njk1ODU4MDAxNywgMC40NzQ1MDk4MDU0NDA5MDI3LCAwLjEzNzI1NDkwODY4MDkxNTgzLCAxXSxcbiAgfSxcbiAgXCIxMDdcIjoge1xuICAgIG5hbWU6IFwiQnJpZ2h0IEJsdWlzaCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMDIzNTI5NDEyMjI0ODg4OCwgMC42MTU2ODYyOTc0MTY2ODcsIDAuNjIzNTI5NDM0MjA0MTAxNiwgMV0sXG4gIH0sXG4gIFwiMTA4XCI6IHtcbiAgICBuYW1lOiBcIkVhcnRoIFllbGxvd1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMzM3MjU0OTExNjYxMTQ4MDcsIDAuMjc4NDMxMzg1NzU1NTM4OTQsIDAuMTg0MzEzNzI5NDA1NDAzMTQsIDFdLFxuICB9LFxuICBcIjEwOVwiOiB7XG4gICAgbmFtZTogXCIoUEMpIEJsYWNrIElSXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMCwgMC4wNzg0MzEzNzUzMjQ3MjYxLCAwLjA3ODQzMTM3NTMyNDcyNjEsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIxMTBcIjoge1xuICAgIG5hbWU6IFwiQnJpZ2h0IEJsdWlzaCBWaW9sZXRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjE0OTAxOTYxMzg2MjAzNzY2LCAwLjI3NDUwOTgxNzM2MTgzMTY3LCAwLjYwMzkyMTU5MjIzNTU2NTIsIDFdLFxuICB9LFxuICBcIjExMVwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBCcm93blwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNzMzMzMzMzQ5MjI3OTA1MywgMC42OTgwMzkyMzM2ODQ1Mzk4LCAwLjYxOTYwNzg2NTgxMDM5NDMsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIxMTJcIjoge1xuICAgIG5hbWU6IFwiTWVkaXVtIEJsdWlzaCBWaW9sZXRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjI4MjM1Mjk1NDE0OTI0NjIsIDAuMzgwMzkyMTYzOTkxOTI4MSwgMC42NzQ1MDk4MjMzMjIyOTYxLCAxXSxcbiAgfSxcbiAgXCIxMTNcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgTWVkaXVtIFJlZGRpc2ggVmlvbGV0XCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC45OTIxNTY4NjMyMTI1ODU0LCAwLjU1Njg2Mjc3MTUxMTA3NzksIDAuODExNzY0NzE3MTAyMDUwOCwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjExNFwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBQaW5rIEdsaXR0ZXIgLyBUcmFuc3BhcmVudCBNZWRpdW0gUmVkZGlzaCBWaW9sZXQgR2xpdHRlclwiLFxuICAgIHR5cGU6IFwiZ2xpdHRlclwiLFxuICAgIGNvbG9yOiBbMC45OTYwNzg0MzE2MDYyOTI3LCAwLCAwLjk5NjA3ODQzMTYwNjI5MjcsIDFdLFxuICB9LFxuICBcIjExNVwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gWWVsbG93aXNoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC43MTc2NDcwNzU2NTMwNzYyLCAwLjgzMTM3MjU1OTA3MDU4NzIsIDAuMTQ1MDk4MDQ1NDY4MzMwMzgsIDFdLFxuICB9LFxuICBcIjExNlwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gQmx1aXNoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMCwgMC42NjY2NjY2ODY1MzQ4ODE2LCAwLjY0MzEzNzI3NjE3MjYzNzksIDFdLFxuICB9LFxuICBcIjExN1wiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCB3aXRoIEdsaXR0ZXJcIixcbiAgICB0eXBlOiBcImdsaXR0ZXJcIixcbiAgICBjb2xvcjogWzAuOTY4NjI3NDUyODUwMzQxOCwgMC45Njg2Mjc0NTI4NTAzNDE4LCAwLjk2ODYyNzQ1Mjg1MDM0MTgsIDFdLFxuICB9LFxuICBcIjExOFwiOiB7XG4gICAgbmFtZTogXCJMaWdodCBCbHVpc2ggR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjYxMTc2NDcyOTAyMjk3OTcsIDAuODM5MjE1Njk1ODU4MDAxNywgMC44MDAwMDAwMTE5MjA5MjksIDFdLFxuICB9LFxuICBcIjExOVwiOiB7XG4gICAgbmFtZTogXCJCcmlnaHQgWWVsbG93aXNoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC42NDcwNTg4NDQ1NjYzNDUyLCAwLjc5MjE1Njg3NTEzMzUxNDQsIDAuMDk0MTE3NjQ4ODk5NTU1MiwgMV0sXG4gIH0sXG4gIFwiMTIwXCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IFllbGxvd2lzaCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuODcwNTg4MjQzMDA3NjU5OSwgMC45MTc2NDcwNjM3MzIxNDcyLCAwLjU3MjU0OTA0NTA4NTkwNywgMV0sXG4gIH0sXG4gIFwiMTIxXCI6IHtcbiAgICBuYW1lOiBcIk1lZGl1bSBZZWxsb3dpc2ggT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45NzI1NDkwMjEyNDQwNDkxLCAwLjYwMzkyMTU5MjIzNTU2NTIsIDAuMjIzNTI5NDEzMzQyNDc1OSwgMV0sXG4gIH0sXG4gIFwiMTIyXCI6IHtcbiAgICBuYW1lOiBcIk5hdHVyZSB3aXRoIEdsaXR0ZXJcIixcbiAgICB0eXBlOiBcImdsaXR0ZXJcIixcbiAgICBjb2xvcjogWzAuOTk2MDc4NDMxNjA2MjkyNywgMC43OTYwNzg0NDM1MjcyMjE3LCAwLjU5NjA3ODQ1NTQ0ODE1MDYsIDFdLFxuICB9LFxuICBcIjEyM1wiOiB7XG4gICAgbmFtZTogXCJCcmlnaHQgUmVkZGlzaCBPcmFuZ2VcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjkzMzMzMzMzNzMwNjk3NjMsIDAuMzI5NDExNzc0ODczNzMzNSwgMC4yMDM5MjE1NzEzNzM5Mzk1MSwgMV0sXG4gIH0sXG4gIFwiMTI0XCI6IHtcbiAgICBuYW1lOiBcIkJyaWdodCBSZWRkaXNoIFZpb2xldFwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNTY0NzA1OTA4Mjk4NDkyNCwgMC4xMjE1Njg2Mjc2NTU1MDYxMywgMC40NjI3NDUxMDAyNTk3ODA5LCAxXSxcbiAgfSxcbiAgXCIxMjVcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45NzY0NzA1ODk2Mzc3NTYzLCAwLjY1NDkwMTk4MTM1Mzc1OTgsIDAuNDY2NjY2NjY4NjUzNDg4MTYsIDFdLFxuICB9LFxuICBcIjEyNlwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBCcmlnaHQgQmx1aXNoIFZpb2xldFwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNDM1Mjk0MTIxNTAzODI5OTYsIDAuNDc4NDMxMzczODM0NjEsIDAuNzIxNTY4NjQ0MDQ2NzgzNCwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjEyN1wiOiB7XG4gICAgbmFtZTogXCJHb2xkXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC44NzA1ODgyNDMwMDc2NTk5LCAwLjY3NDUwOTgyMzMyMjI5NjEsIDAuNDAwMDAwMDA1OTYwNDY0NSwgMV0sXG4gIH0sXG4gIFwiMTI4XCI6IHtcbiAgICBuYW1lOiBcIkRhcmsgTm91Z2F0XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC42Nzg0MzEzOTE3MTYwMDM0LCAwLjM4MDM5MjE2Mzk5MTkyODEsIDAuMjUwOTgwNDA2OTk5NTg4LCAxXSxcbiAgfSxcbiAgXCIxMjlcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgQmx1aXNoIFZpb2xldCAoR2xpdHRlcilcIixcbiAgICB0eXBlOiBcImdsaXR0ZXJcIixcbiAgICBjb2xvcjogWzAuMjYyNzQ1MTEyMTgwNzA5ODQsIDAuMzI5NDExNzc0ODczNzMzNSwgMC41NzY0NzA2MTM0Nzk2MTQzLCAxXSxcbiAgfSxcbiAgXCIxMzFcIjoge1xuICAgIG5hbWU6IFwiU2lsdmVyXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC42Mjc0NTEwMDI1OTc4MDg4LCAwLjYyNzQ1MTAwMjU5NzgwODgsIDAuNjI3NDUxMDAyNTk3ODA4OCwgMV0sXG4gIH0sXG4gIFwiMTMzXCI6IHtcbiAgICBuYW1lOiBcIk5lb24gT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45MzcyNTQ5MDU3MDA2ODM2LCAwLjM0NTA5ODA0ODQ0ODU2MjYsIDAuMTU2ODYyNzUwNjQ5NDUyMiwgMV0sXG4gIH0sXG4gIFwiMTM0XCI6IHtcbiAgICBuYW1lOiBcIk5lb24gR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjgwMzkyMTU4MDMxNDYzNjIsIDAuODY2NjY2Njc0NjEzOTUyNiwgMC4yMDM5MjE1NzEzNzM5Mzk1MSwgMV0sXG4gIH0sXG4gIFwiMTM1XCI6IHtcbiAgICBuYW1lOiBcIlNhbmQgQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNDM5MjE1Njg5ODk3NTM3MjMsIDAuNTA1ODgyMzgyMzkyODgzMywgMC42MDM5MjE1OTIyMzU1NjUyLCAxXSxcbiAgfSxcbiAgXCIxMzZcIjoge1xuICAgIG5hbWU6IFwiU2FuZCBWaW9sZXRcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjQ1ODgyMzUzMTg2NjA3MzYsIDAuMzk2MDc4NDM3NTY2NzU3MiwgMC40OTAxOTYwNzkwMTU3MzE4LCAxXSxcbiAgfSxcbiAgXCIxMzdcIjoge1xuICAgIG5hbWU6IFwiTWVkaXVtIE9yYW5nZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTU2ODYyNzQ3NjY5MjIsIDAuNTA1ODgyMzgyMzkyODgzMywgMC4yNzg0MzEzODU3NTU1Mzg5NCwgMV0sXG4gIH0sXG4gIFwiMTM4XCI6IHtcbiAgICBuYW1lOiBcIlNhbmQgWWVsbG93XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41MzcyNTQ5Mjk1NDI1NDE1LCAwLjQ5MDE5NjA3OTAxNTczMTgsIDAuMzg0MzEzNzMyMzg1NjM1NCwgMV0sXG4gIH0sXG4gIFwiMTM5XCI6IHtcbiAgICBuYW1lOiBcIkNvcHBlclwiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNDYyNzQ1MTAwMjU5NzgwOSwgMC4zMDE5NjA3OTYxMTc3ODI2LCAwLjIzMTM3MjU1MDEyOTg5MDQ0LCAxXSxcbiAgfSxcbiAgXCIxNDBcIjoge1xuICAgIG5hbWU6IFwiRWFydGggQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMDk4MDM5MjE3MjkzMjYyNDgsIDAuMTk2MDc4NDM0NTg2NTI0OTYsIDAuMzUyOTQxMTg1MjM1OTc3MiwgMV0sXG4gIH0sXG4gIFwiMTQxXCI6IHtcbiAgICBuYW1lOiBcIkVhcnRoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMCwgMC4yNzA1ODgyNDg5NjgxMjQ0LCAwLjEwMTk2MDc4NTY4Njk2OTc2LCAxXSxcbiAgfSxcbiAgXCIxNDNcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgRmx1b3Jlc2NlbnQgQmx1ZVwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNjQ3MDU4ODQ0NTY2MzQ1MiwgMC44MDM5MjE1ODAzMTQ2MzYyLCAwLjk0MTE3NjQ3NDA5NDM5MDksIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIxNDVcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxsaWMgU2FuZCBCbHVlXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC4zNTY4NjI3NTM2Mjk2ODQ0NSwgMC40NTg4MjM1MzE4NjYwNzM2LCAwLjU2NDcwNTkwODI5ODQ5MjQsIDFdLFxuICB9LFxuICBcIjE0NlwiOiB7XG4gICAgbmFtZTogXCJNZXRhbGxpYyBTYW5kIFZpb2xldFwiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNTA1ODgyMzgyMzkyODgzMywgMC40NTg4MjM1MzE4NjYwNzM2LCAwLjU2NDcwNTkwODI5ODQ5MjQsIDFdLFxuICB9LFxuICBcIjE0N1wiOiB7XG4gICAgbmFtZTogXCJNZXRhbGxpYyBTYW5kIFllbGxvd1wiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNTEzNzI1NTE5MTgwMjk3OSwgMC40NDcwNTg4MjY2ODQ5NTE4LCAwLjMwOTgwMzkzMjkwNTE5NzE0LCAxXSxcbiAgfSxcbiAgXCIxNDhcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxsaWMgRGFyayBHcmV5XCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC4yODIzNTI5NTQxNDkyNDYyLCAwLjMwMTk2MDc5NjExNzc4MjYsIDAuMjgyMzUyOTU0MTQ5MjQ2MiwgMV0sXG4gIH0sXG4gIFwiMTQ5XCI6IHtcbiAgICBuYW1lOiBcIk1ldGFsbGljIEJsYWNrXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC4wMzkyMTU2ODc2NjIzNjMwNSwgMC4wNzQ1MDk4MDY5MzEwMTg4MywgMC4xNTI5NDExODIyNTU3NDQ5MywgMV0sXG4gIH0sXG4gIFwiMTUwXCI6IHtcbiAgICBuYW1lOiBcIk1ldGFsbGljIExpZ2h0IEdyZXlcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjU5NjA3ODQ1NTQ0ODE1MDYsIDAuNjA3ODQzMTYwNjI5MjcyNSwgMC42MDAwMDAwMjM4NDE4NTc5LCAxXSxcbiAgfSxcbiAgXCIxNTFcIjoge1xuICAgIG5hbWU6IFwiU2FuZCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNDM5MjE1Njg5ODk3NTM3MjMsIDAuNTU2ODYyNzcxNTExMDc3OSwgMC40ODYyNzQ1MTA2MjIwMjQ1NCwgMV0sXG4gIH0sXG4gIFwiMTUzXCI6IHtcbiAgICBuYW1lOiBcIlNhbmQgUmVkXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41MzMzMzMzNjExNDg4MzQyLCAwLjM3NjQ3MDU5NTU5ODIyMDgsIDAuMzY4NjI3NDU4ODEwODA2MywgMV0sXG4gIH0sXG4gIFwiMTU0XCI6IHtcbiAgICBuYW1lOiBcIihOZXcpIERhcmsgUmVkXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC40NDcwNTg4MjY2ODQ5NTE4LCAwLCAwLjA3MDU4ODIzODUzNzMxMTU1LCAxXSxcbiAgfSxcbiAgXCIxNTdcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgRmx1b3Jlc2NlbnQgWWVsbG93XCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMSwgMC45NjQ3MDU4ODQ0NTY2MzQ1LCAwLjM2MDc4NDMyMjAyMzM5MTcsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIxNThcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgRmx1b3Jlc2NlbnQgUmVkXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC45NDUwOTgwNDI0ODgwOTgxLCAwLjU1Njg2Mjc3MTUxMTA3NzksIDAuNzMzMzMzMzQ5MjI3OTA1MywgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjE2OFwiOiB7XG4gICAgbmFtZTogXCJHdW4gTWV0YWxsaWNcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjM3NjQ3MDU5NTU5ODIyMDgsIDAuMzM3MjU0OTExNjYxMTQ4MDcsIDAuMjk4MDM5MjI3NzI0MDc1MywgMV0sXG4gIH0sXG4gIFwiMTc2XCI6IHtcbiAgICBuYW1lOiBcIlJlZCBGbGlwL0Zsb3BcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjU4MDM5MjE4MTg3MzMyMTUsIDAuMzE3NjQ3MDY5NjkyNjExNywgMC4yODIzNTI5NTQxNDkyNDYyLCAxXSxcbiAgfSxcbiAgXCIxNzhcIjoge1xuICAgIG5hbWU6IFwiWWVsbG93IEZsaXAvRmxvcFwiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNjcwNTg4MjU0OTI4NTg4OSwgMC40MDM5MjE1NzQzNTQxNzE3NSwgMC4yMjc0NTA5ODE3MzYxODMxNywgMV0sXG4gIH0sXG4gIFwiMTc5XCI6IHtcbiAgICBuYW1lOiBcIlNpbHZlciBGbGlwL0Zsb3BcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjQ1MDk4MDM5NTA3ODY1OTA2LCAwLjQ0NzA1ODgyNjY4NDk1MTgsIDAuNDQzMTM3MjU4MjkxMjQ0NSwgMV0sXG4gIH0sXG4gIFwiMTgwXCI6IHtcbiAgICBuYW1lOiBcIkN1cnJ5XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC44NjY2NjY2NzQ2MTM5NTI2LCAwLjU5NjA3ODQ1NTQ0ODE1MDYsIDAuMTgwMzkyMTYxMDExNjk1ODYsIDFdLFxuICB9LFxuICBcIjE4MlwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBCcmlnaHQgT3JhbmdlXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC44ODIzNTI5NDgxODg3ODE3LCAwLjU1Mjk0MTIwMzExNzM3MDYsIDAuMDM5MjE1Njg3NjYyMzYzMDUsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIxODNcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxsaWMgV2hpdGVcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjk2NDcwNTg4NDQ1NjYzNDUsIDAuOTQ5MDE5NjEwODgxODA1NCwgMC44NzQ1MDk4MTE0MDEzNjcyLCAxXSxcbiAgfSxcbiAgXCIxODRcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxsaWMgQnJpZ2h0IFJlZFwiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuODM5MjE1Njk1ODU4MDAxNywgMCwgMC4xNDkwMTk2MTM4NjIwMzc2NiwgMV0sXG4gIH0sXG4gIFwiMTg1XCI6IHtcbiAgICBuYW1lOiBcIk1ldGFsbGljIEJyaWdodCBCbHVlXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMCwgMC4zNDkwMTk2MTY4NDIyNjk5LCAwLjYzOTIxNTcwNzc3ODkzMDcsIDFdLFxuICB9LFxuICBcIjE4NlwiOiB7XG4gICAgbmFtZTogXCJNZXRhbGxpYyBEYXJrIEdyZWVuXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMCwgMC41NTY4NjI3NzE1MTEwNzc5LCAwLjIzNTI5NDExODUyMzU5NzcyLCAxXSxcbiAgfSxcbiAgXCIxODdcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxsaWMgRWFydGggT3JhbmdlXCIsXG4gICAgdHlwZTogXCJwZWFybFwiLFxuICAgIGNvbG9yOiBbMC4zNDExNzY0ODAwNTQ4NTUzNSwgMC4yMjM1Mjk0MTMzNDI0NzU5LCAwLjE3MjU0OTAyNDIyNDI4MTMsIDFdLFxuICB9LFxuICBcIjE4OFwiOiB7XG4gICAgbmFtZTogXCJUaW55IEJsdWVcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLCAwLjYxOTYwNzg2NTgxMDM5NDMsIDAuODA3ODQzMTQ4NzA4MzQzNSwgMV0sXG4gIH0sXG4gIFwiMTg5XCI6IHtcbiAgICBuYW1lOiBcIlJlZGRpc2ggR29sZCAvIEdvbGQgTWV0YWxsaWNcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjY3NDUwOTgyMzMyMjI5NjEsIDAuNTA5ODAzOTUwNzg2NTkwNiwgMC4yNzg0MzEzODU3NTU1Mzg5NCwgMV0sXG4gIH0sXG4gIFwiMTkwXCI6IHtcbiAgICBuYW1lOiBcIkZpcmUgWWVsbG93XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMSwgMC44MTE3NjQ3MTcxMDIwNTA4LCAwLjA0MzEzNzI1NjA1NjA3MDMzLCAxXSxcbiAgfSxcbiAgXCIxOTFcIjoge1xuICAgIG5hbWU6IFwiRmxhbWUgWWVsbG93aXNoIE9yYW5nZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTg4MjM1Mjk0ODE4ODc4MiwgMC42NzQ1MDk4MjMzMjIyOTYxLCAwLCAxXSxcbiAgfSxcbiAgXCIxOTJcIjoge1xuICAgIG5hbWU6IFwiUmVkZGlzaCBCcm93blwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMzcyNTQ5MDI3MjA0NTEzNTUsIDAuMTkyMTU2ODY2MTkyODE3NywgMC4wMzUyOTQxMTkyNjg2NTU3OCwgMV0sXG4gIH0sXG4gIFwiMTkzXCI6IHtcbiAgICBuYW1lOiBcIkZsYW1lIFJlZGRpc2ggT3JhbmdlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45MjU0OTAyMDA1MTk1NjE4LCAwLjI2NjY2NjY4MDU3NDQxNzEsIDAuMTEzNzI1NDkwODY4MDkxNTgsIDFdLFxuICB9LFxuICBcIjE5NFwiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gU3RvbmUgR3JleVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNTg4MjM1MzE4NjYwNzM2MSwgMC41ODgyMzUzMTg2NjA3MzYxLCAwLjU4ODIzNTMxODY2MDczNjEsIDFdLFxuICB9LFxuICBcIjE5NVwiOiB7XG4gICAgbmFtZTogXCJSb3lhbCBCbHVlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC4xMDk4MDM5MjI0NzQzODQzMSwgMC4zNDUwOTgwNDg0NDg1NjI2LCAwLjY1NDkwMTk4MTM1Mzc1OTgsIDFdLFxuICB9LFxuICBcIjE5NlwiOiB7XG4gICAgbmFtZTogXCJEYXJrIFJveWFsIEJsdWVcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjA1NDkwMTk2MTIzNzE5MjE1NCwgMC4yNDMxMzcyNTUzMTEwMTIyNywgMC42MDM5MjE1OTIyMzU1NjUyLCAxXSxcbiAgfSxcbiAgXCIxOTdcIjoge1xuICAgIG5hbWU6IFwiQnJpZ2h0IExpbGFjXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC4xOTIxNTY4NjYxOTI4MTc3LCAwLjE2ODYyNzQ1NTgzMDU3NDA0LCAwLjUyOTQxMTc5Mjc1NTEyNywgMV0sXG4gIH0sXG4gIFwiMTk4XCI6IHtcbiAgICBuYW1lOiBcIkJyaWdodCBSZWRkaXNoIExpbGFjXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41NDExNzY0OTc5MzYyNDg4LCAwLjA3MDU4ODIzODUzNzMxMTU1LCAwLjY1ODgyMzU0OTc0NzQ2NywgMV0sXG4gIH0sXG4gIFwiMTk5XCI6IHtcbiAgICBuYW1lOiBcIkRhcmsgU3RvbmUgR3JleVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMzkyMTU2ODY5MTczMDQ5OSwgMC4zOTIxNTY4NjkxNzMwNDk5LCAwLjM5MjE1Njg2OTE3MzA0OTksIDFdLFxuICB9LFxuICBcIjIwMFwiOiB7XG4gICAgbmFtZTogXCJMZW1vbiBNZXRhbGxpY1wiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNDE1Njg2Mjc5NTM1MjkzNiwgMC40NzQ1MDk4MDU0NDA5MDI3LCAwLjI2NjY2NjY4MDU3NDQxNzEsIDFdLFxuICB9LFxuICBcIjIwOFwiOiB7XG4gICAgbmFtZTogXCJMaWdodCBTdG9uZSBHcmV5XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC43ODQzMTM3MzgzNDYwOTk5LCAwLjc4NDMxMzczODM0NjA5OTksIDAuNzg0MzEzNzM4MzQ2MDk5OSwgMV0sXG4gIH0sXG4gIFwiMjA5XCI6IHtcbiAgICBuYW1lOiBcIkRhcmsgQ3VycnlcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjY0MzEzNzI3NjE3MjYzNzksIDAuNDYyNzQ1MTAwMjU5NzgwOSwgMC4xNDExNzY0NzcwNzQ2MjMxLCAxXSxcbiAgfSxcbiAgXCIyMTBcIjoge1xuICAgIG5hbWU6IFwiRmFkZWQgR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjI3NDUwOTgxNzM2MTgzMTY3LCAwLjU0MTE3NjQ5NzkzNjI0ODgsIDAuMzcyNTQ5MDI3MjA0NTEzNTUsIDFdLFxuICB9LFxuICBcIjIxMVwiOiB7XG4gICAgbmFtZTogXCJUdXJxdW9pc2VcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjI0NzA1ODgyMzcwNDcxOTU0LCAwLjcxMzcyNTUwNzI1OTM2ODksIDAuNjYyNzQ1MTE4MTQxMTc0MywgMV0sXG4gIH0sXG4gIFwiMjEyXCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IFJveWFsIEJsdWVcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjYxNTY4NjI5NzQxNjY4NywgMC43NjQ3MDU4OTYzNzc1NjM1LCAwLjk2ODYyNzQ1Mjg1MDM0MTgsIDFdLFxuICB9LFxuICBcIjIxM1wiOiB7XG4gICAgbmFtZTogXCJNZWRpdW0gUm95YWwgQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMjc4NDMxMzg1NzU1NTM4OTQsIDAuNDM1Mjk0MTIxNTAzODI5OTYsIDAuNzEzNzI1NTA3MjU5MzY4OSwgMV0sXG4gIH0sXG4gIFwiMjE2XCI6IHtcbiAgICBuYW1lOiBcIlJ1c3RcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjUyOTQxMTc5Mjc1NTEyNywgMC4xNjg2Mjc0NTU4MzA1NzQwNCwgMC4wOTAxOTYwODA1MDU4NDc5MywgMV0sXG4gIH0sXG4gIFwiMjE3XCI6IHtcbiAgICBuYW1lOiBcIkJyb3duXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC40ODIzNTI5NDIyMjgzMTcyNiwgMC4zNjQ3MDU4OTA0MTcwOTksIDAuMjU0OTAxOTc1MzkzMjk1MywgMV0sXG4gIH0sXG4gIFwiMjE4XCI6IHtcbiAgICBuYW1lOiBcIlJlZGRpc2ggTGlsYWNcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjU1Njg2Mjc3MTUxMTA3NzksIDAuMzMzMzMzMzQzMjY3NDQwOCwgMC41OTIxNTY4ODcwNTQ0NDM0LCAxXSxcbiAgfSxcbiAgXCIyMTlcIjoge1xuICAgIG5hbWU6IFwiTGlsYWNcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjMzNzI1NDkxMTY2MTE0ODA3LCAwLjMwNTg4MjM2NDUxMTQ4OTg3LCAwLjYxNTY4NjI5NzQxNjY4NywgMV0sXG4gIH0sXG4gIFwiMjIwXCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IExpbGFjXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC41Njg2Mjc0NzY2OTIxOTk3LCAwLjU4NDMxMzc1MDI2NzAyODgsIDAuNzkyMTU2ODc1MTMzNTE0NCwgMV0sXG4gIH0sXG4gIFwiMjIxXCI6IHtcbiAgICBuYW1lOiBcIkJyaWdodCBQdXJwbGVcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjc4NDMxMzczODM0NjA5OTksIDAuMzEzNzI1NTAxMjk4OTA0NCwgMC42MDc4NDMxNjA2MjkyNzI1LCAxXSxcbiAgfSxcbiAgXCIyMjJcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgUHVycGxlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMSwgMC42MTk2MDc4NjU4MTAzOTQzLCAwLjgwMzkyMTU4MDMxNDYzNjIsIDFdLFxuICB9LFxuICBcIjIyM1wiOiB7XG4gICAgbmFtZTogXCJMaWdodCBQaW5rXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC45NDUwOTgwNDI0ODgwOTgxLCAwLjQ3MDU4ODIzNzA0NzE5NTQzLCAwLjUwMTk2MDgxMzk5OTE3NiwgMV0sXG4gIH0sXG4gIFwiMjI0XCI6IHtcbiAgICBuYW1lOiBcIkxpZ2h0IEJyaWNrIFllbGxvd1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuOTUyOTQxMTc5Mjc1NTEyNywgMC43ODgyMzUzMDY3Mzk4MDcxLCAwLjUzMzMzMzM2MTE0ODgzNDIsIDFdLFxuICB9LFxuICBcIjIyNVwiOiB7XG4gICAgbmFtZTogXCJXYXJtIFllbGxvd2lzaCBPcmFuZ2VcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjk4MDM5MjE1ODAzMTQ2MzYsIDAuNjYyNzQ1MTE4MTQxMTc0MywgMC4zOTIxNTY4NjkxNzMwNDk5LCAxXSxcbiAgfSxcbiAgXCIyMjZcIjoge1xuICAgIG5hbWU6IFwiQ29vbCBZZWxsb3dcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFsxLCAwLjkyNTQ5MDIwMDUxOTU2MTgsIDAuNDIzNTI5NDE2MzIyNzA4MTMsIDFdLFxuICB9LFxuICBcIjIyN1wiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBCcmlnaHQgWWVsbG93aXNoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC43ODgyMzUzMDY3Mzk4MDcxLCAwLjkwNTg4MjM1ODU1MTAyNTQsIDAuNTMzMzMzMzYxMTQ4ODM0MiwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjIyOFwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBNZWRpdW0gQmx1aXNoIEdyZWVuXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC4zMzMzMzMzNDMyNjc0NDA4LCAwLjY0NzA1ODg0NDU2NjM0NTIsIDAuNjg2Mjc0NTI4NTAzNDE4LCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiMjI5XCI6IHtcbiAgICBuYW1lOiBcIlRyYW5zcGFyZW50IExpZ2h0IEJsdWlzaCBHcmVlblwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNjc0NTA5ODIzMzIyMjk2MSwgMC44MzEzNzI1NTkwNzA1ODcyLCAwLjg3MDU4ODI0MzAwNzY1OTksIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIyMzBcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgQnJpZ2h0IFB1cnBsZVwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuOTI1NDkwMjAwNTE5NTYxOCwgMC42MzkyMTU3MDc3Nzg5MzA3LCAwLjc4ODIzNTMwNjczOTgwNzEsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIyMzFcIjoge1xuICAgIG5hbWU6IFwiVHJhbnNwYXJlbnQgRmxhbWUgWWVsbG93aXNoIE9yYW5nZVwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuOTg4MjM1Mjk0ODE4ODc4MiwgMC43MTc2NDcwNzU2NTMwNzYyLCAwLjQyNzQ1MDk4NDcxNjQxNTQsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIyMzJcIjoge1xuICAgIG5hbWU6IFwiRG92ZSBCbHVlXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC40NjY2NjY2Njg2NTM0ODgxNiwgMC43ODgyMzUzMDY3Mzk4MDcxLCAwLjg0NzA1ODgzMjY0NTQxNjMsIDFdLFxuICB9LFxuICBcIjIzM1wiOiB7XG4gICAgbmFtZTogXCJMaWdodCBGYWRlZCBHcmVlblwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMzc2NDcwNTk1NTk4MjIwOCwgMC43Mjk0MTE3ODA4MzQxOTgsIDAuNDYyNzQ1MTAwMjU5NzgwOSwgMV0sXG4gIH0sXG4gIFwiMjM0XCI6IHtcbiAgICBuYW1lOiBcIlRyYW5zcGFyZW50IEZpcmUgWWVsbG93XCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC45ODQzMTM3MjY0MjUxNzA5LCAwLjkwOTgwMzkyNjk0NDczMjcsIDAuNTY0NzA1OTA4Mjk4NDkyNCwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjIzNlwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBCcmlnaHQgUmVkZGlzaCBMaWxhY1wiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNTUyOTQxMjAzMTE3MzcwNiwgMC40NTA5ODAzOTUwNzg2NTkwNiwgMC43MDE5NjA4MDIwNzgyNDcxLCAwLjY5OTk5OTk4ODA3OTA3MV0sXG4gIH0sXG4gIFwiMjY4XCI6IHtcbiAgICBuYW1lOiBcIk1lZGl1bSBMaWxhY1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMjY2NjY2NjgwNTc0NDE3MSwgMC4xMDE5NjA3ODU2ODY5Njk3NiwgMC41Njg2Mjc0NzY2OTIxOTk3LCAxXSxcbiAgfSxcbiAgXCIyNjlcIjoge1xuICAgIG5hbWU6IFwiVGlueS1NZWRpdW0gQmx1ZVwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMjQzMTM3MjU1MzExMDEyMjcsIDAuNTg0MzEzNzUwMjY3MDI4OCwgMC43MTM3MjU1MDcyNTkzNjg5LCAxXSxcbiAgfSxcbiAgXCIyODNcIjoge1xuICAgIG5hbWU6IFwiTGlnaHQgTm91Z2F0XCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMSwgMC43ODgyMzUzMDY3Mzk4MDcxLCAwLjU4NDMxMzc1MDI2NzAyODgsIDFdLFxuICB9LFxuICBcIjI4NFwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBSZWRkaXNoIExpbGFjXCIsXG4gICAgdHlwZTogXCJ0cmFuc3BhcmVudFwiLFxuICAgIGNvbG9yOiBbMC44Nzg0MzEzNzk3OTUwNzQ1LCAwLjgxNTY4NjI4NTQ5NTc1ODEsIDAuODk4MDM5MjIxNzYzNjEwOCwgMC42OTk5OTk5ODgwNzkwNzFdLFxuICB9LFxuICBcIjI4NVwiOiB7XG4gICAgbmFtZTogXCJUcmFuc3BhcmVudCBMaWdodCBHcmVlblwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuODk0MTE3NjUzMzY5OTAzNiwgMC44MzkyMTU2OTU4NTgwMDE3LCAwLjg1NDkwMTk2OTQzMjgzMDgsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIyOTRcIjoge1xuICAgIG5hbWU6IFwiUGhvc3Bob3Jlc2NlbnQgR3JlZW5cIixcbiAgICB0eXBlOiBcIm1pbGt5XCIsXG4gICAgY29sb3I6IFswLjgzNTI5NDEyNzQ2NDI5NDQsIDAuODYyNzQ1MTA2MjIwMjQ1NCwgMC41NDExNzY0OTc5MzYyNDg4LCAxXSxcbiAgfSxcbiAgXCIyOTVcIjoge1xuICAgIG5hbWU6IFwiRmxhbWluZ28gUGlua1wiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuMjE1Njg2Mjc2NTU1MDYxMzQsIDAuMTI5NDExNzcxODkzNTAxMjgsIDAsIDFdLFxuICB9LFxuICBcIjI5NlwiOiB7XG4gICAgbmFtZTogXCJDb29sIFNpbHZlclwiLFxuICAgIHR5cGU6IFwicGVhcmxcIixcbiAgICBjb2xvcjogWzAuNjc4NDMxMzkxNzE2MDAzNCwgMC42Nzg0MzEzOTE3MTYwMDM0LCAwLjY3ODQzMTM5MTcxNjAwMzQsIDFdLFxuICB9LFxuICBcIjI5N1wiOiB7XG4gICAgbmFtZTogXCJXYXJtIEdvbGRcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjcyNTQ5MDIxMjQ0MDQ5MDcsIDAuNTg0MzEzNzUwMjY3MDI4OCwgMC4yMzEzNzI1NTAxMjk4OTA0NCwgMV0sXG4gIH0sXG4gIFwiMjk4XCI6IHtcbiAgICBuYW1lOiBcIkNvb2wgU2lsdmVyLCBEcnVtIExhY3F1ZXJlZFwiLFxuICAgIHR5cGU6IFwibWV0YWxsaWNcIixcbiAgICBjb2xvcjogWzAuNDYyNzQ1MTAwMjU5NzgwOSwgMC40NjI3NDUxMDAyNTk3ODA5LCAwLjQ2Mjc0NTEwMDI1OTc4MDksIDFdLFxuICB9LFxuICBcIjMwOFwiOiB7XG4gICAgbmFtZTogXCJEYXJrIEJyb3duXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC4yMDc4NDMxMzk3Njc2NDY4LCAwLjEyOTQxMTc3MTg5MzUwMTI4LCAwLCAxXSxcbiAgfSxcbiAgXCIzMDlcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxpemVkIFNpbHZlclwiLFxuICAgIHR5cGU6IFwiY2hyb21lXCIsXG4gICAgY29sb3I6IFswLjgwNzg0MzE0ODcwODM0MzUsIDAuODA3ODQzMTQ4NzA4MzQzNSwgMC44MDc4NDMxNDg3MDgzNDM1LCAxXSxcbiAgfSxcbiAgXCIzMTBcIjoge1xuICAgIG5hbWU6IFwiTWV0YWxpemVkIEdvbGRcIixcbiAgICB0eXBlOiBcImNocm9tZVwiLFxuICAgIGNvbG9yOiBbMC44NzQ1MDk4MTE0MDEzNjcyLCAwLjc1Njg2Mjc1OTU5MDE0ODksIDAuNDYyNzQ1MTAwMjU5NzgwOSwgMV0sXG4gIH0sXG4gIFwiMzExXCI6IHtcbiAgICBuYW1lOiBcIlRyYW5zcGFyZW50IEJyaWdodCBHcmVlblwiLFxuICAgIHR5cGU6IFwidHJhbnNwYXJlbnRcIixcbiAgICBjb2xvcjogWzAuNjg2Mjc0NTI4NTAzNDE4LCAwLjgyMzUyOTQyMjI4MzE3MjYsIDAuMjc0NTA5ODE3MzYxODMxNjcsIDAuNjk5OTk5OTg4MDc5MDcxXSxcbiAgfSxcbiAgXCIzMTJcIjoge1xuICAgIG5hbWU6IFwiTWVkaXVtIE5vdWdhdFwiLFxuICAgIHR5cGU6IFwic29saWRcIixcbiAgICBjb2xvcjogWzAuNjY2NjY2Njg2NTM0ODgxNiwgMC40OTAxOTYwNzkwMTU3MzE4LCAwLjMzMzMzMzM0MzI2NzQ0MDgsIDFdLFxuICB9LFxuICBcIjMxNVwiOiB7XG4gICAgbmFtZTogXCJTaWx2ZXIgTWV0YWxsaWNcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjU0OTAxOTYzNDcyMzY2MzMsIDAuNTQ5MDE5NjM0NzIzNjYzMywgMC41NDkwMTk2MzQ3MjM2NjMzLCAxXSxcbiAgfSxcbiAgXCIzMTZcIjoge1xuICAgIG5hbWU6IFwiVGl0YW5pdW0gTWV0YWxsaWNcIixcbiAgICB0eXBlOiBcInBlYXJsXCIsXG4gICAgY29sb3I6IFswLjI0MzEzNzI1NTMxMTAxMjI3LCAwLjIzNTI5NDExODUyMzU5NzcyLCAwLjIyMzUyOTQxMzM0MjQ3NTksIDFdLFxuICB9LFxuICBcIjMyMVwiOiB7XG4gICAgbmFtZTogXCJEYXJrIEF6dXJcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjI3NDUwOTgxNzM2MTgzMTY3LCAwLjYwNzg0MzE2MDYyOTI3MjUsIDAuNzY0NzA1ODk2Mzc3NTYzNSwgMV0sXG4gIH0sXG4gIFwiMzIyXCI6IHtcbiAgICBuYW1lOiBcIk1lZGl1bSBBenVyXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC40MDc4NDMxNDI3NDc4NzkwMywgMC43NjQ3MDU4OTYzNzc1NjM1LCAwLjg4NjI3NDUxNjU4MjQ4OSwgMV0sXG4gIH0sXG4gIFwiMzIzXCI6IHtcbiAgICBuYW1lOiBcIkFxdWFcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjgyNzQ1MDk5MDY3Njg3OTksIDAuOTQ5MDE5NjEwODgxODA1NCwgMC45MTc2NDcwNjM3MzIxNDcyLCAxXSxcbiAgfSxcbiAgXCIzMjRcIjoge1xuICAgIG5hbWU6IFwiTWVkaXVtIExhdmVuZGVyXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC42Mjc0NTEwMDI1OTc4MDg4LCAwLjQzMTM3MjU1MzExMDEyMjcsIDAuNzI1NDkwMjEyNDQwNDkwNywgMV0sXG4gIH0sXG4gIFwiMzI1XCI6IHtcbiAgICBuYW1lOiBcIkxhdmVuZGVyXCIsXG4gICAgdHlwZTogXCJzb2xpZFwiLFxuICAgIGNvbG9yOiBbMC44MDM5MjE1ODAzMTQ2MzYyLCAwLjY0MzEzNzI3NjE3MjYzNzksIDAuODcwNTg4MjQzMDA3NjU5OSwgMV0sXG4gIH0sXG4gIFwiMzI2XCI6IHtcbiAgICBuYW1lOiBcIlNwcmluZyBZZWxsb3dpc2ggR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjg4NjI3NDUxNjU4MjQ4OSwgMC45NzY0NzA1ODk2Mzc3NTYzLCAwLjYwMzkyMTU5MjIzNTU2NTIsIDFdLFxuICB9LFxuICBcIjMyOVwiOiB7XG4gICAgbmFtZTogXCJXaGl0ZSBHbG93XCIsXG4gICAgdHlwZTogXCJtaWxreVwiLFxuICAgIGNvbG9yOiBbMC45NjA3ODQzMTYwNjI5MjcyLCAwLjk1Mjk0MTE3OTI3NTUxMjcsIDAuODQzMTM3MjY0MjUxNzA5LCAxXSxcbiAgfSxcbiAgXCIzMzBcIjoge1xuICAgIG5hbWU6IFwiT2xpdmUgR3JlZW5cIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFswLjU0NTA5ODA2NjMyOTk1NiwgMC41MTc2NDcwODc1NzQwMDUxLCAwLjMwOTgwMzkzMjkwNTE5NzE0LCAxXSxcbiAgfSxcbiAgXCIzMzFcIjoge1xuICAgIG5hbWU6IFwiTGFjcXVlclwiLFxuICAgIHR5cGU6IFwiaW5rXCIsXG4gICAgY29sb3I6IFswLjkzMzMzMzMzNzMwNjk3NjMsIDAuOTMzMzMzMzM3MzA2OTc2MywgMC45MzMzMzMzMzczMDY5NzYzLCAxXSxcbiAgfSxcbiAgXCIzMzJcIjoge1xuICAgIG5hbWU6IFwiRmx1b3Jlc2NlbnQgUmVkIElua1wiLFxuICAgIHR5cGU6IFwiaW5rXCIsXG4gICAgY29sb3I6IFswLjgxNTY4NjI4NTQ5NTc1ODEsIDAuNDI3NDUwOTg0NzE2NDE1NCwgMC4zMDk4MDM5MzI5MDUxOTcxNCwgMV0sXG4gIH0sXG4gIFwiMzMzXCI6IHtcbiAgICBuYW1lOiBcIkZsdW9yZXNjZW50IEdyZWVuIElua1wiLFxuICAgIHR5cGU6IFwiaW5rXCIsXG4gICAgY29sb3I6IFswLjg1ODgyMzUzNzgyNjUzODEsIDAuOTE3NjQ3MDYzNzMyMTQ3MiwgMC40Nzg0MzEzNzM4MzQ2MSwgMV0sXG4gIH0sXG4gIFwiMzM0XCI6IHtcbiAgICBuYW1lOiBcIkNvcHBlciBJbmtcIixcbiAgICB0eXBlOiBcImlua1wiLFxuICAgIGNvbG9yOiBbMC40NjI3NDUxMDAyNTk3ODA5LCAwLjMwMTk2MDc5NjExNzc4MjYsIDAuMjMxMzcyNTUwMTI5ODkwNDQsIDFdLFxuICB9LFxuICBcIjMzNVwiOiB7XG4gICAgbmFtZTogXCJHb2xkIElua1wiLFxuICAgIHR5cGU6IFwiaW5rXCIsXG4gICAgY29sb3I6IFswLjcyNTQ5MDIxMjQ0MDQ5MDcsIDAuNTg0MzEzNzUwMjY3MDI4OCwgMC4yMzEzNzI1NTAxMjk4OTA0NCwgMV0sXG4gIH0sXG4gIFwiMzM2XCI6IHtcbiAgICBuYW1lOiBcIlNpbHZlciBJbmtcIixcbiAgICB0eXBlOiBcImlua1wiLFxuICAgIGNvbG9yOiBbMC41NDkwMTk2MzQ3MjM2NjMzLCAwLjU0OTAxOTYzNDcyMzY2MzMsIDAuNTQ5MDE5NjM0NzIzNjYzMywgMV0sXG4gIH0sXG4gIFwiMzM3XCI6IHtcbiAgICBuYW1lOiBcIlRpdGFuaXVtXCIsXG4gICAgdHlwZTogXCJpbmtcIixcbiAgICBjb2xvcjogWzAuMjQzMTM3MjU1MzExMDEyMjcsIDAuMjM1Mjk0MTE4NTIzNTk3NzIsIDAuMjIzNTI5NDEzMzQyNDc1OSwgMV0sXG4gIH0sXG4gIFwiMzUzXCI6IHtcbiAgICBuYW1lOiBcIlZpYnJhbnQgQ29yYWxcIixcbiAgICB0eXBlOiBcInNvbGlkXCIsXG4gICAgY29sb3I6IFsxLCAwLjQyNzQ1MDk4NDcxNjQxNTQsIDAuNDY2NjY2NjY4NjUzNDg4MTYsIDFdLFxuICB9LFxuICBcIjQyOVwiOiB7XG4gICAgbmFtZTogXCJZZWxsb3dcIixcbiAgICB0eXBlOiBcInByb2Nlc3NcIixcbiAgICBjb2xvcjogWzAuOTQ5MDE5NjEwODgxODA1NCwgMC44NzA1ODgyNDMwMDc2NTk5LCAwLjE2NDcwNTg4NzQzNjg2Njc2LCAxXSxcbiAgfSxcbiAgXCI0MzlcIjoge1xuICAgIG5hbWU6IFwiTWFnZW50YVwiLFxuICAgIHR5cGU6IFwicHJvY2Vzc1wiLFxuICAgIGNvbG9yOiBbMC43NjA3ODQzMjc5ODM4NTYyLCAwLCAwLjUxNzY0NzA4NzU3NDAwNTEsIDFdLFxuICB9LFxuICBcIjQ1NFwiOiB7XG4gICAgbmFtZTogXCJDeWFuXCIsXG4gICAgdHlwZTogXCJwcm9jZXNzXCIsXG4gICAgY29sb3I6IFswLjIxNTY4NjI3NjU1NTA2MTM0LCAwLjU5MjE1Njg4NzA1NDQ0MzQsIDAuODAzOTIxNTgwMzE0NjM2MiwgMV0sXG4gIH0sXG4gIFwiMTAyNlwiOiB7XG4gICAgbmFtZTogXCIoPykgQmxhY2sgUnViYmVyXCIsXG4gICAgdHlwZTogXCJydWJiZXJcIixcbiAgICBjb2xvcjogWzAuMDAwMDkwMTk2MDgxMTQ2MTMyMiwgMC4wMDAwOTAxOTYwODExNDYxMzIyLCAwLjAwMDA5MDE5NjA4MTE0NjEzMjIsIDFdLFxuICB9LFxufTtcbiIsICJpbXBvcnQgeyBNYnggfSBmcm9tIFwiLi4vbWJ4XCI7XG5pbXBvcnQgeyBHbHRmLCBHbHRmQnVpbGRlciB9IGZyb20gXCIuLi9nbHRmXCI7XG5cbmltcG9ydCB7IHRyYW5zcG9zZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBjb252ZXJ0TWF0ZXJpYWwgfSBmcm9tIFwiLi9tYXRlcmlhbHNcIjtcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0UGFydHMgPSAobWJ4OiBNYnguRmlsZSwgZ2x0ZjogR2x0ZkJ1aWxkZXIsIG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkID0+IHtcbiAgY29uc3QgcGFydE5vZGVJbmRpY2VzOiBHbHRmLkluZGV4PEdsdGYuTm9kZT5bXSA9IFtdO1xuXG4gIGZvciAoY29uc3QgW3BhcnRJbmRleCwgcGFydF0gb2YgbWJ4LnBhcnRzLmVudHJpZXMoKSkge1xuICAgIHBhcnROb2RlSW5kaWNlcy5wdXNoKGNvbnZlcnRQYXJ0KGAvcGFydHMvJHtwYXJ0SW5kZXh9Lmpzb25gLCBwYXJ0LCBtYngsIGdsdGYsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGdsdGYuc2V0TWFpblNjZW5lKFxuICAgIGdsdGYuYWRkU2NlbmUoXCIvc2NlbmUuanNvblwiLCB7XG4gICAgICBub2RlczogcGFydE5vZGVJbmRpY2VzLFxuICAgIH0pXG4gICk7XG59O1xuXG5jb25zdCBjb252ZXJ0UGFydCA9IChcbiAgcGF0aDogc3RyaW5nLFxuICBwYXJ0OiBNYnguUGFydCxcbiAgbWJ4OiBNYnguRmlsZSxcbiAgZ2x0ZjogR2x0ZkJ1aWxkZXIsXG4gIG9wdGlvbnM6IE9wdGlvbnNcbik6IEdsdGYuSW5kZXg8R2x0Zi5Ob2RlPiA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IG1ieC5jb25maWd1cmF0aW9uc1twYXJ0LnZlcnNpb25dW3BhcnQuY29uZmlndXJhdGlvbl0hO1xuXG4gIGNvbnN0IG1hdGVyaWFsSW5kZXggPSBjb252ZXJ0TWF0ZXJpYWwoXG4gICAgcGFydC5tYXRlcmlhbC5iYXNlWzBdLFxuICAgIGNvbmZpZy5ub3JtYWxzLFxuICAgIHBhcnQubWF0ZXJpYWwuZGVjb3JhdGlvbixcbiAgICBnbHRmLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgY29uc3Qgbm9kZSA9IGNvbnZlcnRDb25maWd1cmF0aW9uKHBhdGgsIGNvbmZpZywgbWF0ZXJpYWxJbmRleCwgbWJ4LCBnbHRmLCBvcHRpb25zKTtcblxuICByZXR1cm4gZ2x0Zi5hZGROb2RlKG5vZGUubmFtZSEsIHtcbiAgICAuLi5ub2RlLFxuICAgIG1hdHJpeDogdHJhbnNwb3NlKHBhcnQubWF0cml4KSxcbiAgfSk7XG59O1xuXG5jb25zdCBjb252ZXJ0Q29uZmlndXJhdGlvbiA9IChcbiAgcGFydFBhdGg6IHN0cmluZyxcbiAgY29uZmlnOiBNYnguQ29uZmlndXJhdGlvbixcbiAgbWF0ZXJpYWxJbmRleDogR2x0Zi5JbmRleDxHbHRmLk1hdGVyaWFsPiB8IHVuZGVmaW5lZCxcbiAgbWJ4OiBNYnguRmlsZSxcbiAgZ2x0ZjogR2x0ZkJ1aWxkZXIsXG4gIG9wdGlvbnM6IE9wdGlvbnNcbik6IEdsdGYuTm9kZSA9PiB7XG4gIGNvbnN0IGV4dHJhTm9kZUluZGljZXM6IEdsdGYuSW5kZXg8R2x0Zi5Ob2RlPltdID0gW107XG5cbiAgZm9yIChjb25zdCBba2luZCwgZXh0cmFzXSBvZiBPYmplY3QuZW50cmllcyhjb25maWcuZ2VvbWV0cnkuZXh0cmFzKSkge1xuICAgIGlmIChraW5kID09PSBcImxvZ29zXCIgJiYgIW9wdGlvbnMubG9nb3MpIGNvbnRpbnVlO1xuXG4gICAgZm9yIChjb25zdCBbaW5kZXgsIGV4dHJhXSBvZiBleHRyYXMuZW50cmllcygpKSB7XG4gICAgICBjb25zdCB7IG5vZGUsIG1lc2ggfSA9IGNvbnZlcnRFeHRyYShwYXJ0UGF0aCwga2luZCwgaW5kZXgsIGV4dHJhLCBtYXRlcmlhbEluZGV4LCBtYngsIGdsdGYpO1xuXG4gICAgICBleHRyYU5vZGVJbmRpY2VzLnB1c2goXG4gICAgICAgIGdsdGYuYWRkTm9kZShub2RlLm5hbWUhLCB7XG4gICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICBtZXNoOiBnbHRmLmFkZE1lc2gobWVzaC5uYW1lISwgbWVzaCksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1haW5HZW9tZXRyeVBhdGggPSBgL2dlb21ldHJpZXMvJHtjb25maWcuZ2VvbWV0cnkuZmlsZX1gO1xuICBjb25zdCBtYWluR2VvbWV0cnkgPSBtYnguZ2VvbWV0cmllc1tjb25maWcudmVyc2lvbl1bY29uZmlnLmdlb21ldHJ5LmZpbGVdO1xuXG4gIGNvbnN0IHV2TGF5ZXJDb3VudCA9IG1haW5HZW9tZXRyeS51dnM/Lmxlbmd0aCA/PyAwO1xuICBjb25zdCB1dnM6IFBhcnRpYWw8UmVjb3JkPEdsdGYuUHJpbWl0aXZlQXR0cmlidXRlTmFtZSwgR2x0Zi5JbmRleDxHbHRmLkFjY2Vzc29yPj4+ID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1dkxheWVyQ291bnQ7IGkrKykge1xuICAgIHV2c1tgVEVYQ09PUkRfJHtpfWBdID0gZ2x0Zi5nZXRBY2Nlc3NvckluZGV4KGAke21haW5HZW9tZXRyeVBhdGh9I3V2cy8ke2l9YCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHBhcnRQYXRoICsgXCIjbWFpblwiLFxuICAgIGNoaWxkcmVuOiBleHRyYU5vZGVJbmRpY2VzLmxlbmd0aCA+IDAgPyBleHRyYU5vZGVJbmRpY2VzIDogdW5kZWZpbmVkLFxuICAgIG1lc2g6IGdsdGYuYWRkTWVzaChwYXJ0UGF0aCArIFwiI21haW5cIiwge1xuICAgICAgbmFtZTogcGFydFBhdGggKyBcIiNtYWluXCIsXG4gICAgICBwcmltaXRpdmVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtYXRlcmlhbDogbWF0ZXJpYWxJbmRleCxcbiAgICAgICAgICBpbmRpY2VzOiBnbHRmLmdldEFjY2Vzc29ySW5kZXgobWFpbkdlb21ldHJ5UGF0aCArIFwiI2luZGljZXNcIiksXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgUE9TSVRJT046IGdsdGYuZ2V0QWNjZXNzb3JJbmRleChtYWluR2VvbWV0cnlQYXRoICsgXCIjcG9zaXRpb25zXCIpLFxuICAgICAgICAgICAgTk9STUFMOiBnbHRmLnRyeUdldEFjY2Vzc29ySW5kZXgobWFpbkdlb21ldHJ5UGF0aCArIFwiI25vcm1hbHNcIiksXG4gICAgICAgICAgICAuLi51dnMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSksXG4gIH07XG59O1xuXG5jb25zdCBjb252ZXJ0RXh0cmEgPSAoXG4gIHBhcnRQYXRoOiBzdHJpbmcsXG4gIGtpbmQ6IHN0cmluZyxcbiAgaW5kZXg6IG51bWJlcixcbiAgZXh0cmE6IE1ieC5Db25maWd1cmF0aW9uRXh0cmEsXG4gIG1hdGVyaWFsSW5kZXg6IEdsdGYuSW5kZXg8R2x0Zi5NYXRlcmlhbD4gfCB1bmRlZmluZWQsXG4gIG1ieDogTWJ4LkZpbGUsXG4gIGdsdGY6IEdsdGZCdWlsZGVyXG4pOiB7XG4gIG5vZGU6IEdsdGYuTm9kZTtcbiAgbWVzaDogR2x0Zi5NZXNoO1xufSA9PiB7XG4gIGNvbnN0IGV4dHJhR2VvbWV0cnkgPSAobWJ4LmRldGFpbHMgYXMgYW55KVtraW5kXVtleHRyYS50eXBlXSBhcyBNYnguR2VvbWV0cnk7XG5cbiAgY29uc3QgdXZMYXllckNvdW50ID0gZXh0cmFHZW9tZXRyeS51dnM/Lmxlbmd0aCA/PyAwO1xuICBjb25zdCB1dnM6IFBhcnRpYWw8UmVjb3JkPEdsdGYuUHJpbWl0aXZlQXR0cmlidXRlTmFtZSwgR2x0Zi5JbmRleDxHbHRmLkFjY2Vzc29yPj4+ID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1dkxheWVyQ291bnQ7IGkrKykge1xuICAgIHV2c1tgVEVYQ09PUkRfJHtpfWBdID0gZ2x0Zi5nZXRBY2Nlc3NvckluZGV4KGAvZGV0YWlscy8ke2tpbmR9LyR7ZXh0cmEudHlwZX0uanNvbiN1dnMvJHtpfWApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBub2RlOiB7XG4gICAgICBuYW1lOiBwYXJ0UGF0aCArIGAjZXh0cmEvJHtraW5kfS8ke2luZGV4fWAsXG4gICAgICB0cmFuc2xhdGlvbjogZXh0cmEudHJhbnNmb3JtLnBvc2l0aW9uLFxuICAgICAgcm90YXRpb246IGV4dHJhLnRyYW5zZm9ybS5xdWF0ZXJuaW9uLFxuICAgIH0sXG4gICAgbWVzaDoge1xuICAgICAgbmFtZTogcGFydFBhdGggKyBgI2V4dHJhLyR7a2luZH0vJHtpbmRleH1gLFxuICAgICAgcHJpbWl0aXZlczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWF0ZXJpYWw6IG1hdGVyaWFsSW5kZXgsXG4gICAgICAgICAgaW5kaWNlczogZ2x0Zi5nZXRBY2Nlc3NvckluZGV4KGAvZGV0YWlscy8ke2tpbmR9LyR7ZXh0cmEudHlwZX0uanNvbiNpbmRpY2VzYCksXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgUE9TSVRJT046IGdsdGYuZ2V0QWNjZXNzb3JJbmRleChgL2RldGFpbHMvJHtraW5kfS8ke2V4dHJhLnR5cGV9Lmpzb24jcG9zaXRpb25zYCksXG4gICAgICAgICAgICBOT1JNQUw6IGdsdGYudHJ5R2V0QWNjZXNzb3JJbmRleChgL2RldGFpbHMvJHtraW5kfS8ke2V4dHJhLnR5cGV9Lmpzb24jbm9ybWFsc2ApLFxuICAgICAgICAgICAgLi4udXZzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH07XG59O1xuIiwgImltcG9ydCB7IE1ieCB9IGZyb20gXCIuLi9tYnhcIjtcbmltcG9ydCB7IEdsdGZCdWlsZGVyIH0gZnJvbSBcIi4uL2dsdGZcIjtcblxuaW1wb3J0IHsgY29udmVydFRleHR1cmVzIH0gZnJvbSBcIi4vdGV4dHVyZXNcIjtcbmltcG9ydCB7IGNvbnZlcnRHZW9tZXRyaWVzIH0gZnJvbSBcIi4vZ2VvbWV0cmllc1wiO1xuaW1wb3J0IHsgY29udmVydFBhcnRzIH0gZnJvbSBcIi4vcGFydHNcIjtcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0RmlsZSA9IChtYng6IE1ieC5GaWxlLCBnbHRmOiBHbHRmQnVpbGRlciwgb3B0aW9uczogT3B0aW9ucyk6IHZvaWQgPT4ge1xuICBjb252ZXJ0VGV4dHVyZXMobWJ4LCBnbHRmLCBvcHRpb25zKTtcbiAgY29udmVydEdlb21ldHJpZXMobWJ4LCBnbHRmLCBvcHRpb25zKTtcbiAgY29udmVydFBhcnRzKG1ieCwgZ2x0Ziwgb3B0aW9ucyk7XG59O1xuIiwgImltcG9ydCB7IE1ieCB9IGZyb20gXCIuLi9tYnhcIjtcbmltcG9ydCB7IEdsdGYsIEdsdGZCdWlsZGVyLCBHbHRmT3B0aW1pemVyIH0gZnJvbSBcIi4uL2dsdGZcIjtcblxuaW1wb3J0IHsgY29udmVydEZpbGUgfSBmcm9tIFwiLi9maWxlXCI7XG5cbmltcG9ydCAqIGFzIGpzemlwIGZyb20gXCJqc3ppcFwiO1xuaW1wb3J0IHsgT3B0aW9ucywgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0Wm1ieFRvR2x0ZiA9IGFzeW5jIChcbiAgem1ieDogVWludDhBcnJheSB8IEJsb2IgfCBBcnJheUJ1ZmZlcixcbiAgb3B0aW9ucz86IFBhcnRpYWw8T3B0aW9ucz5cbik6IFByb21pc2U8R2x0Zi5GaWxlPiA9PiB7XG4gIGNvbnN0IHppcCA9IGF3YWl0IGpzemlwLmxvYWRBc3luYyh6bWJ4KTtcbiAgY29uc3QgbWJ4ID0gYXdhaXQgemlwLmZpbGUoXCJzY2VuZS5tYnhcIik/LmFzeW5jKFwic3RyaW5nXCIpO1xuICBpZiAoIW1ieCkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmaWxlIGZvcm1hdFwiKTtcbiAgcmV0dXJuIGNvbnZlcnRNYnhUb0dsdGYoSlNPTi5wYXJzZShtYngpLCBvcHRpb25zKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0TWJ4VG9HbHRmID0gKG1ieDogTWJ4LkZpbGUsIG9wdGlvbnM/OiBQYXJ0aWFsPE9wdGlvbnM+KTogR2x0Zi5GaWxlID0+IHtcbiAgY29uc3QgZnVsbE9wdGlvbnMgPSB7IC4uLmdldERlZmF1bHRPcHRpb25zKCksIC4uLm9wdGlvbnMgfTtcblxuICBjb25zdCBidWlsZGVyID0gbmV3IEdsdGZCdWlsZGVyKCk7XG4gIGNvbnZlcnRGaWxlKG1ieCwgYnVpbGRlciwgZnVsbE9wdGlvbnMpO1xuICBjb25zdCBnbHRmID0gYnVpbGRlci5idWlsZCgpO1xuXG4gIGlmICghZnVsbE9wdGlvbnMub3B0aW1pemUpIHJldHVybiBnbHRmO1xuXG4gIGNvbnN0IG9wdGltaXplciA9IG5ldyBHbHRmT3B0aW1pemVyKGdsdGYpO1xuXG4gIG9wdGltaXplci5jb2xsZWN0VW51c2VkKHtcbiAgICB0ZXh0dXJlczogdHJ1ZSxcbiAgICBzYW1wbGVyczogdHJ1ZSxcbiAgICBpbWFnZXM6IHRydWUsXG4gICAgdGV4Q29vcmRzOiB0cnVlLFxuICAgIGFjY2Vzc29yczogdHJ1ZSxcbiAgICBidWZmZXJWaWV3czogdHJ1ZSxcbiAgICBidWZmZXJzOiB0cnVlLFxuICB9KTtcblxuICBvcHRpbWl6ZXIuZGVkdXBsaWNhdGUoe1xuICAgIGJ1ZmZlcnM6IHRydWUsXG4gICAgYnVmZmVyVmlld3M6IHRydWUsXG4gICAgYWNjZXNzb3JzOiB0cnVlLFxuICAgIGltYWdlczogdHJ1ZSxcbiAgICBzYW1wbGVyczogdHJ1ZSxcbiAgICB0ZXh0dXJlczogdHJ1ZSxcbiAgfSk7XG5cbiAgcmV0dXJuIG9wdGltaXplci5maWxlO1xufTtcbiIsICJleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICBsb2dvczogYm9vbGVhbjtcbiAgbm9ybWFsTWFwczogYm9vbGVhbjtcbiAgYnVtcE1hcHM6IGJvb2xlYW47XG4gIGRlY2FsczogYm9vbGVhbjtcbiAgb3B0aW1pemU6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0T3B0aW9ucyA9ICgpOiBPcHRpb25zID0+ICh7XG4gIGxvZ29zOiBmYWxzZSxcbiAgbm9ybWFsTWFwczogZmFsc2UsXG4gIGJ1bXBNYXBzOiBmYWxzZSxcbiAgZGVjYWxzOiB0cnVlLFxuICBvcHRpbWl6ZTogdHJ1ZSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogInV4QkFBQSxJ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QUMsQ0FBQyxFQUFFVixFQUFFLFVBQVUsa0JBQWtCLFVBQVUsQ0FBQyxLQUFLLFNBQVMsS0FBSyxTQUFTLE1BQU0sRUFBRSxLQUFLLGFBQWEsS0FBSyxTQUFTLFVBQVUsRUFBRSxLQUFLLFNBQVMsS0FBSyxTQUFTLE1BQU0sRUFBRSxLQUFLLFNBQVMsT0FBTyxDQUFDLEVBQUVBLEVBQUUsVUFBVSxpQkFBaUIsU0FBU00sRUFBRSxDQUFDLEtBQUssU0FBUyxLQUFLQSxDQUFDLEVBQUUsSUFBSUMsRUFBRSxLQUFLLE9BQU9ELEVBQUUsR0FBRyxPQUFPLFNBQVNBLEVBQUUsQ0FBQ0MsRUFBRSxhQUFhRCxDQUFDLENBQUMsQ0FBQyxFQUFFQSxFQUFFLEdBQUcsTUFBTSxVQUFVLENBQUNDLEVBQUUsYUFBYUEsRUFBRSxTQUFTLFVBQVUsRUFBRUEsRUFBRSxTQUFTLE9BQU9BLEVBQUUsa0JBQWtCLEVBQUVBLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRUQsRUFBRSxHQUFHLFFBQVEsU0FBU0EsRUFBRSxDQUFDQyxFQUFFLE1BQU1ELENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFTixFQUFFLFVBQVUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUNXLEVBQUUsVUFBVSxPQUFPLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxVQUFVLEtBQUssU0FBUyxRQUFRLEtBQUssa0JBQWtCLEVBQUUsSUFBSSxLQUFLLFVBQVUsS0FBSyxTQUFTLFFBQVEsS0FBSyxlQUFlLFFBQVEsS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFWCxFQUFFLFVBQVUsTUFBTSxTQUFTTSxFQUFFLENBQUMsSUFBSUMsRUFBRSxLQUFLLFNBQVMsR0FBRyxDQUFDSSxFQUFFLFVBQVUsTUFBTSxLQUFLLEtBQUtMLENBQUMsRUFBRSxNQUFNLEdBQUcsUUFBUUQsRUFBRSxFQUFFQSxFQUFFRSxFQUFFLE9BQU9GLElBQUksR0FBRyxDQUFDRSxFQUFFRixDQUFDLEVBQUUsTUFBTUMsQ0FBQyxDQUFDLE1BQUMsQ0FBUyxDQUFDLE1BQU0sRUFBRSxF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QUFLLE9BQU9BLEVBQUUsTUFBTSxJQUFJQSxFQUFFLE1BQU0sRUFBRSxLQUFLLEtBQUssTUFBTSxJQUFJLEtBQUssTUFBTUQsRUFBRUQsRUFBRUssQ0FBQyxDQUFDLEVBQUUsT0FBTyxTQUFTTCxFQUFFLENBQUMsSUFBSUssRUFBRSxDQUFDLEVBQUUsT0FBTyxLQUFLLFFBQVEsU0FBU0osRUFBRUMsRUFBRSxDQUFDRixFQUFFQyxFQUFFQyxDQUFDLEdBQUdHLEVBQUUsS0FBS0gsQ0FBQyxDQUFDLENBQUMsRUFBRUcsQ0FBQyxFQUFFLEtBQUssU0FBU0osRUFBRUMsRUFBRUYsRUFBRSxDQUFDLEdBQU8sVUFBVSxTQUFkLEVBQXFCLE9BQU9DLEVBQUUsS0FBSyxLQUFLQSxFQUFFTixFQUFFLEtBQUssS0FBS00sRUFBRUMsRUFBRUYsQ0FBQyxFQUFFLEtBQUssR0FBR0YsRUFBRUcsQ0FBQyxFQUFFLENBQUMsSUFBSUksRUFBRUosRUFBRSxPQUFPLEtBQUssT0FBTyxTQUFTQSxFQUFFQyxFQUFFLENBQUMsTUFBTSxDQUFDQSxFQUFFLEtBQUtHLEVBQUUsS0FBS0osQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJSyxFQUFFLEtBQUssTUFBTSxLQUFLLEtBQUtMLENBQUMsRUFBRSxPQUFPSyxHQUFHLENBQUNBLEVBQUUsSUFBSUEsRUFBRSxJQUFJLEVBQUUsT0FBTyxTQUFTTixFQUFFLENBQUMsR0FBRyxDQUFDQSxFQUFFLE9BQU8sS0FBSyxHQUFHRixFQUFFRSxDQUFDLEVBQUUsT0FBTyxLQUFLLE9BQU8sU0FBU0MsRUFBRUMsRUFBRSxDQUFDLE9BQU9BLEVBQUUsS0FBS0YsRUFBRSxLQUFLQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLEVBQUUsS0FBSyxLQUFLRCxFQUFFRSxFQUFFZSxFQUFFLEtBQUssS0FBS2hCLENBQUMsRUFBRUksRUFBRSxLQUFLLE1BQU0sRUFBRSxPQUFPQSxFQUFFLEtBQUtILEVBQUUsS0FBS0csQ0FBQyxFQUFFLE9BQU8sU0FBU0wsRUFBRSxDQUFDQSxFQUFFLEtBQUssS0FBS0Es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SyxLQUFLLEtBQUssS0FBS0EsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLHFCQUFxQixTQUFTQSxFQUFFLENBQUMsUUFBUUMsRUFBRUQsRUFBRSxXQUFXLENBQUMsRUFBRUQsRUFBRUMsRUFBRSxXQUFXLENBQUMsRUFBRUksRUFBRUosRUFBRSxXQUFXLENBQUMsRUFBRUssRUFBRUwsRUFBRSxXQUFXLENBQUMsRUFBRU4sRUFBRSxLQUFLLE9BQU8sRUFBRSxHQUFHQSxFQUFFLEVBQUVBLEVBQUUsR0FBRyxLQUFLLEtBQUtBLENBQUMsSUFBSU8sR0FBRyxLQUFLLEtBQUtQLEVBQUUsQ0FBQyxJQUFJSyxHQUFHLEtBQUssS0FBS0wsRUFBRSxDQUFDLElBQUlVLEdBQUcsS0FBSyxLQUFLVixFQUFFLENBQUMsSUFBSVcsRUFBRSxPQUFPWCxFQUFFLEtBQUssS0FBSyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsc0JBQXNCLFNBQVNNLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFLFdBQVcsQ0FBQyxFQUFFRCxFQUFFQyxFQUFFLFdBQVcsQ0FBQyxFQUFFSSxFQUFFSixFQUFFLFdBQVcsQ0FBQyxFQUFFSyxFQUFFTCxFQUFFLFdBQVcsQ0FBQyxFQUFFTixFQUFFLEtBQUssU0FBUyxDQUFDLEVBQUUsT0FBT08sSUFBSVAsRUFBRSxDQUFDLEdBQUdLLElBQUlMLEVBQUUsQ0FBQyxHQUFHVSxJQUFJVixFQUFFLENBQUMsR0FBR1csSUFBSVgsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFVBQVUsU0FBUyxTQUFTTSxFQUFFLENBQUMsR0FBRyxLQUFLLFlBQVlBLENBQUMsRUFBTUEsSUFBSixFQUFNLE1BQU0sQ0FBQyxFQUFFLElBQUlDLEVBQUUsS0FBSyxLQUFLLE1BQU0sS0FBSyxLQUFLLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNRCxDQUFDLEVBQUUsT0FBTyxLQUFLLE9BQU9BLEVBQUVDLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxHQUFHLGVBQWUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxhQUFhLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUVELEVBQUUsQ0FBQyxLQUFLLEtBQUtBLEVBQUUsS0FBSyxPQUFPQSxFQUFFLE9BQU8sS0FBSyxNQUFNLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxZQUFZLFNBQVNBLEVBQUUsQ0FBQyxLQUFLLFdBQVcsS0FBSyxNQUFNQSxDQUFDLENBQUMsRUFBRSxXQUFXLFNBQVNBLEVBQUUsQ0FBQyxHQUFHLEtBQUssT0FBTyxLQUFLLEtBQUtBLEdBQUdBLEVBQUUsRUFBRSxNQUFNLElBQUksTUFBTSxzQ0FBc0MsS0FBSyxPQUFPLG1CQUFtQkEsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLFNBQVMsU0FBU0EsRUFBRSxDQUFDLEtBQUssV0FBV0EsQ0FBQyxFQUFFLEtBQUssTUFBTUEsQ0FBQyxFQUFFLEtBQUssU0FBU0EsRUFBRSxDQUFDLEtBQUssU0FBUyxLQUFLLE1BQU1BLENBQUMsQ0FBQyxFQUFFLE9BQU8sVUFBVSxDQUFDLEVBQUUsUUFBUSxTQUFTQSxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRSxFQUFFLElBQUksS0FBSyxZQUFZQyxDQUFDLEVBQUVDLEVBQUUsS0FBSyxNQUFNRCxFQUFFLEVBQUVDLEdBQUcsS0FBSyxNQUFNQSxJQUFJRixHQUFHQSxHQUFHLEdBQUcsS0FBSyxPQUFPRSxDQUFDLEVBQUUsT0FBTyxLQUFLLE9BQU9ELEVBQUVELENBQUMsRUFBRSxXQUFXLFNBQVNDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxTQUFTLEtBQUssU0FBU0EsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLFVBQVUsQ0FBQyxFQUFFLHFCQUFxQixVQUFVLENBQUMsRUFBRSxzQkFBc0IsVUFBVSxDQUFDLEVBQUUsU0FBUyxVQUFVLENBQUMsSUFBSUEsRUFBRSxLQUFLLFFBQVEsQ0FBQyxFQUFFLE9BQU8sSUFBSSxLQUFLLEtBQUssSUFBSSxNQUFNQSxHQUFHLEdBQUcsTUFBTUEsR0FBRyxHQUFHLElBQUksRUFBRUEsR0FBRyxHQUFHLEdBQUdBLEdBQUcsR0FBRyxHQUFHQSxHQUFHLEVBQUUsSUFBSSxHQUFHQSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFQSxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUtBLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLFNBQVMsU0FBU0EsRUFBRSxDQUFDLEtBQUssWUFBWUEsQ0FBQyxFQUFFLElBQUlDLEVBQUUsS0FBSyxLQUFLLE1BQU0sS0FBSyxLQUFLLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNRCxDQUFDLEVBQUUsT0FBTyxLQUFLLE9BQU9BLEVBQUVDLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxHQUFHLHFCQUFxQixFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsSUFBSSxFQUFFLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRUQsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLQSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxPQUFPLFNBQVNBLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBS0EsQ0FBQyxDQUFDLEVBQUUsRUFBRSxVQUFVLHFCQUFxQixTQUFTQSxFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssWUFBWUEsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLEVBQUUsVUFBVSxzQkFBc0IsU0FBU0EsRUFBRSxDQUFDLE9BQU9BLElBQUksS0FBSyxTQUFTLENB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S0FBSyxLQUFLLFlBQVksRUFBRSxLQUFLLGVBQWUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTQSxFQUFFLENBQUMsRUFBRUEsRUFBRSxVQUFVLGFBQWEsU0FBU00sRUFBRSxDQUFDLEtBQUssV0FBVyxNQUFNLEVBQUVBLEVBQUUsS0FBSyxLQUFLLFdBQVcsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLQSxDQUFDLENBQUMsRUFBRSxFQUFFLFFBQVFOLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxXQUFXLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsYUFBYSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLFNBQVNBLEVBQUVNLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyx1QkFBdUJBLENBQUMsRUFBRSxLQUFLLFNBQVNBLEVBQUUsS0FBSyxlQUFlQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBU04sRUFBRSxDQUFDLEVBQUVBLEVBQUUsVUFBVSxhQUFhLFNBQVNNLEVBQUUsQ0FBQyxHQUFHQSxFQUFFLENBQUMsSUFBSUMsRUFBRSxLQUFLLFdBQVcsS0FBSyxRQUFRLEdBQUcsRUFBRSxLQUFLLFdBQVcsS0FBSyxRQUFRLEVBQUVBLEVBQUVELEVBQUUsS0FBSyxPQUFPLEVBQUUsVUFBVSxhQUFhLEtBQUssS0FBS0EsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRTixDQUFDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsYUFBYSxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLFNBQVNBLEVBQUVNLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyxZQUFZLEVBQUUsSUFBSUMsRUFBRSxLQUFLLEtBQUssWUFBWSxHQUFHLEtBQUssTUFBTSxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLEtBQUssZUFBZSxHQUFHRCxFQUFFLEtBQUssU0FBU0EsRUFBRSxDQUFDQyxFQUFFLFlBQVksR0FBR0EsRUFBRSxLQUFLRCxFQUFFQyxFQUFFLElBQUlELEdBQUdBLEVBQUUsUUFBUSxFQUFFQyxFQUFFLEtBQUssRUFBRSxVQUFVRCxDQUFDLEVBQUVDLEVBQUUsVUFBVUEsRUFBRSxlQUFlLENBQUMsRUFBRSxTQUFTRCxFQUFFLENBQUNDLEVBQUUsTUFBTUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBU04sRUFBRSxDQUFDLEVBQUVBLEVBQUUsVUFBVSxRQUFRLFVBQVUsQ0FBQyxFQUFFLFVBQVUsUUFBUSxLQUFLLElBQUksRUFBRSxLQUFLLEtBQUssSUFBSSxFQUFFQSxFQUFFLFVBQVUsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFVLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLGdCQUFnQixLQUFLLGNBQWMsS0FBSyxlQUFlLEdBQUcsRUFBRSxNQUFNLEtBQUssZUFBZSxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsRUFBRUEsRUFBRSxVQUFVLGVBQWUsVUFBVSxDQUFDLEtBQUssZUFBZSxHQUFHLEtBQUssVUFBVSxLQUFLLGFBQWEsS0FBSyxNQUFNLEVBQUUsS0FBSyxhQUFhLEVBQUUsTUFBTSxLQUFLLGVBQWUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLGVBQWUsSUFBSSxFQUFFQSxFQUFFLFVBQVUsTUFBTSxVQUFVLENBQUMsR0FBRyxLQUFLLFVBQVUsS0FBSyxXQUFXLE1BQU0sR0FBRyxJQUFJTSxFQUFFLEtBQUtDLEVBQUUsS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLE1BQU0sS0FBSyxFQUFFLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFLE9BQU8sS0FBSyxLQUFLLENBQUMsSUFBSSxTQUFTRCxFQUFFLEtBQUssS0FBSyxVQUFVLEtBQUssTUFBTUMsQ0FBQyxFQUFFLE1BQU0sSUFBSSxhQUFhRCxFQUFFLEtBQUssS0FBSyxTQUFTLEtBQUssTUFBTUMsQ0FBQyxFQUFFLE1BQU0sSUFBSSxRQUFRLElBQUksYUFBYUQsRUFBRSxLQUFLLEtBQUssTUFBTSxLQUFLLE1BQU1DLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxNQUFNQSxFQUFFLEtBQUssS0FBSyxDQUFDLEtBQUtELEVBQUUsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRTixDQUFDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsYUFBYSxTQUFTLEVBQUVNLEVBQUUsQ0FBQyxLQUFLLEtBQUtBLEdBQUcsVUFBVSxLQUFLLFdBQVcsQ0FBQyxFQUFFLEtBQUssZUFBZSxLQUFLLEtBQUssZ0JBQWdCLENBQUMsRUFBRSxLQUFLLFNBQVMsR0FBRyxLQUFLLFdBQVcsR0FBRyxLQUFLLFNBQVMsR0FBRyxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssU0FBUyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxTQUFTQSxFQUFFLENBQUMsS0FBSyxLQUFLLE9BQU9BLENBQUMsQ0FBQyxFQUFFLElBQUksVUFBVSxDQUFDLEdBQUcsS0FBSyxXQUFXLE1BQU0sR0FBRyxLQUFLLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLLFFBQVEsRUFBRSxLQUFLLFdBQVcsRUFBRSxPQUFPQSxFQUFOLENBQVMsS0FBSyxLQUFLLFFBQVFBLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sU0FBU0EsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLGFBQWEsS0FBSyxTQUFTLEtBQUssZUFB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LEVBQUUsYUFBYSxFQUFFQyxFQUFFLEtBQUssR0FBR1EsRUFBRSxXQUFXLEdBQUcsQ0FBQ1IsRUFBRSxFQUFFLHFDQUFxQyxDQUFDLE1BQUMsQ0FBUyxDQUFDLFNBQVNPLEVBQUVILEVBQUVKLEVBQUUsQ0FBQyxPQUFPLElBQUlELEVBQUUsUUFBUSxTQUFTTSxFQUFFRixFQUFFLENBQUMsSUFBSUssRUFBRSxDQUFDLEVBQUVDLEVBQUVMLEVBQUUsY0FBY04sRUFBRU0sRUFBRSxZQUFZTCxFQUFFSyxFQUFFLFVBQVVBLEVBQUUsR0FBRyxPQUFPLFNBQVNBLEVBQUVDLEVBQUUsQ0FBQ0csRUFBRSxLQUFLSixDQUFDLEVBQUVKLEdBQUdBLEVBQUVLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxRQUFRLFNBQVNELEVBQUUsQ0FBQ0ksRUFBRSxDQUFDLEVBQUVMLEVBQUVDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSUEsRUFBRSxTQUFTQSxFQUFFQyxFQUFFRixFQUFFLENBQUMsT0FBT0MsRUFBRSxDQUFDLElBQUksT0FBTyxPQUFPSCxFQUFFLFFBQVFBLEVBQUUsWUFBWSxjQUFjSSxDQUFDLEVBQUVGLENBQUMsRUFBRSxJQUFJLFNBQVMsT0FBT0QsRUFBRSxPQUFPRyxDQUFDLEVBQUUsUUFBUSxPQUFPSixFQUFFLFlBQVlHLEVBQUVDLENBQUMsQ0FBQyxDQUFDLEVBQUVQLEVBQUUsU0FBU00sRUFBRUMsRUFBRSxDQUFDLElBQUlGLEVBQUVLLEVBQUUsRUFBRUMsRUFBRSxLQUFLWCxFQUFFLEVBQUUsSUFBSUssRUFBRSxFQUFFQSxFQUFFRSxFQUFFLE9BQU9GLElBQUlMLEdBQUdPLEVBQUVGLENBQUMsRUFBRSxPQUFPLE9BQU9DLEVBQUUsQ0FBQyxJQUFJLFNBQVMsT0FBT0MsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLFFBQVEsT0FBTyxNQUFNLFVBQVUsT0FBTyxNQUFNLENBQUMsRUFBRUEsQ0FBQyxFQUFFLElBQUksYUFBYSxJQUFJSSxFQUFFLElB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SixFQUFFLENBQUMsT0FBTyxJQUFJLFdBQVdBLENBQUMsQ0FBQyxFQUFFLFdBQVcsU0FBU0EsRUFBRSxDQUFDLE9BQU9ELEVBQUUsY0FBYyxJQUFJLFdBQVdDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRU8sRUFBRSxXQUFXLENBQUMsT0FBT2IsRUFBRSxNQUFNLFNBQVNNLEVBQUUsQ0FBQyxPQUFPUyxFQUFFVCxFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLFlBQVksU0FBU0EsRUFBRSxDQUFDLE9BQU9BLEVBQUUsTUFBTSxFQUFFLFdBQVdJLEVBQUUsV0FBVyxTQUFTSixFQUFFLENBQUMsT0FBT0QsRUFBRSxjQUFjQyxDQUFDLENBQUMsQ0FBQyxFQUFFTyxFQUFFLFdBQVcsQ0FBQyxPQUFPYixFQUFFLE1BQU0sU0FBU00sRUFBRSxDQUFDLE9BQU9TLEVBQUVULEVBQUUsSUFBSSxNQUFNQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsWUFBWSxTQUFTQSxFQUFFLENBQUMsT0FBT08sRUFBRSxXQUFXLFdBQVdQLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxTQUFTQSxFQUFFLENBQUMsT0FBT1MsRUFBRVQsRUFBRSxJQUFJLFdBQVdBLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXSSxDQUFDLEVBQUVULEVBQUUsWUFBWSxTQUFTSyxFQUFFQyxFQUFFLENBQUMsR0FBR0EsRUFBRUEsR0FBRyxHQUFHLENBQUNELEVBQUUsT0FBT0MsRUFBRU4sRUFBRSxhQUFhSyxDQUFDLEVBQUUsSUFBSUQsRUFBRUosRUFBRSxVQUFVTSxDQUFDLEVBQUUsT0FBT00sRUFBRVIsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsQ0FBQyxFQUFFTixFQUFFLFFBQVEsU0FBU0ssRUFBRSxDQUFDLFFBQVFDLEVBQUVELEVBQUUsTUFBTSxHQUFHLEVBQUVELEVBQUUsQ0FBQyxFQUFFSyxFQUFFLEVBQUVBLEVBQUVILEVBQUUsT0FBT0csSUFBSSxDQUFDLElBQUlDLEVBQUVKLEVBQUVHLENBQUMs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SyxDQUFDLENBQUMsRUFBRSxXQUFXLFVBQVUsQ0FBQyxJQUFJTCxFQUFFRixFQUFFLFdBQVcsYUFBYSxRQUFRLEdBQUcsS0FBSyxRQUFRLEVBQUUsS0FBSyxZQUFZRixFQUFFLFdBQVcsS0FBSyxRQUFRLEVBQUUsS0FBSyxlQUFlQSxFQUFFLFdBQVcsS0FBSyxXQUFXLE1BQU0sQ0FBQyxJQUFJSyxFQUFFLEtBQUssMEJBQTBCLEVBQUUsR0FBVUEsSUFBUCxLQUFTLEtBQUssWUFBWUEsTUFBTSxDQUFDLElBQUlGLEVBQUVMLEVBQUUsWUFBWU0sRUFBRSxLQUFLLFFBQVEsRUFBRSxLQUFLLFlBQVksS0FBSyxZQUFZLGVBQWVELENBQUMsRUFBRSxJQUFJSyxFQUFFLEtBQUssNkJBQTZCLEVBQUUsR0FBVUEsSUFBUCxLQUFTLEtBQUssZUFBZUEsTUFBTSxDQUFDLElBQUlDLEVBQUVYLEVBQUUsWUFBWU0sRUFBRSxLQUFLLFdBQVcsRUFBRSxLQUFLLGVBQWUsS0FBSyxZQUFZLGVBQWVLLENBQUMsR0FBRyxFQUFFLDBCQUEwQixVQUFVLENBQUMsSUFBSUwsRUFBRSxLQUFLLFlBQVksS0FBSyxFQUFFLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFLEVBQUVELEVBQUUsS0FBSyxFQUFFLE9BQVdDLEVBQUUsUUFBUSxDQUFDLElBQWYsR0FBc0JOLEVBQUUsS0FBSyxRQUFRLElBQUlNLEVBQUUsUUFBUSxDQUFDLEVBQW5DLEtBQTBDTCxFQUFFLFdBQVdLLEVBQUUsU0FBU0QsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSSxFQUFFLDZCQUE2QixVQUFVLENBQUMsSUFBSUEsRUFBRSxLQUFLLFlBQVksS0FBSyxFQUFFLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFLEVBQUVELEVBQUUsS0FBSyxFQUFFLE9BQVdDLEVBQUUsUUFBUSxDQUFDLElBQWYsR0FBc0JOLEVBQUUsS0FBSyxXQUFXLElBQUlNLEVBQUUsUUFBUSxDQUFDLEVBQXRDLEtBQTZDTCxFQUFFLFdBQVdLLEVBQUUsU0FBU0QsRUFBRSxP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TSxJQUFJLFVBQVVBLEVBQUUsb0JBQW9CLEVBQUUsUUFBUUssS0FBS0wsRUFBRUEsRUFBRSxlQUFlSyxDQUFDLElBQUlKLEVBQUVJLENBQUMsRUFBRUwsRUFBRUssQ0FBQyxJQUFJLE9BQU9KLENBQUMsRUFBRSxFQUFFLFVBQVUsU0FBU0EsRUFBRUMsRUFBRSxDQUFDLE9BQU9ELEVBQUUsU0FBU0MsRUFBRUQsRUFBRUEsRUFBRSxTQUFTQSxFQUFFLFNBQVMsRUFBRUMsQ0FBQyxHQUFHRCxFQUFFLE9BQU9DLEVBQUVELEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxTQUFTLFNBQVNBLEVBQUVDLEVBQUVGLEVBQUVLLEVBQUVDLEVBQUUsQ0FBQyxHQUFHSixFQUFFLFVBQVVELEVBQUUsU0FBU0EsRUFBRSxJQUFJQyxFQUFFLFNBQVNGLEVBQUVBLEVBQUVLLENBQUMsRUFBRUMsQ0FBQyxNQUFPLFNBQVFYLEVBQUUsRUFBRUEsRUFBRVUsRUFBRVYsSUFBSU0sRUFBRUssRUFBRVgsQ0FBQyxFQUFFTyxFQUFFRixFQUFFTCxDQUFDLENBQUMsRUFBRSxjQUFjLFNBQVNNLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRixFQUFFSyxFQUFFQyxFQUFFWCxFQUFFQyxFQUFFLElBQUlNLEVBQUVHLEVBQUUsRUFBRUwsRUFBRUMsRUFBRSxPQUFPQyxFQUFFRixFQUFFRSxJQUFJRyxHQUFHSixFQUFFQyxDQUFDLEVBQUUsT0FBTyxJQUFJTixFQUFFLElBQUksV0FBV1MsQ0FBQyxFQUFFSCxFQUFFSSxFQUFFLEVBQUVOLEVBQUVDLEVBQUUsT0FBT0MsRUFBRUYsRUFBRUUsSUFBSVAsRUFBRU0sRUFBRUMsQ0FBQyxFQUFFTixFQUFFLElBQUlELEVBQUVXLENBQUMsRUFBRUEsR0FBR1gsRUFBRSxPQUFPLE9BQU9DLENBQUMsQ0FBQyxFQUFFRCxFQUFFLENBQUMsU0FBUyxTQUFTTSxFQUFFQyxFQUFFRixFQUFFSyxFQUFFQyxFQUFFLENBQUMsUUFBUVgsRUFBRSxFQUFFQSxFQUFFVSxFQUFFVixJQUFJTSxFQUFFSyxFQUFFWCxDQUFDLEVBQUVPLEVBQUVGLEVBQUVMLENBQUMsQ0FBQyxFQUFFLGNBQWMsU0FBU00sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sTUFBTSxDQUFDLEVBQUVBLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxTQUFTLFNBQVNBLEVBQUUsQ0FBQ0EsR0FBRyxFQUFFLEtBQUssV0FBVyxFQUFFLE1BQU0sWUFBWSxFQUFFLE1BQU0sV0FBVyxFQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLE1BQU0sRUFBRSxNQUFNLE1BQU0sRUFBRSxNQUFNLE1BQU0sRUFBRSxPQUFPLEVBQUVOLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsSUFBSUcsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEdBQUdILEVBQUUsR0FBRyxHQUFHLENBQUMsT0FBTyxhQUFhLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxhQUFhLE1BQU0sS0FBSyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBQyxDQUFTQSxFQUFFLEVBQUUsQ0FBQyxRQUFRSSxFQUFFLElBQUlELEVBQUUsS0FBSyxHQUFHLEVBQUVPLEVBQUUsRUFBRUEsRUFBRSxJQUFJQSxJQUFJTixFQUFFTSxDQUFDLEVBQUUsS0FBS0EsRUFBRSxFQUFFLEtBQUtBLEVBQUUsRUFBRSxLQUFLQSxFQUFFLEVBQUUsS0FBS0EsRUFBRSxFQUFFLEtBQUtBLEVBQUUsRUFBRSxFQUFFLFNBQVNELEVBQUVILEVBQUVDLEVBQUUsQ0FBQyxHQUFHQSxFQUFFLFFBQVFELEVBQUUsVUFBVU4sR0FBRyxDQUFDTSxFQUFFLFVBQVUsR0FBRyxPQUFPLE9BQU8sYUFBYSxNQUFNLEtBQUtILEVBQUUsVUFBVUcsRUFBRUMsQ0FBQyxDQUFDLEVBQUUsUUFBUUYsRUFBRSxHQUFHSyxFQUFFLEVBQUVBLEVBQUVILEVBQUVHLElBQUlMLEdBQUcsT0FBTyxhQUFhQyxFQUFFSSxDQUFDLENBQUMsRUFBRSxPQUFPTCxDQUFDLENBQUNELEVBQUUsR0FBRyxFQUFFQSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsV0FBVyxTQUFTRSxFQUFFLENBQUMsSUFBSUMsRUFBRUYsRUFBRUssRUFBRUMsRUFBRVgsRUFBRUMsRUFBRUssRUFBRSxPQUFPSixFQUFFLEVBQUUsSUFBSVMsRUFBRSxFQUFFQSxFQUFFVixFQUFFVSxLQUFZLE9BQU9OLEVBQUVDLEVBQUUsV0FBV0ssQ0FBQyxLQUEvQixPQUFvQ0EsRUFBRSxFQUFFVixJQUFXLE9BQU9TLEVBQUVKLEVBQUUsV0FBV0ssRUFBRSxDQUFDLEtBQWpDLFFBQXVDTixFQUFFLE9BQU9BLEVBQUUsT0FBTyxLQUFLSyxFQUFFLE9BQU9DLEtBQUtULEdBQUdHLEVBQUUsSUFBSSxFQUFFQSxFQUFFLEtBQUssRUFBRUEsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJRSxFQUFFLElBQUlKLEVBQUUsS0FBS0QsQ0FBQyxFQUFFUyxFQUFFWCxFQUFFLEVBQUVBLEVBQUVFLEVBQUVTLEtBQVksT0FBT04sRUFBRUMsRUFBRSxXQUFXSyxDQUFDLEtBQS9CLE9BQW9DQSxFQUFFLEVBQUVWLElBQVcsT0FBT1MsRUFBRUosRUFBRSxXQUFXSyxFQUFFLENBQUMsS0FBakMsUUFBdUNOLEVBQUUsT0FBT0EsRUFBRSxPQUFPLEtBQUtLLEVBQUUsT0FBT0MsS0FBS04sRUFBRSxJQUFJRSxFQUFFUCxHQUFHLEVBQUVLLEdBQUdBLEVBQUUsS0FBS0UsRUFBRVAsR0FBRyxFQUFFLElBQUlLLElBQUksR0FBR0EsRUFBRSxNQUFNRSxFQUFFUCxHQUFHLEVBQUUsSUFBSUssSUFBSSxJQUFJRSxFQUFFUCxHQUFHLEVBQUUsSUFBSUssSUFBSSxHQUFHRSxFQUFFUCxHQUFHLEVBQUUsSUFBSUssSUFBSSxHQUFHLElBQUlFLEVBQUVQLEdBQUcsRUFBRSxJQUFJSyxJQUFJLEVBQUUsSUFBSUUsRUFBRVAsR0FBRyxFQUFFLElBQUksR0FBR0ssR0FBRyxPQUFPRSxDQUFDLEVBQUUsRUFBRSxjQUFjLFNBQVNELEVBQUUsQ0FBQyxPQUFPRyxFQUFFSCxFQUFFQSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsY0FBYyxTQUFTQSxFQUFFLENBQUMsUUFBUUMsRUFBRSxJQUFJSixFQUFFLEtBQUtHLEVBQUUsTUFBTSxFQUFFRCxFQUFFLEVBQUVLLEVBQUVILEVBQUUsT0FBT0YsRUFBRUssRUFBRUwsSUFBSUUsRUFBRUYsQ0FBQyxFQUFFQyxFQUFFLFdBQVdELENBQUMsRUFBRSxPQUFPRSxDQUFDLEVBQUUsRUFBRSxXQUFXLFNBQVNELEVBQUVDLEVBQUUsQ0FBQyxJQUFJRixFQUFFSyxFQUFFQyxFQUFFWCxFQUFFQyxFQUFFTSxHQUFHRCxFQUFFLE9BQU9KLEVBQUUsSUFBSSxNQUFNLEVBQUVELENBQUMsRUFBRSxJQUFJSSxFQUFFSyxFQUFFLEVBQUVMLEVBQUVKLEdBQUcsSUFBSVUsRUFBRUwsRUFBRUQsR0FBRyxHQUFHLElBQUlILEVBQUVRLEdBQUcsRUFBRUMsVUFBVSxHQUFHWCxFQUFFSSxFQUFFTyxDQUFDLEdBQUdULEVBQUVRLEdBQUcsRUFBRSxNQUFNTCxHQUFHTCxFQUFFLE1BQU0sQ0FBQyxJQUFJVyxHQUFPWCxJQUFKLEVBQU0sR0FBT0EsSUFBSixFQUFNLEdBQUcsRUFBRSxFQUFFQSxHQUFHSyxFQUFFSixHQUFHVSxFQUFFQSxHQUFHLEVBQUUsR0FBR0wsRUFBRUQsR0FBRyxFQUFFTCxJQUFJLEVBQUVBLEVBQUVFLEVBQUVRLEdBQUcsRUFBRSxNQUFNQyxFQUFFLE1BQU1ULEVBQUVRLEdBQUcsRUFBRUMsR0FBR0EsR0FBRyxNQUFNVCxFQUFFUSxHQUFHLEVBQUUsTUFBTUMsR0FBRyxHQUFHLEtBQUtULEVBQUVRLEdBQUcsRUFBRSxNQUFNLEtBQUtDLEdBQUcsT0FBT0YsRUFBRVAsRUFBRVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxXQUFXLFNBQVNKLEVBQUVDLEVBQUUsQ0FBQyxJQUFJRixFQUFFLEtBQUtFLEVBQUVBLEdBQUdELEVBQUUsUUFBUUEsRUFBRSxTQUFTQyxFQUFFRCxFQUFFLFFBQVFELEVBQUVFLEVBQUUsRUFBRSxHQUFHRixJQUFTLElBQUlDLEVBQUVELENBQUMsSUFBYixLQUFpQkEsSUFBSSxPQUFPQSxFQUFFLEdBQVFBLElBQUosRUFBRkUsRUFBVUYsRUFBRUQsRUFBRUUsRUFBRUQsQ0FBQyxDQUFDLEVBQUVFLEVBQUVGLEVBQUVFLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLFNBQVNELEVBQUVDLEVBQUVGLEVBQUVLLEVBQUUsQ0FBQyxRQUFRQyxFQUFFLE1BQU1MLEVBQUUsRUFBRU4sRUFBRU0sSUFBSSxHQUFHLE1BQU0sRUFBRUwsRUFBRSxFQUFNSSxJQUFKLEdBQU8sQ0FBQyxJQUFJQSxHQUFHSixFQUFFLElBQUlJLEVBQUUsSUFBSUEsRUFBRUwsRUFBRUEsR0FBR1csRUFBRUEsRUFBRUosRUFBRUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFVCxHQUFHLENBQUNVLEdBQUcsTUFBTVgsR0FBRyxNQUFNLE9BQU9XLEVBQUVYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsUUFBUSxHQUFHLGVBQWUsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxzQkFBc0IsR0FBRyxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLGFBQWEsSUFBSUUsRUFBRSxVQUFVLENBQUMsUUFBUUksRUFBRUMsRUFBRSxDQUFDLEVBQUVGLEVBQUUsRUFBRUEsRUFBRSxJQUFJQSxJQUFJLENBQUNDLEVBQUVELEVBQUUsUUFBUUssRUFBRSxFQUFFQSxFQUFFLEVBQUVBLElBQUlKLEVBQUUsRUFBRUEsRUFBRSxXQUFXQSxJQUFJLEVBQUVBLElBQUksRUFBRUMsRUFBRUYsQ0FBQyxFQUFFQyxFQUFFLE9BQU9DLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxTQUFTRCxFQUFFQyxFQUFFRixFQUFFSyxFQUFFLENBQUMsSUFBSUMsRUFBRVQsRUFBRUYsRUFBRVUsRUFBRUwsRUFBRUMsR0FBRyxHQUFHLFFBQVFMLEVBQUVTLEVBQUVULEVBQUVELEVBQUVDLElBQUlLLEVBQUVBLElBQUksRUFBRUssRUFBRSxLQUFLTCxFQUFFQyxFQUFFTixDQUFDLEVBQUUsRUFBRSxNQUFNLEdBQUdLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsYUFBYSxJQUFJSCxFQUFFVSxFQUFFLEVBQUUsaUJBQWlCLEVBQUVULEVBQUUsRUFBRSxTQUFTLEVBQUVRLEVBQUUsRUFBRSxXQUFXLEVBQUVFLEVBQUUsRUFBRSxTQUFTLEVBQUVKLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFSyxFQUFFLEVBQUVJLEVBQUUsRUFBRUMsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUUsRUFBRVgsRUFBRSxFQUFFWSxFQUFFLEVBQUVDLEVBQUUsRUFBRXhCLEVBQUUsSUFBSUMsRUFBRSxHQUFHQyxFQUFFLEdBQUd1QixFQUFFLEVBQUV6QixFQUFFLEVBQUUwQixFQUFFLEdBQUdDLEVBQUUsRUFBRUMsRUFBRSxJQUFJQyxFQUFFRCxFQUFFRCxFQUFFLEVBQUVHLEVBQUUsR0FBR0UsRUFB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QUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEVBQUUsS0FBSyxVQUFVLEVBQUUsS0FBSyxVQUFVLEVBQUUsS0FBSyxVQUFVLEVBQUUsS0FBSyxXQUFXLEVBQUUsS0FBSyxZQUFZLEVBQUUsS0FBSyxhQUFhLEVBQUUsS0FBSyxXQUFXLEVBQUUsS0FBSyxnQkFBZ0IsRUFBRSxLQUFLLFNBQVMsRUFBRSxLQUFLLFlBQVksRUFBRSxLQUFLLFVBQVUsRUFBRSxLQUFLLFlBQVksRUFBRSxLQUFLLGlCQUFpQixFQUFFLEtBQUssZUFBZSxFQUFFLEtBQUssTUFBTSxFQUFFLEtBQUssU0FBUyxFQUFFLEtBQUssV0FBVyxFQUFFLEtBQUssV0FBVyxFQUFFLEtBQUssVUFBVSxJQUFJVixFQUFFLE1BQU0sRUFBRVksQ0FBQyxFQUFFLEtBQUssVUFBVSxJQUFJWixFQUFFLE1BQU0sR0FBRyxFQUFFWixFQUFFLEVBQUUsRUFBRSxLQUFLLFFBQVEsSUFBSVksRUFBRSxNQUFNLEdBQUcsRUFBRVgsRUFBRSxFQUFFLEVBQUVpQyxFQUFFLEtBQUssU0FBUyxFQUFFQSxFQUFFLEtBQUssU0FBUyxFQUFFQSxFQUFFLEtBQUssT0FBTyxFQUFFLEtBQUssT0FBTyxLQUFLLEtBQUssT0FBTyxLQUFLLEtBQUssUUFBUSxLQUFLLEtBQUssU0FBUyxJQUFJdEIsRUFBRSxNQUFNYSxFQUFFLENBQUMsRUFBRSxLQUFLLEtBQUssSUFBSWIsRUFBRSxNQUFNLEVBQUViLEVBQUUsQ0FBQyxFQUFFbUMsRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRSxLQUFLLFNBQVMsRUFBRSxLQUFLLE1BQU0sSUFBSXRCLEVBQUUsTUFBTSxFQUFFYixFQUFFLENBQUMsRUFBRW1DLEVBQUUsS0FBSyxLQUFLLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxZQUFZLEVBQUUsS0FBSyxTQUFTLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxRQUFRLEVBQUUsS0FBSyxXQUFXLEVBQUUsS0FBSyxRQUFRLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSyxP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RUFBRSxNQUFNLEVBQUVnQyxHQUFFNUIsRUFBRSxFQUFFLEVBQUU0QixHQUFFNUIsRUFBRSxHQUFHLEVBQUU0QixHQUFFNUIsRUFBRSxDQUFDLEVBQUVBLEVBQUUsUUFBUTRCLEdBQUU1QixHQUFHQSxFQUFFLE9BQU8sS0FBSyxFQUFFLElBQUlBLEVBQUUsT0FBTyxLQUFLLEVBQUUsSUFBSUEsRUFBRSxPQUFPLE1BQU0sRUFBRSxJQUFJQSxFQUFFLE9BQU8sS0FBSyxFQUFFLElBQUlBLEVBQUUsT0FBTyxRQUFRLEdBQUcsRUFBRSxFQUFFNEIsR0FBRTVCLEVBQUUsSUFBSUEsRUFBRSxPQUFPLElBQUksRUFBRTRCLEdBQUU1QixFQUFFQSxFQUFFLE9BQU8sTUFBTSxFQUFFLEdBQUcsRUFBRTRCLEdBQUU1QixFQUFFQSxFQUFFLE9BQU8sTUFBTSxHQUFHLEdBQUcsRUFBRTRCLEdBQUU1QixFQUFFQSxFQUFFLE9BQU8sTUFBTSxHQUFHLEdBQUcsRUFBRTRCLEdBQUU1QixFQUFNQSxFQUFFLFFBQU4sRUFBWSxFQUFFLEdBQUdBLEVBQUUsVUFBVUEsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU0QixHQUFFNUIsRUFBRSxJQUFJQSxFQUFFLE9BQU8sRUFBRSxFQUFFQSxFQUFFLE9BQU8sT0FBT0EsRUFBRSxPQUFPLE1BQU0sU0FBUzRCLEdBQUU1QixFQUFFLElBQUlBLEVBQUUsT0FBTyxNQUFNLE1BQU0sRUFBRTRCLEdBQUU1QixFQUFFQSxFQUFFLE9BQU8sTUFBTSxRQUFRLEVBQUUsR0FBRyxHQUFHQSxFQUFFLE9BQU8sT0FBT0osRUFBRSxNQUFNUSxFQUFFUixFQUFFLE1BQU1JLEVBQUUsWUFBWUEsRUFBRSxRQUFRLENBQUMsR0FBR0EsRUFBRSxRQUFRLEVBQUVBLEVBQUUsT0FBTyxLQUFLNEIsR0FBRTVCLEVBQUUsQ0FBQyxFQUFFNEIsR0FBRTVCLEVBQUUsQ0FBQyxFQUFFNEIsR0FBRTVCLEVBQUUsQ0FBQyxFQUFFNEIsR0FBRTVCLEVBQUUsQ0FBQyxFQUFFNEIsR0FBRTVCLEVBQUUsQ0FBQyxF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QUFNLEVBQUUsS0FBSyxLQUFLLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxPQUFPLEtBQUssS0FBSyxLQUFLLEVBQUUsS0FBSyxLQUFLLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxRQUFRLEtBQUssS0FBSyxTQUFTLEtBQUssS0FBSyxRQUFRLEVBQUUsS0FBSyxTQUFTLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxLQUFLLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxLQUFLLEVBQUUsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUlrQixFQUFFLE1BQU0sR0FBRyxFQUFFLEtBQUssS0FBSyxJQUFJQSxFQUFFLE1BQU0sR0FBRyxFQUFFLEtBQUssT0FBTyxLQUFLLEtBQUssUUFBUSxLQUFLLEtBQUssS0FBSyxFQUFFLEtBQUssS0FBSyxFQUFFLEtBQUssSUFBSSxDQUFDLENBQUMsU0FBU2pCLEVBQUVLLEVBQUUsQ0FBQyxJQUFJQyxFQUFFLE9BQU9ELEdBQUdBLEVBQUUsT0FBT0MsRUFBRUQsRUFBRSxNQUFNQSxFQUFFLFNBQVNBLEVBQUUsVUFBVUMsRUFBRSxNQUFNLEVBQUVELEVBQUUsSUFBSSxHQUFHQyxFQUFFLE9BQU9ELEVBQUUsTUFBTSxFQUFFQyxFQUFFLE1BQU1BLEVBQUUsS0FBS2dDLEVBQUVoQyxFQUFFLEtBQUssRUFBRUEsRUFBRSxTQUFTLEVBQUVBLEVBQUUsS0FBSyxNQUFNQSxFQUFFLEtBQUssS0FBS0EsRUFBRSxLQUFLLEVBQUVBLEVBQUUsS0FBSyxFQUFFQSxFQUFFLFFBQVFBLEVBQUUsT0FBTyxJQUFJVyxFQUFFLE1BQU1SLENBQUMsRUFBRUgsRUFBRSxTQUFTQSxFQUFFLFFBQVEsSUFBSVcsRUFBRSxNQUFNUCxDQUFDLEVBQUVKLEVBQUUsS0FBSyxFQUFF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TSxFQUFFQSxJQUFJRSxHQUFHTSxFQUFFVixHQUFHLEdBQUdTLEVBQUVBLEdBQUcsRUFBRSxHQUFHSixFQUFFLE1BQU1ELEdBQU0sSUFBSUMsRUFBRSxRQUFWLEVBQWlCLENBQUNDLEVBQUUsSUFBSSw2QkFBNkJELEVBQUUsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNQSxFQUFFLE1BQU0sQ0FBQ0MsRUFBRSxJQUFJLDJCQUEyQkQsRUFBRSxLQUFLLEdBQUcsTUFBTUEsRUFBRSxPQUFPQSxFQUFFLEtBQUssS0FBS0QsR0FBRyxFQUFFLEdBQUcsSUFBSUMsRUFBRSxRQUFRMkIsRUFBRSxDQUFDLEVBQUUsSUFBSTVCLEVBQUU0QixFQUFFLENBQUMsRUFBRTVCLElBQUksRUFBRSxJQUFJQyxFQUFFLE1BQU0wQixFQUFFMUIsRUFBRSxNQUFNMkIsRUFBRSxFQUFFLENBQUMsR0FBR3ZCLEVBQUVMLEVBQUUsRUFBRUMsRUFBRSxLQUFLLEVBQUUsSUFBSyxHQUFFLEtBQUtJLEVBQUUsSUFBSSxDQUFDLEdBQU9QLElBQUosRUFBTSxNQUFNLEVBQUVBLElBQUlFLEdBQUdNLEVBQUVWLEdBQUcsR0FBR1MsRUFBRUEsR0FBRyxFQUFFSixFQUFFLE9BQU9BLEVBQUUsS0FBSyxLQUFLRCxHQUFHLElBQUlDLEVBQUUsUUFBUTJCLEVBQUUsQ0FBQyxFQUFFLElBQUk1QixFQUFFNEIsRUFBRSxDQUFDLEVBQUU1QixJQUFJLEVBQUUsSUFBSTRCLEVBQUUsQ0FBQyxFQUFFNUIsSUFBSSxHQUFHLElBQUk0QixFQUFFLENBQUMsRUFBRTVCLElBQUksR0FBRyxJQUFJQyxFQUFFLE1BQU0wQixFQUFFMUIsRUFBRSxNQUFNMkIsRUFBRSxFQUFFLENBQUMsR0FBR3ZCLEVBQUVMLEVBQUUsRUFBRUMsRUFBRSxLQUFLLEVBQUUsSUFBSyxHQUFFLEtBQUtJLEVBQUUsSUFBSSxDQUFDLEdBQU9QLElBQUosRUFBTSxNQUFNLEVBQUVBLElBQUlFLEdBQUdNLEVBQUVWLEdBQUcsR0FBR1MsRUFBRUEsR0FBRyxFQUFFSixFQUFFLE9BQU9BLEVB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RyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUVDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sTUFBTSxFQUFFLENBQUMsRUFBRUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsUUFBUSxTQUFTakMsRUFBRUMsRUFBRUYsRUFBRUssRUFBRUMsRUFBRVgsRUFBRUMsRUFBRUMsRUFBRSxDQUFDLElBQUlDLEVBQUVDLEVBQUVLLEVBQUVNLEVBQUVGLEVBQUVELEVBQUVFLEVBQUVLLEVBQUVDLEVBQUVDLEVBQUVuQixFQUFFLEtBQUtvQixFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEdBQUUsRUFBRUMsRUFBRSxFQUFFQyxHQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFRSxFQUFFLEVBQUVoQixFQUFFLEtBQUtFLEdBQUUsRUFBRUQsRUFBRSxJQUFJa0IsRUFBRSxNQUFNLEVBQUUsRUFBRUosRUFBRSxJQUFJSSxFQUFFLE1BQU0sRUFBRSxFQUFFRixHQUFFLEtBQUtDLEdBQUUsRUFBRSxJQUFJWixFQUFFLEVBQUVBLEdBQUcsR0FBR0EsSUFBSUwsRUFBRUssQ0FBQyxFQUFFLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFYixF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LEdBQ1osU0FBVSxHQUNWLE9BQVEsR0FDUixTQUFVLEVBQ1osR0RKTyxJQUFNQyxHQUFvQixNQUMvQkMsRUFDQUMsSUFDdUIsQ0FFdkIsSUFBTUMsRUFBTSxNQURBLE1BQVksYUFBVUYsQ0FBSSxHQUNoQixLQUFLLFdBQVcsR0FBRyxNQUFNLFFBQVEsRUFDdkQsR0FBSSxDQUFDRSxFQUFLLE1BQU0sSUFBSSxNQUFNLHFCQUFxQixFQUMvQyxPQUFPQyxHQUFpQixLQUFLLE1BQU1ELENBQUcsRUFBR0QsQ0FBTyxDQUNsRCxFQUVhRSxHQUFtQixDQUFDRCxFQUFlRCxJQUEwQyxDQUN4RixJQUFNRyxFQUFjLENBQUUsR0FBR0MsR0FBa0IsRUFBRyxHQUFHSixDQUFRLEVBRW5ESyxFQUFVLElBQUlDLEdBQ3BCQyxHQUFZTixFQUFLSSxFQUFTRixDQUFXLEVBQ3JDLElBQU1LLEVBQU9ILEVBQVEsTUFBTSxFQUUzQixHQUFJLENBQUNGLEVBQVksU0FBVSxPQUFPSyxFQUVsQyxJQUFNQyxFQUFZLElBQUlDLEdBQWNGLENBQUksRUFFeEMsT0FBQUMsRUFBVSxjQUFjLENBQ3RCLFNBQVUsR0FDVixTQUFVLEdBQ1YsT0FBUSxHQUNSLFVBQVcsR0FDWCxVQUFXLEdBQ1gsWUFBYSxHQUNiLFFBQVMsRUFDWCxDQUFDLEVBRURBLEVBQVUsWUFBWSxDQUNwQixRQUFTLEdBQ1QsWUFBYSxHQUNiLFVBQVcsR0FDWCxPQUFRLEdBQ1IsU0FBVSxHQUNWLFNBQVUsRUFDWixDQUFDLEVBRU1BLEVBQVUsSUFDbkIiLAogICJuYW1lcyI6IFsicmVxdWlyZV9zaGFtcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm9iaiIsICJzeW0iLCAic3ltT2JqIiwgInN5bVZhbCIsICJzeW1zIiwgImRlc2NyaXB0b3IiLCAicmVxdWlyZV9zaGFtcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImhhc1N5bWJvbHMiLCAicmVxdWlyZV9oYXNfc3ltYm9scyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm9yaWdTeW1ib2wiLCAiaGFzU3ltYm9sU2hhbSIsICJyZXF1aXJlX2ltcGxlbWVudGF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRVJST1JfTUVTU0FHRSIsICJzbGljZSIsICJ0b1N0ciIsICJmdW5jVHlwZSIsICJ0aGF0IiwgInRhcmdldCIsICJhcmdzIiwgImJvdW5kIiwgImJpbmRlciIsICJyZXN1bHQiLCAiYm91bmRMZW5ndGgiLCAiYm91bmRBcmdzIiwgImkiLCAiRW1wdHkiLCAicmVxdWlyZV9mdW5jdGlvbl9iaW5kIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaW1wbGVtZW50YXRpb24iLCAicmVxdWlyZV9zcmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJiaW5kIiwgInJlcXVpcmVfZ2V0X2ludHJpbnNpYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInVuZGVmaW5lZCIsICIkU3ludGF4RXJyb3IiLCAiJEZ1bmN0aW9uIiwgIiRUeXBlRXJyb3IiLCAiZ2V0RXZhbGxlZENvbnN0cnVjdG9yIiwgImV4cHJlc3Npb25TeW50YXgiLCAiJGdPUEQiLCAidGhyb3dUeXBlRXJyb3IiLCAiVGhyb3dUeXBlRXJyb3IiLCAiaGFzU3ltYm9scyIsICJnZXRQcm90byIsICJ4IiwgIm5lZWRzRXZhbCIsICJUeXBlZEFycmF5IiwgIklOVFJJTlNJQ1MiLCAiZXJyb3JQcm90byIsICJkb0V2YWwiLCAibmFtZSIsICJ2YWx1ZSIsICJmbiIsICJnZW4iLCAiTEVHQUNZX0FMSUFTRVMiLCAiYmluZCIsICJoYXNPd24iLCAiJGNvbmNhdCIsICIkc3BsaWNlQXBwbHkiLCAiJHJlcGxhY2UiLCAiJHN0clNsaWNlIiwgIiRleGVjIiwgInJlUHJvcE5hbWUiLCAicmVFc2NhcGVDaGFyIiwgInN0cmluZ1RvUGF0aCIsICJzdHJpbmciLCAiZmlyc3QiLCAibGFzdCIsICJyZXN1bHQiLCAibWF0Y2giLCAibnVtYmVyIiwgInF1b3RlIiwgInN1YlN0cmluZyIsICJnZXRCYXNlSW50cmluc2ljIiwgImFsbG93TWlzc2luZyIsICJpbnRyaW5zaWNOYW1lIiwgImFsaWFzIiwgInBhcnRzIiwgImludHJpbnNpY0Jhc2VOYW1lIiwgImludHJpbnNpYyIsICJpbnRyaW5zaWNSZWFsTmFtZSIsICJza2lwRnVydGhlckNhY2hpbmciLCAiaSIsICJpc093biIsICJwYXJ0IiwgImRlc2MiLCAicmVxdWlyZV9jYWxsX2JpbmQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJiaW5kIiwgIkdldEludHJpbnNpYyIsICIkYXBwbHkiLCAiJGNhbGwiLCAiJHJlZmxlY3RBcHBseSIsICIkZ09QRCIsICIkZGVmaW5lUHJvcGVydHkiLCAiJG1heCIsICJvcmlnaW5hbEZ1bmN0aW9uIiwgImZ1bmMiLCAiZGVzYyIsICJhcHBseUJpbmQiLCAicmVxdWlyZV9jYWxsQm91bmQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJHZXRJbnRyaW5zaWMiLCAiY2FsbEJpbmQiLCAiJGluZGV4T2YiLCAibmFtZSIsICJhbGxvd01pc3NpbmciLCAiaW50cmluc2ljIiwgInJlcXVpcmVfaXNfYXJndW1lbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaGFzVG9TdHJpbmdUYWciLCAiY2FsbEJvdW5kIiwgIiR0b1N0cmluZyIsICJpc1N0YW5kYXJkQXJndW1lbnRzIiwgInZhbHVlIiwgImlzTGVnYWN5QXJndW1lbnRzIiwgInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCAicmVxdWlyZV9pc19nZW5lcmF0b3JfZnVuY3Rpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ0b1N0ciIsICJmblRvU3RyIiwgImlzRm5SZWdleCIsICJoYXNUb1N0cmluZ1RhZyIsICJnZXRQcm90byIsICJnZXRHZW5lcmF0b3JGdW5jIiwgIkdlbmVyYXRvckZ1bmN0aW9uIiwgImZuIiwgInN0ciIsICJnZW5lcmF0b3JGdW5jIiwgInJlcXVpcmVfaXNfY2FsbGFibGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmblRvU3RyIiwgInJlZmxlY3RBcHBseSIsICJiYWRBcnJheUxpa2UiLCAiaXNDYWxsYWJsZU1hcmtlciIsICJfIiwgImNvbnN0cnVjdG9yUmVnZXgiLCAiaXNFUzZDbGFzc0ZuIiwgInZhbHVlIiwgImZuU3RyIiwgInRyeUZ1bmN0aW9uT2JqZWN0IiwgInRvU3RyIiwgIm9iamVjdENsYXNzIiwgImZuQ2xhc3MiLCAiZ2VuQ2xhc3MiLCAiZGRhQ2xhc3MiLCAiZGRhQ2xhc3MyIiwgImRkYUNsYXNzMyIsICJoYXNUb1N0cmluZ1RhZyIsICJpc0lFNjgiLCAiaXNEREEiLCAiYWxsIiwgInN0ciIsICJlIiwgInN0ckNsYXNzIiwgInJlcXVpcmVfZm9yX2VhY2giLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc0NhbGxhYmxlIiwgInRvU3RyIiwgImhhc093blByb3BlcnR5IiwgImZvckVhY2hBcnJheSIsICJhcnJheSIsICJpdGVyYXRvciIsICJyZWNlaXZlciIsICJsZW4iLCAiZm9yRWFjaFN0cmluZyIsICJzdHJpbmciLCAiZm9yRWFjaE9iamVjdCIsICJvYmplY3QiLCAiayIsICJmb3JFYWNoIiwgImxpc3QiLCAidGhpc0FyZyIsICJyZXF1aXJlX2F2YWlsYWJsZV90eXBlZF9hcnJheXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJwb3NzaWJsZU5hbWVzIiwgImciLCAib3V0IiwgImkiLCAicmVxdWlyZV9nb3BkIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiR2V0SW50cmluc2ljIiwgIiRnT1BEIiwgInJlcXVpcmVfaXNfdHlwZWRfYXJyYXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmb3JFYWNoIiwgImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwgImNhbGxCb3VuZCIsICIkdG9TdHJpbmciLCAiaGFzVG9TdHJpbmdUYWciLCAiZ09QRCIsICJnIiwgInR5cGVkQXJyYXlzIiwgIiRpbmRleE9mIiwgImFycmF5IiwgInZhbHVlIiwgImkiLCAiJHNsaWNlIiwgInRvU3RyVGFncyIsICJnZXRQcm90b3R5cGVPZiIsICJ0eXBlZEFycmF5IiwgImFyciIsICJwcm90byIsICJkZXNjcmlwdG9yIiwgInN1cGVyUHJvdG8iLCAidHJ5VHlwZWRBcnJheXMiLCAiYW55VHJ1ZSIsICJnZXR0ZXIiLCAidGFnIiwgInJlcXVpcmVfd2hpY2hfdHlwZWRfYXJyYXkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmb3JFYWNoIiwgImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwgImNhbGxCb3VuZCIsICJnT1BEIiwgIiR0b1N0cmluZyIsICJoYXNUb1N0cmluZ1RhZyIsICJnIiwgInR5cGVkQXJyYXlzIiwgIiRzbGljZSIsICJ0b1N0clRhZ3MiLCAiZ2V0UHJvdG90eXBlT2YiLCAidHlwZWRBcnJheSIsICJhcnIiLCAicHJvdG8iLCAiZGVzY3JpcHRvciIsICJzdXBlclByb3RvIiwgInRyeVR5cGVkQXJyYXlzIiwgInZhbHVlIiwgImZvdW5kTmFtZSIsICJnZXR0ZXIiLCAibmFtZSIsICJpc1R5cGVkQXJyYXkiLCAicmVxdWlyZV90eXBlcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiaXNBcmd1bWVudHNPYmplY3QiLCAiaXNHZW5lcmF0b3JGdW5jdGlvbiIsICJ3aGljaFR5cGVkQXJyYXkiLCAiaXNUeXBlZEFycmF5IiwgInVuY3VycnlUaGlzIiwgImYiLCAiQmlnSW50U3VwcG9ydGVkIiwgIlN5bWJvbFN1cHBvcnRlZCIsICJPYmplY3RUb1N0cmluZyIsICJudW1iZXJWYWx1ZSIsICJzdHJpbmdWYWx1ZSIsICJib29sZWFuVmFsdWUiLCAiYmlnSW50VmFsdWUiLCAic3ltYm9sVmFsdWUiLCAiY2hlY2tCb3hlZFByaW1pdGl2ZSIsICJ2YWx1ZSIsICJwcm90b3R5cGVWYWx1ZU9mIiwgImlzUHJvbWlzZSIsICJpbnB1dCIsICJpc0FycmF5QnVmZmVyVmlldyIsICJpc0RhdGFWaWV3IiwgImlzVWludDhBcnJheSIsICJpc1VpbnQ4Q2xhbXBlZEFycmF5IiwgImlzVWludDE2QXJyYXkiLCAiaXNVaW50MzJBcnJheSIsICJpc0ludDhBcnJheSIsICJpc0ludDE2QXJyYXkiLCAiaXNJbnQzMkFycmF5IiwgImlzRmxvYXQzMkFycmF5IiwgImlzRmxvYXQ2NEFycmF5IiwgImlzQmlnSW50NjRBcnJheSIsICJpc0JpZ1VpbnQ2NEFycmF5IiwgImlzTWFwVG9TdHJpbmciLCAiaXNNYXAiLCAiaXNTZXRUb1N0cmluZyIsICJpc1NldCIsICJpc1dlYWtNYXBUb1N0cmluZyIsICJpc1dlYWtNYXAiLCAiaXNXZWFrU2V0VG9TdHJpbmciLCAiaXNXZWFrU2V0IiwgImlzQXJyYXlCdWZmZXJUb1N0cmluZyIsICJpc0FycmF5QnVmZmVyIiwgImlzRGF0YVZpZXdUb1N0cmluZyIsICJTaGFyZWRBcnJheUJ1ZmZlckNvcHkiLCAiaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nIiwgImlzU2hhcmVkQXJyYXlCdWZmZXIiLCAiaXNBc3luY0Z1bmN0aW9uIiwgImlzTWFwSXRlcmF0b3IiLCAiaXNTZXRJdGVyYXRvciIsICJpc0dlbmVyYXRvck9iamVjdCIsICJpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUiLCAiaXNOdW1iZXJPYmplY3QiLCAiaXNTdHJpbmdPYmplY3QiLCAiaXNCb29sZWFuT2JqZWN0IiwgImlzQmlnSW50T2JqZWN0IiwgImlzU3ltYm9sT2JqZWN0IiwgImlzQm94ZWRQcmltaXRpdmUiLCAiaXNBbnlBcnJheUJ1ZmZlciIsICJtZXRob2QiLCAicmVxdWlyZV9pc0J1ZmZlckJyb3dzZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhcmciLCAicmVxdWlyZV9pbmhlcml0c19icm93c2VyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY3RvciIsICJzdXBlckN0b3IiLCAiVGVtcEN0b3IiLCAicmVxdWlyZV91dGlsIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwgIm9iaiIsICJrZXlzIiwgImRlc2NyaXB0b3JzIiwgImZvcm1hdFJlZ0V4cCIsICJmIiwgImlzU3RyaW5nIiwgIm9iamVjdHMiLCAiaSIsICJpbnNwZWN0IiwgImFyZ3MiLCAibGVuIiwgInN0ciIsICJ4IiwgImlzTnVsbCIsICJpc09iamVjdCIsICJmbiIsICJtc2ciLCAid2FybmVkIiwgImRlcHJlY2F0ZWQiLCAiZGVidWdzIiwgImRlYnVnRW52UmVnZXgiLCAiZGVidWdFbnYiLCAic2V0IiwgInBpZCIsICJvcHRzIiwgImN0eCIsICJzdHlsaXplTm9Db2xvciIsICJpc0Jvb2xlYW4iLCAiaXNVbmRlZmluZWQiLCAic3R5bGl6ZVdpdGhDb2xvciIsICJmb3JtYXRWYWx1ZSIsICJzdHlsZVR5cGUiLCAic3R5bGUiLCAiYXJyYXlUb0hhc2giLCAiYXJyYXkiLCAiaGFzaCIsICJ2YWwiLCAiaWR4IiwgInZhbHVlIiwgInJlY3Vyc2VUaW1lcyIsICJpc0Z1bmN0aW9uIiwgInJldCIsICJwcmltaXRpdmUiLCAiZm9ybWF0UHJpbWl0aXZlIiwgInZpc2libGVLZXlzIiwgImlzRXJyb3IiLCAiZm9ybWF0RXJyb3IiLCAibmFtZSIsICJpc1JlZ0V4cCIsICJpc0RhdGUiLCAiYmFzZSIsICJicmFjZXMiLCAiaXNBcnJheSIsICJuIiwgIm91dHB1dCIsICJmb3JtYXRBcnJheSIsICJrZXkiLCAiZm9ybWF0UHJvcGVydHkiLCAicmVkdWNlVG9TaW5nbGVTdHJpbmciLCAic2ltcGxlIiwgImlzTnVtYmVyIiwgImwiLCAiaGFzT3duUHJvcGVydHkiLCAiZGVzYyIsICJsaW5lIiwgIm51bUxpbmVzRXN0IiwgImxlbmd0aCIsICJwcmV2IiwgImN1ciIsICJhciIsICJhcmciLCAiaXNOdWxsT3JVbmRlZmluZWQiLCAiaXNTeW1ib2wiLCAicmUiLCAib2JqZWN0VG9TdHJpbmciLCAiZCIsICJpc1ByaW1pdGl2ZSIsICJvIiwgInBhZCIsICJtb250aHMiLCAidGltZXN0YW1wIiwgInRpbWUiLCAib3JpZ2luIiwgImFkZCIsICJwcm9wIiwgImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsICJvcmlnaW5hbCIsICJwcm9taXNlUmVzb2x2ZSIsICJwcm9taXNlUmVqZWN0IiwgInByb21pc2UiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiZXJyIiwgImNhbGxiYWNraWZ5T25SZWplY3RlZCIsICJyZWFzb24iLCAiY2IiLCAibmV3UmVhc29uIiwgImNhbGxiYWNraWZ5IiwgImNhbGxiYWNraWZpZWQiLCAibWF5YmVDYiIsICJzZWxmIiwgInJlaiIsICJyZXF1aXJlX2VtaXR0ZXJfY29tcG9uZW50IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRW1pdHRlciIsICJvYmoiLCAibWl4aW4iLCAia2V5IiwgImV2ZW50IiwgImZuIiwgInNlbGYiLCAib24iLCAiY2FsbGJhY2tzIiwgImNiIiwgImFyZ3MiLCAiaSIsICJsZW4iLCAicmVxdWlyZV9zdHJlYW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJFbWl0dGVyIiwgIlN0cmVhbSIsICJkZXN0IiwgIm9wdGlvbnMiLCAic291cmNlIiwgIm9uZGF0YSIsICJjaHVuayIsICJvbmRyYWluIiwgIm9uZW5kIiwgIm9uY2xvc2UiLCAiZGlkT25FbmQiLCAib25lcnJvciIsICJlciIsICJjbGVhbnVwIiwgInJlcXVpcmVfYmFzZTY0X2pzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJieXRlTGVuZ3RoIiwgInRvQnl0ZUFycmF5IiwgImZyb21CeXRlQXJyYXkiLCAibG9va3VwIiwgInJldkxvb2t1cCIsICJBcnIiLCAiY29kZSIsICJpIiwgImxlbiIsICJnZXRMZW5zIiwgImI2NCIsICJ2YWxpZExlbiIsICJwbGFjZUhvbGRlcnNMZW4iLCAibGVucyIsICJfYnl0ZUxlbmd0aCIsICJ0bXAiLCAiYXJyIiwgImN1ckJ5dGUiLCAidHJpcGxldFRvQmFzZTY0IiwgIm51bSIsICJlbmNvZGVDaHVuayIsICJ1aW50OCIsICJzdGFydCIsICJlbmQiLCAib3V0cHV0IiwgImV4dHJhQnl0ZXMiLCAicGFydHMiLCAibWF4Q2h1bmtMZW5ndGgiLCAibGVuMiIsICJyZXF1aXJlX2llZWU3NTQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImJ1ZmZlciIsICJvZmZzZXQiLCAiaXNMRSIsICJtTGVuIiwgIm5CeXRlcyIsICJlIiwgIm0iLCAiZUxlbiIsICJlTWF4IiwgImVCaWFzIiwgIm5CaXRzIiwgImkiLCAiZCIsICJzIiwgInZhbHVlIiwgImMiLCAicnQiLCAicmVxdWlyZV9idWZmZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImJhc2U2NCIsICJpZWVlNzU0IiwgImN1c3RvbUluc3BlY3RTeW1ib2wiLCAiQnVmZmVyIiwgIlNsb3dCdWZmZXIiLCAiS19NQVhfTEVOR1RIIiwgInR5cGVkQXJyYXlTdXBwb3J0IiwgImFyciIsICJwcm90byIsICJjcmVhdGVCdWZmZXIiLCAibGVuZ3RoIiwgImJ1ZiIsICJhcmciLCAiZW5jb2RpbmdPck9mZnNldCIsICJhbGxvY1Vuc2FmZSIsICJmcm9tIiwgInZhbHVlIiwgImZyb21TdHJpbmciLCAiZnJvbUFycmF5VmlldyIsICJpc0luc3RhbmNlIiwgImZyb21BcnJheUJ1ZmZlciIsICJ2YWx1ZU9mIiwgImIiLCAiZnJvbU9iamVjdCIsICJhc3NlcnRTaXplIiwgInNpemUiLCAiYWxsb2MiLCAiZmlsbCIsICJlbmNvZGluZyIsICJjaGVja2VkIiwgInN0cmluZyIsICJieXRlTGVuZ3RoIiwgImFjdHVhbCIsICJmcm9tQXJyYXlMaWtlIiwgImFycmF5IiwgImkiLCAiYXJyYXlWaWV3IiwgImNvcHkiLCAiYnl0ZU9mZnNldCIsICJvYmoiLCAibGVuIiwgIm51bWJlcklzTmFOIiwgImEiLCAieCIsICJ5IiwgImxpc3QiLCAiYnVmZmVyIiwgInBvcyIsICJtdXN0TWF0Y2giLCAibG93ZXJlZENhc2UiLCAidXRmOFRvQnl0ZXMiLCAiYmFzZTY0VG9CeXRlcyIsICJzbG93VG9TdHJpbmciLCAic3RhcnQiLCAiZW5kIiwgImhleFNsaWNlIiwgInV0ZjhTbGljZSIsICJhc2NpaVNsaWNlIiwgImxhdGluMVNsaWNlIiwgImJhc2U2NFNsaWNlIiwgInV0ZjE2bGVTbGljZSIsICJzd2FwIiwgIm4iLCAibSIsICJzdHIiLCAibWF4IiwgInRhcmdldCIsICJ0aGlzU3RhcnQiLCAidGhpc0VuZCIsICJ0aGlzQ29weSIsICJ0YXJnZXRDb3B5IiwgImJpZGlyZWN0aW9uYWxJbmRleE9mIiwgInZhbCIsICJkaXIiLCAiYXJyYXlJbmRleE9mIiwgImluZGV4U2l6ZSIsICJhcnJMZW5ndGgiLCAidmFsTGVuZ3RoIiwgInJlYWQiLCAiZm91bmRJbmRleCIsICJmb3VuZCIsICJqIiwgImhleFdyaXRlIiwgIm9mZnNldCIsICJyZW1haW5pbmciLCAic3RyTGVuIiwgInBhcnNlZCIsICJ1dGY4V3JpdGUiLCAiYmxpdEJ1ZmZlciIsICJhc2NpaVdyaXRlIiwgImFzY2lpVG9CeXRlcyIsICJiYXNlNjRXcml0ZSIsICJ1Y3MyV3JpdGUiLCAidXRmMTZsZVRvQnl0ZXMiLCAicmVzIiwgImZpcnN0Qnl0ZSIsICJjb2RlUG9pbnQiLCAiYnl0ZXNQZXJTZXF1ZW5jZSIsICJzZWNvbmRCeXRlIiwgInRoaXJkQnl0ZSIsICJmb3VydGhCeXRlIiwgInRlbXBDb2RlUG9pbnQiLCAiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwgIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwgImNvZGVQb2ludHMiLCAicmV0IiwgIm91dCIsICJoZXhTbGljZUxvb2t1cFRhYmxlIiwgImJ5dGVzIiwgIm5ld0J1ZiIsICJjaGVja09mZnNldCIsICJleHQiLCAibm9Bc3NlcnQiLCAibXVsIiwgImRlZmluZUJpZ0ludE1ldGhvZCIsICJ2YWxpZGF0ZU51bWJlciIsICJmaXJzdCIsICJsYXN0IiwgImJvdW5kc0Vycm9yIiwgImxvIiwgImhpIiwgImNoZWNrSW50IiwgIm1pbiIsICJtYXhCeXRlcyIsICJ3cnRCaWdVSW50NjRMRSIsICJjaGVja0ludEJJIiwgIndydEJpZ1VJbnQ2NEJFIiwgImxpbWl0IiwgInN1YiIsICJjaGVja0lFRUU3NTQiLCAid3JpdGVGbG9hdCIsICJsaXR0bGVFbmRpYW4iLCAid3JpdGVEb3VibGUiLCAidGFyZ2V0U3RhcnQiLCAiY29kZSIsICJlcnJvcnMiLCAiRSIsICJzeW0iLCAiZ2V0TWVzc2FnZSIsICJCYXNlIiwgIm5hbWUiLCAicmFuZ2UiLCAiaW5wdXQiLCAibXNnIiwgInJlY2VpdmVkIiwgImFkZE51bWVyaWNhbFNlcGFyYXRvciIsICJjaGVja0JvdW5kcyIsICJ0eXBlIiwgIklOVkFMSURfQkFTRTY0X1JFIiwgImJhc2U2NGNsZWFuIiwgInVuaXRzIiwgImxlYWRTdXJyb2dhdGUiLCAiYnl0ZUFycmF5IiwgImMiLCAic3JjIiwgImRzdCIsICJhbHBoYWJldCIsICJ0YWJsZSIsICJpMTYiLCAiZm4iLCAiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsICJyZXF1aXJlX2Vycm9ycyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIl90eXBlb2YiLCAib2JqIiwgIl9jbGFzc0NhbGxDaGVjayIsICJpbnN0YW5jZSIsICJDb25zdHJ1Y3RvciIsICJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsICJzZWxmIiwgImNhbGwiLCAiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsICJfZ2V0UHJvdG90eXBlT2YiLCAibyIsICJfaW5oZXJpdHMiLCAic3ViQ2xhc3MiLCAic3VwZXJDbGFzcyIsICJfc2V0UHJvdG90eXBlT2YiLCAicCIsICJjb2RlcyIsICJhc3NlcnQiLCAidXRpbCIsICJjcmVhdGVFcnJvclR5cGUiLCAiY29kZSIsICJtZXNzYWdlIiwgIkJhc2UiLCAiZ2V0TWVzc2FnZSIsICJhcmcxIiwgImFyZzIiLCAiYXJnMyIsICJOb2RlRXJyb3IiLCAiX0Jhc2UiLCAiX3RoaXMiLCAib25lT2YiLCAiZXhwZWN0ZWQiLCAidGhpbmciLCAibGVuIiwgImkiLCAic3RhcnRzV2l0aCIsICJzdHIiLCAic2VhcmNoIiwgInBvcyIsICJlbmRzV2l0aCIsICJ0aGlzX2xlbiIsICJpbmNsdWRlcyIsICJzdGFydCIsICJuYW1lIiwgImFjdHVhbCIsICJkZXRlcm1pbmVyIiwgIm1zZyIsICJ0eXBlIiwgInZhbHVlIiwgInJlYXNvbiIsICJpbnNwZWN0ZWQiLCAiaW5wdXQiLCAiX2xlbiIsICJhcmdzIiwgIl9rZXkiLCAicmVxdWlyZV9hc3NlcnRpb25fZXJyb3IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfb2JqZWN0U3ByZWFkIiwgInRhcmdldCIsICJpIiwgInNvdXJjZSIsICJvd25LZXlzIiwgInN5bSIsICJrZXkiLCAiX2RlZmluZVByb3BlcnR5IiwgIm9iaiIsICJ2YWx1ZSIsICJfY2xhc3NDYWxsQ2hlY2siLCAiaW5zdGFuY2UiLCAiQ29uc3RydWN0b3IiLCAiX2RlZmluZVByb3BlcnRpZXMiLCAicHJvcHMiLCAiZGVzY3JpcHRvciIsICJfY3JlYXRlQ2xhc3MiLCAicHJvdG9Qcm9wcyIsICJzdGF0aWNQcm9wcyIsICJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsICJzZWxmIiwgImNhbGwiLCAiX3R5cGVvZiIsICJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwgIl9pbmhlcml0cyIsICJzdWJDbGFzcyIsICJzdXBlckNsYXNzIiwgIl9zZXRQcm90b3R5cGVPZiIsICJfd3JhcE5hdGl2ZVN1cGVyIiwgIkNsYXNzIiwgIl9jYWNoZSIsICJfaXNOYXRpdmVGdW5jdGlvbiIsICJXcmFwcGVyIiwgIl9jb25zdHJ1Y3QiLCAiX2dldFByb3RvdHlwZU9mIiwgImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsICJQYXJlbnQiLCAiYXJncyIsICJhIiwgImZuIiwgIm8iLCAicCIsICJfcmVxdWlyZSIsICJpbnNwZWN0IiwgIl9yZXF1aXJlMiIsICJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsICJlbmRzV2l0aCIsICJzdHIiLCAic2VhcmNoIiwgInRoaXNfbGVuIiwgInJlcGVhdCIsICJjb3VudCIsICJtYXhDb3VudCIsICJibHVlIiwgImdyZWVuIiwgInJlZCIsICJ3aGl0ZSIsICJrUmVhZGFibGVPcGVyYXRvciIsICJrTWF4U2hvcnRMZW5ndGgiLCAiY29weUVycm9yIiwgImtleXMiLCAiaW5zcGVjdFZhbHVlIiwgInZhbCIsICJjcmVhdGVFcnJEaWZmIiwgImFjdHVhbCIsICJleHBlY3RlZCIsICJvcGVyYXRvciIsICJvdGhlciIsICJyZXMiLCAibGFzdFBvcyIsICJlbmQiLCAic2tpcHBlZCIsICJhY3R1YWxJbnNwZWN0ZWQiLCAiYWN0dWFsTGluZXMiLCAiZXhwZWN0ZWRMaW5lcyIsICJpbmRpY2F0b3IiLCAiaW5wdXRMZW5ndGgiLCAibWF4TGVuZ3RoIiwgImIiLCAibWF4TGluZXMiLCAiX2FjdHVhbExpbmVzIiwgInByaW50ZWRMaW5lcyIsICJtc2ciLCAic2tpcHBlZE1zZyIsICJjdXIiLCAiZXhwZWN0ZWRMaW5lIiwgImFjdHVhbExpbmUiLCAiZGl2ZXJnaW5nTGluZXMiLCAiQXNzZXJ0aW9uRXJyb3IiLCAiX0Vycm9yIiwgIm9wdGlvbnMiLCAiX3RoaXMiLCAibWVzc2FnZSIsICJzdGFja1N0YXJ0Rm4iLCAibGltaXQiLCAiYmFzZSIsICJfcmVzIiwgImtub3duT3BlcmF0b3JzIiwgInJlY3Vyc2VUaW1lcyIsICJjdHgiLCAicmVxdWlyZV9lczZfb2JqZWN0X2Fzc2lnbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFzc2lnbiIsICJ0YXJnZXQiLCAiZmlyc3RTb3VyY2UiLCAidG8iLCAiaSIsICJuZXh0U291cmNlIiwgImtleXNBcnJheSIsICJuZXh0SW5kZXgiLCAibGVuIiwgIm5leHRLZXkiLCAiZGVzYyIsICJwb2x5ZmlsbCIsICJyZXF1aXJlX2lzQXJndW1lbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidG9TdHIiLCAidmFsdWUiLCAic3RyIiwgImlzQXJncyIsICJyZXF1aXJlX2ltcGxlbWVudGF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAia2V5c1NoaW0iLCAiaGFzIiwgInRvU3RyIiwgImlzQXJncyIsICJpc0VudW1lcmFibGUiLCAiaGFzRG9udEVudW1CdWciLCAiaGFzUHJvdG9FbnVtQnVnIiwgImRvbnRFbnVtcyIsICJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSIsICJvIiwgImN0b3IiLCAiZXhjbHVkZWRLZXlzIiwgImhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyIsICJrIiwgImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsICJvYmplY3QiLCAiaXNPYmplY3QiLCAiaXNGdW5jdGlvbiIsICJpc0FyZ3VtZW50cyIsICJpc1N0cmluZyIsICJ0aGVLZXlzIiwgInNraXBQcm90byIsICJpIiwgImoiLCAibmFtZSIsICJza2lwQ29uc3RydWN0b3IiLCAicmVxdWlyZV9vYmplY3Rfa2V5cyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInNsaWNlIiwgImlzQXJncyIsICJvcmlnS2V5cyIsICJrZXlzU2hpbSIsICJvIiwgIm9yaWdpbmFsS2V5cyIsICJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwgImFyZ3MiLCAib2JqZWN0IiwgInJlcXVpcmVfaGFzX3Byb3BlcnR5X2Rlc2NyaXB0b3JzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiR2V0SW50cmluc2ljIiwgIiRkZWZpbmVQcm9wZXJ0eSIsICJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwgInJlcXVpcmVfZGVmaW5lX3Byb3BlcnRpZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJrZXlzIiwgImhhc1N5bWJvbHMiLCAidG9TdHIiLCAiY29uY2F0IiwgIm9yaWdEZWZpbmVQcm9wZXJ0eSIsICJpc0Z1bmN0aW9uIiwgImZuIiwgImhhc1Byb3BlcnR5RGVzY3JpcHRvcnMiLCAic3VwcG9ydHNEZXNjcmlwdG9ycyIsICJkZWZpbmVQcm9wZXJ0eSIsICJvYmplY3QiLCAibmFtZSIsICJ2YWx1ZSIsICJwcmVkaWNhdGUiLCAiZGVmaW5lUHJvcGVydGllcyIsICJtYXAiLCAicHJlZGljYXRlcyIsICJwcm9wcyIsICJyZXF1aXJlX2ltcGxlbWVudGF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibnVtYmVySXNOYU4iLCAidmFsdWUiLCAiYSIsICJiIiwgInJlcXVpcmVfcG9seWZpbGwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpbXBsZW1lbnRhdGlvbiIsICJyZXF1aXJlX3NoaW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJnZXRQb2x5ZmlsbCIsICJkZWZpbmUiLCAicG9seWZpbGwiLCAicmVxdWlyZV9vYmplY3RfaXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJkZWZpbmUiLCAiY2FsbEJpbmQiLCAiaW1wbGVtZW50YXRpb24iLCAiZ2V0UG9seWZpbGwiLCAic2hpbSIsICJwb2x5ZmlsbCIsICJyZXF1aXJlX2ltcGxlbWVudGF0aW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidmFsdWUiLCAicmVxdWlyZV9wb2x5ZmlsbCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImltcGxlbWVudGF0aW9uIiwgInJlcXVpcmVfc2hpbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImRlZmluZSIsICJnZXRQb2x5ZmlsbCIsICJwb2x5ZmlsbCIsICJyZXF1aXJlX2lzX25hbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNhbGxCaW5kIiwgImRlZmluZSIsICJpbXBsZW1lbnRhdGlvbiIsICJnZXRQb2x5ZmlsbCIsICJzaGltIiwgInBvbHlmaWxsIiwgInJlcXVpcmVfY29tcGFyaXNvbnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfc2xpY2VkVG9BcnJheSIsICJhcnIiLCAiaSIsICJfYXJyYXlXaXRoSG9sZXMiLCAiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwgIl9ub25JdGVyYWJsZVJlc3QiLCAiX2FyciIsICJfbiIsICJfZCIsICJfZSIsICJfaSIsICJfcyIsICJlcnIiLCAiX3R5cGVvZiIsICJvYmoiLCAicmVnZXhGbGFnc1N1cHBvcnRlZCIsICJhcnJheUZyb21TZXQiLCAic2V0IiwgImFycmF5IiwgInZhbHVlIiwgImFycmF5RnJvbU1hcCIsICJtYXAiLCAia2V5IiwgIm9iamVjdElzIiwgIm9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyIsICJudW1iZXJJc05hTiIsICJ1bmN1cnJ5VGhpcyIsICJmIiwgImhhc093blByb3BlcnR5IiwgInByb3BlcnR5SXNFbnVtZXJhYmxlIiwgIm9iamVjdFRvU3RyaW5nIiwgIl9yZXF1aXJlJHR5cGVzIiwgImlzQW55QXJyYXlCdWZmZXIiLCAiaXNBcnJheUJ1ZmZlclZpZXciLCAiaXNEYXRlIiwgImlzTWFwIiwgImlzUmVnRXhwIiwgImlzU2V0IiwgImlzTmF0aXZlRXJyb3IiLCAiaXNCb3hlZFByaW1pdGl2ZSIsICJpc051bWJlck9iamVjdCIsICJpc1N0cmluZ09iamVjdCIsICJpc0Jvb2xlYW5PYmplY3QiLCAiaXNCaWdJbnRPYmplY3QiLCAiaXNTeW1ib2xPYmplY3QiLCAiaXNGbG9hdDMyQXJyYXkiLCAiaXNGbG9hdDY0QXJyYXkiLCAiaXNOb25JbmRleCIsICJjb2RlIiwgImdldE93bk5vbkluZGV4UHJvcGVydGllcyIsICJjb21wYXJlIiwgImEiLCAiYiIsICJ4IiwgInkiLCAibGVuIiwgIk9OTFlfRU5VTUVSQUJMRSIsICJrU3RyaWN0IiwgImtMb29zZSIsICJrTm9JdGVyYXRvciIsICJrSXNBcnJheSIsICJrSXNTZXQiLCAia0lzTWFwIiwgImFyZVNpbWlsYXJSZWdFeHBzIiwgImFyZVNpbWlsYXJGbG9hdEFycmF5cyIsICJvZmZzZXQiLCAiYXJlU2ltaWxhclR5cGVkQXJyYXlzIiwgImFyZUVxdWFsQXJyYXlCdWZmZXJzIiwgImJ1ZjEiLCAiYnVmMiIsICJpc0VxdWFsQm94ZWRQcmltaXRpdmUiLCAidmFsMSIsICJ2YWwyIiwgImlubmVyRGVlcEVxdWFsIiwgInN0cmljdCIsICJtZW1vcyIsICJ2YWwxVGFnIiwgInZhbDJUYWciLCAia2V5czEiLCAia2V5czIiLCAia2V5Q2hlY2siLCAiX2tleXMiLCAiX2tleXMyIiwgImdldEVudW1lcmFibGVzIiwgInZhbCIsICJrZXlzIiwgImsiLCAiaXRlcmF0aW9uVHlwZSIsICJhS2V5cyIsICJiS2V5cyIsICJzeW1ib2xLZXlzQSIsICJjb3VudCIsICJzeW1ib2xLZXlzQiIsICJfc3ltYm9sS2V5c0IiLCAidmFsMk1lbW9BIiwgInZhbDJNZW1vQiIsICJhcmVFcSIsICJvYmpFcXVpdiIsICJzZXRIYXNFcXVhbEVsZW1lbnQiLCAibWVtbyIsICJzZXRWYWx1ZXMiLCAiZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzIiwgInByaW0iLCAic2V0TWlnaHRIYXZlTG9vc2VQcmltIiwgImFsdFZhbHVlIiwgIm1hcE1pZ2h0SGF2ZUxvb3NlUHJpbSIsICJpdGVtIiwgImN1ckIiLCAic2V0RXF1aXYiLCAiYVZhbHVlcyIsICJiVmFsdWVzIiwgIl92YWwiLCAibWFwSGFzRXF1YWxFbnRyeSIsICJrZXkxIiwgIml0ZW0xIiwgImtleTIiLCAibWFwRXF1aXYiLCAiYUVudHJpZXMiLCAiX2FFbnRyaWVzJGkiLCAiaXRlbTIiLCAiYkVudHJpZXMiLCAiX2kyIiwgIl9iRW50cmllcyRfaSIsICJrZXlzQSIsICJfa2V5IiwgImlzRGVlcEVxdWFsIiwgImlzRGVlcFN0cmljdEVxdWFsIiwgInJlcXVpcmVfYXNzZXJ0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiX3R5cGVvZiIsICJvYmoiLCAiX2NsYXNzQ2FsbENoZWNrIiwgImluc3RhbmNlIiwgIkNvbnN0cnVjdG9yIiwgIl9yZXF1aXJlIiwgIl9yZXF1aXJlJGNvZGVzIiwgIkVSUl9BTUJJR1VPVVNfQVJHVU1FTlQiLCAiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCAiRVJSX0lOVkFMSURfQVJHX1ZBTFVFIiwgIkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSIsICJFUlJfTUlTU0lOR19BUkdTIiwgIkFzc2VydGlvbkVycm9yIiwgIl9yZXF1aXJlMiIsICJpbnNwZWN0IiwgIl9yZXF1aXJlJHR5cGVzIiwgImlzUHJvbWlzZSIsICJpc1JlZ0V4cCIsICJvYmplY3RBc3NpZ24iLCAib2JqZWN0SXMiLCAiaXNEZWVwRXF1YWwiLCAiaXNEZWVwU3RyaWN0RXF1YWwiLCAibGF6eUxvYWRDb21wYXJpc29uIiwgImNvbXBhcmlzb24iLCAid2FybmVkIiwgImFzc2VydCIsICJvayIsICJOT19FWENFUFRJT05fU0VOVElORUwiLCAiaW5uZXJGYWlsIiwgImZhaWwiLCAiYWN0dWFsIiwgImV4cGVjdGVkIiwgIm1lc3NhZ2UiLCAib3BlcmF0b3IiLCAic3RhY2tTdGFydEZuIiwgImFyZ3NMZW4iLCAiaW50ZXJuYWxNZXNzYWdlIiwgIndhcm4iLCAiZXJyQXJncyIsICJlcnIiLCAiaW5uZXJPayIsICJmbiIsICJhcmdMZW4iLCAidmFsdWUiLCAiZ2VuZXJhdGVkTWVzc2FnZSIsICJfbGVuIiwgImFyZ3MiLCAiX2tleSIsICJlcXVhbCIsICJub3RFcXVhbCIsICJkZWVwRXF1YWwiLCAibm90RGVlcEVxdWFsIiwgImRlZXBTdHJpY3RFcXVhbCIsICJub3REZWVwU3RyaWN0RXF1YWwiLCAic3RyaWN0RXF1YWwiLCAibm90U3RyaWN0RXF1YWwiLCAiQ29tcGFyaXNvbiIsICJrZXlzIiwgIl90aGlzIiwgImtleSIsICJjb21wYXJlRXhjZXB0aW9uS2V5IiwgImEiLCAiYiIsICJleHBlY3RlZEV4Y2VwdGlvbiIsICJtc2ciLCAiZ2V0QWN0dWFsIiwgImUiLCAiY2hlY2tJc1Byb21pc2UiLCAid2FpdEZvckFjdHVhbCIsICJwcm9taXNlRm4iLCAicmVzdWx0UHJvbWlzZSIsICJleHBlY3RzRXJyb3IiLCAiZXJyb3IiLCAiZGV0YWlscyIsICJmblR5cGUiLCAiZXhwZWN0c05vRXJyb3IiLCAidGhyb3dzIiwgIl9sZW4yIiwgIl9rZXkyIiwgInJlamVjdHMiLCAiX2xlbjMiLCAiX2tleTMiLCAicmVzdWx0IiwgImRvZXNOb3RUaHJvdyIsICJfbGVuNCIsICJfa2V5NCIsICJkb2VzTm90UmVqZWN0IiwgIl9sZW41IiwgIl9rZXk1IiwgImlmRXJyb3IiLCAibmV3RXJyIiwgIm9yaWdTdGFjayIsICJ0bXAyIiwgInRtcDEiLCAiaSIsICJwb3MiLCAic3RyaWN0IiwgIl9sZW42IiwgIl9rZXk2IiwgInJlcXVpcmVfenN0cmVhbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIlpTdHJlYW0iLCAicmVxdWlyZV9jb21tb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIlRZUEVEX09LIiwgIl9oYXMiLCAib2JqIiwgImtleSIsICJzb3VyY2VzIiwgInNvdXJjZSIsICJwIiwgImJ1ZiIsICJzaXplIiwgImZuVHlwZWQiLCAiZGVzdCIsICJzcmMiLCAic3JjX29mZnMiLCAibGVuIiwgImRlc3Rfb2ZmcyIsICJpIiwgImNodW5rcyIsICJsIiwgInBvcyIsICJjaHVuayIsICJyZXN1bHQiLCAiZm5VbnR5cGVkIiwgIm9uIiwgInJlcXVpcmVfdHJlZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgIlpfRklYRUQiLCAiWl9CSU5BUlkiLCAiWl9URVhUIiwgIlpfVU5LTk9XTiIsICJ6ZXJvIiwgImJ1ZiIsICJsZW4iLCAiU1RPUkVEX0JMT0NLIiwgIlNUQVRJQ19UUkVFUyIsICJEWU5fVFJFRVMiLCAiTUlOX01BVENIIiwgIk1BWF9NQVRDSCIsICJMRU5HVEhfQ09ERVMiLCAiTElURVJBTFMiLCAiTF9DT0RFUyIsICJEX0NPREVTIiwgIkJMX0NPREVTIiwgIkhFQVBfU0laRSIsICJNQVhfQklUUyIsICJCdWZfc2l6ZSIsICJNQVhfQkxfQklUUyIsICJFTkRfQkxPQ0siLCAiUkVQXzNfNiIsICJSRVBaXzNfMTAiLCAiUkVQWl8xMV8xMzgiLCAiZXh0cmFfbGJpdHMiLCAiZXh0cmFfZGJpdHMiLCAiZXh0cmFfYmxiaXRzIiwgImJsX29yZGVyIiwgIkRJU1RfQ09ERV9MRU4iLCAic3RhdGljX2x0cmVlIiwgInN0YXRpY19kdHJlZSIsICJfZGlzdF9jb2RlIiwgIl9sZW5ndGhfY29kZSIsICJiYXNlX2xlbmd0aCIsICJiYXNlX2Rpc3QiLCAiU3RhdGljVHJlZURlc2MiLCAic3RhdGljX3RyZWUiLCAiZXh0cmFfYml0cyIsICJleHRyYV9iYXNlIiwgImVsZW1zIiwgIm1heF9sZW5ndGgiLCAic3RhdGljX2xfZGVzYyIsICJzdGF0aWNfZF9kZXNjIiwgInN0YXRpY19ibF9kZXNjIiwgIlRyZWVEZXNjIiwgImR5bl90cmVlIiwgInN0YXRfZGVzYyIsICJkX2NvZGUiLCAiZGlzdCIsICJwdXRfc2hvcnQiLCAicyIsICJ3IiwgInNlbmRfYml0cyIsICJ2YWx1ZSIsICJsZW5ndGgiLCAic2VuZF9jb2RlIiwgImMiLCAidHJlZSIsICJiaV9yZXZlcnNlIiwgImNvZGUiLCAicmVzIiwgImJpX2ZsdXNoIiwgImdlbl9iaXRsZW4iLCAiZGVzYyIsICJtYXhfY29kZSIsICJzdHJlZSIsICJoYXNfc3RyZWUiLCAiZXh0cmEiLCAiYmFzZSIsICJoIiwgIm4iLCAibSIsICJiaXRzIiwgInhiaXRzIiwgImYiLCAib3ZlcmZsb3ciLCAiZ2VuX2NvZGVzIiwgImJsX2NvdW50IiwgIm5leHRfY29kZSIsICJ0cl9zdGF0aWNfaW5pdCIsICJpbml0X2Jsb2NrIiwgImJpX3dpbmR1cCIsICJjb3B5X2Jsb2NrIiwgImhlYWRlciIsICJzbWFsbGVyIiwgImRlcHRoIiwgIl9uMiIsICJfbTIiLCAicHFkb3duaGVhcCIsICJrIiwgInYiLCAiaiIsICJjb21wcmVzc19ibG9jayIsICJsdHJlZSIsICJkdHJlZSIsICJsYyIsICJseCIsICJidWlsZF90cmVlIiwgIm5vZGUiLCAic2Nhbl90cmVlIiwgInByZXZsZW4iLCAiY3VybGVuIiwgIm5leHRsZW4iLCAiY291bnQiLCAibWF4X2NvdW50IiwgIm1pbl9jb3VudCIsICJzZW5kX3RyZWUiLCAiYnVpbGRfYmxfdHJlZSIsICJtYXhfYmxpbmRleCIsICJzZW5kX2FsbF90cmVlcyIsICJsY29kZXMiLCAiZGNvZGVzIiwgImJsY29kZXMiLCAicmFuayIsICJkZXRlY3RfZGF0YV90eXBlIiwgImJsYWNrX21hc2siLCAic3RhdGljX2luaXRfZG9uZSIsICJfdHJfaW5pdCIsICJfdHJfc3RvcmVkX2Jsb2NrIiwgInN0b3JlZF9sZW4iLCAibGFzdCIsICJfdHJfYWxpZ24iLCAiX3RyX2ZsdXNoX2Jsb2NrIiwgIm9wdF9sZW5iIiwgInN0YXRpY19sZW5iIiwgIl90cl90YWxseSIsICJyZXF1aXJlX2FkbGVyMzIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJhZGxlcjMyIiwgImFkbGVyIiwgImJ1ZiIsICJsZW4iLCAicG9zIiwgInMxIiwgInMyIiwgIm4iLCAicmVxdWlyZV9jcmMzMiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm1ha2VUYWJsZSIsICJjIiwgInRhYmxlIiwgIm4iLCAiayIsICJjcmNUYWJsZSIsICJjcmMzMiIsICJjcmMiLCAiYnVmIiwgImxlbiIsICJwb3MiLCAidCIsICJlbmQiLCAiaSIsICJyZXF1aXJlX21lc3NhZ2VzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9kZWZsYXRlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJ1dGlscyIsICJ0cmVlcyIsICJhZGxlcjMyIiwgImNyYzMyIiwgIm1zZyIsICJaX05PX0ZMVVNIIiwgIlpfUEFSVElBTF9GTFVTSCIsICJaX0ZVTExfRkxVU0giLCAiWl9GSU5JU0giLCAiWl9CTE9DSyIsICJaX09LIiwgIlpfU1RSRUFNX0VORCIsICJaX1NUUkVBTV9FUlJPUiIsICJaX0RBVEFfRVJST1IiLCAiWl9CVUZfRVJST1IiLCAiWl9ERUZBVUxUX0NPTVBSRVNTSU9OIiwgIlpfRklMVEVSRUQiLCAiWl9IVUZGTUFOX09OTFkiLCAiWl9STEUiLCAiWl9GSVhFRCIsICJaX0RFRkFVTFRfU1RSQVRFR1kiLCAiWl9VTktOT1dOIiwgIlpfREVGTEFURUQiLCAiTUFYX01FTV9MRVZFTCIsICJNQVhfV0JJVFMiLCAiREVGX01FTV9MRVZFTCIsICJMRU5HVEhfQ09ERVMiLCAiTElURVJBTFMiLCAiTF9DT0RFUyIsICJEX0NPREVTIiwgIkJMX0NPREVTIiwgIkhFQVBfU0laRSIsICJNQVhfQklUUyIsICJNSU5fTUFUQ0giLCAiTUFYX01BVENIIiwgIk1JTl9MT09LQUhFQUQiLCAiUFJFU0VUX0RJQ1QiLCAiSU5JVF9TVEFURSIsICJFWFRSQV9TVEFURSIsICJOQU1FX1NUQVRFIiwgIkNPTU1FTlRfU1RBVEUiLCAiSENSQ19TVEFURSIsICJCVVNZX1NUQVRFIiwgIkZJTklTSF9TVEFURSIsICJCU19ORUVEX01PUkUiLCAiQlNfQkxPQ0tfRE9ORSIsICJCU19GSU5JU0hfU1RBUlRFRCIsICJCU19GSU5JU0hfRE9ORSIsICJPU19DT0RFIiwgImVyciIsICJzdHJtIiwgImVycm9yQ29kZSIsICJyYW5rIiwgImYiLCAiemVybyIsICJidWYiLCAibGVuIiwgImZsdXNoX3BlbmRpbmciLCAicyIsICJmbHVzaF9ibG9ja19vbmx5IiwgImxhc3QiLCAicHV0X2J5dGUiLCAiYiIsICJwdXRTaG9ydE1TQiIsICJyZWFkX2J1ZiIsICJzdGFydCIsICJzaXplIiwgImxvbmdlc3RfbWF0Y2giLCAiY3VyX21hdGNoIiwgImNoYWluX2xlbmd0aCIsICJzY2FuIiwgIm1hdGNoIiwgImJlc3RfbGVuIiwgIm5pY2VfbWF0Y2giLCAibGltaXQiLCAiX3dpbiIsICJ3bWFzayIsICJwcmV2IiwgInN0cmVuZCIsICJzY2FuX2VuZDEiLCAic2Nhbl9lbmQiLCAiZmlsbF93aW5kb3ciLCAiX3dfc2l6ZSIsICJwIiwgIm0iLCAibW9yZSIsICJzdHIiLCAiZGVmbGF0ZV9zdG9yZWQiLCAiZmx1c2giLCAibWF4X2Jsb2NrX3NpemUiLCAibWF4X3N0YXJ0IiwgImRlZmxhdGVfZmFzdCIsICJoYXNoX2hlYWQiLCAiYmZsdXNoIiwgImRlZmxhdGVfc2xvdyIsICJtYXhfaW5zZXJ0IiwgImRlZmxhdGVfcmxlIiwgImRlZmxhdGVfaHVmZiIsICJDb25maWciLCAiZ29vZF9sZW5ndGgiLCAibWF4X2xhenkiLCAibmljZV9sZW5ndGgiLCAibWF4X2NoYWluIiwgImZ1bmMiLCAiY29uZmlndXJhdGlvbl90YWJsZSIsICJsbV9pbml0IiwgIkRlZmxhdGVTdGF0ZSIsICJkZWZsYXRlUmVzZXRLZWVwIiwgImRlZmxhdGVSZXNldCIsICJyZXQiLCAiZGVmbGF0ZVNldEhlYWRlciIsICJoZWFkIiwgImRlZmxhdGVJbml0MiIsICJsZXZlbCIsICJtZXRob2QiLCAid2luZG93Qml0cyIsICJtZW1MZXZlbCIsICJzdHJhdGVneSIsICJ3cmFwIiwgImRlZmxhdGVJbml0IiwgImRlZmxhdGUiLCAib2xkX2ZsdXNoIiwgImJlZyIsICJ2YWwiLCAiaGVhZGVyIiwgImxldmVsX2ZsYWdzIiwgImJzdGF0ZSIsICJkZWZsYXRlRW5kIiwgInN0YXR1cyIsICJkZWZsYXRlU2V0RGljdGlvbmFyeSIsICJkaWN0aW9uYXJ5IiwgImRpY3RMZW5ndGgiLCAibiIsICJhdmFpbCIsICJuZXh0IiwgImlucHV0IiwgInRtcERpY3QiLCAicmVxdWlyZV9pbmZmYXN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiQkFEIiwgIlRZUEUiLCAic3RybSIsICJzdGFydCIsICJzdGF0ZSIsICJfaW4iLCAibGFzdCIsICJfb3V0IiwgImJlZyIsICJlbmQiLCAiZG1heCIsICJ3c2l6ZSIsICJ3aGF2ZSIsICJ3bmV4dCIsICJzX3dpbmRvdyIsICJob2xkIiwgImJpdHMiLCAibGNvZGUiLCAiZGNvZGUiLCAibG1hc2siLCAiZG1hc2siLCAiaGVyZSIsICJvcCIsICJsZW4iLCAiZGlzdCIsICJmcm9tIiwgImZyb21fc291cmNlIiwgImlucHV0IiwgIm91dHB1dCIsICJ0b3AiLCAiZG9sZW4iLCAiZG9kaXN0IiwgInJlcXVpcmVfaW5mdHJlZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlscyIsICJNQVhCSVRTIiwgIkVOT1VHSF9MRU5TIiwgIkVOT1VHSF9ESVNUUyIsICJDT0RFUyIsICJMRU5TIiwgIkRJU1RTIiwgImxiYXNlIiwgImxleHQiLCAiZGJhc2UiLCAiZGV4dCIsICJ0eXBlIiwgImxlbnMiLCAibGVuc19pbmRleCIsICJjb2RlcyIsICJ0YWJsZSIsICJ0YWJsZV9pbmRleCIsICJ3b3JrIiwgIm9wdHMiLCAiYml0cyIsICJsZW4iLCAic3ltIiwgIm1pbiIsICJtYXgiLCAicm9vdCIsICJjdXJyIiwgImRyb3AiLCAibGVmdCIsICJ1c2VkIiwgImh1ZmYiLCAiaW5jciIsICJmaWxsIiwgImxvdyIsICJtYXNrIiwgIm5leHQiLCAiYmFzZSIsICJiYXNlX2luZGV4IiwgImVuZCIsICJjb3VudCIsICJvZmZzIiwgImV4dHJhIiwgImV4dHJhX2luZGV4IiwgImhlcmVfYml0cyIsICJoZXJlX29wIiwgImhlcmVfdmFsIiwgInJlcXVpcmVfaW5mbGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAiYWRsZXIzMiIsICJjcmMzMiIsICJpbmZsYXRlX2Zhc3QiLCAiaW5mbGF0ZV90YWJsZSIsICJDT0RFUyIsICJMRU5TIiwgIkRJU1RTIiwgIlpfRklOSVNIIiwgIlpfQkxPQ0siLCAiWl9UUkVFUyIsICJaX09LIiwgIlpfU1RSRUFNX0VORCIsICJaX05FRURfRElDVCIsICJaX1NUUkVBTV9FUlJPUiIsICJaX0RBVEFfRVJST1IiLCAiWl9NRU1fRVJST1IiLCAiWl9CVUZfRVJST1IiLCAiWl9ERUZMQVRFRCIsICJIRUFEIiwgIkZMQUdTIiwgIlRJTUUiLCAiT1MiLCAiRVhMRU4iLCAiRVhUUkEiLCAiTkFNRSIsICJDT01NRU5UIiwgIkhDUkMiLCAiRElDVElEIiwgIkRJQ1QiLCAiVFlQRSIsICJUWVBFRE8iLCAiU1RPUkVEIiwgIkNPUFlfIiwgIkNPUFkiLCAiVEFCTEUiLCAiTEVOTEVOUyIsICJDT0RFTEVOUyIsICJMRU5fIiwgIkxFTiIsICJMRU5FWFQiLCAiRElTVCIsICJESVNURVhUIiwgIk1BVENIIiwgIkxJVCIsICJDSEVDSyIsICJMRU5HVEgiLCAiRE9ORSIsICJCQUQiLCAiTUVNIiwgIlNZTkMiLCAiRU5PVUdIX0xFTlMiLCAiRU5PVUdIX0RJU1RTIiwgIk1BWF9XQklUUyIsICJERUZfV0JJVFMiLCAienN3YXAzMiIsICJxIiwgIkluZmxhdGVTdGF0ZSIsICJpbmZsYXRlUmVzZXRLZWVwIiwgInN0cm0iLCAic3RhdGUiLCAiaW5mbGF0ZVJlc2V0IiwgImluZmxhdGVSZXNldDIiLCAid2luZG93Qml0cyIsICJ3cmFwIiwgImluZmxhdGVJbml0MiIsICJyZXQiLCAiaW5mbGF0ZUluaXQiLCAidmlyZ2luIiwgImxlbmZpeCIsICJkaXN0Zml4IiwgImZpeGVkdGFibGVzIiwgInN5bSIsICJ1cGRhdGV3aW5kb3ciLCAic3JjIiwgImVuZCIsICJjb3B5IiwgImRpc3QiLCAiaW5mbGF0ZSIsICJmbHVzaCIsICJpbnB1dCIsICJvdXRwdXQiLCAibmV4dCIsICJwdXQiLCAiaGF2ZSIsICJsZWZ0IiwgImhvbGQiLCAiYml0cyIsICJfaW4iLCAiX291dCIsICJmcm9tIiwgImZyb21fc291cmNlIiwgImhlcmUiLCAiaGVyZV9iaXRzIiwgImhlcmVfb3AiLCAiaGVyZV92YWwiLCAibGFzdF9iaXRzIiwgImxhc3Rfb3AiLCAibGFzdF92YWwiLCAibGVuIiwgImhidWYiLCAib3B0cyIsICJuIiwgIm9yZGVyIiwgImluZl9sZWF2ZSIsICJpbmZsYXRlRW5kIiwgImluZmxhdGVHZXRIZWFkZXIiLCAiaGVhZCIsICJpbmZsYXRlU2V0RGljdGlvbmFyeSIsICJkaWN0aW9uYXJ5IiwgImRpY3RMZW5ndGgiLCAiZGljdGlkIiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9iaW5kaW5nIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhc3NlcnQiLCAiWnN0cmVhbSIsICJ6bGliX2RlZmxhdGUiLCAiemxpYl9pbmZsYXRlIiwgImNvbnN0YW50cyIsICJrZXkiLCAiR1pJUF9IRUFERVJfSUQxIiwgIkdaSVBfSEVBREVSX0lEMiIsICJabGliIiwgIm1vZGUiLCAiZmx1c2giLCAiaW5wdXQiLCAiaW5fb2ZmIiwgImluX2xlbiIsICJvdXQiLCAib3V0X29mZiIsICJvdXRfbGVuIiwgImFzeW5jIiwgInNlbGYiLCAiYXZhaWxfb3V0IiwgImF2YWlsX2luIiwgIm5leHRfZXhwZWN0ZWRfaGVhZGVyX2J5dGUiLCAibWVzc2FnZSIsICJ3aW5kb3dCaXRzIiwgImxldmVsIiwgIm1lbUxldmVsIiwgInN0cmF0ZWd5IiwgImRpY3Rpb25hcnkiLCAicmVxdWlyZV9saWIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIkJ1ZmZlciIsICJUcmFuc2Zvcm0iLCAiYmluZGluZyIsICJ1dGlsIiwgImFzc2VydCIsICJrTWF4TGVuZ3RoIiwgImtSYW5nZUVycm9yTWVzc2FnZSIsICJia2V5cyIsICJiayIsICJia2V5IiwgImNvZGVzIiwgImNrZXlzIiwgImNrIiwgImNrZXkiLCAiRGVmbGF0ZSIsICJJbmZsYXRlIiwgIkd6aXAiLCAiR3VuemlwIiwgIkRlZmxhdGVSYXciLCAiSW5mbGF0ZVJhdyIsICJVbnppcCIsICJvIiwgImJ1ZmZlciIsICJvcHRzIiwgImNhbGxiYWNrIiwgInpsaWJCdWZmZXIiLCAiemxpYkJ1ZmZlclN5bmMiLCAiZW5naW5lIiwgImJ1ZmZlcnMiLCAibnJlYWQiLCAib25FcnJvciIsICJvbkVuZCIsICJmbG93IiwgImNodW5rIiwgImVyciIsICJidWYiLCAiZmx1c2hGbGFnIiwgIlpsaWIiLCAiaXNWYWxpZEZsdXNoRmxhZyIsICJmbGFnIiwgIm1vZGUiLCAiX3RoaXMiLCAic2VsZiIsICJtZXNzYWdlIiwgImVycm5vIiwgIl9jbG9zZSIsICJlcnJvciIsICJsZXZlbCIsICJzdHJhdGVneSIsICJraW5kIiwgIl90aGlzMiIsICJ3cyIsICJlbWl0Q2xvc2VOVCIsICJlbmNvZGluZyIsICJjYiIsICJlbmRpbmciLCAibGFzdCIsICJhdmFpbEluQmVmb3JlIiwgImF2YWlsT3V0QmVmb3JlIiwgImluT2ZmIiwgImFzeW5jIiwgImVyIiwgInJlcyIsICJyZXEiLCAiYXZhaWxJbkFmdGVyIiwgImF2YWlsT3V0QWZ0ZXIiLCAiaGF2ZSIsICJvdXQiLCAibmV3UmVxIiwgInJlcXVpcmVfY2h1bmtzdHJlYW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgIlN0cmVhbSIsICJDaHVua1N0cmVhbSIsICJsZW5ndGgiLCAiY2FsbGJhY2siLCAiZGF0YSIsICJlbmNvZGluZyIsICJkYXRhQnVmZmVyIiwgInJlYWQiLCAic21hbGxlckJ1ZiIsICJwb3MiLCAiY291bnQiLCAiYnVmIiwgImxlbiIsICJleCIsICJyZXF1aXJlX2ludGVybGFjZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiaW1hZ2VQYXNzZXMiLCAid2lkdGgiLCAiaGVpZ2h0IiwgImltYWdlcyIsICJ4TGVmdE92ZXIiLCAieUxlZnRPdmVyIiwgInhSZXBlYXRzIiwgInlSZXBlYXRzIiwgImkiLCAicGFzcyIsICJwYXNzV2lkdGgiLCAicGFzc0hlaWdodCIsICJqIiwgIngiLCAieSIsICJvdXRlclhMZWZ0T3ZlciIsICJvdXRlclgiLCAib3V0ZXJZTGVmdE92ZXIiLCAib3V0ZXJZIiwgInJlcXVpcmVfcGFldGhfcHJlZGljdG9yIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibGVmdCIsICJhYm92ZSIsICJ1cExlZnQiLCAicGFldGgiLCAicExlZnQiLCAicEFib3ZlIiwgInBVcExlZnQiLCAicmVxdWlyZV9maWx0ZXJfcGFyc2UiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpbnRlcmxhY2VVdGlscyIsICJwYWV0aFByZWRpY3RvciIsICJnZXRCeXRlV2lkdGgiLCAid2lkdGgiLCAiYnBwIiwgImRlcHRoIiwgImJ5dGVXaWR0aCIsICJGaWx0ZXIiLCAiYml0bWFwSW5mbyIsICJkZXBlbmRlbmNpZXMiLCAiaGVpZ2h0IiwgImludGVybGFjZSIsICJwYXNzZXMiLCAiaSIsICJyYXdEYXRhIiwgInVuZmlsdGVyZWRMaW5lIiwgInhDb21wYXJpc29uIiwgInhCaWdnZXJUaGFuIiwgIngiLCAicmF3Qnl0ZSIsICJmMUxlZnQiLCAibGFzdExpbmUiLCAiZjJVcCIsICJmM1VwIiwgImYzTGVmdCIsICJmM0FkZCIsICJmNFVwIiwgImY0TGVmdCIsICJmNFVwTGVmdCIsICJmNEFkZCIsICJmaWx0ZXIiLCAiY3VycmVudEltYWdlIiwgInJlcXVpcmVfZmlsdGVyX3BhcnNlX2FzeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidXRpbCIsICJDaHVua1N0cmVhbSIsICJGaWx0ZXIiLCAiRmlsdGVyQXN5bmMiLCAiYml0bWFwSW5mbyIsICJidWZmZXJzIiwgInRoYXQiLCAiYnVmZmVyIiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9jcmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjcmNUYWJsZSIsICJpIiwgImN1cnJlbnRDcmMiLCAiaiIsICJDcmNDYWxjdWxhdG9yIiwgImRhdGEiLCAiYnVmIiwgImNyYyIsICJyZXF1aXJlX3BhcnNlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbnN0YW50cyIsICJDcmNDYWxjdWxhdG9yIiwgIlBhcnNlciIsICJvcHRpb25zIiwgImRlcGVuZGVuY2llcyIsICJkYXRhIiwgInNpZ25hdHVyZSIsICJpIiwgImxlbmd0aCIsICJ0eXBlIiwgIm5hbWUiLCAiYW5jaWxsYXJ5IiwgImZpbGVDcmMiLCAiY2FsY0NyYyIsICJ3aWR0aCIsICJoZWlnaHQiLCAiZGVwdGgiLCAiY29sb3JUeXBlIiwgImNvbXByIiwgImZpbHRlciIsICJpbnRlcmxhY2UiLCAiYnBwIiwgImVudHJpZXMiLCAibGVmdE92ZXJMZW5ndGgiLCAicmVxdWlyZV9iaXRtYXBwZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImludGVybGFjZVV0aWxzIiwgInBpeGVsQnBwTWFwcGVyIiwgInB4RGF0YSIsICJkYXRhIiwgInB4UG9zIiwgInJhd1BvcyIsICJwaXhlbCIsICJwaXhlbEJwcEN1c3RvbU1hcHBlciIsICJwaXhlbERhdGEiLCAibWF4Qml0IiwgImJpdFJldHJpZXZlciIsICJkZXB0aCIsICJsZWZ0T3ZlciIsICJpIiwgInNwbGl0IiwgImJ5dGUiLCAiYnl0ZTgiLCAiYnl0ZTciLCAiYnl0ZTYiLCAiYnl0ZTUiLCAiYnl0ZTQiLCAiYnl0ZTMiLCAiYnl0ZTIiLCAiYnl0ZTEiLCAiY291bnQiLCAicmV0dXJuZXIiLCAibWFwSW1hZ2U4Qml0IiwgImltYWdlIiwgImdldFB4UG9zIiwgImJwcCIsICJpbWFnZVdpZHRoIiwgImltYWdlSGVpZ2h0IiwgImltYWdlUGFzcyIsICJ5IiwgIngiLCAibWFwSW1hZ2VDdXN0b21CaXQiLCAiYml0cyIsICJiaXRtYXBJbmZvIiwgIndpZHRoIiwgImhlaWdodCIsICJpbnRlcmxhY2UiLCAiaW1hZ2VzIiwgIm5vbkludGVybGFjZWRQeFBvcyIsICJpbWFnZUluZGV4IiwgInJlcXVpcmVfZm9ybWF0X25vcm1hbGlzZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJkZVBhbGV0dGUiLCAiaW5kYXRhIiwgIm91dGRhdGEiLCAid2lkdGgiLCAiaGVpZ2h0IiwgInBhbGV0dGUiLCAicHhQb3MiLCAieSIsICJ4IiwgImNvbG9yIiwgImkiLCAicmVwbGFjZVRyYW5zcGFyZW50Q29sb3IiLCAidHJhbnNDb2xvciIsICJtYWtlVHJhbnMiLCAic2NhbGVEZXB0aCIsICJkZXB0aCIsICJtYXhPdXRTYW1wbGUiLCAibWF4SW5TYW1wbGUiLCAiaW1hZ2VEYXRhIiwgInNraXBSZXNjYWxlIiwgImNvbG9yVHlwZSIsICJyZXF1aXJlX3BhcnNlcl9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWwiLCAiemxpYiIsICJDaHVua1N0cmVhbSIsICJGaWx0ZXJBc3luYyIsICJQYXJzZXIiLCAiYml0bWFwcGVyIiwgImZvcm1hdE5vcm1hbGlzZXIiLCAiUGFyc2VyQXN5bmMiLCAib3B0aW9ucyIsICJlcnIiLCAiZGF0YSIsICJpbWFnZVNpemUiLCAiY2h1bmtTaXplIiwgImxlZnRUb0luZmxhdGUiLCAiZW1pdEVycm9yIiwgImZpbHRlcldyaXRlIiwgImNodW5rIiwgIm1ldGFEYXRhIiwgInRyYW5zQ29sb3IiLCAicGFsZXR0ZSIsICJmaWx0ZXJlZERhdGEiLCAibm9ybWFsaXNlZEJpdG1hcERhdGEiLCAiYml0bWFwRGF0YSIsICJleCIsICJyZXF1aXJlX2JpdHBhY2tlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNvbnN0YW50cyIsICJkYXRhSW4iLCAid2lkdGgiLCAiaGVpZ2h0IiwgIm9wdGlvbnMiLCAib3V0SGFzQWxwaGEiLCAiYmlnRW5kaWFuIiwgImJ1ZmZlciIsICJkYXRhIiwgIm1heFZhbHVlIiwgImluQnBwIiwgIm91dEJwcCIsICJvdXREYXRhIiwgImluSW5kZXgiLCAib3V0SW5kZXgiLCAiYmdDb2xvciIsICJnZXRSR0JBIiwgInJlZCIsICJncmVlbiIsICJibHVlIiwgImFscGhhIiwgIngiLCAicmdiYSIsICJncmF5c2NhbGUiLCAicmVxdWlyZV9maWx0ZXJfcGFjayIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInBhZXRoUHJlZGljdG9yIiwgImZpbHRlck5vbmUiLCAicHhEYXRhIiwgInB4UG9zIiwgImJ5dGVXaWR0aCIsICJyYXdEYXRhIiwgInJhd1BvcyIsICJ4IiwgImZpbHRlclN1bU5vbmUiLCAic3VtIiwgImxlbmd0aCIsICJpIiwgImZpbHRlclN1YiIsICJicHAiLCAibGVmdCIsICJ2YWwiLCAiZmlsdGVyU3VtU3ViIiwgImZpbHRlclVwIiwgInVwIiwgImZpbHRlclN1bVVwIiwgImZpbHRlckF2ZyIsICJmaWx0ZXJTdW1BdmciLCAiZmlsdGVyUGFldGgiLCAidXBsZWZ0IiwgImZpbHRlclN1bVBhZXRoIiwgImZpbHRlcnMiLCAiZmlsdGVyU3VtcyIsICJ3aWR0aCIsICJoZWlnaHQiLCAib3B0aW9ucyIsICJmaWx0ZXJUeXBlcyIsICJzZWwiLCAieSIsICJtaW4iLCAicmVxdWlyZV9wYWNrZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjb25zdGFudHMiLCAiQ3JjU3RyZWFtIiwgImJpdFBhY2tlciIsICJmaWx0ZXIiLCAiemxpYiIsICJQYWNrZXIiLCAib3B0aW9ucyIsICJkYXRhIiwgIndpZHRoIiwgImhlaWdodCIsICJwYWNrZWREYXRhIiwgImJwcCIsICJ0eXBlIiwgImxlbiIsICJidWYiLCAiZ2FtbWEiLCAicmVxdWlyZV9wYWNrZXJfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgIlN0cmVhbSIsICJjb25zdGFudHMiLCAiUGFja2VyIiwgIlBhY2tlckFzeW5jIiwgIm9wdCIsICJvcHRpb25zIiwgImRhdGEiLCAid2lkdGgiLCAiaGVpZ2h0IiwgImdhbW1hIiwgImZpbHRlcmVkRGF0YSIsICJjb21wcmVzc2VkRGF0YSIsICJyZXF1aXJlX3N5bmNfaW5mbGF0ZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImFzc2VydCIsICJ6bGliIiwgInV0aWwiLCAia01heExlbmd0aCIsICJJbmZsYXRlIiwgIm9wdHMiLCAiY3JlYXRlSW5mbGF0ZSIsICJfY2xvc2UiLCAiZW5naW5lIiwgImNhbGxiYWNrIiwgImNodW5rIiwgImZsdXNoRmxhZyIsICJhc3luY0NiIiwgInNlbGYiLCAiYXZhaWxJbkJlZm9yZSIsICJhdmFpbE91dEJlZm9yZSIsICJsZWZ0VG9JbmZsYXRlIiwgImluT2ZmIiwgImJ1ZmZlcnMiLCAibnJlYWQiLCAiZXJyb3IiLCAiZXJyIiwgImhhbmRsZUNodW5rIiwgImF2YWlsSW5BZnRlciIsICJhdmFpbE91dEFmdGVyIiwgImhhdmUiLCAib3V0IiwgInJlcyIsICJidWYiLCAiemxpYkJ1ZmZlclN5bmMiLCAiYnVmZmVyIiwgImluZmxhdGVTeW5jIiwgInJlcXVpcmVfc3luY19yZWFkZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJTeW5jUmVhZGVyIiwgImJ1ZmZlciIsICJsZW5ndGgiLCAiY2FsbGJhY2siLCAicmVhZCIsICJidWYiLCAicmVxdWlyZV9maWx0ZXJfcGFyc2Vfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiU3luY1JlYWRlciIsICJGaWx0ZXIiLCAiaW5CdWZmZXIiLCAiYml0bWFwSW5mbyIsICJvdXRCdWZmZXJzIiwgInJlYWRlciIsICJidWZmZXJQYXJ0IiwgInJlcXVpcmVfcGFyc2VyX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJoYXNTeW5jWmxpYiIsICJ6bGliIiwgImluZmxhdGVTeW5jIiwgIlN5bmNSZWFkZXIiLCAiRmlsdGVyU3luYyIsICJQYXJzZXIiLCAiYml0bWFwcGVyIiwgImZvcm1hdE5vcm1hbGlzZXIiLCAiYnVmZmVyIiwgIm9wdGlvbnMiLCAiZXJyIiwgImhhbmRsZUVycm9yIiwgIl9lcnJfIiwgIm1ldGFEYXRhIiwgImhhbmRsZU1ldGFEYXRhIiwgIl9tZXRhRGF0YV8iLCAiaGFuZGxlVHJhbnNDb2xvciIsICJ0cmFuc0NvbG9yIiwgImhhbmRsZVBhbGV0dGUiLCAicGFsZXR0ZSIsICJoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3kiLCAiZ2FtbWEiLCAiaGFuZGxlR2FtbWEiLCAiX2dhbW1hXyIsICJpbmZsYXRlRGF0YUxpc3QiLCAiaGFuZGxlSW5mbGF0ZURhdGEiLCAiaW5mbGF0ZWREYXRhIiwgInJlYWRlciIsICJpbmZsYXRlRGF0YSIsICJpbWFnZVNpemUiLCAidW5maWx0ZXJlZERhdGEiLCAiYml0bWFwRGF0YSIsICJub3JtYWxpc2VkQml0bWFwRGF0YSIsICJyZXF1aXJlX3BhY2tlcl9zeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiaGFzU3luY1psaWIiLCAiemxpYiIsICJjb25zdGFudHMiLCAiUGFja2VyIiwgIm1ldGFEYXRhIiwgIm9wdCIsICJvcHRpb25zIiwgInBhY2tlciIsICJjaHVua3MiLCAiZmlsdGVyZWREYXRhIiwgImNvbXByZXNzZWREYXRhIiwgInJlcXVpcmVfcG5nX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInBhcnNlIiwgInBhY2siLCAiYnVmZmVyIiwgIm9wdGlvbnMiLCAicG5nIiwgInJlcXVpcmVfcG5nIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJ1dGlsIiwgIlN0cmVhbSIsICJQYXJzZXIiLCAiUGFja2VyIiwgIlBOR1N5bmMiLCAiUE5HIiwgIm9wdGlvbnMiLCAiZGF0YSIsICJjYWxsYmFjayIsICJvblBhcnNlZCIsICJvbkVycm9yIiwgInBhcnNlZERhdGEiLCAiZXJyIiwgIm1ldGFkYXRhIiwgImdhbW1hIiwgInNyYyIsICJkc3QiLCAic3JjWCIsICJzcmNZIiwgIndpZHRoIiwgImhlaWdodCIsICJkZWx0YVgiLCAiZGVsdGFZIiwgInkiLCAieCIsICJpZHgiLCAic2FtcGxlIiwgInJlcXVpcmVfanN6aXBfbWluIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicyIsICJhIiwgIm8iLCAiaCIsICJ1IiwgInIiLCAiZSIsICJ0IiwgIl9fcmVxdWlyZSIsICJsIiwgIm4iLCAiaSIsICJkIiwgImMiLCAicCIsICJmIiwgIkEiLCAiTyIsICJJIiwgIm0iLCAiXyIsICJnIiwgImIiLCAidiIsICJ5IiwgInciLCAiayIsICJ4IiwgIlMiLCAieiIsICJDIiwgIkIiLCAiRSIsICJSIiwgIlQiLCAiRCIsICJGIiwgIk4iLCAiVSIsICJQIiwgIkwiLCAiaiIsICJaIiwgIlciLCAiTSIsICJIIiwgIkciLCAiSyIsICJZIiwgIlgiLCAiViIsICJxIiwgIkoiLCAiTWJ4IiwgIkZhY2VGbGFncyIsICJHbHRmIiwgIkNvbnN0IiwgImdldFN0cmljdCIsICJtYXAiLCAia2V5IiwgInZhbHVlIiwgInNldFN0cmljdCIsICJHbHRmQnVpbGRlciIsICJmaWxlIiwgIm1ldGFkYXRhIiwgImV4dGVuc2lvbiIsICJfYSIsICJpbmRleCIsICJpbWFnZSIsICJidWZmZXIiLCAiYnVmZmVyVmlldyIsICJhY2Nlc3NvciIsICJtZXNoIiwgIm5vZGUiLCAic2NlbmUiLCAibWF0ZXJpYWwiLCAidGV4dHVyZSIsICJzYW1wbGVyIiwgIm1lbWJlclJlZiIsICJvIiwgImsiLCAidiIsICJtYXliZU1lbWJlclJlZiIsICJjb2xsZWN0VW51c2VkIiwgImFycmF5UmVmIiwgImluZGV4UmVmcyIsICJhcnJheSIsICJ1c2VkIiwgInJlZiIsICJpbmRleCIsICJpbmRleE1hcCIsICJpIiwgInUiLCAibmV3QXJyYXkiLCAib2xkSW5kZXgiLCAibmV3SW5kZXgiLCAiZGVkdXAiLCAiaGFzaEZuIiwgImhhc2hNYXAiLCAidmFsdWUiLCAiaGFzaCIsICJleGlzdGluZ0luZGV4IiwgIkdsdGZPcHRpbWl6ZXIiLCAiZmlsZSIsICJtIiwgInBiciIsICJwIiwgImF0dHIiLCAicyIsICJhIiwgImltIiwgImJ2IiwgIm1lc2giLCAicHJpbSIsICJtYXQiLCAicmVmcyIsICJ0YXJnZXRzIiwgIm5hbWUiLCAicmVzdCIsICJ0b0RhdGFVcmkiLCAibWltZSIsICJkYXRhIiwgInRyYW5zcG9zZSIsICJtIiwgImNvbnZlcnRUZXh0dXJlcyIsICJtYngiLCAiZ2x0ZiIsICJvcHRpb25zIiwgImtpbmQiLCAidGV4dHVyZXMiLCAibmFtZSIsICJ0ZXh0dXJlIiwgImNvbnZlcnRUZXh0dXJlIiwgInBhdGgiLCAidG9EYXRhVXJpIiwgIm1ha2VWZXJ0ZXgiLCAiZmxhZ3MiLCAiZ2V0VmVydGljZXMiLCAiZmFjZXMiLCAidXZMYXllckNvdW50IiwgIm9mZiIsICJNYngiLCAidjAiLCAidjEiLCAidjIiLCAidjMiLCAiaSIsICJjb252ZXJ0R2VvbWV0cmllcyIsICJtYngiLCAiZ2x0ZiIsICJvcHRpb25zIiwgImluZGV4IiwgImdlb21ldHJ5IiwgImNvbnZlcnRHZW9tZXRyeSIsICJ2ZXJzaW9uIiwgImdlb21ldHJpZXMiLCAibmFtZSIsICJwYXRoIiwgImdlb20iLCAiaGFzaFZlcnRleCIsICJ2IiwgImluZGljZXNCeUhhc2giLCAibmV4dEluZGV4IiwgImluZGljZXMiLCAicG9zaXRpb25zIiwgIm5vcm1hbHMiLCAidXZzIiwgInV2TGF5ZXJDb3VudCIsICJ2ZXJ0ZXgiLCAiZ2V0VmVydGljZXMiLCAidmVydGV4SGFzaCIsICJleGlzdGluZ0luZGV4IiwgImkiLCAiTWJ4IiwgImluZGljZXNBcnJheSIsICJwb3NpdGlvbnNBcnJheSIsICJub3JtYWxzQXJyYXkiLCAidXZBcnJheXMiLCAibGF5ZXIiLCAicG9zaXRpb25NaW4iLCAicG9zaXRpb25NYXgiLCAiR2x0ZiIsICJ0b0RhdGFVcmkiLCAidXZMYXllckFycmF5IiwgImltcG9ydF9wbmdqcyIsICJjb2xvcnMiLCAiY29udmVydE1hdGVyaWFsIiwgImlkIiwgIm5vcm1hbHMiLCAiZGVjb3JhdGlvbiIsICJnbHRmIiwgIm9wdGlvbnMiLCAiaXNTaW1wbGUiLCAia2V5IiwgImNvbG9yIiwgImNvbG9ycyIsICJtYXRlcmlhbCIsICJiYXNlQ29sb3IiLCAiaW1hZ2VEYXRhIiwgInBuZyIsICJvZmYiLCAiYWxwaGEiLCAibmV3VGV4dHVyZURhdGFVcmkiLCAiR2x0ZiIsICJjb252ZXJ0UGFydHMiLCAibWJ4IiwgImdsdGYiLCAib3B0aW9ucyIsICJwYXJ0Tm9kZUluZGljZXMiLCAicGFydEluZGV4IiwgInBhcnQiLCAiY29udmVydFBhcnQiLCAicGF0aCIsICJjb25maWciLCAibWF0ZXJpYWxJbmRleCIsICJjb252ZXJ0TWF0ZXJpYWwiLCAibm9kZSIsICJjb252ZXJ0Q29uZmlndXJhdGlvbiIsICJ0cmFuc3Bvc2UiLCAicGFydFBhdGgiLCAiZXh0cmFOb2RlSW5kaWNlcyIsICJraW5kIiwgImV4dHJhcyIsICJpbmRleCIsICJleHRyYSIsICJtZXNoIiwgImNvbnZlcnRFeHRyYSIsICJtYWluR2VvbWV0cnlQYXRoIiwgInV2TGF5ZXJDb3VudCIsICJ1dnMiLCAiaSIsICJjb252ZXJ0RmlsZSIsICJtYngiLCAiZ2x0ZiIsICJvcHRpb25zIiwgImNvbnZlcnRUZXh0dXJlcyIsICJjb252ZXJ0R2VvbWV0cmllcyIsICJjb252ZXJ0UGFydHMiLCAianN6aXAiLCAiZ2V0RGVmYXVsdE9wdGlvbnMiLCAiY29udmVydFptYnhUb0dsdGYiLCAiem1ieCIsICJvcHRpb25zIiwgIm1ieCIsICJjb252ZXJ0TWJ4VG9HbHRmIiwgImZ1bGxPcHRpb25zIiwgImdldERlZmF1bHRPcHRpb25zIiwgImJ1aWxkZXIiLCAiR2x0ZkJ1aWxkZXIiLCAiY29udmVydEZpbGUiLCAiZ2x0ZiIsICJvcHRpbWl6ZXIiLCAiR2x0Zk9wdGltaXplciJdCn0K
